{
  "uid": "airport-connections",
  "testStrategy": "JSON",
  "name": "Airport Connections",
  "version": 0,
  "releaseDate": "2019-05-04T00:00:00Z",
  "category": "Graphs",
  "difficulty": 4,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 3240,
    "failureCount": 1387
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "334183153",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1600
  },
  "prompt": "<div class=\"html\">\n<p>\n  <i\n    >For the purpose of this question, the phrases \"airport route\" and \"airport\n    connection\" are used interchangeably.</i\n  >\n</p>\n<p>\n  You're given a list of airports (three-letter codes like <span>\"JFK\"</span>),\n  a list of routes (one-way flights from one airport to another like\n  <span>[\"JFK\", \"SFO\"]</span>), and a starting airport.\n</p>\n<p>\n  Write a function that returns the minimum number of airport connections\n  (one-way flights) that need to be added in order for someone to be able to\n  reach any airport in the list, starting at the starting airport.\n</p>\n<p>\n  Note that routes only allow you to fly in one direction; for instance,\n  the route\n  <span>[\"JFK\", \"SFO\"]</span> only allows you to fly from <span>\"JFK\"</span> to\n  <span>\"SFO\"</span>.\n</p>\n<p>\n  Also note that the connections don't have to be direct; it's okay if an\n  airport can only be reached from the starting airport by stopping at other\n  airports first.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">airports</span> = [\n  \"BGI\", \"CDG\", \"DEL\", \"DOH\", \"DSM\", \"EWR\", \"EYW\", \"HND\", \"ICN\",\n  \"JFK\", \"LGA\", \"LHR\", \"ORD\", \"SAN\", \"SFO\", \"SIN\", \"TLV\", \"BUD\",\n]\n<span class=\"CodeEditor-promptParameter\">routes</span> = [\n  [\"DSM\", \"ORD\"],\n  [\"ORD\", \"BGI\"],\n  [\"BGI\", \"LGA\"],\n  [\"SIN\", \"CDG\"],\n  [\"CDG\", \"SIN\"],\n  [\"CDG\", \"BUD\"],\n  [\"DEL\", \"DOH\"],\n  [\"DEL\", \"CDG\"],\n  [\"TLV\", \"DEL\"],\n  [\"EWR\", \"HND\"],\n  [\"HND\", \"ICN\"],\n  [\"HND\", \"JFK\"],\n  [\"ICN\", \"JFK\"],\n  [\"JFK\", \"LGA\"],\n  [\"EYW\", \"LHR\"],\n  [\"LHR\", \"SFO\"],\n  [\"SFO\", \"SAN\"],\n  [\"SFO\", \"DSM\"],\n  [\"SAN\", \"EYW\"],\n]\n<span class=\"CodeEditor-promptParameter\">startingAirport</span> = \"LGA\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n3 <span class=\"CodeEditor-promptComment\">// [\"LGA\", \"TLV\"], [\"LGA\", \"SFO\"], and [\"LGA\", \"EWR\"]</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nStart by creating a graph out of the inputs. Each airport should be a vertex in the graph, and each route should be an edge. The graph should be directed with potential cycles, since it's possible for there to be round-trip flights between airports or for some series of flights to eventually lead back to an arbitrary starting point. How can this graph be useful?\n</p>\n",
    "\n<p>\nUsing the graph mentioned in Hint #1, try getting all of the airports that are unreachable from the starting airport. This can be done using depth-first search. Is the number of unreachable airports the answer? If not, what extra information do you need to get to the answer?\n</p>\n",
    "\n<p>\nA single unreachable airport could have connections to a bunch of other unreachable airports, potentially making it more \"valuable\", since adding one connection to it would make many other airports reachable.\n</p>\n",
    "\n<p>\nCalculate the number of unreachable airports that are reachable from each unreachable airport (this can be done using depth-first search), sort them in descending order according to this number, and count the minimum number of connections that need to be added by iterating through this sorted list of unreachable airports, removing every unreachable airport's unreachable connections as you go through the list.\n</p>"
  ],
  "spaceTime": "O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the number of airports and r is the number of routes",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint airportConnections(\n  vector<string> airports, vector<vector<string>> routes, string startingAirport\n) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nclass AirportNode {\n public:\n  string airport;\n  vector<string> connections;\n  bool isReachable;\n  vector<string> unreachableConnections;\n\n  AirportNode(string airport) {\n    this->airport = airport;\n    connections = {};\n    isReachable = true;\n    unreachableConnections = {};\n  }\n};\n\nunordered_map<string, AirportNode*> createAirportGraph(\n  vector<string> airports, vector<vector<string>> routes\n);\nvector<AirportNode*> getUnreachableAirportNodes(\n  unordered_map<string, AirportNode*> airportGraph,\n  vector<string> airports,\n  string startingAirport\n);\nvoid depthFirstTraverseAirports(\n  unordered_map<string, AirportNode*> airportGraph,\n  string airport,\n  unordered_map<string, bool>* visitedAirports\n);\nvoid markUnreachableConnections(\n  unordered_map<string, AirportNode*> airportGraph,\n  vector<AirportNode*> unreachableAirportNodes\n);\nvoid depthFirstAddUnreachableConnections(\n  unordered_map<string, AirportNode*> airportGraph,\n  string airport,\n  vector<string>* unreachableConnections,\n  unordered_map<string, bool>* visitedAirports\n);\nint getMinNumberOfNewConnections(\n  unordered_map<string, AirportNode*> airportGraph,\n  vector<AirportNode*> unreachableAirportNodes\n);\n\n// O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the\n// number of airports and r is the number of routes\nint airportConnections(\n  vector<string> airports, vector<vector<string>> routes, string startingAirport\n) {\n  unordered_map<string, AirportNode*> airportGraph =\n    createAirportGraph(airports, routes);\n  vector<AirportNode*> unreachableAirportNodes =\n    getUnreachableAirportNodes(airportGraph, airports, startingAirport);\n  markUnreachableConnections(airportGraph, unreachableAirportNodes);\n  return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes);\n}\n\n// O(a + r) time | O(a + r) space\nunordered_map<string, AirportNode*> createAirportGraph(\n  vector<string> airports, vector<vector<string>> routes\n) {\n  unordered_map<string, AirportNode*> airportGraph = {};\n  for (string airport : airports) {\n    airportGraph[airport] = new AirportNode(airport);\n  }\n  for (vector<string> route : routes) {\n    string airport = route[0];\n    string connection = route[1];\n    airportGraph[airport]->connections.push_back(connection);\n  }\n  return airportGraph;\n}\n\n// O(a + r) time | O(a) space\nvector<AirportNode*> getUnreachableAirportNodes(\n  unordered_map<string, AirportNode*> airportGraph,\n  vector<string> airports,\n  string startingAirport\n) {\n  unordered_map<string, bool> visitedAirports = {};\n  depthFirstTraverseAirports(airportGraph, startingAirport, &visitedAirports);\n\n  vector<AirportNode*> unreachableAirportNodes = {};\n  for (string airport : airports) {\n    if (visitedAirports.find(airport) != visitedAirports.end()) continue;\n    AirportNode* airportNode = airportGraph[airport];\n    airportNode->isReachable = false;\n    unreachableAirportNodes.push_back(airportNode);\n  }\n  return unreachableAirportNodes;\n}\n\nvoid depthFirstTraverseAirports(\n  unordered_map<string, AirportNode*> airportGraph,\n  string airport,\n  unordered_map<string, bool>* visitedAirports\n) {\n  if (visitedAirports->find(airport) != visitedAirports->end()) return;\n  visitedAirports->insert({airport, true});\n  vector<string> connections = airportGraph[airport]->connections;\n  for (string connection : connections) {\n    depthFirstTraverseAirports(airportGraph, connection, visitedAirports);\n  }\n}\n\n// O(a * (a + r)) time | O(a) space\nvoid markUnreachableConnections(\n  unordered_map<string, AirportNode*> airportGraph,\n  vector<AirportNode*> unreachableAirportNodes\n) {\n  for (AirportNode* airportNode : unreachableAirportNodes) {\n    string airport = airportNode->airport;\n    vector<string> unreachableConnections = {};\n    unordered_map<string, bool> visitedAirports = {};\n    depthFirstAddUnreachableConnections(\n      airportGraph, airport, &unreachableConnections, &visitedAirports\n    );\n    airportNode->unreachableConnections = unreachableConnections;\n  }\n}\n\nvoid depthFirstAddUnreachableConnections(\n  unordered_map<string, AirportNode*> airportGraph,\n  string airport,\n  vector<string>* unreachableConnections,\n  unordered_map<string, bool>* visitedAirports\n) {\n  if (airportGraph[airport]->isReachable) return;\n  if (visitedAirports->find(airport) != visitedAirports->end()) return;\n  visitedAirports->insert({airport, true});\n  unreachableConnections->push_back(airport);\n  vector<string> connections = airportGraph[airport]->connections;\n  for (string connection : connections) {\n    depthFirstAddUnreachableConnections(\n      airportGraph, connection, unreachableConnections, visitedAirports\n    );\n  }\n}\n\n// O(alog(a) + a + r) time | O(1) space\nint getMinNumberOfNewConnections(\n  unordered_map<string, AirportNode*> airportGraph,\n  vector<AirportNode*> unreachableAirportNodes\n) {\n  sort(\n    unreachableAirportNodes.begin(),\n    unreachableAirportNodes.end(),\n    [](AirportNode* a1, AirportNode* a2) -> bool {\n      return a2->unreachableConnections.size() <\n             a1->unreachableConnections.size();\n    }\n  );\n\n  int numberOfNewConnections = 0;\n  for (AirportNode* airportNode : unreachableAirportNodes) {\n    if (airportNode->isReachable) continue;\n    numberOfNewConnections++;\n    for (string connection : airportNode->unreachableConnections) {\n      airportGraph[connection]->isReachable = true;\n    }\n  }\n  return numberOfNewConnections;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nvector<string> AIRPORTS = {\n  \"BGI\",\n  \"CDG\",\n  \"DEL\",\n  \"DOH\",\n  \"DSM\",\n  \"EWR\",\n  \"EYW\",\n  \"HND\",\n  \"ICN\",\n  \"JFK\",\n  \"LGA\",\n  \"LHR\",\n  \"ORD\",\n  \"SAN\",\n  \"SFO\",\n  \"SIN\",\n  \"TLV\",\n  \"BUD\",\n};\n\nstring STARTING_AIRPORT = \"LGA\";\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<string>> routes = {\n        {\"DSM\", \"ORD\"},\n        {\"ORD\", \"BGI\"},\n        {\"BGI\", \"LGA\"},\n        {\"SIN\", \"CDG\"},\n        {\"CDG\", \"SIN\"},\n        {\"CDG\", \"BUD\"},\n        {\"DEL\", \"DOH\"},\n        {\"DEL\", \"CDG\"},\n        {\"TLV\", \"DEL\"},\n        {\"EWR\", \"HND\"},\n        {\"HND\", \"ICN\"},\n        {\"HND\", \"JFK\"},\n        {\"ICN\", \"JFK\"},\n        {\"JFK\", \"LGA\"},\n        {\"EYW\", \"LHR\"},\n        {\"LHR\", \"SFO\"},\n        {\"SFO\", \"SAN\"},\n        {\"SFO\", \"DSM\"},\n        {\"SAN\", \"EYW\"}};\n      assert(airportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3);\n    });\n  }\n};\n",
      "unitTests": "vector<string> AIRPORTS = {\n  \"BGI\",\n  \"CDG\",\n  \"DEL\",\n  \"DOH\",\n  \"DSM\",\n  \"EWR\",\n  \"EYW\",\n  \"HND\",\n  \"ICN\",\n  \"JFK\",\n  \"LGA\",\n  \"LHR\",\n  \"ORD\",\n  \"SAN\",\n  \"SFO\",\n  \"SIN\",\n  \"TLV\",\n  \"BUD\",\n};\n\nstring STARTING_AIRPORT = \"LGA\";\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<string>> routes = {\n        {\"DSM\", \"ORD\"},\n        {\"ORD\", \"BGI\"},\n        {\"BGI\", \"LGA\"},\n        {\"SIN\", \"CDG\"},\n        {\"CDG\", \"SIN\"},\n        {\"CDG\", \"BUD\"},\n        {\"DEL\", \"DOH\"},\n        {\"DEL\", \"CDG\"},\n        {\"TLV\", \"DEL\"},\n        {\"EWR\", \"HND\"},\n        {\"HND\", \"ICN\"},\n        {\"HND\", \"JFK\"},\n        {\"ICN\", \"JFK\"},\n        {\"JFK\", \"LGA\"},\n        {\"EYW\", \"LHR\"},\n        {\"LHR\", \"SFO\"},\n        {\"SFO\", \"SAN\"},\n        {\"SFO\", \"DSM\"},\n        {\"SAN\", \"EYW\"}};\n      assert(airportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static int AirportConnections(\n    List<string> airports, List<List<string> > routes, string startingAirport\n  ) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the\n  // number of airports and r is the number of routes\n  public static int AirportConnections(\n    List<string> airports, List<List<string> > routes, string startingAirport\n  ) {\n    Dictionary<string, AirportNode> airportGraph =\n      createAirportGraph(airports, routes);\n    List<AirportNode> unreachableAirportNodes =\n      getUnreachableAirportNodes(airportGraph, airports, startingAirport);\n    markUnreachableConnections(airportGraph, unreachableAirportNodes);\n    return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes);\n  }\n\n  // O(a + r) time | O(a + r) space\n  public static Dictionary<string, AirportNode> createAirportGraph(\n    List<string> airports, List<List<string> > routes\n  ) {\n    Dictionary<string, AirportNode> airportGraph =\n      new Dictionary<string, AirportNode>();\n    foreach (string airport in airports) {\n      airportGraph.Add(airport, new AirportNode(airport));\n    }\n    foreach (List<string> route in routes) {\n      string airport = route[0];\n      string connection = route[1];\n      airportGraph[airport].connections.Add(connection);\n    }\n    return airportGraph;\n  }\n\n  // O(a + r) time | O(a) space\n  public static List<AirportNode> getUnreachableAirportNodes(\n    Dictionary<string, AirportNode> airportGraph,\n    List<string> airports,\n    string startingAirport\n  ) {\n    HashSet<string> visitedAirports = new HashSet<string>();\n    depthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports);\n\n    List<AirportNode> unreachableAirportNodes = new List<AirportNode>();\n    foreach (string airport in airports) {\n      if (visitedAirports.Contains(airport)) continue;\n      AirportNode airportNode = airportGraph[airport];\n      airportNode.isReachable = false;\n      unreachableAirportNodes.Add(airportNode);\n    }\n    return unreachableAirportNodes;\n  }\n\n  public static void depthFirstTraverseAirports(\n    Dictionary<string, AirportNode> airportGraph,\n    string airport,\n    HashSet<string> visitedAirports\n  ) {\n    if (visitedAirports.Contains(airport)) return;\n    visitedAirports.Add(airport);\n    List<string> connections = airportGraph[airport].connections;\n    foreach (string connection in connections) {\n      depthFirstTraverseAirports(airportGraph, connection, visitedAirports);\n    }\n  }\n\n  // O(a * (a + r)) time | O(a) space\n  public static void markUnreachableConnections(\n    Dictionary<string, AirportNode> airportGraph,\n    List<AirportNode> unreachableAirportNodes\n  ) {\n    foreach (AirportNode airportNode in unreachableAirportNodes) {\n      string airport = airportNode.airport;\n      List<string> unreachableConnections = new List<string>();\n      HashSet<string> visitedAirports = new HashSet<string>();\n      depthFirstAddUnreachableConnections(\n        airportGraph, airport, unreachableConnections, visitedAirports\n      );\n      airportNode.unreachableConnections = unreachableConnections;\n    }\n  }\n\n  public static void depthFirstAddUnreachableConnections(\n    Dictionary<string, AirportNode> airportGraph,\n    string airport,\n    List<string> unreachableConnections,\n    HashSet<string> visitedAirports\n  ) {\n    if (airportGraph[airport].isReachable) return;\n    if (visitedAirports.Contains(airport)) return;\n    visitedAirports.Add(airport);\n    unreachableConnections.Add(airport);\n    List<string> connections = airportGraph[airport].connections;\n    foreach (string connection in connections) {\n      depthFirstAddUnreachableConnections(\n        airportGraph, connection, unreachableConnections, visitedAirports\n      );\n    }\n  }\n\n  // O(alog(a) + a + r) time | O(1) space\n  public static int getMinNumberOfNewConnections(\n    Dictionary<string, AirportNode> airportGraph,\n    List<AirportNode> unreachableAirportNodes\n  ) {\n    unreachableAirportNodes.Sort(\n      (a1, a2) =>\n        a2.unreachableConnections.Count - a1.unreachableConnections.Count\n    );\n    int numberOfNewConnections = 0;\n    foreach (AirportNode airportNode in unreachableAirportNodes) {\n      if (airportNode.isReachable) continue;\n      numberOfNewConnections++;\n      foreach (string connection in airportNode.unreachableConnections) {\n        airportGraph[connection].isReachable = true;\n      }\n    }\n    return numberOfNewConnections;\n  }\n\n  public class AirportNode {\n    public string airport;\n    public List<string> connections;\n    public bool isReachable;\n    public List<string> unreachableConnections;\n\n    public AirportNode(string airport) {\n      this.airport = airport;\n      connections = new List<string>();\n      isReachable = true;\n      unreachableConnections = new List<string>();\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  List<string> AIRPORTS = new List<string>() {\n    \"BGI\",\n    \"CDG\",\n    \"DEL\",\n    \"DOH\",\n    \"DSM\",\n    \"EWR\",\n    \"EYW\",\n    \"HND\",\n    \"ICN\",\n    \"JFK\",\n    \"LGA\",\n    \"LHR\",\n    \"ORD\",\n    \"SAN\",\n    \"SFO\",\n    \"SIN\",\n    \"TLV\",\n    \"BUD\"\n  };\n\n  string STARTING_AIRPORT = \"LGA\";\n\n  [Test]\n  public void TestCase1() {\n    List<List<string> > routes = new List<List<string> >();\n    routes.Add(new List<string>() { \"DSM\", \"ORD\" });\n    routes.Add(new List<string>() { \"ORD\", \"BGI\" });\n    routes.Add(new List<string>() { \"BGI\", \"LGA\" });\n    routes.Add(new List<string>() { \"SIN\", \"CDG\" });\n    routes.Add(new List<string>() { \"CDG\", \"SIN\" });\n    routes.Add(new List<string>() { \"CDG\", \"BUD\" });\n    routes.Add(new List<string>() { \"DEL\", \"DOH\" });\n    routes.Add(new List<string>() { \"DEL\", \"CDG\" });\n    routes.Add(new List<string>() { \"TLV\", \"DEL\" });\n    routes.Add(new List<string>() { \"EWR\", \"HND\" });\n    routes.Add(new List<string>() { \"HND\", \"ICN\" });\n    routes.Add(new List<string>() { \"HND\", \"JFK\" });\n    routes.Add(new List<string>() { \"ICN\", \"JFK\" });\n    routes.Add(new List<string>() { \"JFK\", \"LGA\" });\n    routes.Add(new List<string>() { \"EYW\", \"LHR\" });\n    routes.Add(new List<string>() { \"LHR\", \"SFO\" });\n    routes.Add(new List<string>() { \"SFO\", \"SAN\" });\n    routes.Add(new List<string>() { \"SFO\", \"DSM\" });\n    routes.Add(new List<string>() { \"SAN\", \"EYW\" });\n    Utils.AssertTrue(\n      Program.AirportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3\n    );\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\n\npublic class ProgramTest {\n  List<string> AIRPORTS = new List<string>() {\n    \"BGI\",\n    \"CDG\",\n    \"DEL\",\n    \"DOH\",\n    \"DSM\",\n    \"EWR\",\n    \"EYW\",\n    \"HND\",\n    \"ICN\",\n    \"JFK\",\n    \"LGA\",\n    \"LHR\",\n    \"ORD\",\n    \"SAN\",\n    \"SFO\",\n    \"SIN\",\n    \"TLV\",\n    \"BUD\"\n  };\n\n  string STARTING_AIRPORT = \"LGA\";\n\n  [Test]\n  public void TestCase1() {\n    List<List<string> > routes = new List<List<string> >();\n    routes.Add(new List<string>() { \"DSM\", \"ORD\" });\n    routes.Add(new List<string>() { \"ORD\", \"BGI\" });\n    routes.Add(new List<string>() { \"BGI\", \"LGA\" });\n    routes.Add(new List<string>() { \"SIN\", \"CDG\" });\n    routes.Add(new List<string>() { \"CDG\", \"SIN\" });\n    routes.Add(new List<string>() { \"CDG\", \"BUD\" });\n    routes.Add(new List<string>() { \"DEL\", \"DOH\" });\n    routes.Add(new List<string>() { \"DEL\", \"CDG\" });\n    routes.Add(new List<string>() { \"TLV\", \"DEL\" });\n    routes.Add(new List<string>() { \"EWR\", \"HND\" });\n    routes.Add(new List<string>() { \"HND\", \"ICN\" });\n    routes.Add(new List<string>() { \"HND\", \"JFK\" });\n    routes.Add(new List<string>() { \"ICN\", \"JFK\" });\n    routes.Add(new List<string>() { \"JFK\", \"LGA\" });\n    routes.Add(new List<string>() { \"EYW\", \"LHR\" });\n    routes.Add(new List<string>() { \"LHR\", \"SFO\" });\n    routes.Add(new List<string>() { \"SFO\", \"SAN\" });\n    routes.Add(new List<string>() { \"SFO\", \"DSM\" });\n    routes.Add(new List<string>() { \"SAN\", \"EYW\" });\n    Utils.AssertTrue(\n      Program.AirportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3\n    );\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc AirportConnections(airports []string, routes [][]string, startingAirport string) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"sort\"\n\ntype AirportNode struct {\n\tAirport                string\n\tConnections            []string\n\tIsReachable            bool\n\tUnreachableConnections []string\n}\n\nfunc NewAirportNode(airport string) *AirportNode {\n\treturn &AirportNode{\n\t\tAirport:                airport,\n\t\tConnections:            []string{},\n\t\tIsReachable:            true,\n\t\tUnreachableConnections: []string{},\n\t}\n}\n\n// O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the number of airports and r is the number of routes\nfunc AirportConnections(airports []string, routes [][]string, startingAirport string) int {\n\tairportGraph := createAirportGraph(airports, routes)\n\tunreachableAirportNodes := getUnreachableAirportNodes(airportGraph, airports, startingAirport)\n\tmarkUnreachableConnections(airportGraph, unreachableAirportNodes)\n\treturn getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes)\n}\n\n// O(a + r) time | O(a + r) space\nfunc createAirportGraph(airports []string, routes [][]string) map[string]*AirportNode {\n\tairportGraph := map[string]*AirportNode{}\n\tfor _, airport := range airports {\n\t\tairportGraph[airport] = NewAirportNode(airport)\n\t}\n\tfor _, route := range routes {\n\t\tairport, connection := route[0], route[1]\n\t\tairportGraph[airport].Connections = append(airportGraph[airport].Connections, connection)\n\t}\n\treturn airportGraph\n}\n\n// O(a + r) time | O(a) space\nfunc getUnreachableAirportNodes(\n\tairportGraph map[string]*AirportNode, airports []string, startingAirport string,\n) []*AirportNode {\n\tvisitedAirports := map[string]bool{}\n\tdepthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports)\n\n\tunreachableAirportNodes := []*AirportNode{}\n\tfor _, airport := range airports {\n\t\tif _, found := visitedAirports[airport]; found {\n\t\t\tcontinue\n\t\t}\n\t\tairportNode := airportGraph[airport]\n\t\tairportNode.IsReachable = false\n\t\tunreachableAirportNodes = append(unreachableAirportNodes, airportNode)\n\t}\n\treturn unreachableAirportNodes\n}\n\nfunc depthFirstTraverseAirports(\n\tairportGraph map[string]*AirportNode, airport string, visitedAirports map[string]bool,\n) {\n\tif _, found := visitedAirports[airport]; found {\n\t\treturn\n\t}\n\tvisitedAirports[airport] = true\n\tconnections := airportGraph[airport].Connections\n\tfor _, connection := range connections {\n\t\tdepthFirstTraverseAirports(airportGraph, connection, visitedAirports)\n\t}\n}\n\n// O(a * (a + r)) time | O(a) space\nfunc markUnreachableConnections(\n\tairportGraph map[string]*AirportNode, unreachableAirportNodes []*AirportNode,\n) {\n\tfor _, airportNode := range unreachableAirportNodes {\n\t\tairport := airportNode.Airport\n\t\tunreachableConnections := []string{}\n\t\tvisitedAirports := map[string]bool{}\n\t\tdepthFirstAddUnreachableConnections(airportGraph, airport, &unreachableConnections, visitedAirports)\n\t\tairportNode.UnreachableConnections = unreachableConnections\n\t}\n\treturn\n}\n\nfunc depthFirstAddUnreachableConnections(\n\tairportGraph map[string]*AirportNode, airport string,\n\tunreachableConnections *[]string, visitedAirports map[string]bool,\n) {\n\tif airportGraph[airport].IsReachable {\n\t\treturn\n\t} else if _, found := visitedAirports[airport]; found {\n\t\treturn\n\t}\n\tvisitedAirports[airport] = true\n\t*unreachableConnections = append(*unreachableConnections, airport)\n\tconnections := airportGraph[airport].Connections\n\tfor _, connection := range connections {\n\t\tdepthFirstAddUnreachableConnections(airportGraph, connection, unreachableConnections, visitedAirports)\n\t}\n}\n\n// O(alog(a) + a + r) time | O(1) space\nfunc getMinNumberOfNewConnections(\n\tairportGraph map[string]*AirportNode, unreachableAirportNodes []*AirportNode,\n) int {\n\tsort.SliceStable(unreachableAirportNodes, func(i, j int) bool {\n\t\ta1, a2 := unreachableAirportNodes[i], unreachableAirportNodes[j]\n\t\treturn len(a1.UnreachableConnections) > len(a2.UnreachableConnections)\n\t})\n\tnumberOfNewConnections := 0\n\tfor _, node := range unreachableAirportNodes {\n\t\tif node.IsReachable {\n\t\t\tcontinue\n\t\t}\n\t\tnumberOfNewConnections++\n\t\tfor _, connection := range node.UnreachableConnections {\n\t\t\tairportGraph[connection].IsReachable = true\n\t\t}\n\t}\n\treturn numberOfNewConnections\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar Airports = []string{\n\t\"BGI\",\n\t\"CDG\",\n\t\"DEL\",\n\t\"DOH\",\n\t\"DSM\",\n\t\"EWR\",\n\t\"EYW\",\n\t\"HND\",\n\t\"ICN\",\n\t\"JFK\",\n\t\"LGA\",\n\t\"LHR\",\n\t\"ORD\",\n\t\"SAN\",\n\t\"SFO\",\n\t\"SIN\",\n\t\"TLV\",\n\t\"BUD\",\n}\n\nvar StartingAirport = \"LGA\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troutes := [][]string{\n\t\t{\"DSM\", \"ORD\"},\n\t\t{\"ORD\", \"BGI\"},\n\t\t{\"BGI\", \"LGA\"},\n\t\t{\"SIN\", \"CDG\"},\n\t\t{\"CDG\", \"SIN\"},\n\t\t{\"CDG\", \"BUD\"},\n\t\t{\"DEL\", \"DOH\"},\n\t\t{\"DEL\", \"CDG\"},\n\t\t{\"TLV\", \"DEL\"},\n\t\t{\"EWR\", \"HND\"},\n\t\t{\"HND\", \"ICN\"},\n\t\t{\"HND\", \"JFK\"},\n\t\t{\"ICN\", \"JFK\"},\n\t\t{\"JFK\", \"LGA\"},\n\t\t{\"EYW\", \"LHR\"},\n\t\t{\"LHR\", \"SFO\"},\n\t\t{\"SFO\", \"SAN\"},\n\t\t{\"SFO\", \"DSM\"},\n\t\t{\"SAN\", \"EYW\"},\n\t}\n\toutput := AirportConnections(Airports, routes, StartingAirport)\n\texpected := 3\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar Airports = []string{\n\t\"BGI\",\n\t\"CDG\",\n\t\"DEL\",\n\t\"DOH\",\n\t\"DSM\",\n\t\"EWR\",\n\t\"EYW\",\n\t\"HND\",\n\t\"ICN\",\n\t\"JFK\",\n\t\"LGA\",\n\t\"LHR\",\n\t\"ORD\",\n\t\"SAN\",\n\t\"SFO\",\n\t\"SIN\",\n\t\"TLV\",\n\t\"BUD\",\n}\n\nvar StartingAirport = \"LGA\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troutes := [][]string{\n\t\t{\"DSM\", \"ORD\"},\n\t\t{\"ORD\", \"BGI\"},\n\t\t{\"BGI\", \"LGA\"},\n\t\t{\"SIN\", \"CDG\"},\n\t\t{\"CDG\", \"SIN\"},\n\t\t{\"CDG\", \"BUD\"},\n\t\t{\"DEL\", \"DOH\"},\n\t\t{\"DEL\", \"CDG\"},\n\t\t{\"TLV\", \"DEL\"},\n\t\t{\"EWR\", \"HND\"},\n\t\t{\"HND\", \"ICN\"},\n\t\t{\"HND\", \"JFK\"},\n\t\t{\"ICN\", \"JFK\"},\n\t\t{\"JFK\", \"LGA\"},\n\t\t{\"EYW\", \"LHR\"},\n\t\t{\"LHR\", \"SFO\"},\n\t\t{\"SFO\", \"SAN\"},\n\t\t{\"SFO\", \"DSM\"},\n\t\t{\"SAN\", \"EYW\"},\n\t}\n\toutput := AirportConnections(Airports, routes, StartingAirport)\n\texpected := 3\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int airportConnections(\n    List<String> airports, List<List<String>> routes, String startingAirport\n  ) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the\n  // number of airports and r is the number of routes\n  public static int airportConnections(\n    List<String> airports, List<List<String>> routes, String startingAirport\n  ) {\n    Map<String, AirportNode> airportGraph =\n      createAirportGraph(airports, routes);\n    List<AirportNode> unreachableAirportNodes =\n      getUnreachableAirportNodes(airportGraph, airports, startingAirport);\n    markUnreachableConnections(airportGraph, unreachableAirportNodes);\n    return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes);\n  }\n\n  // O(a + r) time | O(a + r) space\n  public static Map<String, AirportNode> createAirportGraph(\n    List<String> airports, List<List<String>> routes\n  ) {\n    Map<String, AirportNode> airportGraph = new HashMap<String, AirportNode>();\n    for (String airport : airports) {\n      airportGraph.put(airport, new AirportNode(airport));\n    }\n    for (List<String> route : routes) {\n      String airport = route.get(0);\n      String connection = route.get(1);\n      airportGraph.get(airport).connections.add(connection);\n    }\n    return airportGraph;\n  }\n\n  // O(a + r) time | O(a) space\n  public static List<AirportNode> getUnreachableAirportNodes(\n    Map<String, AirportNode> airportGraph,\n    List<String> airports,\n    String startingAirport\n  ) {\n    Set<String> visitedAirports = new HashSet<String>();\n    depthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports);\n\n    List<AirportNode> unreachableAirportNodes = new ArrayList<AirportNode>();\n    for (String airport : airports) {\n      if (visitedAirports.contains(airport)) continue;\n      AirportNode airportNode = airportGraph.get(airport);\n      airportNode.isReachable = false;\n      unreachableAirportNodes.add(airportNode);\n    }\n    return unreachableAirportNodes;\n  }\n\n  public static void depthFirstTraverseAirports(\n    Map<String, AirportNode> airportGraph,\n    String airport,\n    Set<String> visitedAirports\n  ) {\n    if (visitedAirports.contains(airport)) return;\n    visitedAirports.add(airport);\n    List<String> connections = airportGraph.get(airport).connections;\n    for (String connection : connections) {\n      depthFirstTraverseAirports(airportGraph, connection, visitedAirports);\n    }\n  }\n\n  // O(a * (a + r)) time | O(a) space\n  public static void markUnreachableConnections(\n    Map<String, AirportNode> airportGraph,\n    List<AirportNode> unreachableAirportNodes\n  ) {\n    for (AirportNode airportNode : unreachableAirportNodes) {\n      String airport = airportNode.airport;\n      List<String> unreachableConnections = new ArrayList<String>();\n      Set<String> visitedAirports = new HashSet<String>();\n      depthFirstAddUnreachableConnections(\n        airportGraph, airport, unreachableConnections, visitedAirports\n      );\n      airportNode.unreachableConnections = unreachableConnections;\n    }\n  }\n\n  public static void depthFirstAddUnreachableConnections(\n    Map<String, AirportNode> airportGraph,\n    String airport,\n    List<String> unreachableConnections,\n    Set<String> visitedAirports\n  ) {\n    if (airportGraph.get(airport).isReachable) return;\n    if (visitedAirports.contains(airport)) return;\n    visitedAirports.add(airport);\n    unreachableConnections.add(airport);\n    List<String> connections = airportGraph.get(airport).connections;\n    for (String connection : connections) {\n      depthFirstAddUnreachableConnections(\n        airportGraph, connection, unreachableConnections, visitedAirports\n      );\n    }\n  }\n\n  // O(alog(a) + a + r) time | O(1) space\n  public static int getMinNumberOfNewConnections(\n    Map<String, AirportNode> airportGraph,\n    List<AirportNode> unreachableAirportNodes\n  ) {\n    unreachableAirportNodes.sort(\n      (a1, a2\n      ) -> a2.unreachableConnections.size() - a1.unreachableConnections.size()\n    );\n    int numberOfNewConnections = 0;\n    for (AirportNode airportNode : unreachableAirportNodes) {\n      if (airportNode.isReachable) continue;\n      numberOfNewConnections++;\n      for (String connection : airportNode.unreachableConnections) {\n        airportGraph.get(connection).isReachable = true;\n      }\n    }\n    return numberOfNewConnections;\n  }\n\n  static class AirportNode {\n    String airport;\n    List<String> connections;\n    boolean isReachable;\n    List<String> unreachableConnections;\n\n    public AirportNode(String airport) {\n      this.airport = airport;\n      connections = new ArrayList<String>();\n      isReachable = true;\n      unreachableConnections = new ArrayList<String>();\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  List<String> AIRPORTS = new ArrayList<String>(Arrays.asList(\n    \"BGI\",\n    \"CDG\",\n    \"DEL\",\n    \"DOH\",\n    \"DSM\",\n    \"EWR\",\n    \"EYW\",\n    \"HND\",\n    \"ICN\",\n    \"JFK\",\n    \"LGA\",\n    \"LHR\",\n    \"ORD\",\n    \"SAN\",\n    \"SFO\",\n    \"SIN\",\n    \"TLV\",\n    \"BUD\"\n  ));\n\n  String STARTING_AIRPORT = \"LGA\";\n\n  @Test\n  public void TestCase1() {\n    List<List<String>> routes = new ArrayList<List<String>>();\n    routes.add(new ArrayList<String>(Arrays.asList(\"DSM\", \"ORD\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"ORD\", \"BGI\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"BGI\", \"LGA\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SIN\", \"CDG\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"CDG\", \"SIN\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"CDG\", \"BUD\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"DEL\", \"DOH\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"DEL\", \"CDG\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"TLV\", \"DEL\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"EWR\", \"HND\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"HND\", \"ICN\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"HND\", \"JFK\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"ICN\", \"JFK\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"JFK\", \"LGA\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"EYW\", \"LHR\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"LHR\", \"SFO\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SFO\", \"SAN\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SFO\", \"DSM\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SAN\", \"EYW\")));\n    Utils.assertTrue(\n      Program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3\n    );\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  List<String> AIRPORTS = new ArrayList<String>(Arrays.asList(\n    \"BGI\",\n    \"CDG\",\n    \"DEL\",\n    \"DOH\",\n    \"DSM\",\n    \"EWR\",\n    \"EYW\",\n    \"HND\",\n    \"ICN\",\n    \"JFK\",\n    \"LGA\",\n    \"LHR\",\n    \"ORD\",\n    \"SAN\",\n    \"SFO\",\n    \"SIN\",\n    \"TLV\",\n    \"BUD\"\n  ));\n\n  String STARTING_AIRPORT = \"LGA\";\n\n  @Test\n  public void TestCase1() {\n    List<List<String>> routes = new ArrayList<List<String>>();\n    routes.add(new ArrayList<String>(Arrays.asList(\"DSM\", \"ORD\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"ORD\", \"BGI\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"BGI\", \"LGA\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SIN\", \"CDG\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"CDG\", \"SIN\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"CDG\", \"BUD\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"DEL\", \"DOH\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"DEL\", \"CDG\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"TLV\", \"DEL\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"EWR\", \"HND\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"HND\", \"ICN\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"HND\", \"JFK\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"ICN\", \"JFK\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"JFK\", \"LGA\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"EYW\", \"LHR\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"LHR\", \"SFO\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SFO\", \"SAN\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SFO\", \"DSM\")));\n    routes.add(new ArrayList<String>(Arrays.asList(\"SAN\", \"EYW\")));\n    Utils.assertTrue(\n      Program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3\n    );\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function airportConnections(airports, routes, startingAirport) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.airportConnections = airportConnections;\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\n// O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the number of airports and r is the number of routes\nfunction airportConnections(airports, routes, startingAirport) {\n  const airportGraph = createAirportGraph(airports, routes);\n  const unreachableAirportNodes = getUnreachableAirportNodes(\n    airportGraph,\n    airports,\n    startingAirport,\n  );\n  markUnreachableConnections(airportGraph, unreachableAirportNodes);\n  return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes);\n}\n\n// O(a + r) time | O(a + r) space\nfunction createAirportGraph(airports, routes) {\n  const airportGraph = {};\n  for (const airport of airports) {\n    airportGraph[airport] = new AirportNode(airport);\n  }\n  for (const route of routes) {\n    const [airport, connection] = route;\n    airportGraph[airport].connections.push(connection);\n  }\n  return airportGraph;\n}\n\n// O(a + r) time | O(a) space\nfunction getUnreachableAirportNodes(airportGraph, airports, startingAirport) {\n  const visitedAirports = {};\n  depthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports);\n\n  const unreachableAirportNodes = [];\n  for (const airport of airports) {\n    if (airport in visitedAirports) continue;\n    const airportNode = airportGraph[airport];\n    airportNode.isReachable = false;\n    unreachableAirportNodes.push(airportNode);\n  }\n  return unreachableAirportNodes;\n}\n\nfunction depthFirstTraverseAirports(airportGraph, airport, visitedAirports) {\n  if (airport in visitedAirports) return;\n  visitedAirports[airport] = true;\n  const {connections} = airportGraph[airport];\n  for (const connection of connections) {\n    depthFirstTraverseAirports(airportGraph, connection, visitedAirports);\n  }\n}\n\n// O(a * (a + r)) time | O(a) space\nfunction markUnreachableConnections(airportGraph, unreachableAirportNodes) {\n  for (const airportNode of unreachableAirportNodes) {\n    const {airport} = airportNode;\n    const unreachableConnections = [];\n    depthFirstAddUnreachableConnections(airportGraph, airport, unreachableConnections, {});\n    airportNode.unreachableConnections = unreachableConnections;\n  }\n}\n\nfunction depthFirstAddUnreachableConnections(\n  airportGraph,\n  airport,\n  unreachableConnections,\n  visitedAirports,\n) {\n  if (airportGraph[airport].isReachable) return;\n  if (airport in visitedAirports) return;\n  visitedAirports[airport] = true;\n  unreachableConnections.push(airport);\n  const {connections} = airportGraph[airport];\n  for (const connection of connections) {\n    depthFirstAddUnreachableConnections(\n      airportGraph,\n      connection,\n      unreachableConnections,\n      visitedAirports,\n    );\n  }\n}\n\n// O(alog(a) + a + r) time | O(1) space\nfunction getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes) {\n  unreachableAirportNodes.sort(\n    (a1, a2) => a2.unreachableConnections.length - a1.unreachableConnections.length,\n  );\n\n  let numberOfNewConnections = 0;\n  for (const airportNode of unreachableAirportNodes) {\n    if (airportNode.isReachable) continue;\n    numberOfNewConnections++;\n    for (const connection of airportNode.unreachableConnections) {\n      airportGraph[connection].isReachable = true;\n    }\n  }\n  return numberOfNewConnections;\n}\n\nclass AirportNode {\n  constructor(airport) {\n    this.airport = airport;\n    this.connections = [];\n    this.isReachable = true;\n    this.unreachableConnections = [];\n  }\n}\n\nexports.airportConnections = airportConnections;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nconst AIRPORTS = [\n  'BGI',\n  'CDG',\n  'DEL',\n  'DOH',\n  'DSM',\n  'EWR',\n  'EYW',\n  'HND',\n  'ICN',\n  'JFK',\n  'LGA',\n  'LHR',\n  'ORD',\n  'SAN',\n  'SFO',\n  'SIN',\n  'TLV',\n  'BUD',\n];\n\nconst STARTING_AIRPORT = 'LGA';\n\nit('Test Case #1', function () {\n  const routes = [\n    ['DSM', 'ORD'],\n    ['ORD', 'BGI'],\n    ['BGI', 'LGA'],\n    ['SIN', 'CDG'],\n    ['CDG', 'SIN'],\n    ['CDG', 'BUD'],\n    ['DEL', 'DOH'],\n    ['DEL', 'CDG'],\n    ['TLV', 'DEL'],\n    ['EWR', 'HND'],\n    ['HND', 'ICN'],\n    ['HND', 'JFK'],\n    ['ICN', 'JFK'],\n    ['JFK', 'LGA'],\n    ['EYW', 'LHR'],\n    ['LHR', 'SFO'],\n    ['SFO', 'SAN'],\n    ['SFO', 'DSM'],\n    ['SAN', 'EYW'],\n  ];\n  chai.expect(program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT)).to.deep.equal(3);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nconst AIRPORTS = [\n  'BGI',\n  'CDG',\n  'DEL',\n  'DOH',\n  'DSM',\n  'EWR',\n  'EYW',\n  'HND',\n  'ICN',\n  'JFK',\n  'LGA',\n  'LHR',\n  'ORD',\n  'SAN',\n  'SFO',\n  'SIN',\n  'TLV',\n  'BUD',\n];\n\nconst STARTING_AIRPORT = 'LGA';\n\nit('Test Case #1', function () {\n  const routes = [\n    ['DSM', 'ORD'],\n    ['ORD', 'BGI'],\n    ['BGI', 'LGA'],\n    ['SIN', 'CDG'],\n    ['CDG', 'SIN'],\n    ['CDG', 'BUD'],\n    ['DEL', 'DOH'],\n    ['DEL', 'CDG'],\n    ['TLV', 'DEL'],\n    ['EWR', 'HND'],\n    ['HND', 'ICN'],\n    ['HND', 'JFK'],\n    ['ICN', 'JFK'],\n    ['JFK', 'LGA'],\n    ['EYW', 'LHR'],\n    ['LHR', 'SFO'],\n    ['SFO', 'SAN'],\n    ['SFO', 'DSM'],\n    ['SAN', 'EYW'],\n  ];\n  chai.expect(program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT)).to.deep.equal(3);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun airportConnections(airports: List<String>, routes: List<Pair<String, String>>, startingAirport: String): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\ndata class AirportNode(\n    val airport: String,\n    var connections: MutableList<String> = mutableListOf<String>(),\n    var unreachableConnections: MutableList<String> = mutableListOf<String>(),\n    var isReachable: Boolean = true,\n)\n\n// O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the number of airports and\n// r is the number of routes\nfun airportConnections(\n    airports: List<String>,\n    routes: List<Pair<String, String>>,\n    startingAirport: String,\n): Int {\n    val airportGraph = createAirportGraph(airports, routes)\n    val unreachableAirportNodes =\n        getUnreachableAirportNodes(airportGraph, airports, startingAirport)\n    markUnreachableConnections(airportGraph, unreachableAirportNodes)\n    return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes)\n}\n\n// O(a + r) time | O(a + r) space\nfun createAirportGraph(\n    airports: List<String>,\n    routes: List<Pair<String, String>>,\n): Map<String, AirportNode> {\n    val airportGraph = mutableMapOf<String, AirportNode>()\n    for (airport in airports) {\n        airportGraph[airport] = AirportNode(airport)\n    }\n    for (route in routes) {\n        val airport = route.first\n        val connection = route.second\n        airportGraph[airport]!!.connections.add(connection)\n    }\n    return airportGraph\n}\n\n// O(a + r) time | O(a) space\nfun getUnreachableAirportNodes(\n    airportGraph: Map<String, AirportNode>,\n    airports: List<String>,\n    startingAirport: String,\n): MutableList<AirportNode> {\n    val visitedAirports = mutableSetOf<String>()\n    depthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports)\n\n    val unreachableAirportNodes = mutableListOf<AirportNode>()\n    for (airport in airports) {\n        if (visitedAirports.contains(airport)) continue\n        val airportNode = airportGraph[airport]!!\n        airportNode.isReachable = false\n        unreachableAirportNodes.add(airportNode)\n    }\n    return unreachableAirportNodes\n}\n\nfun depthFirstTraverseAirports(airportGraph: Map<String, AirportNode>, airport: String, visitedAirports: MutableSet<String>) {\n    if (visitedAirports.contains(airport)) return\n    visitedAirports.add(airport)\n    val connections = airportGraph[airport]!!.connections\n    for (connection in connections) {\n        depthFirstTraverseAirports(airportGraph, connection, visitedAirports)\n    }\n}\n\n// O(a * (a + r)) time | O(a) space\nfun markUnreachableConnections(\n    airportGraph: Map<String, AirportNode>,\n    unreachableAirportNodes: List<AirportNode>,\n) {\n    for (airportNode in unreachableAirportNodes) {\n        val airport = airportNode.airport\n        val unreachableConnections = mutableListOf<String>()\n        val visitedAirports = mutableSetOf<String>()\n        depthFirstAddUnreachableConnections(\n            airportGraph,\n            airport,\n            unreachableConnections,\n            visitedAirports,\n        )\n        airportNode.unreachableConnections = unreachableConnections\n    }\n}\n\nfun depthFirstAddUnreachableConnections(\n    airportGraph: Map<String, AirportNode>,\n    airport: String,\n    unreachableConnections: MutableList<String>,\n    visitedAirports: MutableSet<String>,\n) {\n    if (airportGraph[airport]!!.isReachable) return\n    if (visitedAirports.contains(airport)) return\n    visitedAirports.add(airport)\n    unreachableConnections.add(airport)\n    val connections = airportGraph[airport]!!.connections\n    for (connection in connections) {\n        depthFirstAddUnreachableConnections(\n            airportGraph,\n            connection,\n            unreachableConnections,\n            visitedAirports,\n        )\n    }\n}\n\n// O(alog(a) + a + r) time | O(1) space\nfun getMinNumberOfNewConnections(\n    airportGraph: Map<String, AirportNode>,\n    unreachableAirportNodes: MutableList<AirportNode>,\n): Int {\n    var unreachable = unreachableAirportNodes.sortedWith(\n        Comparator<AirportNode> { a1, a2 ->\n            a2.unreachableConnections.size - a1.unreachableConnections.size\n        },\n    )\n    var numberOfNewConnections = 0\n    for (airportNode in unreachable) {\n        if (airportNode.isReachable) continue\n        numberOfNewConnections++\n        for (connection in airportNode.unreachableConnections) {\n            airportGraph[connection]!!.isReachable = true\n        }\n    }\n    return numberOfNewConnections\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.airportConnections\n\nclass ProgramTest {\n\n    val AIRPORTS = listOf(\n        \"BGI\", \"CDG\", \"DEL\", \"DOH\", \"DSM\", \"EWR\", \"EYW\",\n        \"HND\", \"ICN\", \"JFK\", \"LGA\", \"LHR\", \"ORD\", \"SAN\", \"SFO\", \"SIN\", \"TLV\", \"BUD\",\n    )\n\n    @Test\n    fun TestCase1() {\n        val routes = listOf(\n            Pair(\"DSM\", \"ORD\"),\n            Pair(\"ORD\", \"BGI\"),\n            Pair(\"BGI\", \"LGA\"),\n            Pair(\"SIN\", \"CDG\"),\n            Pair(\"CDG\", \"SIN\"),\n            Pair(\"CDG\", \"BUD\"),\n            Pair(\"DEL\", \"DOH\"),\n            Pair(\"DEL\", \"CDG\"),\n            Pair(\"TLV\", \"DEL\"),\n            Pair(\"EWR\", \"HND\"),\n            Pair(\"HND\", \"ICN\"),\n            Pair(\"HND\", \"JFK\"),\n            Pair(\"ICN\", \"JFK\"),\n            Pair(\"JFK\", \"LGA\"),\n            Pair(\"EYW\", \"LHR\"),\n            Pair(\"LHR\", \"SFO\"),\n            Pair(\"SFO\", \"SAN\"),\n            Pair(\"SFO\", \"DSM\"),\n            Pair(\"SAN\", \"EYW\"),\n        )\n        val start = \"LGA\"\n        val output = airportConnections(AIRPORTS, routes, start)\n        assert(output == 3)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.airportConnections\n\nclass ProgramTest {\n\n    val AIRPORTS = listOf(\n        \"BGI\", \"CDG\", \"DEL\", \"DOH\", \"DSM\", \"EWR\", \"EYW\",\n        \"HND\", \"ICN\", \"JFK\", \"LGA\", \"LHR\", \"ORD\", \"SAN\", \"SFO\", \"SIN\", \"TLV\", \"BUD\",\n    )\n\n    @Test\n    fun TestCase1() {\n        val routes = listOf(\n            Pair(\"DSM\", \"ORD\"),\n            Pair(\"ORD\", \"BGI\"),\n            Pair(\"BGI\", \"LGA\"),\n            Pair(\"SIN\", \"CDG\"),\n            Pair(\"CDG\", \"SIN\"),\n            Pair(\"CDG\", \"BUD\"),\n            Pair(\"DEL\", \"DOH\"),\n            Pair(\"DEL\", \"CDG\"),\n            Pair(\"TLV\", \"DEL\"),\n            Pair(\"EWR\", \"HND\"),\n            Pair(\"HND\", \"ICN\"),\n            Pair(\"HND\", \"JFK\"),\n            Pair(\"ICN\", \"JFK\"),\n            Pair(\"JFK\", \"LGA\"),\n            Pair(\"EYW\", \"LHR\"),\n            Pair(\"LHR\", \"SFO\"),\n            Pair(\"SFO\", \"SAN\"),\n            Pair(\"SFO\", \"DSM\"),\n            Pair(\"SAN\", \"EYW\"),\n        )\n        val start = \"LGA\"\n        val output = airportConnections(AIRPORTS, routes, start)\n        assert(output == 3)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def airportConnections(airports, routes, startingAirport):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\n# O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the number of airports and r is the number of routes\ndef airportConnections(airports, routes, startingAirport):\n    airportGraph = createAirportGraph(airports, routes)\n    unreachableAirportNodes = getUnreachableAirportNodes(airportGraph, airports, startingAirport)\n    markUnreachableConnections(airportGraph, unreachableAirportNodes)\n    return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes)\n\n\n# O(a + r) time | O(a + r) space\ndef createAirportGraph(airports, routes):\n    airportGraph = {}\n    for airport in airports:\n        airportGraph[airport] = AirportNode(airport)\n    for route in routes:\n        airport, connection = route\n        airportGraph[airport].connections.append(connection)\n    return airportGraph\n\n\n# O(a + r) time | O(a) space\ndef getUnreachableAirportNodes(airportGraph, airports, startingAirport):\n    visitedAirports = {}\n    depthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports)\n\n    unreachableAirportNodes = []\n    for airport in airports:\n        if airport in visitedAirports:\n            continue\n        airportNode = airportGraph[airport]\n        airportNode.isReachable = False\n        unreachableAirportNodes.append(airportNode)\n    return unreachableAirportNodes\n\n\ndef depthFirstTraverseAirports(airportGraph, airport, visitedAirports):\n    if airport in visitedAirports:\n        return\n    visitedAirports[airport] = True\n    connections = airportGraph[airport].connections\n    for connection in connections:\n        depthFirstTraverseAirports(airportGraph, connection, visitedAirports)\n\n\n# O(a * (a + r)) time | O(a) space\ndef markUnreachableConnections(airportGraph, unreachableAirportNodes):\n    for airportNode in unreachableAirportNodes:\n        airport = airportNode.airport\n        unreachableConnections = []\n        depthFirstAddUnreachableConnections(airportGraph, airport, unreachableConnections, {})\n        airportNode.unreachableConnections = unreachableConnections\n\n\ndef depthFirstAddUnreachableConnections(\n    airportGraph, airport, unreachableConnections, visitedAirports\n):\n    if airportGraph[airport].isReachable:\n        return\n    if airport in visitedAirports:\n        return\n    visitedAirports[airport] = True\n    unreachableConnections.append(airport)\n    connections = airportGraph[airport].connections\n    for connection in connections:\n        depthFirstAddUnreachableConnections(\n            airportGraph, connection, unreachableConnections, visitedAirports\n        )\n\n\n# O(alog(a) + a + r) time | O(1) space\ndef getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes):\n    unreachableAirportNodes.sort(\n        key=lambda airport: len(airport.unreachableConnections), reverse=True\n    )\n\n    numberOfNewConnections = 0\n    for airportNode in unreachableAirportNodes:\n        if airportNode.isReachable:\n            continue\n        numberOfNewConnections += 1\n        for connection in airportNode.unreachableConnections:\n            airportGraph[connection].isReachable = True\n    return numberOfNewConnections\n\n\nclass AirportNode:\n    def __init__(self, airport):\n        self.airport = airport\n        self.connections = []\n        self.isReachable = True\n        self.unreachableConnections = []\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nAIRPORTS = [\n    \"BGI\",\n    \"CDG\",\n    \"DEL\",\n    \"DOH\",\n    \"DSM\",\n    \"EWR\",\n    \"EYW\",\n    \"HND\",\n    \"ICN\",\n    \"JFK\",\n    \"LGA\",\n    \"LHR\",\n    \"ORD\",\n    \"SAN\",\n    \"SFO\",\n    \"SIN\",\n    \"TLV\",\n    \"BUD\",\n]\n\nSTARTING_AIRPORT = \"LGA\"\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        routes = [\n            [\"DSM\", \"ORD\"],\n            [\"ORD\", \"BGI\"],\n            [\"BGI\", \"LGA\"],\n            [\"SIN\", \"CDG\"],\n            [\"CDG\", \"SIN\"],\n            [\"CDG\", \"BUD\"],\n            [\"DEL\", \"DOH\"],\n            [\"DEL\", \"CDG\"],\n            [\"TLV\", \"DEL\"],\n            [\"EWR\", \"HND\"],\n            [\"HND\", \"ICN\"],\n            [\"HND\", \"JFK\"],\n            [\"ICN\", \"JFK\"],\n            [\"JFK\", \"LGA\"],\n            [\"EYW\", \"LHR\"],\n            [\"LHR\", \"SFO\"],\n            [\"SFO\", \"SAN\"],\n            [\"SFO\", \"DSM\"],\n            [\"SAN\", \"EYW\"],\n        ]\n        self.assertTrue(program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3)\n",
      "unitTests": "import program\nimport unittest\n\n\nAIRPORTS = [\n    \"BGI\",\n    \"CDG\",\n    \"DEL\",\n    \"DOH\",\n    \"DSM\",\n    \"EWR\",\n    \"EYW\",\n    \"HND\",\n    \"ICN\",\n    \"JFK\",\n    \"LGA\",\n    \"LHR\",\n    \"ORD\",\n    \"SAN\",\n    \"SFO\",\n    \"SIN\",\n    \"TLV\",\n    \"BUD\",\n]\n\nSTARTING_AIRPORT = \"LGA\"\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        routes = [\n            [\"DSM\", \"ORD\"],\n            [\"ORD\", \"BGI\"],\n            [\"BGI\", \"LGA\"],\n            [\"SIN\", \"CDG\"],\n            [\"CDG\", \"SIN\"],\n            [\"CDG\", \"BUD\"],\n            [\"DEL\", \"DOH\"],\n            [\"DEL\", \"CDG\"],\n            [\"TLV\", \"DEL\"],\n            [\"EWR\", \"HND\"],\n            [\"HND\", \"ICN\"],\n            [\"HND\", \"JFK\"],\n            [\"ICN\", \"JFK\"],\n            [\"JFK\", \"LGA\"],\n            [\"EYW\", \"LHR\"],\n            [\"LHR\", \"SFO\"],\n            [\"SFO\", \"SAN\"],\n            [\"SFO\", \"DSM\"],\n            [\"SAN\", \"EYW\"],\n        ]\n        self.assertTrue(program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT) == 3)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def airportConnections(airports, routes, startingAirport)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def airportConnections(airports, routes, startingAirport)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.airportConnections\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.airportConnections\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func airportConnections(_ airports: [String], _ routes: [[String]], _ startingAirport: String) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(a * (a + r) + (a + r) + alog(a)) time | O(a + r) space\n  func airportConnections(_ airports: [String], _ routes: [[String]], _ startingAirport: String) -> Int {\n    var airportGraph = createAirportGraph(airports, routes)\n    var unreachableAirportNodes = getUnreachableAirportNodes(airports, &airportGraph, startingAirport)\n    addChildrenToUnreachableAirportNodes(airportGraph, unreachableAirportNodes)\n\n    return getMinimumNumberOfNewConnections(&airportGraph, &unreachableAirportNodes)\n  }\n\n  // O(a + r) time | O(a + r) space\n  func createAirportGraph(_ airports: [String], _ routes: [[String]]) -> [String: AirportNode] {\n    var airportGraph = [String: AirportNode]()\n\n    for airportCode in airports {\n      airportGraph[airportCode] = AirportNode(airportCode)\n    }\n\n    for route in routes {\n      let origin = route[0]\n      let destination = route[1]\n\n      if let airportNode = airportGraph[origin] {\n        airportNode.directConnections.append(destination)\n        airportGraph[origin] = airportNode\n      }\n    }\n\n    return airportGraph\n  }\n\n  // O(a + r) time | O(a) space\n  func getUnreachableAirportNodes(_ airports: [String], _ airportsGraph: inout [String: AirportNode], _ startingAirport: String) -> [AirportNode] {\n    var visitedAirports = [String: Bool]()\n    depthFirstTraverseAirports(airportsGraph, startingAirport, &visitedAirports)\n\n    var unreachableAirportNodes = [AirportNode]()\n    for airportCode in airports {\n      if visitedAirports.keys.contains(airportCode) {\n        continue\n      }\n\n      if let airportNode = airportsGraph[airportCode] {\n        airportNode.isReachable = false\n        airportsGraph[airportCode] = airportNode\n        unreachableAirportNodes.append(airportNode)\n      }\n    }\n\n    return unreachableAirportNodes\n  }\n\n  func depthFirstTraverseAirports(_ airportsGraph: [String: AirportNode], _ airport: String, _ visitedAirports: inout [String: Bool]) {\n    if visitedAirports.keys.contains(airport) {\n      return\n    }\n\n    visitedAirports[airport] = true\n\n    if let airportNode = airportsGraph[airport] {\n      let directConnections = airportNode.directConnections\n\n      for connection in directConnections {\n        depthFirstTraverseAirports(airportsGraph, connection, &visitedAirports)\n      }\n    }\n  }\n\n  // O(a * (a + r)) time | O(a) space\n  func addChildrenToUnreachableAirportNodes(_ airportsGraph: [String: AirportNode], _ unreachableAirportNodes: [AirportNode]) {\n    for airportNode in unreachableAirportNodes {\n      var visitedAirports = [String: Bool]()\n      var childConnections = [String]()\n      let airportCode = airportNode.airportCode\n\n      depthFirstAddChildConnections(airportCode, airportsGraph, &visitedAirports, &childConnections)\n      airportNode.allChildConnections = childConnections\n    }\n  }\n\n  func depthFirstAddChildConnections(_ airportCode: String, _ airportsGraph: [String: AirportNode], _ visitedAirports: inout [String: Bool], _ childConnections: inout [String]) {\n    if visitedAirports.keys.contains(airportCode) {\n      return\n    }\n\n    if let airportNode = airportsGraph[airportCode], airportNode.isReachable {\n      return\n    }\n\n    visitedAirports[airportCode] = true\n    childConnections.append(airportCode)\n\n    if let airportNode = airportsGraph[airportCode] {\n      let directConnections = airportNode.directConnections\n\n      for connection in directConnections {\n        depthFirstAddChildConnections(connection, airportsGraph, &visitedAirports, &childConnections)\n      }\n    }\n  }\n\n  // O(alog(a) + a + r) time | O(1) space\n  func getMinimumNumberOfNewConnections(_ airportGraph: inout [String: AirportNode], _ unreachableAirportNodes: inout [AirportNode]) -> Int {\n    var numberOfNewConnections = 0\n    unreachableAirportNodes = unreachableAirportNodes.sorted(by: { $0.allChildConnections.count > $1.allChildConnections.count })\n\n    for airportNode in unreachableAirportNodes {\n      if airportNode.isReachable {\n        continue\n      }\n\n      numberOfNewConnections += 1\n\n      for child in airportNode.allChildConnections {\n        if let airportNode = airportGraph[child] {\n          airportNode.isReachable = true\n          airportGraph[child] = airportNode\n        }\n      }\n    }\n\n    return numberOfNewConnections\n  }\n\n  class AirportNode {\n    let airportCode: String\n    var isReachable = true\n    var directConnections = [String]()\n    var allChildConnections = [String]()\n\n    init(_ airportCode: String) {\n      self.airportCode = airportCode\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nlet STARTING_AIRPORT = \"LGA\"\n\nlet AIRPORTS = [\n  \"BGI\",\n  \"CDG\",\n  \"DEL\",\n  \"DOH\",\n  \"DSM\",\n  \"EWR\",\n  \"EYW\",\n  \"HND\",\n  \"ICN\",\n  \"JFK\",\n  \"LGA\",\n  \"LHR\",\n  \"ORD\",\n  \"SAN\",\n  \"SFO\",\n  \"SIN\",\n  \"TLV\",\n  \"BUD\",\n]\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let fifteenthRoutes = [\n        [\"DSM\", \"ORD\"],\n        [\"ORD\", \"BGI\"],\n        [\"BGI\", \"LGA\"],\n        [\"SIN\", \"CDG\"],\n        [\"CDG\", \"SIN\"],\n        [\"CDG\", \"BUD\"],\n        [\"DEL\", \"DOH\"],\n        [\"DEL\", \"CDG\"],\n        [\"TLV\", \"DEL\"],\n        [\"EWR\", \"HND\"],\n        [\"HND\", \"ICN\"],\n        [\"HND\", \"JFK\"],\n        [\"ICN\", \"JFK\"],\n        [\"JFK\", \"LGA\"],\n        [\"EYW\", \"LHR\"],\n        [\"LHR\", \"SFO\"],\n        [\"SFO\", \"SAN\"],\n        [\"SFO\", \"DSM\"],\n        [\"SAN\", \"EYW\"],\n      ]\n      let result = program.airportConnections(AIRPORTS, fifteenthRoutes, STARTING_AIRPORT)\n      try assertEqual(3, result)\n    }\n  }\n}\n",
      "unitTests": "let STARTING_AIRPORT = \"LGA\"\n\nlet AIRPORTS = [\n  \"BGI\",\n  \"CDG\",\n  \"DEL\",\n  \"DOH\",\n  \"DSM\",\n  \"EWR\",\n  \"EYW\",\n  \"HND\",\n  \"ICN\",\n  \"JFK\",\n  \"LGA\",\n  \"LHR\",\n  \"ORD\",\n  \"SAN\",\n  \"SFO\",\n  \"SIN\",\n  \"TLV\",\n  \"BUD\",\n]\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let fifteenthRoutes = [\n        [\"DSM\", \"ORD\"],\n        [\"ORD\", \"BGI\"],\n        [\"BGI\", \"LGA\"],\n        [\"SIN\", \"CDG\"],\n        [\"CDG\", \"SIN\"],\n        [\"CDG\", \"BUD\"],\n        [\"DEL\", \"DOH\"],\n        [\"DEL\", \"CDG\"],\n        [\"TLV\", \"DEL\"],\n        [\"EWR\", \"HND\"],\n        [\"HND\", \"ICN\"],\n        [\"HND\", \"JFK\"],\n        [\"ICN\", \"JFK\"],\n        [\"JFK\", \"LGA\"],\n        [\"EYW\", \"LHR\"],\n        [\"LHR\", \"SFO\"],\n        [\"SFO\", \"SAN\"],\n        [\"SFO\", \"DSM\"],\n        [\"SAN\", \"EYW\"],\n      ]\n      let result = program.airportConnections(AIRPORTS, fifteenthRoutes, STARTING_AIRPORT)\n      try assertEqual(3, result)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function airportConnections(\n  airports: string[],\n  routes: [string, string][],\n  startingAirport: string,\n) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\ninterface AirportGraph {\n  [key: string]: AirportNode;\n}\n\ninterface VisitedAirports {\n  [key: string]: boolean;\n}\n\n// O(a * (a + r) + a + r + alog(a)) time | O(a + r) space - where a is the number of airports and r is the number of routes\nexport function airportConnections(\n  airports: string[],\n  routes: [string, string][],\n  startingAirport: string,\n): number {\n  const airportGraph = createAirportGraph(airports, routes);\n  const unreachableAirportNodes = getUnreachableAirportNodes(\n    airportGraph,\n    airports,\n    startingAirport,\n  );\n  markUnreachableConnections(airportGraph, unreachableAirportNodes);\n  return getMinNumberOfNewConnections(airportGraph, unreachableAirportNodes);\n}\n\n// O(a + r) time | O(a + r) space\nfunction createAirportGraph(airports: string[], routes: [string, string][]) {\n  const airportGraph: AirportGraph = {};\n  for (const airport of airports) {\n    airportGraph[airport] = new AirportNode(airport);\n  }\n  for (const route of routes) {\n    const [airport, connection] = route;\n    airportGraph[airport].connections.push(connection);\n  }\n  return airportGraph;\n}\n\n// O(a + r) time | O(a) space\nfunction getUnreachableAirportNodes(\n  airportGraph: AirportGraph,\n  airports: string[],\n  startingAirport: string,\n) {\n  const visitedAirports: VisitedAirports = {};\n  depthFirstTraverseAirports(airportGraph, startingAirport, visitedAirports);\n\n  const unreachableAirportNodes: AirportNode[] = [];\n  for (const airport of airports) {\n    if (airport in visitedAirports) continue;\n    const airportNode = airportGraph[airport];\n    airportNode.isReachable = false;\n    unreachableAirportNodes.push(airportNode);\n  }\n  return unreachableAirportNodes;\n}\n\nfunction depthFirstTraverseAirports(\n  airportGraph: AirportGraph,\n  airport: string,\n  visitedAirports: VisitedAirports,\n) {\n  if (airport in visitedAirports) return;\n  visitedAirports[airport] = true;\n  const {connections} = airportGraph[airport];\n  for (const connection of connections) {\n    depthFirstTraverseAirports(airportGraph, connection, visitedAirports);\n  }\n}\n\n// O(a * (a + r)) time | O(a) space\nfunction markUnreachableConnections(\n  airportGraph: AirportGraph,\n  unreachableAirportNodes: AirportNode[],\n) {\n  for (const airportNode of unreachableAirportNodes) {\n    const {airport} = airportNode;\n    const unreachableConnections: string[] = [];\n    depthFirstAddUnreachableConnections(airportGraph, airport, unreachableConnections, {});\n    airportNode.unreachableConnections = unreachableConnections;\n  }\n}\n\nfunction depthFirstAddUnreachableConnections(\n  airportGraph: AirportGraph,\n  airport: string,\n  unreachableConnections: string[],\n  visitedAirports: VisitedAirports,\n) {\n  if (airportGraph[airport].isReachable) return;\n  if (airport in visitedAirports) return;\n  visitedAirports[airport] = true;\n  unreachableConnections.push(airport);\n  const {connections} = airportGraph[airport];\n  for (const connection of connections) {\n    depthFirstAddUnreachableConnections(\n      airportGraph,\n      connection,\n      unreachableConnections,\n      visitedAirports,\n    );\n  }\n}\n\n// O(alog(a) + a + r) time | O(1) space\nfunction getMinNumberOfNewConnections(\n  airportGraph: AirportGraph,\n  unreachableAirportNodes: AirportNode[],\n) {\n  unreachableAirportNodes.sort(\n    (a1, a2) => a2.unreachableConnections.length - a1.unreachableConnections.length,\n  );\n\n  let numberOfNewConnections = 0;\n  for (const airportNode of unreachableAirportNodes) {\n    if (airportNode.isReachable) continue;\n    numberOfNewConnections++;\n    for (const connection of airportNode.unreachableConnections) {\n      airportGraph[connection].isReachable = true;\n    }\n  }\n  return numberOfNewConnections;\n}\n\nclass AirportNode {\n  airport: string;\n  connections: string[];\n  isReachable: boolean;\n  unreachableConnections: string[];\n\n  constructor(airport: string) {\n    this.airport = airport;\n    this.connections = [];\n    this.isReachable = true;\n    this.unreachableConnections = [];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nconst AIRPORTS = [\n  'BGI',\n  'CDG',\n  'DEL',\n  'DOH',\n  'DSM',\n  'EWR',\n  'EYW',\n  'HND',\n  'ICN',\n  'JFK',\n  'LGA',\n  'LHR',\n  'ORD',\n  'SAN',\n  'SFO',\n  'SIN',\n  'TLV',\n  'BUD',\n];\n\nconst STARTING_AIRPORT = 'LGA';\n\nit('Test Case #1', function () {\n  const routes: [string, string][] = [\n    ['DSM', 'ORD'],\n    ['ORD', 'BGI'],\n    ['BGI', 'LGA'],\n    ['SIN', 'CDG'],\n    ['CDG', 'SIN'],\n    ['CDG', 'BUD'],\n    ['DEL', 'DOH'],\n    ['DEL', 'CDG'],\n    ['TLV', 'DEL'],\n    ['EWR', 'HND'],\n    ['HND', 'ICN'],\n    ['HND', 'JFK'],\n    ['ICN', 'JFK'],\n    ['JFK', 'LGA'],\n    ['EYW', 'LHR'],\n    ['LHR', 'SFO'],\n    ['SFO', 'SAN'],\n    ['SFO', 'DSM'],\n    ['SAN', 'EYW'],\n  ];\n  chai.expect(program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT)).to.deep.equal(3);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nconst AIRPORTS = [\n  'BGI',\n  'CDG',\n  'DEL',\n  'DOH',\n  'DSM',\n  'EWR',\n  'EYW',\n  'HND',\n  'ICN',\n  'JFK',\n  'LGA',\n  'LHR',\n  'ORD',\n  'SAN',\n  'SFO',\n  'SIN',\n  'TLV',\n  'BUD',\n];\n\nconst STARTING_AIRPORT = 'LGA';\n\nit('Test Case #1', function () {\n  const routes: [string, string][] = [\n    ['DSM', 'ORD'],\n    ['ORD', 'BGI'],\n    ['BGI', 'LGA'],\n    ['SIN', 'CDG'],\n    ['CDG', 'SIN'],\n    ['CDG', 'BUD'],\n    ['DEL', 'DOH'],\n    ['DEL', 'CDG'],\n    ['TLV', 'DEL'],\n    ['EWR', 'HND'],\n    ['HND', 'ICN'],\n    ['HND', 'JFK'],\n    ['ICN', 'JFK'],\n    ['JFK', 'LGA'],\n    ['EYW', 'LHR'],\n    ['LHR', 'SFO'],\n    ['SFO', 'SAN'],\n    ['SFO', 'DSM'],\n    ['SAN', 'EYW'],\n  ];\n  chai.expect(program.airportConnections(AIRPORTS, routes, STARTING_AIRPORT)).to.deep.equal(3);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "airports",
      "example": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "schema": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    {
      "name": "routes",
      "example": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "SIN"
        ],
        [
          "CDG",
          "BUD"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "TLV",
          "DEL"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "HND",
          "JFK"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "DSM"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "type": "string"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array",
          "uniqueItems": true
        },
        "type": "array"
      }
    },
    {
      "name": "startingAirport",
      "example": "LGA",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "SIN"
        ],
        [
          "CDG",
          "BUD"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "TLV",
          "DEL"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "HND",
          "JFK"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "DSM"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "LGA",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "ORD",
          "DSM"
        ],
        [
          "DSM",
          "LGA"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "HND"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "ORD",
          "DSM"
        ],
        [
          "DSM",
          "LGA"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "HND"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "SFO",
          "CDG"
        ],
        [
          "SFO",
          "LHR"
        ],
        [
          "LHR",
          "DEL"
        ],
        [
          "DEL",
          "BGI"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "ORD",
          "DSM"
        ],
        [
          "DSM",
          "LGA"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "HND"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "SFO",
          "CDG"
        ],
        [
          "SFO",
          "LHR"
        ],
        [
          "LHR",
          "DEL"
        ],
        [
          "DEL",
          "BGI"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "SIN",
          "DEL"
        ],
        [
          "SIN",
          "DOH"
        ],
        [
          "SIN",
          "DSM"
        ],
        [
          "SIN",
          "EWR"
        ],
        [
          "SIN",
          "EYW"
        ],
        [
          "SIN",
          "HND"
        ],
        [
          "SIN",
          "ICN"
        ],
        [
          "SIN",
          "JFK"
        ],
        [
          "SIN",
          "LHR"
        ],
        [
          "SIN",
          "ORD"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "SFO",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "DEL",
          "EWR"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "SFO"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SFO",
          "LGA"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "DEL",
          "EWR"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "SFO"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SFO",
          "LGA"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "CDG",
          "EYW"
        ],
        [
          "LGA",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "DEL",
          "EWR"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "SFO"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SFO",
          "LGA"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "CDG",
          "EYW"
        ],
        [
          "ORD",
          "HND"
        ],
        [
          "HND",
          "SAN"
        ],
        [
          "LGA",
          "TLV"
        ],
        [
          "LGA",
          "BUD"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SIN"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SIN"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SIN"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "DSM"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    }
  ],
  "jsonTests": [
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "SIN"
        ],
        [
          "CDG",
          "BUD"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "TLV",
          "DEL"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "HND",
          "JFK"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "DSM"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "LGA",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "ORD",
          "DSM"
        ],
        [
          "DSM",
          "LGA"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "HND"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "LGA",
          "EYW"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "ORD",
          "DSM"
        ],
        [
          "DSM",
          "LGA"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "HND"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "SFO",
          "CDG"
        ],
        [
          "SFO",
          "LHR"
        ],
        [
          "LHR",
          "DEL"
        ],
        [
          "DEL",
          "BGI"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "EYW",
          "JFK"
        ],
        [
          "EYW",
          "EWR"
        ],
        [
          "JFK",
          "ICN"
        ],
        [
          "LGA",
          "ICN"
        ],
        [
          "ICN",
          "ORD"
        ],
        [
          "ICN",
          "EWR"
        ],
        [
          "JFK",
          "DSM"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "ORD",
          "DSM"
        ],
        [
          "DSM",
          "LGA"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "HND"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "SFO",
          "CDG"
        ],
        [
          "SFO",
          "LHR"
        ],
        [
          "LHR",
          "DEL"
        ],
        [
          "DEL",
          "BGI"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "SIN",
          "DEL"
        ],
        [
          "SIN",
          "DOH"
        ],
        [
          "SIN",
          "DSM"
        ],
        [
          "SIN",
          "EWR"
        ],
        [
          "SIN",
          "EYW"
        ],
        [
          "SIN",
          "HND"
        ],
        [
          "SIN",
          "ICN"
        ],
        [
          "SIN",
          "JFK"
        ],
        [
          "SIN",
          "LHR"
        ],
        [
          "SIN",
          "ORD"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "SFO",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "DEL",
          "EWR"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "SFO"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SFO",
          "LGA"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "DEL",
          "EWR"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "SFO"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SFO",
          "LGA"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "CDG",
          "EYW"
        ],
        [
          "LGA",
          "SAN"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "LGA",
          "DSM"
        ],
        [
          "DSM",
          "ORD"
        ],
        [
          "SIN",
          "BGI"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DEL",
          "CDG"
        ],
        [
          "DEL",
          "EWR"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "JFK",
          "SFO"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SFO",
          "LGA"
        ],
        [
          "SFO",
          "SIN"
        ],
        [
          "CDG",
          "EYW"
        ],
        [
          "ORD",
          "HND"
        ],
        [
          "HND",
          "SAN"
        ],
        [
          "LGA",
          "TLV"
        ],
        [
          "LGA",
          "BUD"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SIN"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SIN"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "ORD"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    },
    {
      "airports": [
        "BGI",
        "CDG",
        "DEL",
        "DOH",
        "DSM",
        "EWR",
        "EYW",
        "HND",
        "ICN",
        "JFK",
        "LGA",
        "LHR",
        "ORD",
        "SAN",
        "SFO",
        "SIN",
        "TLV",
        "BUD"
      ],
      "routes": [
        [
          "DSM",
          "ORD"
        ],
        [
          "ORD",
          "BGI"
        ],
        [
          "BGI",
          "LGA"
        ],
        [
          "SIN",
          "CDG"
        ],
        [
          "CDG",
          "DEL"
        ],
        [
          "DEL",
          "DOH"
        ],
        [
          "DOH",
          "SIN"
        ],
        [
          "EWR",
          "HND"
        ],
        [
          "HND",
          "ICN"
        ],
        [
          "ICN",
          "JFK"
        ],
        [
          "JFK",
          "LGA"
        ],
        [
          "EYW",
          "LHR"
        ],
        [
          "LHR",
          "SFO"
        ],
        [
          "SFO",
          "SAN"
        ],
        [
          "SFO",
          "DSM"
        ],
        [
          "SAN",
          "EYW"
        ]
      ],
      "startingAirport": "LGA"
    }
  ],
  "changelog": []
}