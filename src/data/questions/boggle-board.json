{
  "uid": "boggle-board",
  "testStrategy": "JSON",
  "name": "Boggle Board",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Graphs",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 8283,
    "failureCount": 3208
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "263857660",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2879
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given a two-dimensional array (a matrix) of potentially unequal height\n  and width containing letters; this matrix represents a boggle board. You're\n  also given a list of words.\n</p>\n<p>\n  Write a function that returns an array of all the words contained in the\n  boggle board. The final words don't need to be in any particular order.\n</p>\n<p>\n  A word is constructed in the boggle board by connecting adjacent\n  (horizontally, vertically, or diagonally) letters, without using any single\n  letter at a given position more than once; while a word can of course have\n  repeated letters, those repeated letters must come from different positions in\n  the boggle board in order for the word to be contained in the board. Note that\n  two or more words are allowed to overlap and use the same letters in the\n  boggle board.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">board</span> = [\n  [\"t\", \"h\", \"i\", \"s\", \"i\", \"s\", \"a\"],\n  [\"s\", \"i\", \"m\", \"p\", \"l\", \"e\", \"x\"],\n  [\"b\", \"x\", \"x\", \"x\", \"x\", \"e\", \"b\"],\n  [\"x\", \"o\", \"g\", \"g\", \"l\", \"x\", \"o\"],\n  [\"x\", \"x\", \"x\", \"D\", \"T\", \"r\", \"a\"],\n  [\"R\", \"E\", \"P\", \"E\", \"A\", \"d\", \"x\"],\n  [\"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\"],\n  [\"N\", \"O\", \"T\", \"R\", \"E\", \"-\", \"P\"],\n  [\"x\", \"x\", \"D\", \"E\", \"T\", \"A\", \"E\"],\n],\n<span class=\"CodeEditor-promptParameter\">words</span> = [\n  \"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\",\n  \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\",\n]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"]\n<span class=\"CodeEditor-promptComment\">// The words could be ordered differently.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nYou can divide this question into two separate problems: one part involves traversing the boggle board in such a way that allows you to construct strings letter by letter; the other part involves actually comparing the strings you construct in the board against the words in the list that you're given. For the second part, what data structure lends itself very well to matching characters to multiple strings at once?\n</p>\n",
    "\n<p>\nTry creating a trie out of the input list of words. This will allow you to compare letters in the boggle board against all input words in constant time. How can you efficiently traverse the boggle board to construct all potentially valid strings, without counting letters twice in any string?\n</p>\n",
    "\n<p>\nTreat the board as a graph, where each element in the board is a node with up to 8 neighboring nodes. Traverse it in a depth-first-search-like fashion, checking if letters are contained in the trie and traversing the trie simultaneously if it makes sense to do so. How can you keep track of letters that you've already visited in order to avoid erroneously counting some of them twice in a single string? Could you keep track of visited nodes in an auxiliary data structure?\n</p>\n",
    "\n<p>\nKeeping in mind that you only want to mark nodes as visited in a single branch of the graph that you're traversing (i.e., you don't want the state of visited nodes in one branch of the graph to spill into the state of another branch of the graph), try marking any node you traverse as unvisited at the end of the recursive call that actually traverses it, after traversing through all of the node's neighbors and performing the same actions on them recursively.\n</p>"
  ],
  "spaceTime": "O(nm*8^s + ws) time | O(nm + ws) space - where n is the width the board, m is the height of the board, w is the number of words, and s is the length of the longest word",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<string> boggleBoard(vector<vector<char>> board, vector<string> words) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_set>\n#include <vector>\nusing namespace std;\n\nclass TrieNode {\n public:\n  unordered_map<char, TrieNode*> children;\n  string word = \"\";\n};\n\nclass Trie {\n public:\n  TrieNode* root;\n  char endSymbol;\n\n  Trie();\n  void add(string str);\n};\n\nvoid explore(\n  int i,\n  int j,\n  vector<vector<char>> board,\n  TrieNode* trieNode,\n  vector<vector<bool>>* visited,\n  unordered_set<string>* finalWords\n);\nvector<vector<int>> getNeighbors(int i, int j, vector<vector<char>> board);\n\n// O(nm*8^s + ws) time | O(nm + ws) space\nvector<string> boggleBoard(vector<vector<char>> board, vector<string> words) {\n  Trie trie;\n  for (string word : words) {\n    trie.add(word);\n  }\n  unordered_set<string> finalWords;\n  vector<vector<bool>> visited(\n    board.size(), vector<bool>(board[0].size(), false)\n  );\n  for (int i = 0; i < board.size(); i++) {\n    for (int j = 0; j < board[0].size(); j++) {\n      explore(i, j, board, trie.root, &visited, &finalWords);\n    }\n  }\n  vector<string> finalWordsArray;\n  for (auto it : finalWords) {\n    finalWordsArray.push_back(it);\n  }\n  return finalWordsArray;\n}\n\nvoid explore(\n  int i,\n  int j,\n  vector<vector<char>> board,\n  TrieNode* trieNode,\n  vector<vector<bool>>* visited,\n  unordered_set<string>* finalWords\n) {\n  if (visited->at(i)[j]) {\n    return;\n  }\n  char letter = board[i][j];\n  if (trieNode->children.find(letter) == trieNode->children.end()) {\n    return;\n  }\n  visited->at(i)[j] = true;\n  trieNode = trieNode->children[letter];\n  if (trieNode->children.find('*') != trieNode->children.end()) {\n    finalWords->insert(trieNode->word);\n  }\n  vector<vector<int>> neighbors = getNeighbors(i, j, board);\n  for (vector<int> neighbor : neighbors) {\n    explore(neighbor[0], neighbor[1], board, trieNode, visited, finalWords);\n  }\n  visited->at(i)[j] = false;\n}\n\nvector<vector<int>> getNeighbors(int i, int j, vector<vector<char>> board) {\n  vector<vector<int>> neighbors;\n  if (i > 0 && j > 0) {\n    neighbors.push_back({i - 1, j - 1});\n  }\n  if (i > 0 && j < board[0].size() - 1) {\n    neighbors.push_back({i - 1, j + 1});\n  }\n  if (i < board.size() - 1 && j < board[0].size() - 1) {\n    neighbors.push_back({i + 1, j + 1});\n  }\n  if (i < board.size() - 1 && j > 0) {\n    neighbors.push_back({i + 1, j - 1});\n  }\n  if (i > 0) {\n    neighbors.push_back({i - 1, j});\n  }\n  if (i < board.size() - 1) {\n    neighbors.push_back({i + 1, j});\n  }\n  if (j > 0) {\n    neighbors.push_back({i, j - 1});\n  }\n  if (j < board[0].size() - 1) {\n    neighbors.push_back({i, j + 1});\n  }\n  return neighbors;\n}\n\nTrie::Trie() {\n  this->root = new TrieNode();\n  this->endSymbol = '*';\n}\n\nvoid Trie::add(string str) {\n  TrieNode* node = this->root;\n  for (char letter : str) {\n    if (node->children.find(letter) == node->children.end()) {\n      TrieNode* newNode = new TrieNode();\n      node->children.insert({letter, newNode});\n    }\n    node = node->children[letter];\n  }\n  node->children.insert({this->endSymbol, nullptr});\n  node->word = str;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nbool contains(vector<string> wordArray, string targetWord) {\n  for (string word : wordArray) {\n    if (targetWord == word) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<char>> board = {\n        {'t', 'h', 'i', 's', 'i', 's', 'a'},\n        {'s', 'i', 'm', 'p', 'l', 'e', 'x'},\n        {'b', 'x', 'x', 'x', 'x', 'e', 'b'},\n        {'x', 'o', 'g', 'g', 'l', 'x', 'o'},\n        {'x', 'x', 'x', 'D', 'T', 'r', 'a'},\n        {'R', 'E', 'P', 'E', 'A', 'd', 'x'},\n        {'x', 'x', 'x', 'x', 'x', 'x', 'x'},\n        {'N', 'O', 'T', 'R', 'E', '-', 'P'},\n        {'x', 'x', 'D', 'E', 'T', 'A', 'E'},\n      };\n      vector<string> words = {\n        \"this\",\n        \"is\",\n        \"not\",\n        \"a\",\n        \"simple\",\n        \"boggle\",\n        \"board\",\n        \"test\",\n        \"REPEATED\",\n        \"NOTRE-PEATED\"};\n      vector<string> expected = {\n        \"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"};\n      vector<string> actual = boggleBoard(board, words);\n      assert(actual.size() == expected.size());\n      for (string word : actual) {\n        assert(contains(expected, word));\n      }\n    });\n  }\n};\n",
      "unitTests": "bool contains(vector<string> wordArray, string targetWord) {\n  for (string word : wordArray) {\n    if (targetWord == word) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<char>> board = {\n        {'t', 'h', 'i', 's', 'i', 's', 'a'},\n        {'s', 'i', 'm', 'p', 'l', 'e', 'x'},\n        {'b', 'x', 'x', 'x', 'x', 'e', 'b'},\n        {'x', 'o', 'g', 'g', 'l', 'x', 'o'},\n        {'x', 'x', 'x', 'D', 'T', 'r', 'a'},\n        {'R', 'E', 'P', 'E', 'A', 'd', 'x'},\n        {'x', 'x', 'x', 'x', 'x', 'x', 'x'},\n        {'N', 'O', 'T', 'R', 'E', '-', 'P'},\n        {'x', 'x', 'D', 'E', 'T', 'A', 'E'},\n      };\n      vector<string> words = {\n        \"this\",\n        \"is\",\n        \"not\",\n        \"a\",\n        \"simple\",\n        \"boggle\",\n        \"board\",\n        \"test\",\n        \"REPEATED\",\n        \"NOTRE-PEATED\"};\n      vector<string> expected = {\n        \"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"};\n      vector<string> actual = boggleBoard(board, words);\n      assert(actual.size() == expected.size());\n      for (string word : actual) {\n        assert(contains(expected, word));\n      }\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<string> BoggleBoard(char[,] board, string[] words) {\n    // Write your code here.\n    return new List<string>();\n  }\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(nm*8^s + ws) time | O(nm + ws) space\n  public static List<string> BoggleBoard(char[,] board, string[] words) {\n    Trie trie = new Trie();\n    foreach (string word in words) {\n      trie.Add(word);\n    }\n    HashSet<string> finalWords = new HashSet<string>();\n    bool[,] visited = new bool[board.GetLength(0), board.GetLength(1)];\n    for (int i = 0; i < board.GetLength(0); i++) {\n      for (int j = 0; j < board.GetLength(1); j++) {\n        explore(i, j, board, trie.root, visited, finalWords);\n      }\n    }\n    List<string> finalWordsArray = new List<string>();\n    foreach (string key in finalWords) {\n      finalWordsArray.Add(key);\n    }\n    return finalWordsArray;\n  }\n\n  public static void explore(\n    int i,\n    int j,\n    char[,] board,\n    TrieNode trieNode,\n    bool[,] visited,\n    HashSet<string> finalWords\n  ) {\n    if (visited[i, j]) {\n      return;\n    }\n    char letter = board[i, j];\n    if (!trieNode.children.ContainsKey(letter)) {\n      return;\n    }\n    visited[i, j] = true;\n    trieNode = trieNode.children[letter];\n    if (trieNode.children.ContainsKey('*')) {\n      finalWords.Add(trieNode.word);\n    }\n    List<int[]> neighbors = getNeighbors(i, j, board);\n    foreach (int[] neighbor in neighbors) {\n      explore(neighbor[0], neighbor[1], board, trieNode, visited, finalWords);\n    }\n    visited[i, j] = false;\n  }\n\n  public static List<int[]> getNeighbors(int i, int j, char[,] board) {\n    List<int[]> neighbors = new List<int[]>();\n    if (i > 0 && j > 0) {\n      neighbors.Add(new int[] { i - 1, j - 1 });\n    }\n    if (i > 0 && j < board.GetLength(1) - 1) {\n      neighbors.Add(new int[] { i - 1, j + 1 });\n    }\n    if (i < board.GetLength(0) - 1 && j < board.GetLength(1) - 1) {\n      neighbors.Add(new int[] { i + 1, j + 1 });\n    }\n    if (i < board.GetLength(0) - 1 && j > 0) {\n      neighbors.Add(new int[] { i + 1, j - 1 });\n    }\n    if (i > 0) {\n      neighbors.Add(new int[] { i - 1, j });\n    }\n    if (i < board.GetLength(0) - 1) {\n      neighbors.Add(new int[] { i + 1, j });\n    }\n    if (j > 0) {\n      neighbors.Add(new int[] { i, j - 1 });\n    }\n    if (j < board.GetLength(1) - 1) {\n      neighbors.Add(new int[] { i, j + 1 });\n    }\n    return neighbors;\n  }\n\n  public class TrieNode {\n    public Dictionary<char, TrieNode> children =\n      new Dictionary<char, TrieNode>();\n    public string word = \"\";\n  }\n\n  public class Trie {\n    public TrieNode root;\n    public char endSymbol;\n\n    public Trie() {\n      this.root = new TrieNode();\n      this.endSymbol = '*';\n    }\n\n    public void Add(string str) {\n      TrieNode node = this.root;\n      for (int i = 0; i < str.Length; i++) {\n        char letter = str[i];\n        if (!node.children.ContainsKey(letter)) {\n          TrieNode newNode = new TrieNode();\n          node.children.Add(letter, newNode);\n        }\n        node = node.children[letter];\n      }\n      node.children[this.endSymbol] = null;\n      node.word = str;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    char[,] board = {\n      { 't', 'h', 'i', 's', 'i', 's', 'a' },\n      { 's', 'i', 'm', 'p', 'l', 'e', 'x' },\n      { 'b', 'x', 'x', 'x', 'x', 'e', 'b' },\n      { 'x', 'o', 'g', 'g', 'l', 'x', 'o' },\n      { 'x', 'x', 'x', 'D', 'T', 'r', 'a' },\n      { 'R', 'E', 'P', 'E', 'A', 'd', 'x' },\n      { 'x', 'x', 'x', 'x', 'x', 'x', 'x' },\n      { 'N', 'O', 'T', 'R', 'E', '-', 'P' },\n      { 'x', 'x', 'D', 'E', 'T', 'A', 'E' },\n    };\n    string[] words = {\n      \"this\",\n      \"is\",\n      \"not\",\n      \"a\",\n      \"simple\",\n      \"boggle\",\n      \"board\",\n      \"test\",\n      \"REPEATED\",\n      \"NOTRE-PEATED\"\n    };\n    string[] expected = {\n      \"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"\n    };\n    List<string> actual = Program.BoggleBoard(board, words);\n    Utils.AssertTrue(actual.Count == expected.Length);\n    foreach (string word in actual) {\n      Utils.AssertTrue(Contains(expected, word));\n    }\n  }\n\n  public static bool Contains(string[] wordArray, string targetWord) {\n    foreach (string word in wordArray) {\n      if (targetWord.Equals(word)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    char[,] board = {\n      { 't', 'h', 'i', 's', 'i', 's', 'a' },\n      { 's', 'i', 'm', 'p', 'l', 'e', 'x' },\n      { 'b', 'x', 'x', 'x', 'x', 'e', 'b' },\n      { 'x', 'o', 'g', 'g', 'l', 'x', 'o' },\n      { 'x', 'x', 'x', 'D', 'T', 'r', 'a' },\n      { 'R', 'E', 'P', 'E', 'A', 'd', 'x' },\n      { 'x', 'x', 'x', 'x', 'x', 'x', 'x' },\n      { 'N', 'O', 'T', 'R', 'E', '-', 'P' },\n      { 'x', 'x', 'D', 'E', 'T', 'A', 'E' },\n    };\n    string[] words = {\n      \"this\",\n      \"is\",\n      \"not\",\n      \"a\",\n      \"simple\",\n      \"boggle\",\n      \"board\",\n      \"test\",\n      \"REPEATED\",\n      \"NOTRE-PEATED\"\n    };\n    string[] expected = {\n      \"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"\n    };\n    List<string> actual = Program.BoggleBoard(board, words);\n    Utils.AssertTrue(actual.Count == expected.Length);\n    foreach (string word in actual) {\n      Utils.AssertTrue(Contains(expected, word));\n    }\n  }\n\n  public static bool Contains(string[] wordArray, string targetWord) {\n    foreach (string word in wordArray) {\n      if (targetWord.Equals(word)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc BoggleBoard(board [][]rune, words []string) []string {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(nm*8^s + ws) time | O(nm + ws) space\nfunc BoggleBoard(board [][]rune, words []string) []string {\n\ttrie := Trie{children: map[rune]Trie{}}\n\tfor _, word := range words {\n\t\ttrie.Add(word)\n\t}\n\n\tvisited := make([][]bool, len(board))\n\tfor i := range visited {\n\t\tvisited[i] = make([]bool, len(board[i]))\n\t}\n\n\tfinalWords := map[string]bool{}\n\tfor i := range board {\n\t\tfor j := range board[i] {\n\t\t\texplore(i, j, board, trie, visited, finalWords)\n\t\t}\n\t}\n\n\tresult := []string{}\n\tfor word := range finalWords {\n\t\tresult = append(result, word)\n\t}\n\treturn result\n}\n\nfunc explore(i, j int, board [][]rune, trie Trie, visited [][]bool, finalWords map[string]bool) {\n\tif visited[i][j] {\n\t\treturn\n\t}\n\tletter := board[i][j]\n\tif _, found := trie.children[letter]; !found {\n\t\treturn\n\t}\n\tvisited[i][j] = true\n\ttrie = trie.children[letter]\n\tif end, found := trie.children['*']; found {\n\t\tfinalWords[end.word] = true\n\t}\n\tneighbors := getNeighbors(i, j, board)\n\tfor _, neighbor := range neighbors {\n\t\texplore(neighbor[0], neighbor[1], board, trie, visited, finalWords)\n\t}\n\tvisited[i][j] = false\n}\n\nfunc getNeighbors(i, j int, board [][]rune) [][]int {\n\tneighbors := [][]int{}\n\tif i > 0 && j > 0 {\n\t\tneighbors = append(neighbors, []int{i - 1, j - 1})\n\t}\n\tif i > 0 && j < len(board[0])-1 {\n\t\tneighbors = append(neighbors, []int{i - 1, j + 1})\n\t}\n\tif i < len(board)-1 && j < len(board[0])-1 {\n\t\tneighbors = append(neighbors, []int{i + 1, j + 1})\n\t}\n\tif i < len(board)-1 && j > 0 {\n\t\tneighbors = append(neighbors, []int{i + 1, j - 1})\n\t}\n\tif i > 0 {\n\t\tneighbors = append(neighbors, []int{i - 1, j})\n\t}\n\tif i < len(board)-1 {\n\t\tneighbors = append(neighbors, []int{i + 1, j})\n\t}\n\tif j > 0 {\n\t\tneighbors = append(neighbors, []int{i, j - 1})\n\t}\n\tif j < len(board[0])-1 {\n\t\tneighbors = append(neighbors, []int{i, j + 1})\n\t}\n\treturn neighbors\n\n}\n\ntype Trie struct {\n\tchildren map[rune]Trie\n\n\tword string\n}\n\nfunc (t Trie) Add(word string) {\n\tcurrent := t\n\tfor _, letter := range word {\n\t\tif _, found := current.children[letter]; !found {\n\t\t\tcurrent.children[letter] = Trie{\n\t\t\t\tchildren: map[rune]Trie{},\n\t\t\t}\n\t\t}\n\t\tcurrent = current.children[letter]\n\t}\n\tcurrent.children['*'] = Trie{\n\t\tchildren: map[rune]Trie{},\n\t\tword:     word,\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tboard := [][]rune{\n\t\t{'t', 'h', 'i', 's', 'i', 's', 'a'},\n\t\t{'s', 'i', 'm', 'p', 'l', 'e', 'x'},\n\t\t{'b', 'x', 'x', 'x', 'x', 'e', 'b'},\n\t\t{'x', 'o', 'g', 'g', 'l', 'x', 'o'},\n\t\t{'x', 'x', 'x', 'D', 'T', 'r', 'a'},\n\t\t{'R', 'E', 'P', 'E', 'A', 'd', 'x'},\n\t\t{'x', 'x', 'x', 'x', 'x', 'x', 'x'},\n\t\t{'N', 'O', 'T', 'R', 'E', '-', 'P'},\n\t\t{'x', 'x', 'D', 'E', 'T', 'A', 'E'},\n\t}\n\twords := []string{\"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\", \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\"}\n\texpected := []string{\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"}\n\toutput := BoggleBoard(board, words)\n\trequire.ElementsMatch(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tboard := [][]rune{\n\t\t{'t', 'h', 'i', 's', 'i', 's', 'a'},\n\t\t{'s', 'i', 'm', 'p', 'l', 'e', 'x'},\n\t\t{'b', 'x', 'x', 'x', 'x', 'e', 'b'},\n\t\t{'x', 'o', 'g', 'g', 'l', 'x', 'o'},\n\t\t{'x', 'x', 'x', 'D', 'T', 'r', 'a'},\n\t\t{'R', 'E', 'P', 'E', 'A', 'd', 'x'},\n\t\t{'x', 'x', 'x', 'x', 'x', 'x', 'x'},\n\t\t{'N', 'O', 'T', 'R', 'E', '-', 'P'},\n\t\t{'x', 'x', 'D', 'E', 'T', 'A', 'E'},\n\t}\n\twords := []string{\"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\", \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\"}\n\texpected := []string{\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"}\n\toutput := BoggleBoard(board, words)\n\trequire.ElementsMatch(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<String> boggleBoard(char[][] board, String[] words) {\n    // Write your code here.\n    return new ArrayList<String>();\n  }\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm*8^s + ws) time | O(nm + ws) space\n  public static List<String> boggleBoard(char[][] board, String[] words) {\n    Trie trie = new Trie();\n    for (String word : words) {\n      trie.add(word);\n    }\n    Set<String> finalWords = new HashSet<String>();\n    boolean[][] visited = new boolean[board.length][board[0].length];\n    for (int i = 0; i < board.length; i++) {\n      for (int j = 0; j < board[0].length; j++) {\n        explore(i, j, board, trie.root, visited, finalWords);\n      }\n    }\n    List<String> finalWordsArray = new ArrayList<String>();\n    finalWordsArray.addAll(finalWords);\n    return finalWordsArray;\n  }\n\n  public static void explore(\n    int i,\n    int j,\n    char[][] board,\n    TrieNode trieNode,\n    boolean[][] visited,\n    Set<String> finalWords\n  ) {\n    if (visited[i][j]) {\n      return;\n    }\n    char letter = board[i][j];\n    if (!trieNode.children.containsKey(letter)) {\n      return;\n    }\n    visited[i][j] = true;\n    trieNode = trieNode.children.get(letter);\n    if (trieNode.children.containsKey('*')) {\n      finalWords.add(trieNode.word);\n    }\n    List<Integer[]> neighbors = getNeighbors(i, j, board);\n    for (Integer[] neighbor : neighbors) {\n      explore(neighbor[0], neighbor[1], board, trieNode, visited, finalWords);\n    }\n    visited[i][j] = false;\n  }\n\n  public static List<Integer[]> getNeighbors(int i, int j, char[][] board) {\n    List<Integer[]> neighbors = new ArrayList<Integer[]>();\n    if (i > 0 && j > 0) {\n      neighbors.add(new Integer[] {i - 1, j - 1});\n    }\n    if (i > 0 && j < board[0].length - 1) {\n      neighbors.add(new Integer[] {i - 1, j + 1});\n    }\n    if (i < board.length - 1 && j < board[0].length - 1) {\n      neighbors.add(new Integer[] {i + 1, j + 1});\n    }\n    if (i < board.length - 1 && j > 0) {\n      neighbors.add(new Integer[] {i + 1, j - 1});\n    }\n    if (i > 0) {\n      neighbors.add(new Integer[] {i - 1, j});\n    }\n    if (i < board.length - 1) {\n      neighbors.add(new Integer[] {i + 1, j});\n    }\n    if (j > 0) {\n      neighbors.add(new Integer[] {i, j - 1});\n    }\n    if (j < board[0].length - 1) {\n      neighbors.add(new Integer[] {i, j + 1});\n    }\n    return neighbors;\n  }\n\n  static class TrieNode {\n    Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();\n    String word = \"\";\n  }\n\n  static class Trie {\n    TrieNode root;\n    char endSymbol;\n\n    public Trie() {\n      this.root = new TrieNode();\n      this.endSymbol = '*';\n    }\n\n    public void add(String str) {\n      TrieNode node = this.root;\n      for (int i = 0; i < str.length(); i++) {\n        char letter = str.charAt(i);\n        if (!node.children.containsKey(letter)) {\n          TrieNode newNode = new TrieNode();\n          node.children.put(letter, newNode);\n        }\n        node = node.children.get(letter);\n      }\n      node.children.put(this.endSymbol, null);\n      node.word = str;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    char[][] board = {\n      {'t', 'h', 'i', 's', 'i', 's', 'a'},\n      {'s', 'i', 'm', 'p', 'l', 'e', 'x'},\n      {'b', 'x', 'x', 'x', 'x', 'e', 'b'},\n      {'x', 'o', 'g', 'g', 'l', 'x', 'o'},\n      {'x', 'x', 'x', 'D', 'T', 'r', 'a'},\n      {'R', 'E', 'P', 'E', 'A', 'd', 'x'},\n      {'x', 'x', 'x', 'x', 'x', 'x', 'x'},\n      {'N', 'O', 'T', 'R', 'E', '-', 'P'},\n      {'x', 'x', 'D', 'E', 'T', 'A', 'E'},\n    };\n    String[] words = {\n      \"this\",\n      \"is\",\n      \"not\",\n      \"a\",\n      \"simple\",\n      \"boggle\",\n      \"board\",\n      \"test\",\n      \"REPEATED\",\n      \"NOTRE-PEATED\"};\n    String[] expected = {\n      \"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"};\n    List<String> actual = Program.boggleBoard(board, words);\n    Utils.assertTrue(actual.size() == expected.length);\n    for (String word : actual) {\n      Utils.assertTrue(contains(expected, word));\n    }\n  }\n\n  public static boolean contains(String[] wordArray, String targetWord) {\n    for (String word : wordArray) {\n      if (targetWord.equals(word)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    char[][] board = {\n      {'t', 'h', 'i', 's', 'i', 's', 'a'},\n      {'s', 'i', 'm', 'p', 'l', 'e', 'x'},\n      {'b', 'x', 'x', 'x', 'x', 'e', 'b'},\n      {'x', 'o', 'g', 'g', 'l', 'x', 'o'},\n      {'x', 'x', 'x', 'D', 'T', 'r', 'a'},\n      {'R', 'E', 'P', 'E', 'A', 'd', 'x'},\n      {'x', 'x', 'x', 'x', 'x', 'x', 'x'},\n      {'N', 'O', 'T', 'R', 'E', '-', 'P'},\n      {'x', 'x', 'D', 'E', 'T', 'A', 'E'},\n    };\n    String[] words = {\n      \"this\",\n      \"is\",\n      \"not\",\n      \"a\",\n      \"simple\",\n      \"boggle\",\n      \"board\",\n      \"test\",\n      \"REPEATED\",\n      \"NOTRE-PEATED\"};\n    String[] expected = {\n      \"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"};\n    List<String> actual = Program.boggleBoard(board, words);\n    Utils.assertTrue(actual.size() == expected.length);\n    for (String word : actual) {\n      Utils.assertTrue(contains(expected, word));\n    }\n  }\n\n  public static boolean contains(String[] wordArray, String targetWord) {\n    for (String word : wordArray) {\n      if (targetWord.equals(word)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function boggleBoard(board, words) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.boggleBoard = boggleBoard;\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm*8^s + ws) time | O(nm + ws) space\nfunction boggleBoard(board, words) {\n  const trie = new Trie();\n  for (const word of words) {\n    trie.add(word);\n  }\n  const finalWords = {};\n  const visited = board.map(row => row.map(letter => false));\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      explore(i, j, board, trie.root, visited, finalWords);\n    }\n  }\n  return Object.keys(finalWords);\n}\n\nfunction explore(i, j, board, trieNode, visited, finalWords) {\n  if (visited[i][j]) return;\n  const letter = board[i][j];\n  if (!(letter in trieNode)) return;\n  visited[i][j] = true;\n  trieNode = trieNode[letter];\n  if ('*' in trieNode) finalWords[trieNode['*']] = true;\n  const neighbors = getNeighbors(i, j, board);\n  for (const neighbor of neighbors) {\n    explore(neighbor[0], neighbor[1], board, trieNode, visited, finalWords);\n  }\n  visited[i][j] = false;\n}\n\nfunction getNeighbors(i, j, board) {\n  const neighbors = [];\n  if (i > 0 && j > 0) {\n    neighbors.push([i - 1, j - 1]);\n  }\n  if (i > 0 && j < board[0].length - 1) {\n    neighbors.push([i - 1, j + 1]);\n  }\n  if (i < board.length - 1 && j < board[0].length - 1) {\n    neighbors.push([i + 1, j + 1]);\n  }\n  if (i < board.length - 1 && j > 0) {\n    neighbors.push([i + 1, j - 1]);\n  }\n  if (i > 0) {\n    neighbors.push([i - 1, j]);\n  }\n  if (i < board.length - 1) {\n    neighbors.push([i + 1, j]);\n  }\n  if (j > 0) {\n    neighbors.push([i, j - 1]);\n  }\n  if (j < board[0].length - 1) {\n    neighbors.push([i, j + 1]);\n  }\n  return neighbors;\n}\n\nclass Trie {\n  constructor() {\n    this.root = {};\n    this.endSymbol = '*';\n  }\n\n  add(word) {\n    let current = this.root;\n    for (const letter of word) {\n      if (!(letter in current)) current[letter] = {};\n      current = current[letter];\n    }\n    current[this.endSymbol] = word;\n  }\n}\n\nexports.boggleBoard = boggleBoard;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const board = [\n    ['t', 'h', 'i', 's', 'i', 's', 'a'],\n    ['s', 'i', 'm', 'p', 'l', 'e', 'x'],\n    ['b', 'x', 'x', 'x', 'x', 'e', 'b'],\n    ['x', 'o', 'g', 'g', 'l', 'x', 'o'],\n    ['x', 'x', 'x', 'D', 'T', 'r', 'a'],\n    ['R', 'E', 'P', 'E', 'A', 'd', 'x'],\n    ['x', 'x', 'x', 'x', 'x', 'x', 'x'],\n    ['N', 'O', 'T', 'R', 'E', '-', 'P'],\n    ['x', 'x', 'D', 'E', 'T', 'A', 'E'],\n  ];\n  const words = [\n    'this',\n    'is',\n    'not',\n    'a',\n    'simple',\n    'boggle',\n    'board',\n    'test',\n    'REPEATED',\n    'NOTRE-PEATED',\n  ];\n  const expected = ['this', 'is', 'a', 'simple', 'boggle', 'board', 'NOTRE-PEATED'];\n  const actual = program.boggleBoard(board, words);\n  chai.expect(actual.length).to.deep.equal(expected.length);\n  for (const word of actual) {\n    chai.expect(actual.includes(word)).to.deep.equal(true);\n  }\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const board = [\n    ['t', 'h', 'i', 's', 'i', 's', 'a'],\n    ['s', 'i', 'm', 'p', 'l', 'e', 'x'],\n    ['b', 'x', 'x', 'x', 'x', 'e', 'b'],\n    ['x', 'o', 'g', 'g', 'l', 'x', 'o'],\n    ['x', 'x', 'x', 'D', 'T', 'r', 'a'],\n    ['R', 'E', 'P', 'E', 'A', 'd', 'x'],\n    ['x', 'x', 'x', 'x', 'x', 'x', 'x'],\n    ['N', 'O', 'T', 'R', 'E', '-', 'P'],\n    ['x', 'x', 'D', 'E', 'T', 'A', 'E'],\n  ];\n  const words = [\n    'this',\n    'is',\n    'not',\n    'a',\n    'simple',\n    'boggle',\n    'board',\n    'test',\n    'REPEATED',\n    'NOTRE-PEATED',\n  ];\n  const expected = ['this', 'is', 'a', 'simple', 'boggle', 'board', 'NOTRE-PEATED'];\n  const actual = program.boggleBoard(board, words);\n  chai.expect(actual.length).to.deep.equal(expected.length);\n  for (const word of actual) {\n    chai.expect(actual.includes(word)).to.deep.equal(true);\n  }\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun boggleBoard(board: List<List<Char>>, words: List<String>): List<String> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\ndata class TrieNode(\n    val children: MutableMap<Char, TrieNode?> = mutableMapOf<Char, TrieNode?>(),\n    var word: String = \"\",\n)\n\nopen class Trie() {\n    val endSymbol = '*'\n    var root = TrieNode()\n\n    fun add(word: String) {\n        var current = this.root\n        for (letter in word) {\n            if (!current.children.containsKey(letter)) {\n                current.children[letter] = TrieNode()\n            }\n            current = current.children[letter]!!\n        }\n        current.children[this.endSymbol] = null\n        current.word = word\n    }\n}\n\n// O(nm*8^s + ws) time | O(nm + ws) space\nfun boggleBoard(board: List<List<Char>>, words: List<String>): List<String> {\n    val trie = Trie()\n    for (word in words) {\n        trie.add(word)\n    }\n    val finalWords = mutableMapOf<String, Boolean>()\n    val visited = List(board.size, { MutableList(board[0].size, { false }) })\n    for (i in 0 until board.size) {\n        for (j in 0 until board[i].size) {\n            explore(i, j, board, trie.root, visited, finalWords)\n        }\n    }\n    return finalWords.keys.toList()\n}\n\nfun explore(i: Int, j: Int, board: List<List<Char>>, trieNode: TrieNode, visited: List<MutableList<Boolean>>, finalWords: MutableMap<String, Boolean>) {\n    if (visited[i][j]) return\n    val letter = board[i][j]\n    if (!trieNode.children.containsKey(letter)) return\n    visited[i][j] = true\n    val nextTrieNode = trieNode.children[letter]!!\n    if (nextTrieNode.children.containsKey('*')) finalWords[nextTrieNode.word] = true\n    val neighbors = getNeighbors(i, j, board)\n    for (neighbor in neighbors) {\n        explore(neighbor.first, neighbor.second, board, nextTrieNode, visited, finalWords)\n    }\n    visited[i][j] = false\n}\n\nfun getNeighbors(i: Int, j: Int, board: List<List<Char>>): List<Pair<Int, Int>> {\n    val neighbors = mutableListOf<Pair<Int, Int>>()\n    if (i > 0 && j > 0) {\n        neighbors.add(Pair(i - 1, j - 1))\n    }\n    if (i > 0 && j < board[0].size - 1) {\n        neighbors.add(Pair(i - 1, j + 1))\n    }\n    if (i < board.size - 1 && j < board[0].size - 1) {\n        neighbors.add(Pair(i + 1, j + 1))\n    }\n    if (i < board.size - 1 && j > 0) {\n        neighbors.add(Pair(i + 1, j - 1))\n    }\n    if (i > 0) {\n        neighbors.add(Pair(i - 1, j))\n    }\n    if (i < board.size - 1) {\n        neighbors.add(Pair(i + 1, j))\n    }\n    if (j > 0) {\n        neighbors.add(Pair(i, j - 1))\n    }\n    if (j < board[0].size - 1) {\n        neighbors.add(Pair(i, j + 1))\n    }\n    return neighbors\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.boggleBoard as boggleBoard\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val board = listOf(\n            listOf('t', 'h', 'i', 's', 'i', 's', 'a'),\n            listOf('s', 'i', 'm', 'p', 'l', 'e', 'x'),\n            listOf('b', 'x', 'x', 'x', 'x', 'e', 'b'),\n            listOf('x', 'o', 'g', 'g', 'l', 'x', 'o'),\n            listOf('x', 'x', 'x', 'D', 'T', 'r', 'a'),\n            listOf('R', 'E', 'P', 'E', 'A', 'd', 'x'),\n            listOf('x', 'x', 'x', 'x', 'x', 'x', 'x'),\n            listOf('N', 'O', 'T', 'R', 'E', '-', 'P'),\n            listOf('x', 'x', 'D', 'E', 'T', 'A', 'E'),\n        )\n        val words =\n            listOf(\"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\", \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\")\n        val expected = listOf(\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\")\n        val actual = boggleBoard(board, words)\n\n        assert(actual.size == expected.size)\n        for (word in actual) {\n            assert(actual.contains(word))\n        }\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.boggleBoard as boggleBoard\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val board = listOf(\n            listOf('t', 'h', 'i', 's', 'i', 's', 'a'),\n            listOf('s', 'i', 'm', 'p', 'l', 'e', 'x'),\n            listOf('b', 'x', 'x', 'x', 'x', 'e', 'b'),\n            listOf('x', 'o', 'g', 'g', 'l', 'x', 'o'),\n            listOf('x', 'x', 'x', 'D', 'T', 'r', 'a'),\n            listOf('R', 'E', 'P', 'E', 'A', 'd', 'x'),\n            listOf('x', 'x', 'x', 'x', 'x', 'x', 'x'),\n            listOf('N', 'O', 'T', 'R', 'E', '-', 'P'),\n            listOf('x', 'x', 'D', 'E', 'T', 'A', 'E'),\n        )\n        val words =\n            listOf(\"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\", \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\")\n        val expected = listOf(\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\")\n        val actual = boggleBoard(board, words)\n\n        assert(actual.size == expected.size)\n        for (word in actual) {\n            assert(actual.contains(word))\n        }\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def boggleBoard(board, words):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nm*8^s + ws) time | O(nm + ws) space\ndef boggleBoard(board, words):\n    trie = Trie()\n    for word in words:\n        trie.add(word)\n    finalWords = {}\n    visited = [[False for letter in row] for row in board]\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            explore(i, j, board, trie.root, visited, finalWords)\n    return list(finalWords.keys())\n\n\ndef explore(i, j, board, trieNode, visited, finalWords):\n    if visited[i][j]:\n        return\n    letter = board[i][j]\n    if letter not in trieNode:\n        return\n    visited[i][j] = True\n    trieNode = trieNode[letter]\n    if \"*\" in trieNode:\n        finalWords[trieNode[\"*\"]] = True\n    neighbors = getNeighbors(i, j, board)\n    for neighbor in neighbors:\n        explore(neighbor[0], neighbor[1], board, trieNode, visited, finalWords)\n    visited[i][j] = False\n\n\ndef getNeighbors(i, j, board):\n    neighbors = []\n    if i > 0 and j > 0:\n        neighbors.append([i - 1, j - 1])\n    if i > 0 and j < len(board[0]) - 1:\n        neighbors.append([i - 1, j + 1])\n    if i < len(board) - 1 and j < len(board[0]) - 1:\n        neighbors.append([i + 1, j + 1])\n    if i < len(board) - 1 and j > 0:\n        neighbors.append([i + 1, j - 1])\n    if i > 0:\n        neighbors.append([i - 1, j])\n    if i < len(board) - 1:\n        neighbors.append([i + 1, j])\n    if j > 0:\n        neighbors.append([i, j - 1])\n    if j < len(board[0]) - 1:\n        neighbors.append([i, j + 1])\n    return neighbors\n\n\nclass Trie:\n    def __init__(self):\n        self.root = {}\n        self.endSymbol = \"*\"\n\n    def add(self, word):\n        current = self.root\n        for letter in word:\n            if letter not in current:\n                current[letter] = {}\n            current = current[letter]\n        current[self.endSymbol] = word\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        board = [\n            [\"t\", \"h\", \"i\", \"s\", \"i\", \"s\", \"a\"],\n            [\"s\", \"i\", \"m\", \"p\", \"l\", \"e\", \"x\"],\n            [\"b\", \"x\", \"x\", \"x\", \"x\", \"e\", \"b\"],\n            [\"x\", \"o\", \"g\", \"g\", \"l\", \"x\", \"o\"],\n            [\"x\", \"x\", \"x\", \"D\", \"T\", \"r\", \"a\"],\n            [\"R\", \"E\", \"P\", \"E\", \"A\", \"d\", \"x\"],\n            [\"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\"],\n            [\"N\", \"O\", \"T\", \"R\", \"E\", \"-\", \"P\"],\n            [\"x\", \"x\", \"D\", \"E\", \"T\", \"A\", \"E\"],\n        ]\n        words = [\n            \"this\",\n            \"is\",\n            \"not\",\n            \"a\",\n            \"simple\",\n            \"boggle\",\n            \"board\",\n            \"test\",\n            \"REPEATED\",\n            \"NOTRE-PEATED\",\n        ]\n        expected = [\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"]\n        actual = program.boggleBoard(board, words)\n        self.assertEqual(len(actual), len(expected))\n        for word in actual:\n            self.assertTrue(word in expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        board = [\n            [\"t\", \"h\", \"i\", \"s\", \"i\", \"s\", \"a\"],\n            [\"s\", \"i\", \"m\", \"p\", \"l\", \"e\", \"x\"],\n            [\"b\", \"x\", \"x\", \"x\", \"x\", \"e\", \"b\"],\n            [\"x\", \"o\", \"g\", \"g\", \"l\", \"x\", \"o\"],\n            [\"x\", \"x\", \"x\", \"D\", \"T\", \"r\", \"a\"],\n            [\"R\", \"E\", \"P\", \"E\", \"A\", \"d\", \"x\"],\n            [\"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\"],\n            [\"N\", \"O\", \"T\", \"R\", \"E\", \"-\", \"P\"],\n            [\"x\", \"x\", \"D\", \"E\", \"T\", \"A\", \"E\"],\n        ]\n        words = [\n            \"this\",\n            \"is\",\n            \"not\",\n            \"a\",\n            \"simple\",\n            \"boggle\",\n            \"board\",\n            \"test\",\n            \"REPEATED\",\n            \"NOTRE-PEATED\",\n        ]\n        expected = [\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"]\n        actual = program.boggleBoard(board, words)\n        self.assertEqual(len(actual), len(expected))\n        for word in actual:\n            self.assertTrue(word in expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def boggleBoard(board, words)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def boggleBoard(board, words)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.boggleBoard\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.boggleBoard\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func boggleBoard(board: [[String]], words: [String]) -> [String] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nm*8^s + ws) time | O(nm + ws) space\n  func boggleBoard(board: [[String]], words: [String]) -> [String] {\n    let trie = Trie()\n\n    for word in words {\n      trie.add(word)\n    }\n\n    var finalWords = [String: Bool]()\n\n    var visited = board.map { row in row.map { _ in false } }\n\n    for i in 0 ..< board.count {\n      for j in 0 ..< board[i].count {\n        explore(i, j, board, trie.root, &visited, &finalWords)\n      }\n    }\n\n    let keys = Array(finalWords.keys)\n    return keys\n  }\n\n  func explore(_ i: Int, _ j: Int, _ board: [[String]], _ trieNode: TrieNode, _ visited: inout [[Bool]], _ finalWords: inout [String: Bool]) {\n    if visited[i][j] {\n      return\n    }\n\n    let letter = board[i][j]\n\n    if !trieNode.children.keys.contains(letter) {\n      return\n    }\n\n    visited[i][j] = true\n\n    let nextNode = trieNode.children[letter] as! TrieNode\n\n    if nextNode.children.keys.contains(\"*\") {\n      if let word = nextNode.children[\"*\"] as? String {\n        finalWords[word] = true\n      }\n    }\n\n    let neighbors = getNeighbors(i, j, board: board)\n\n    for neighbor in neighbors {\n      explore(neighbor[0], neighbor[1], board, nextNode, &visited, &finalWords)\n    }\n\n    visited[i][j] = false\n  }\n\n  func getNeighbors(_ i: Int, _ j: Int, board: [[String]]) -> [[Int]] {\n    var neighbors = [[Int]]()\n\n    if i > 0, j > 0 {\n      neighbors.append([i - 1, j - 1])\n    }\n\n    if i > 0 {\n      neighbors.append([i - 1, j])\n    }\n\n    if i > 0, j < board[i].count - 1 {\n      neighbors.append([i - 1, j + 1])\n    }\n\n    if j < board[i].count - 1 {\n      neighbors.append([i, j + 1])\n    }\n\n    if i < board.count - 1, j < board[i].count - 1 {\n      neighbors.append([i + 1, j + 1])\n    }\n\n    if i < board.count - 1 {\n      neighbors.append([i + 1, j])\n    }\n\n    if i < board.count - 1, j > 0 {\n      neighbors.append([i + 1, j - 1])\n    }\n\n    if j > 0 {\n      neighbors.append([i, j - 1])\n    }\n\n    return neighbors\n  }\n\n  class TrieNode {\n    var children: [String: Any] = [:]\n  }\n\n  class Trie {\n    var root: TrieNode\n    let endSymbol: String = \"*\"\n\n    init() {\n      root = TrieNode()\n    }\n\n    func add(_ word: String) {\n      var current = root\n\n      for character in word {\n        let stringifiedCharacter = String(character)\n\n        if !current.children.keys.contains(stringifiedCharacter) {\n          current.children[stringifiedCharacter] = TrieNode()\n        }\n\n        let nextNode = current.children[stringifiedCharacter] as! TrieNode\n        current = nextNode\n      }\n\n      current.children[endSymbol] = word\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let board = [\n        [\"t\", \"h\", \"i\", \"s\", \"i\", \"s\", \"a\"],\n        [\"s\", \"i\", \"m\", \"p\", \"l\", \"e\", \"x\"],\n        [\"b\", \"x\", \"x\", \"x\", \"x\", \"e\", \"b\"],\n        [\"x\", \"o\", \"g\", \"g\", \"l\", \"x\", \"o\"],\n        [\"x\", \"x\", \"x\", \"D\", \"T\", \"r\", \"a\"],\n        [\"R\", \"E\", \"P\", \"E\", \"A\", \"d\", \"x\"],\n        [\"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\"],\n        [\"N\", \"O\", \"T\", \"R\", \"E\", \"-\", \"P\"],\n        [\"x\", \"x\", \"D\", \"E\", \"T\", \"A\", \"E\"],\n      ]\n      let words = [\"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\", \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\"]\n      let expected = [\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"]\n      let actual = program.boggleBoard(board: board, words: words)\n      try assertEqual(expected.count, actual.count)\n\n      for word in actual {\n        try assert(expected.contains(word))\n      }\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let board = [\n        [\"t\", \"h\", \"i\", \"s\", \"i\", \"s\", \"a\"],\n        [\"s\", \"i\", \"m\", \"p\", \"l\", \"e\", \"x\"],\n        [\"b\", \"x\", \"x\", \"x\", \"x\", \"e\", \"b\"],\n        [\"x\", \"o\", \"g\", \"g\", \"l\", \"x\", \"o\"],\n        [\"x\", \"x\", \"x\", \"D\", \"T\", \"r\", \"a\"],\n        [\"R\", \"E\", \"P\", \"E\", \"A\", \"d\", \"x\"],\n        [\"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\"],\n        [\"N\", \"O\", \"T\", \"R\", \"E\", \"-\", \"P\"],\n        [\"x\", \"x\", \"D\", \"E\", \"T\", \"A\", \"E\"],\n      ]\n      let words = [\"this\", \"is\", \"not\", \"a\", \"simple\", \"boggle\", \"board\", \"test\", \"REPEATED\", \"NOTRE-PEATED\"]\n      let expected = [\"this\", \"is\", \"a\", \"simple\", \"boggle\", \"board\", \"NOTRE-PEATED\"]\n      let actual = program.boggleBoard(board: board, words: words)\n      try assertEqual(expected.count, actual.count)\n\n      for word in actual {\n        try assert(expected.contains(word))\n      }\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function boggleBoard(board: string[][], words: string[]): string[] {\n  // Write your code here.\n  return [''];\n}\n",
      "solutions": [
        "// Copyright Â© 2023 AlgoExpert LLC. All rights reserved.\n\ninterface FinalWords {\n  [key: string]: boolean;\n}\n\n// O(nm*8^s + ws) time | O(nm + ws) space\nexport function boggleBoard(board: string[][], words: string[]) {\n  const trie = new Trie();\n  for (const word of words) {\n    trie.add(word);\n  }\n  const finalWords = {};\n  const visited = board.map(row => row.map(letter => false));\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      explore(i, j, board, trie.root, visited, finalWords);\n    }\n  }\n  return Object.keys(finalWords);\n}\n\nfunction explore(\n  i: number,\n  j: number,\n  board: string[][],\n  trieNode: TrieNode,\n  visited: boolean[][],\n  finalWords: FinalWords,\n) {\n  if (visited[i][j]) return;\n  const letter = board[i][j];\n  if (!(letter in trieNode)) return;\n  visited[i][j] = true;\n  trieNode = trieNode[letter] as TrieNode;\n  if ('*' in trieNode) finalWords[trieNode['*'] as string] = true;\n  const neighbors = getNeighbors(i, j, board);\n  for (const neighbor of neighbors) {\n    explore(neighbor[0], neighbor[1], board, trieNode, visited, finalWords);\n  }\n  visited[i][j] = false;\n}\n\nfunction getNeighbors(i: number, j: number, board: string[][]) {\n  const neighbors: [number, number][] = [];\n  if (i > 0 && j > 0) {\n    neighbors.push([i - 1, j - 1]);\n  }\n  if (i > 0 && j < board[0].length - 1) {\n    neighbors.push([i - 1, j + 1]);\n  }\n  if (i < board.length - 1 && j < board[0].length - 1) {\n    neighbors.push([i + 1, j + 1]);\n  }\n  if (i < board.length - 1 && j > 0) {\n    neighbors.push([i + 1, j - 1]);\n  }\n  if (i > 0) {\n    neighbors.push([i - 1, j]);\n  }\n  if (i < board.length - 1) {\n    neighbors.push([i + 1, j]);\n  }\n  if (j > 0) {\n    neighbors.push([i, j - 1]);\n  }\n  if (j < board[0].length - 1) {\n    neighbors.push([i, j + 1]);\n  }\n  return neighbors;\n}\n\ninterface TrieNode {\n  [key: string]: string | TrieNode;\n}\n\nclass Trie {\n  root: TrieNode;\n  endSymbol: string;\n\n  constructor() {\n    this.root = {};\n    this.endSymbol = '*';\n  }\n\n  add(word: string) {\n    let current = this.root;\n    for (const letter of word) {\n      if (!(letter in current)) current[letter] = {};\n      current = current[letter] as TrieNode;\n    }\n    current[this.endSymbol] = word;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const board = [\n    ['t', 'h', 'i', 's', 'i', 's', 'a'],\n    ['s', 'i', 'm', 'p', 'l', 'e', 'x'],\n    ['b', 'x', 'x', 'x', 'x', 'e', 'b'],\n    ['x', 'o', 'g', 'g', 'l', 'x', 'o'],\n    ['x', 'x', 'x', 'D', 'T', 'r', 'a'],\n    ['R', 'E', 'P', 'E', 'A', 'd', 'x'],\n    ['x', 'x', 'x', 'x', 'x', 'x', 'x'],\n    ['N', 'O', 'T', 'R', 'E', '-', 'P'],\n    ['x', 'x', 'D', 'E', 'T', 'A', 'E'],\n  ];\n  const words = [\n    'this',\n    'is',\n    'not',\n    'a',\n    'simple',\n    'boggle',\n    'board',\n    'test',\n    'REPEATED',\n    'NOTRE-PEATED',\n  ];\n  const expected = ['this', 'is', 'a', 'simple', 'boggle', 'board', 'NOTRE-PEATED'];\n  const actual = program.boggleBoard(board, words);\n  chai.expect(actual.length).to.deep.equal(expected.length);\n  for (const word of actual) {\n    chai.expect(actual.includes(word)).to.deep.equal(true);\n  }\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const board = [\n    ['t', 'h', 'i', 's', 'i', 's', 'a'],\n    ['s', 'i', 'm', 'p', 'l', 'e', 'x'],\n    ['b', 'x', 'x', 'x', 'x', 'e', 'b'],\n    ['x', 'o', 'g', 'g', 'l', 'x', 'o'],\n    ['x', 'x', 'x', 'D', 'T', 'r', 'a'],\n    ['R', 'E', 'P', 'E', 'A', 'd', 'x'],\n    ['x', 'x', 'x', 'x', 'x', 'x', 'x'],\n    ['N', 'O', 'T', 'R', 'E', '-', 'P'],\n    ['x', 'x', 'D', 'E', 'T', 'A', 'E'],\n  ];\n  const words = [\n    'this',\n    'is',\n    'not',\n    'a',\n    'simple',\n    'boggle',\n    'board',\n    'test',\n    'REPEATED',\n    'NOTRE-PEATED',\n  ];\n  const expected = ['this', 'is', 'a', 'simple', 'boggle', 'board', 'NOTRE-PEATED'];\n  const actual = program.boggleBoard(board, words);\n  chai.expect(actual.length).to.deep.equal(expected.length);\n  for (const word of actual) {\n    chai.expect(actual.includes(word)).to.deep.equal(true);\n  }\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "board",
      "example": [
        [
          "t",
          "h",
          "i",
          "s",
          "i",
          "s",
          "a"
        ],
        [
          "s",
          "i",
          "m",
          "p",
          "l",
          "e",
          "x"
        ],
        [
          "b",
          "x",
          "x",
          "x",
          "x",
          "e",
          "b"
        ],
        [
          "x",
          "o",
          "g",
          "g",
          "l",
          "x",
          "o"
        ],
        [
          "x",
          "x",
          "x",
          "D",
          "T",
          "r",
          "a"
        ],
        [
          "R",
          "E",
          "P",
          "E",
          "A",
          "d",
          "x"
        ],
        [
          "x",
          "x",
          "x",
          "x",
          "x",
          "x",
          "x"
        ],
        [
          "N",
          "O",
          "T",
          "R",
          "E",
          "-",
          "P"
        ],
        [
          "x",
          "x",
          "D",
          "E",
          "T",
          "A",
          "E"
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "type": "array"
      }
    },
    {
      "name": "words",
      "example": [
        "this",
        "is",
        "not",
        "a",
        "simple",
        "boggle",
        "board",
        "test",
        "REPEATED",
        "NOTRE-PEATED"
      ],
      "schema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "board": [
        [
          "t",
          "h",
          "i",
          "s",
          "i",
          "s",
          "a"
        ],
        [
          "s",
          "i",
          "m",
          "p",
          "l",
          "e",
          "x"
        ],
        [
          "b",
          "x",
          "x",
          "x",
          "x",
          "e",
          "b"
        ],
        [
          "x",
          "o",
          "g",
          "g",
          "l",
          "x",
          "o"
        ],
        [
          "x",
          "x",
          "x",
          "D",
          "T",
          "r",
          "a"
        ],
        [
          "R",
          "E",
          "P",
          "E",
          "A",
          "d",
          "x"
        ],
        [
          "x",
          "x",
          "x",
          "x",
          "x",
          "x",
          "x"
        ],
        [
          "N",
          "O",
          "T",
          "R",
          "E",
          "-",
          "P"
        ],
        [
          "x",
          "x",
          "D",
          "E",
          "T",
          "A",
          "E"
        ]
      ],
      "words": [
        "this",
        "is",
        "not",
        "a",
        "simple",
        "boggle",
        "board",
        "test",
        "REPEATED",
        "NOTRE-PEATED"
      ]
    },
    {
      "board": [
        [
          "y",
          "g",
          "f",
          "y",
          "e",
          "i"
        ],
        [
          "c",
          "o",
          "r",
          "p",
          "o",
          "u"
        ],
        [
          "j",
          "u",
          "z",
          "s",
          "e",
          "l"
        ],
        [
          "s",
          "y",
          "u",
          "r",
          "h",
          "p"
        ],
        [
          "e",
          "a",
          "e",
          "g",
          "n",
          "d"
        ],
        [
          "h",
          "e",
          "l",
          "s",
          "a",
          "t"
        ]
      ],
      "words": [
        "san",
        "sana",
        "at",
        "vomit",
        "yours",
        "help",
        "end",
        "been",
        "bed",
        "danger",
        "calm",
        "ok",
        "chaos",
        "complete",
        "rear",
        "going",
        "storm",
        "face",
        "epual",
        "dangerous"
      ]
    },
    {
      "board": [
        [
          "a",
          "b",
          "c",
          "d",
          "e"
        ],
        [
          "f",
          "g",
          "h",
          "i",
          "j"
        ],
        [
          "k",
          "l",
          "m",
          "n",
          "o"
        ],
        [
          "p",
          "q",
          "r",
          "s",
          "t"
        ],
        [
          "u",
          "v",
          "w",
          "x",
          "y"
        ]
      ],
      "words": [
        "agmsy",
        "agmsytojed",
        "agmsytojedinhcbgl",
        "agmsytojedinhcbfl"
      ]
    },
    {
      "board": [
        [
          "a",
          "b"
        ],
        [
          "c",
          "d"
        ]
      ],
      "words": [
        "abcd",
        "abdc",
        "acbd",
        "acdb",
        "adbc",
        "adcb",
        "abca"
      ]
    },
    {
      "board": [
        [
          "f",
          "t",
          "r",
          "o",
          "p",
          "i",
          "k",
          "b",
          "o"
        ],
        [
          "r",
          "w",
          "l",
          "p",
          "e",
          "u",
          "e",
          "a",
          "b"
        ],
        [
          "j",
          "o",
          "t",
          "s",
          "e",
          "l",
          "f",
          "l",
          "p"
        ],
        [
          "s",
          "z",
          "u",
          "t",
          "h",
          "u",
          "o",
          "p",
          "i"
        ],
        [
          "k",
          "a",
          "e",
          "g",
          "n",
          "d",
          "r",
          "g",
          "a"
        ],
        [
          "h",
          "n",
          "l",
          "s",
          "a",
          "t",
          "e",
          "t",
          "x"
        ]
      ],
      "words": [
        "frozen",
        "rotten",
        "teleport",
        "city",
        "zutgatz",
        "kappa",
        "before",
        "rope",
        "obligate",
        "annoying"
      ]
    },
    {
      "board": [
        [
          "c",
          "o",
          "m"
        ],
        [
          "r",
          "p",
          "l"
        ],
        [
          "c",
          "i",
          "t"
        ],
        [
          "o",
          "a",
          "e"
        ],
        [
          "f",
          "o",
          "d"
        ],
        [
          "z",
          "r",
          "b"
        ],
        [
          "g",
          "i",
          "a"
        ],
        [
          "o",
          "a",
          "g"
        ],
        [
          "f",
          "s",
          "z"
        ],
        [
          "t",
          "e",
          "i"
        ],
        [
          "t",
          "w",
          "d"
        ]
      ],
      "words": [
        "commerce",
        "complicated",
        "twisted",
        "zigzag",
        "comma",
        "foobar",
        "baz",
        "there"
      ]
    },
    {
      "board": [
        [
          "c",
          "o",
          "m"
        ],
        [
          "r",
          "p",
          "l"
        ],
        [
          "c",
          "i",
          "t"
        ],
        [
          "o",
          "a",
          "e"
        ],
        [
          "f",
          "o",
          "d"
        ],
        [
          "z",
          "r",
          "b"
        ],
        [
          "g",
          "i",
          "a"
        ],
        [
          "o",
          "a",
          "g"
        ],
        [
          "f",
          "s",
          "z"
        ],
        [
          "t",
          "e",
          "i"
        ],
        [
          "t",
          "w",
          "d"
        ]
      ],
      "words": [
        "cr",
        "oc",
        "ml",
        "iao",
        "opo",
        "zrb",
        "big",
        "fs",
        "ogiagao",
        "dwd",
        "twt"
      ]
    },
    {
      "board": [
        [
          "c",
          "o",
          "m"
        ],
        [
          "r",
          "p",
          "l"
        ],
        [
          "c",
          "i",
          "t"
        ],
        [
          "o",
          "a",
          "e"
        ],
        [
          "f",
          "o",
          "d"
        ],
        [
          "z",
          "r",
          "b"
        ],
        [
          "g",
          "i",
          "a"
        ],
        [
          "o",
          "a",
          "g"
        ],
        [
          "f",
          "s",
          "z"
        ],
        [
          "t",
          "e",
          "i"
        ],
        [
          "t",
          "w",
          "d"
        ]
      ],
      "words": [
        "comlpriteacoofziraagsizefttw",
        "comlpriteacoofzirabagsizefottw",
        "comlpriteacoofziraagsizefottw",
        "comlpriteacoofzirabagsizeftttw"
      ]
    }
  ],
  "jsonTests": [
    {
      "board": [
        [
          "t",
          "h",
          "i",
          "s",
          "i",
          "s",
          "a"
        ],
        [
          "s",
          "i",
          "m",
          "p",
          "l",
          "e",
          "x"
        ],
        [
          "b",
          "x",
          "x",
          "x",
          "x",
          "e",
          "b"
        ],
        [
          "x",
          "o",
          "g",
          "g",
          "l",
          "x",
          "o"
        ],
        [
          "x",
          "x",
          "x",
          "D",
          "T",
          "r",
          "a"
        ],
        [
          "R",
          "E",
          "P",
          "E",
          "A",
          "d",
          "x"
        ],
        [
          "x",
          "x",
          "x",
          "x",
          "x",
          "x",
          "x"
        ],
        [
          "N",
          "O",
          "T",
          "R",
          "E",
          "-",
          "P"
        ],
        [
          "x",
          "x",
          "D",
          "E",
          "T",
          "A",
          "E"
        ]
      ],
      "words": [
        "this",
        "is",
        "not",
        "a",
        "simple",
        "boggle",
        "board",
        "test",
        "REPEATED",
        "NOTRE-PEATED"
      ]
    },
    {
      "board": [
        [
          "y",
          "g",
          "f",
          "y",
          "e",
          "i"
        ],
        [
          "c",
          "o",
          "r",
          "p",
          "o",
          "u"
        ],
        [
          "j",
          "u",
          "z",
          "s",
          "e",
          "l"
        ],
        [
          "s",
          "y",
          "u",
          "r",
          "h",
          "p"
        ],
        [
          "e",
          "a",
          "e",
          "g",
          "n",
          "d"
        ],
        [
          "h",
          "e",
          "l",
          "s",
          "a",
          "t"
        ]
      ],
      "words": [
        "san",
        "sana",
        "at",
        "vomit",
        "yours",
        "help",
        "end",
        "been",
        "bed",
        "danger",
        "calm",
        "ok",
        "chaos",
        "complete",
        "rear",
        "going",
        "storm",
        "face",
        "epual",
        "dangerous"
      ]
    },
    {
      "board": [
        [
          "a",
          "b",
          "c",
          "d",
          "e"
        ],
        [
          "f",
          "g",
          "h",
          "i",
          "j"
        ],
        [
          "k",
          "l",
          "m",
          "n",
          "o"
        ],
        [
          "p",
          "q",
          "r",
          "s",
          "t"
        ],
        [
          "u",
          "v",
          "w",
          "x",
          "y"
        ]
      ],
      "words": [
        "agmsy",
        "agmsytojed",
        "agmsytojedinhcbgl",
        "agmsytojedinhcbfl"
      ]
    },
    {
      "board": [
        [
          "a",
          "b"
        ],
        [
          "c",
          "d"
        ]
      ],
      "words": [
        "abcd",
        "abdc",
        "acbd",
        "acdb",
        "adbc",
        "adcb",
        "abca"
      ]
    },
    {
      "board": [
        [
          "f",
          "t",
          "r",
          "o",
          "p",
          "i",
          "k",
          "b",
          "o"
        ],
        [
          "r",
          "w",
          "l",
          "p",
          "e",
          "u",
          "e",
          "a",
          "b"
        ],
        [
          "j",
          "o",
          "t",
          "s",
          "e",
          "l",
          "f",
          "l",
          "p"
        ],
        [
          "s",
          "z",
          "u",
          "t",
          "h",
          "u",
          "o",
          "p",
          "i"
        ],
        [
          "k",
          "a",
          "e",
          "g",
          "n",
          "d",
          "r",
          "g",
          "a"
        ],
        [
          "h",
          "n",
          "l",
          "s",
          "a",
          "t",
          "e",
          "t",
          "x"
        ]
      ],
      "words": [
        "frozen",
        "rotten",
        "teleport",
        "city",
        "zutgatz",
        "kappa",
        "before",
        "rope",
        "obligate",
        "annoying"
      ]
    },
    {
      "board": [
        [
          "c",
          "o",
          "m"
        ],
        [
          "r",
          "p",
          "l"
        ],
        [
          "c",
          "i",
          "t"
        ],
        [
          "o",
          "a",
          "e"
        ],
        [
          "f",
          "o",
          "d"
        ],
        [
          "z",
          "r",
          "b"
        ],
        [
          "g",
          "i",
          "a"
        ],
        [
          "o",
          "a",
          "g"
        ],
        [
          "f",
          "s",
          "z"
        ],
        [
          "t",
          "e",
          "i"
        ],
        [
          "t",
          "w",
          "d"
        ]
      ],
      "words": [
        "commerce",
        "complicated",
        "twisted",
        "zigzag",
        "comma",
        "foobar",
        "baz",
        "there"
      ]
    },
    {
      "board": [
        [
          "c",
          "o",
          "m"
        ],
        [
          "r",
          "p",
          "l"
        ],
        [
          "c",
          "i",
          "t"
        ],
        [
          "o",
          "a",
          "e"
        ],
        [
          "f",
          "o",
          "d"
        ],
        [
          "z",
          "r",
          "b"
        ],
        [
          "g",
          "i",
          "a"
        ],
        [
          "o",
          "a",
          "g"
        ],
        [
          "f",
          "s",
          "z"
        ],
        [
          "t",
          "e",
          "i"
        ],
        [
          "t",
          "w",
          "d"
        ]
      ],
      "words": [
        "cr",
        "oc",
        "ml",
        "iao",
        "opo",
        "zrb",
        "big",
        "fs",
        "ogiagao",
        "dwd",
        "twt"
      ]
    },
    {
      "board": [
        [
          "c",
          "o",
          "m"
        ],
        [
          "r",
          "p",
          "l"
        ],
        [
          "c",
          "i",
          "t"
        ],
        [
          "o",
          "a",
          "e"
        ],
        [
          "f",
          "o",
          "d"
        ],
        [
          "z",
          "r",
          "b"
        ],
        [
          "g",
          "i",
          "a"
        ],
        [
          "o",
          "a",
          "g"
        ],
        [
          "f",
          "s",
          "z"
        ],
        [
          "t",
          "e",
          "i"
        ],
        [
          "t",
          "w",
          "d"
        ]
      ],
      "words": [
        "comlpriteacoofziraagsizefttw",
        "comlpriteacoofzirabagsizefottw",
        "comlpriteacoofziraagsizefottw",
        "comlpriteacoofzirabagsizeftttw"
      ]
    }
  ],
  "changelog": []
}