{
  "uid": "count-inversions",
  "testStrategy": "JSON",
  "name": "Count Inversions",
  "version": 0,
  "releaseDate": "2021-04-01T00:00:00Z",
  "category": "Sorting",
  "difficulty": 4,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 3483,
    "failureCount": 811
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "524085085",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1643
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns the number of\n  inversions in the array. An inversion occurs if for any valid indices\n  <span>i</span> and <span>j</span>, <span>i &lt; j</span> and\n  <span>array[i] > array[j]</span>.\n</p>\n<p>\n  For example, given <span>array = [3, 4, 1, 2]</span>, there are\n  <span>4</span> inversions. The following pairs of indices represent\n  inversions: <span>[0, 2], [0, 3], [1, 2], [1, 3]</span>.\n</p>\n<p>\n  Intuitively, the number of inversions is a measure of how unsorted the array\n  is.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [2, 3, 3, 1, 9, 5, 6]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n5\n<span class=\"CodeEditor-promptComment\">// The following pairs of indices represent inversions:</span>\n<span class=\"CodeEditor-promptComment\">// [0, 3], [1, 3], [2, 3], [4, 5], [4, 6]</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  The brute-force approach to solve this problem is to simply compare every pair\n  of indices in the array and to determine how many of them represent\n  inversions. This approach takes <span>O(n^2)</span> time, where n is the\n  length of the array. Can you do better than this?\n</p>\n",
    "\n<p>\n  If the number of inversions is the degree to which the array is unsorted, and\n  it if it takes <span>O(nlog(n))</span> time to sort an array using an optimal\n  sorting algorithm, can you determine how unsorted the array is with a solution\n  that runs in that time complexity?\n</p>\n",
    "\n<p>\n  Try thinking about how you would solve this problem if, instead of being given\n  one array, you were given two separate arrays representing the main array's\n  two halves. You would need to determine the number of inversions in the array\n  created by merging the left array and the right array. The number of\n  inversions in this example is actually equal to the number of inversions in\n  the left array, the number of inversions in the right array, <b>and</b> the\n  number of inversions when you merge the <b>sorted</b> left array and the\n  <b>sorted</b> right array. Recall how Merge Sort works for a hint about how\n  you can solve this problem.\n</p>\n",
    "\n<p>\n  Once you understand the information stated in Hint #3, you can use an\n  algorithm that's very similar to Merge Sort to determine the number of\n  inversions in any array. You'll recursively determine the number of inversions\n  in the left and right halves of an array while sorting both the left and right\n  halves, just like you do in Merge Sort. Once your two halves are sorted,\n  you'll merge them together and count the number of inversions in the merged\n  array. Take the example of these two sorted arrays:\n  <span>a1 = [1, 3, 4]</span> and <span>a2 = [2, 2, 5]</span>. When you merge\n  these two sorted arrays, you insert elements from the left and right array\n  into one larger array. Whenever you insert an element from the right array\n  before inserting an element from the left array, that means an inversion or\n  multiple inversions have occurred. This is because elements in the right array\n  are positioned after all elements in the left array (if these two arrays were\n  originally left and right halves of another array). The remaining elements to\n  be inserted from the left array when we insert an element from the right array\n  are all inverted with this right-array element. See the Conceptual Overview\n  section of this question's video explanation for a more in-depth explanation.\n</p>"
  ],
  "spaceTime": "O(nlogn) time | O(n) space - where n is the length of the array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint countInversions(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint countSubArrayInversions(vector<int>& array, int start, int end);\nint mergeSortAndCountInversions(\n  vector<int>& array, int start, int middle, int end\n);\n\n// O(nlogn) time | O(n) space - where n is the length of the array\nint countInversions(vector<int> array) {\n  return countSubArrayInversions(array, 0, array.size());\n}\n\nint countSubArrayInversions(vector<int>& array, int start, int end) {\n  if (end - start <= 1) return 0;\n\n  int middle = start + ((end - start) / 2);\n  int leftInversions = countSubArrayInversions(array, start, middle);\n  int rightInversions = countSubArrayInversions(array, middle, end);\n  int mergedArrayInversions =\n    mergeSortAndCountInversions(array, start, middle, end);\n  return leftInversions + rightInversions + mergedArrayInversions;\n}\n\nint mergeSortAndCountInversions(\n  vector<int>& array, int start, int middle, int end\n) {\n  vector<int> sortedArray;\n  int left = start;\n  int right = middle;\n  int inversions = 0;\n\n  while (left < middle && right < end) {\n    if (array[left] <= array[right]) {\n      sortedArray.push_back(array[left]);\n      left++;\n    } else {\n      inversions += middle - left;\n      sortedArray.push_back(array[right]);\n      right++;\n    }\n  }\n\n  for (int idx = left; idx < middle; idx++) {\n    sortedArray.push_back(array[idx]);\n  }\n\n  for (int idx = right; idx < end; idx++) {\n    sortedArray.push_back(array[idx]);\n  }\n\n  for (int idx = 0; idx < sortedArray.size(); idx++) {\n    int num = sortedArray[idx];\n    array[start + idx] = num;\n  }\n\n  return inversions;\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = {2, 3, 3, 1, 9, 5, 6};\n      auto expected = 5;\n      auto actual = countInversions(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = {2, 3, 3, 1, 9, 5, 6};\n      auto expected = 5;\n      auto actual = countInversions(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int CountInversions(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(nlogn) time | O(n) space - where n is the length of the array\n  public int CountInversions(int[] array) {\n    return countSubArrayInversions(array, 0, array.Length);\n  }\n\n  public int countSubArrayInversions(int[] array, int start, int end) {\n    if (end - start <= 1) {\n      return 0;\n    }\n\n    int middle = start + (end - start) / 2;\n    int leftInversions = countSubArrayInversions(array, start, middle);\n    int rightInversions = countSubArrayInversions(array, middle, end);\n    int mergedArrayInversions =\n      mergeSortAndCountInversions(array, start, middle, end);\n    return leftInversions + rightInversions + mergedArrayInversions;\n  }\n\n  public int mergeSortAndCountInversions(\n    int[] array, int start, int middle, int end\n  ) {\n    List<int> sortedArray = new List<int>();\n    int left = start;\n    int right = middle;\n    int inversions = 0;\n\n    while (left < middle && right < end) {\n      if (array[left] <= array[right]) {\n        sortedArray.Add(array[left]);\n        left += 1;\n      } else {\n        inversions += middle - left;\n        sortedArray.Add(array[right]);\n        right += 1;\n      }\n    }\n\n    for (int idx = left; idx < middle; idx++) {\n      sortedArray.Add(array[idx]);\n    }\n\n    for (int idx = right; idx < end; idx++) {\n      sortedArray.Add(array[idx]);\n    }\n\n    for (int idx = 0; idx < sortedArray.Count; idx++) {\n      int num = sortedArray[idx];\n      array[start + idx] = num;\n    }\n\n    return inversions;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = new int[] { 2, 3, 3, 1, 9, 5, 6 };\n    var expected = 5;\n    var actual = new Program().CountInversions(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = new int[] { 2, 3, 3, 1, 9, 5, 6 };\n    var expected = 5;\n    var actual = new Program().CountInversions(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc CountInversions(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(nlogn) time | O(n) space - where n is the length of the array\nfunc CountInversions(array []int) int {\n\treturn countSubArrayInversions(array, 0, len(array))\n}\n\nfunc countSubArrayInversions(array []int, start, end int) int {\n\tif end-start <= 1 {\n\t\treturn 0\n\t}\n\n\tmiddle := start + (end-start)/2\n\tleftInversions := countSubArrayInversions(array, start, middle)\n\trightInversions := countSubArrayInversions(array, middle, end)\n\tmergedArrayInversions := mergeSortAndCountInversions(array, start, middle, end)\n\treturn leftInversions + rightInversions + mergedArrayInversions\n}\n\nfunc mergeSortAndCountInversions(array []int, start, middle, end int) int {\n\tsortedArray := make([]int, 0)\n\tleft := start\n\tright := middle\n\tinversions := 0\n\n\tfor left < middle && right < end {\n\t\tif array[left] <= array[right] {\n\t\t\tsortedArray = append(sortedArray, array[left])\n\t\t\tleft += 1\n\t\t} else {\n\t\t\tinversions += middle - left\n\t\t\tsortedArray = append(sortedArray, array[right])\n\t\t\tright += 1\n\t\t}\n\t}\n\n\tsortedArray = append(sortedArray, array[left:middle]...)\n\tsortedArray = append(sortedArray, array[right:end]...)\n\tfor idx := range sortedArray {\n\t\tnum := sortedArray[idx]\n\t\tarray[start+idx] = num\n\t}\n\n\treturn inversions\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 3, 3, 1, 9, 5, 6}\n\texpected := 5\n\tactual := CountInversions(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 3, 3, 1, 9, 5, 6}\n\texpected := 5\n\tactual := CountInversions(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int countInversions(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlogn) time | O(n) space - where n is the length of the array\n  public int countInversions(int[] array) {\n    return countSubArrayInversions(array, 0, array.length);\n  }\n\n  public int countSubArrayInversions(int[] array, int start, int end) {\n    if (end - start <= 1) {\n      return 0;\n    }\n\n    int middle = start + (end - start) / 2;\n    int leftInversions = countSubArrayInversions(array, start, middle);\n    int rightInversions = countSubArrayInversions(array, middle, end);\n    int mergedArrayInversions =\n      mergeSortAndCountInversions(array, start, middle, end);\n    return leftInversions + rightInversions + mergedArrayInversions;\n  }\n\n  public int mergeSortAndCountInversions(\n    int[] array, int start, int middle, int end\n  ) {\n    List<Integer> sortedArray = new ArrayList<Integer>();\n    int left = start;\n    int right = middle;\n    int inversions = 0;\n\n    while (left < middle && right < end) {\n      if (array[left] <= array[right]) {\n        sortedArray.add(array[left]);\n        left += 1;\n      } else {\n        inversions += middle - left;\n        sortedArray.add(array[right]);\n        right += 1;\n      }\n    }\n\n    for (int idx = left; idx < middle; idx++) {\n      sortedArray.add(array[idx]);\n    }\n\n    for (int idx = right; idx < end; idx++) {\n      sortedArray.add(array[idx]);\n    }\n\n    for (int idx = 0; idx < sortedArray.size(); idx++) {\n      int num = sortedArray.get(idx);\n      array[start + idx] = num;\n    }\n\n    return inversions;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = new int[] {2, 3, 3, 1, 9, 5, 6};\n    var expected = 5;\n    var actual = new Program().countInversions(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = new int[] {2, 3, 3, 1, 9, 5, 6};\n    var expected = 5;\n    var actual = new Program().countInversions(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function countInversions(array) {\n  // Write your code here.\n  return 0;\n}\n\n// Do not edit the line below.\nexports.countInversions = countInversions;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlogn) time | O(n) space - where n is the length of the array\nfunction countInversions(array) {\n  return countSubArrayInversions(array, 0, array.length);\n}\n\nfunction countSubArrayInversions(array, start, end) {\n  if (end - start <= 1) return 0;\n\n  const middle = start + Math.floor((end - start) / 2);\n  const leftInversions = countSubArrayInversions(array, start, middle);\n  const rightInversions = countSubArrayInversions(array, middle, end);\n  const mergedArrayInversions = mergeSortAndCountInversions(array, start, middle, end);\n  return leftInversions + rightInversions + mergedArrayInversions;\n}\n\nfunction mergeSortAndCountInversions(array, start, middle, end) {\n  const sortedArray = [];\n  let left = start;\n  let right = middle;\n  let inversions = 0;\n\n  while (left < middle && right < end) {\n    if (array[left] <= array[right]) {\n      sortedArray.push(array[left]);\n      left++;\n    } else {\n      inversions += middle - left;\n      sortedArray.push(array[right]);\n      right++;\n    }\n  }\n\n  sortedArray.push(...array.slice(left, middle), ...array.slice(right, end));\n  for (let idx = 0; idx < sortedArray.length; idx++) {\n    const num = sortedArray[idx];\n    array[start + idx] = num;\n  }\n\n  return inversions;\n}\n\n// Do not edit the line below.\nexports.countInversions = countInversions;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [2, 3, 3, 1, 9, 5, 6];\n  const expected = 5;\n  const actual = program.countInversions(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [2, 3, 3, 1, 9, 5, 6];\n  const expected = 5;\n  const actual = program.countInversions(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun countInversions(array: MutableList<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nlogn) time | O(n) space - where n is the length of the array\nfun countInversions(array: MutableList<Int>): Int {\n    return countSubArrayInversions(array, 0, array.size)\n}\n\nfun countSubArrayInversions(array: MutableList<Int>, start: Int, end: Int): Int {\n    if (end - start <= 1) return 0\n\n    val middle = start + (end - start) / 2\n    val leftInversions = countSubArrayInversions(array, start, middle)\n    val rightInversions = countSubArrayInversions(array, middle, end)\n    val mergedArrayInversions = mergeSortAndCountInversions(array, start, middle, end)\n    return leftInversions + rightInversions + mergedArrayInversions\n}\n\nfun mergeSortAndCountInversions(array: MutableList<Int>, start: Int, middle: Int, end: Int): Int {\n    val sortedArray = mutableListOf<Int>()\n    var left = start\n    var right = middle\n    var inversions = 0\n\n    while (left < middle && right < end) {\n        if (array[left] <= array[right]) {\n            sortedArray.add(array[left])\n            left += 1\n        } else {\n            inversions += middle - left\n            sortedArray.add(array[right])\n            right += 1\n        }\n    }\n\n    sortedArray += array.subList(left, middle) + array.subList(right, end)\n    for (idx in 0 until sortedArray.size) {\n        val num = sortedArray[idx]\n        array[start + idx] = num\n    }\n\n    return inversions\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.countInversions\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(2, 3, 3, 1, 9, 5, 6)\n        val expected = 5\n        val output = countInversions(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.countInversions\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(2, 3, 3, 1, 9, 5, 6)\n        val expected = 5\n        val output = countInversions(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def countInversions(array):\n    # Write your code here.\n    return 0\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlogn) time | O(n) space - where n is the length of the array\ndef countInversions(array):\n    return countSubArrayInversions(array, 0, len(array))\n\n\ndef countSubArrayInversions(array, start, end):\n    if end - start <= 1:\n        return 0\n\n    middle = start + (end - start) // 2\n    leftInversions = countSubArrayInversions(array, start, middle)\n    rightInversions = countSubArrayInversions(array, middle, end)\n    mergedArrayInversions = mergeSortAndCountInversions(array, start, middle, end)\n    return leftInversions + rightInversions + mergedArrayInversions\n\n\ndef mergeSortAndCountInversions(array, start, middle, end):\n    sortedArray = []\n    left = start\n    right = middle\n    inversions = 0\n\n    while left < middle and right < end:\n        if array[left] <= array[right]:\n            sortedArray.append(array[left])\n            left += 1\n        else:\n            inversions += middle - left\n            sortedArray.append(array[right])\n            right += 1\n\n    sortedArray += array[left:middle] + array[right:end]\n    for idx, num in enumerate(sortedArray):\n        array[start + idx] = num\n\n    return inversions\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 3, 3, 1, 9, 5, 6]\n        expected = 5\n        actual = program.countInversions(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 3, 3, 1, 9, 5, 6]\n        expected = 5\n        actual = program.countInversions(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def countInversions(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def countInversions(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.countInversions\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.countInversions\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func countInversions(_ array: inout [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlogn) time | O(n) space - where n is the length of the array\n  func countInversions(_ array: inout [Int]) -> Int {\n    return countSubArrayInversions(&array, 0, array.count)\n  }\n\n  func countSubArrayInversions(_ array: inout [Int], _ start: Int, _ end: Int) -> Int {\n    if end - start <= 1 {\n      return 0\n    }\n\n    let middle = start + (end - start) / 2\n    let leftInversions = countSubArrayInversions(&array, start, middle)\n    let rightInversions = countSubArrayInversions(&array, middle, end)\n    let mergedArrayInversions = mergeSortAndCountInversions(&array, start, middle, end)\n    return leftInversions + rightInversions + mergedArrayInversions\n  }\n\n  func mergeSortAndCountInversions(_ array: inout [Int], _ start: Int, _ middle: Int, _ end: Int) -> Int {\n    var sortedArray = [Int]()\n    var left = start\n    var right = middle\n    var inversions = 0\n\n    while left < middle, right < end {\n      if array[left] <= array[right] {\n        sortedArray.append(array[left])\n        left += 1\n      } else {\n        inversions += middle - left\n        sortedArray.append(array[right])\n        right += 1\n      }\n    }\n\n    sortedArray += array[left ..< middle] + array[right ..< end]\n    for idx in 0 ..< sortedArray.count {\n      let num = sortedArray[idx]\n      array[start + idx] = num\n    }\n\n    return inversions\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [2, 3, 3, 1, 9, 5, 6]\n      var expected = 5\n      var actual = Program().countInversions(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [2, 3, 3, 1, 9, 5, 6]\n      var expected = 5\n      var actual = Program().countInversions(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function countInversions(array: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlogn) time | O(n) space - where n is the length of the array\nexport function countInversions(array: number[]) {\n  return countSubArrayInversions(array, 0, array.length);\n}\n\nfunction countSubArrayInversions(array: number[], start: number, end: number): number {\n  if (end - start <= 1) return 0;\n\n  const middle = start + Math.floor((end - start) / 2);\n  const leftInversions = countSubArrayInversions(array, start, middle);\n  const rightInversions = countSubArrayInversions(array, middle, end);\n  const mergedArrayInversions = mergeSortAndCountInversions(array, start, middle, end);\n  return leftInversions + rightInversions + mergedArrayInversions;\n}\n\nfunction mergeSortAndCountInversions(array: number[], start: number, middle: number, end: number) {\n  const sortedArray: number[] = [];\n  let left = start;\n  let right = middle;\n  let inversions = 0;\n\n  while (left < middle && right < end) {\n    if (array[left] <= array[right]) {\n      sortedArray.push(array[left]);\n      left++;\n    } else {\n      inversions += middle - left;\n      sortedArray.push(array[right]);\n      right++;\n    }\n  }\n\n  sortedArray.push(...array.slice(left, middle), ...array.slice(right, end));\n  for (let idx = 0; idx < sortedArray.length; idx++) {\n    const num = sortedArray[idx];\n    array[start + idx] = num;\n  }\n\n  return inversions;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [2, 3, 3, 1, 9, 5, 6];\n  const expected = 5;\n  const actual = program.countInversions(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [2, 3, 3, 1, 9, 5, 6];\n  const expected = 5;\n  const actual = program.countInversions(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        2,
        3,
        3,
        1,
        9,
        5,
        6
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        2,
        3,
        3,
        1,
        9,
        5,
        6
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -1
      ]
    },
    {
      "array": [
        0,
        2,
        4,
        5,
        76
      ]
    },
    {
      "array": [
        54,
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        10,
        2,
        8,
        3,
        7,
        4,
        6,
        5
      ]
    },
    {
      "array": [
        2,
        -18
      ]
    },
    {
      "array": [
        15,
        14,
        13,
        12,
        11,
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        5,
        -1,
        2,
        -4,
        3,
        4,
        19,
        87,
        762,
        -8,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        0,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        2,
        1,
        1
      ]
    },
    {
      "array": [
        10,
        7,
        2,
        3,
        1,
        -9,
        -86,
        -862,
        234,
        312,
        3421,
        23,
        0,
        2,
        1,
        2
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        2,
        3,
        3,
        1,
        9,
        5,
        6
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -1
      ]
    },
    {
      "array": [
        0,
        2,
        4,
        5,
        76
      ]
    },
    {
      "array": [
        54,
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        10,
        2,
        8,
        3,
        7,
        4,
        6,
        5
      ]
    },
    {
      "array": [
        2,
        -18
      ]
    },
    {
      "array": [
        15,
        14,
        13,
        12,
        11,
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        5,
        -1,
        2,
        -4,
        3,
        4,
        19,
        87,
        762,
        -8,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        0,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        2,
        1,
        1
      ]
    },
    {
      "array": [
        10,
        7,
        2,
        3,
        1,
        -9,
        -86,
        -862,
        234,
        312,
        3421,
        23,
        0,
        2,
        1,
        2
      ]
    }
  ],
  "changelog": []
}