{
  "uid": "evaluate-expression-tree",
  "testStrategy": "JSON",
  "name": "Evaluate Expression Tree",
  "version": 0,
  "releaseDate": "2023-04-08T00:00:00Z",
  "category": "Binary Trees",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 8126,
    "failureCount": 1537
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "789185027",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 342
  },
  "prompt": "<div class=\"html\">\n  <p>\n    You're given a binary expression tree. Write a function to evaluate\n    this tree mathematically and return a single resulting integer.\n  </p>\n\n  <p>\n    All leaf nodes in the tree represent operands, which will always be positive\n    integers. All of the other nodes represent operators. There are 4 operators\n    supported, each of which is represented by a negative integer:\n  </p>\n\n  <ul>\n    <li>\n      <span>-1</span>: Addition operator, adding the left and right subtrees.\n    </li>\n    <li>\n      <span>-2</span>: Subtraction operator, subtracting the right subtree from the left subtree.\n    </li>\n    <li>\n      <span>-3</span>: Division operator, dividing the left subtree by the right subtree.\n      If the result is a decimal, it should be rounded towards zero.\n    </li>\n    <li>\n      <span>-4</span>: Multiplication operator, multiplying the left and right subtrees.\n    </li>\n  </ul>\n\n  <p>\n    You can assume the tree will always be a valid expression tree. Each\n    operator also works as a grouping symbol, meaning the bottom of the tree is\n    always evaluated first, regardless of the operator.\n  </p>\n\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> =    -1\n        /     \\\n      -2       -3\n     /   \\    /  \\\n   -4     2  8    3\n  /   \\\n 2     3\n</pre>\n<h3>Sample Output</h3>\n<pre>\n6 <span class=\"CodeEditor-promptComment\">// (((2 * 3) - 2) + (8 / 3))\n</span>\n</pre>",
  "hints": [
    "<p>\n  This problem will be easiest to solve using recursion. Can you think of what\n  the recursive subproblems would be? And what is the base case?\n</p>\n",
    "\n<p>\n  For each operator, a recursive call can be made on its left and right values.\n  The result of these recursive calls can then be combined using that operator.\n  The base case to finish recursing will be when we reach an operand, which is\n  any positive integer.\n</p>"
  ],
  "spaceTime": "O(n) time | O(h) space - where n is the number of nodes in the Binary Tree, and h is the height of the Binary Tree",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) { this->value = value; }\n};\n\nint evaluateExpressionTree(BinaryTree* tree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) { this->value = value; }\n};\n\n// O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n// and h is the height of the Binary Tree\nint evaluateExpressionTree(BinaryTree* tree) {\n  if (tree->value >= 0) {\n    return tree->value;\n  }\n\n  int leftValue = evaluateExpressionTree(tree->left);\n  int rightValue = evaluateExpressionTree(tree->right);\n\n  if (tree->value == -1) {\n    return leftValue + rightValue;\n  } else if (tree->value == -2) {\n    return leftValue - rightValue;\n  } else if (tree->value == -3) {\n    return leftValue / rightValue;\n  }\n  return leftValue * rightValue;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree* tree = new BinaryTree(-1);\n      tree->left = new BinaryTree(2);\n      tree->right = new BinaryTree(-2);\n      tree->right->left = new BinaryTree(5);\n      tree->right->right = new BinaryTree(1);\n      int expected = 6;\n      auto actual = evaluateExpressionTree(tree);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree* tree = new BinaryTree(-1);\n      tree->left = new BinaryTree(2);\n      tree->right = new BinaryTree(-2);\n      tree->right->left = new BinaryTree(5);\n      tree->right->right = new BinaryTree(1);\n      int expected = 6;\n      auto actual = evaluateExpressionTree(tree);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public int EvaluateExpressionTree(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n  // and h is the height of the Binary Tree\n  public int EvaluateExpressionTree(BinaryTree tree) {\n    if (tree.value >= 0) {\n      return tree.value;\n    }\n\n    int leftValue = EvaluateExpressionTree(tree.left);\n    int rightValue = EvaluateExpressionTree(tree.right);\n\n    if (tree.value == -1) {\n      return leftValue + rightValue;\n    } else if (tree.value == -2) {\n      return leftValue - rightValue;\n    } else if (tree.value == -3) {\n      return leftValue / rightValue;\n    }\n    return leftValue * rightValue;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(-1);\n    tree.left = new Program.BinaryTree(2);\n    tree.right = new Program.BinaryTree(-2);\n    tree.right.left = new Program.BinaryTree(5);\n    tree.right.right = new Program.BinaryTree(1);\n    var expected = 6;\n    var actual = new Program().EvaluateExpressionTree(tree);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(-1);\n    tree.left = new Program.BinaryTree(2);\n    tree.right = new Program.BinaryTree(-2);\n    tree.right.left = new Program.BinaryTree(5);\n    tree.right.right = new Program.BinaryTree(1);\n    var expected = 6;\n    var actual = new Program().EvaluateExpressionTree(tree);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\nfunc EvaluateExpressionTree(tree *BinaryTree) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n// and h is the height of the Binary Tree\nfunc EvaluateExpressionTree(tree *BinaryTree) int {\n\tif tree.Value >= 0 {\n\t\treturn tree.Value\n\t}\n\n\tleftValue := EvaluateExpressionTree(tree.Left)\n\trightValue := EvaluateExpressionTree(tree.Right)\n\n\tif tree.Value == -1 {\n\t\treturn leftValue + rightValue\n\t}\n\tif tree.Value == -2 {\n\t\treturn leftValue - rightValue\n\t}\n\tif tree.Value == -3 {\n\t\treturn leftValue / rightValue\n\t}\n\treturn leftValue * rightValue\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\ttree := &BinaryTree{Value: -1}\n\ttree.Left = &BinaryTree{Value: 2}\n\ttree.Right = &BinaryTree{Value: -2}\n\ttree.Right.Left = &BinaryTree{Value: 5}\n\ttree.Right.Right = &BinaryTree{Value: 1}\n\texpected := 6\n\tactual := EvaluateExpressionTree(tree)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\ttree := &BinaryTree{Value: -1}\n\ttree.Left = &BinaryTree{Value: 2}\n\ttree.Right = &BinaryTree{Value: -2}\n\ttree.Right.Left = &BinaryTree{Value: 5}\n\ttree.Right.Right = &BinaryTree{Value: 1}\n\texpected := 6\n\tactual := EvaluateExpressionTree(tree)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public int evaluateExpressionTree(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n  // and h is the height of the Binary Tree\n  public int evaluateExpressionTree(BinaryTree tree) {\n    if (tree.value >= 0) {\n      return tree.value;\n    }\n\n    int leftValue = evaluateExpressionTree(tree.left);\n    int rightValue = evaluateExpressionTree(tree.right);\n\n    if (tree.value == -1) {\n      return leftValue + rightValue;\n    } else if (tree.value == -2) {\n      return leftValue - rightValue;\n    } else if (tree.value == -3) {\n      return leftValue / rightValue;\n    }\n    return leftValue * rightValue;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(-1);\n    tree.left = new Program.BinaryTree(2);\n    tree.right = new Program.BinaryTree(-2);\n    tree.right.left = new Program.BinaryTree(5);\n    tree.right.right = new Program.BinaryTree(1);\n    var expected = 6;\n    var actual = new Program().evaluateExpressionTree(tree);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(-1);\n    tree.left = new Program.BinaryTree(2);\n    tree.right = new Program.BinaryTree(-2);\n    tree.right.left = new Program.BinaryTree(5);\n    tree.right.right = new Program.BinaryTree(1);\n    var expected = 6;\n    var actual = new Program().evaluateExpressionTree(tree);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction evaluateExpressionTree(tree) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.evaluateExpressionTree = evaluateExpressionTree;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n// and h is the height of the Binary Tree\nfunction evaluateExpressionTree(tree) {\n  if (tree.value >= 0) return tree.value;\n\n  const leftValue = evaluateExpressionTree(tree.left);\n  const rightValue = evaluateExpressionTree(tree.right);\n\n  if (tree.value === -1) return leftValue + rightValue;\n  if (tree.value === -2) return leftValue - rightValue;\n  if (tree.value === -3) return Math.trunc(leftValue / rightValue);\n\n  return leftValue * rightValue;\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.evaluateExpressionTree = evaluateExpressionTree;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(-1);\n  tree.left = new program.BinaryTree(2);\n  tree.right = new program.BinaryTree(-2);\n  tree.right.left = new program.BinaryTree(5);\n  tree.right.right = new program.BinaryTree(1);\n  const expected = 6;\n  const actual = program.evaluateExpressionTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(-1);\n  tree.left = new program.BinaryTree(2);\n  tree.right = new program.BinaryTree(-2);\n  tree.right.left = new program.BinaryTree(5);\n  tree.right.right = new program.BinaryTree(1);\n  const expected = 6;\n  const actual = program.evaluateExpressionTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\nfun evaluateExpressionTree(tree: BinaryTree): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n// and h is the height of the Binary Tree\nfun evaluateExpressionTree(tree: BinaryTree): Int {\n    if (tree.value >= 0) return tree.value\n\n    val leftValue = evaluateExpressionTree(tree.left!!)\n    val rightValue = evaluateExpressionTree(tree.right!!)\n\n    if (tree.value == -1) return leftValue + rightValue\n    if (tree.value == -2) return leftValue - rightValue\n    if (tree.value == -3) return leftValue / rightValue\n\n    return leftValue * rightValue\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.evaluateExpressionTree\nimport com.algoexpert.program.BinaryTree as BinaryTree\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BinaryTree(-1)\n        tree.left = BinaryTree(2)\n        tree.right = BinaryTree(-2)\n        tree.right!!.left = BinaryTree(5)\n        tree.right!!.right = BinaryTree(1)\n        val expected = 6\n        val output = evaluateExpressionTree(tree)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.evaluateExpressionTree\nimport com.algoexpert.program.BinaryTree as BinaryTree\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BinaryTree(-1)\n        tree.left = BinaryTree(2)\n        tree.right = BinaryTree(-2)\n        tree.right!!.left = BinaryTree(5)\n        tree.right!!.right = BinaryTree(1)\n        val expected = 6\n        val output = evaluateExpressionTree(tree)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef evaluateExpressionTree(tree):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\n# O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n# and h is the height of the Binary Tree\ndef evaluateExpressionTree(tree):\n    if tree.value >= 0:\n        return tree.value\n\n    leftValue = evaluateExpressionTree(tree.left)\n    rightValue = evaluateExpressionTree(tree.right)\n\n    if tree.value == -1:\n        return leftValue + rightValue\n    if tree.value == -2:\n        return leftValue - rightValue\n    if tree.value == -3:\n        return int(leftValue / rightValue)\n\n    return leftValue * rightValue\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        tree = program.BinaryTree(-1)\n        tree.left = program.BinaryTree(2)\n        tree.right = program.BinaryTree(-2)\n        tree.right.left = program.BinaryTree(5)\n        tree.right.right = program.BinaryTree(1)\n        expected = 6\n        actual = program.evaluateExpressionTree(tree)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        tree = program.BinaryTree(-1)\n        tree.left = program.BinaryTree(2)\n        tree.right = program.BinaryTree(-2)\n        tree.right.left = program.BinaryTree(5)\n        tree.right.right = program.BinaryTree(1)\n        expected = 6\n        actual = program.evaluateExpressionTree(tree)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "# This is an input struct. Do not edit.\nclass BinaryTree\n    attr_accessor :value\n    attr_accessor :left\n    attr_accessor :right\n\n    def initialize(value)\n        @value = value\n        @left = nil\n        @right = nil\n    end\nend\n\n\nclass Program\n    def evaluateExpressionTree(tree)\n        # Write your code here.\n        return -1\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n    attr_accessor :value\n    attr_accessor :left\n    attr_accessor :right\n\n    def initialize(value)\n        @value = value\n        @left = nil\n        @right = nil\n    end\nend\n\n\nclass Program\n    def evaluateExpressionTree(tree)\n        # Write your code here.\n        return -1\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.evaluateExpressionTree\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.evaluateExpressionTree\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func evaluateExpressionTree(_ tree: BinaryTree) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n  // and h is the height of the Binary Tree\n  func evaluateExpressionTree(_ tree: BinaryTree) -> Int {\n    if tree.value >= 0 {\n      return tree.value\n    }\n\n    let leftValue = evaluateExpressionTree(tree.left!)\n    let rightValue = evaluateExpressionTree(tree.right!)\n\n    if tree.value == -1 {\n      return leftValue + rightValue\n    }\n    if tree.value == -2 {\n      return leftValue - rightValue\n    }\n    if tree.value == -3 {\n      return leftValue / rightValue\n    }\n    return leftValue * rightValue\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      let tree = Program.BinaryTree(value: -1)\n      tree.left = Program.BinaryTree(value: 2)\n      tree.right = Program.BinaryTree(value: -2)\n      tree.right!.left = Program.BinaryTree(value: 5)\n      tree.right!.right = Program.BinaryTree(value: 1)\n      let expected = 6\n      var actual = Program().evaluateExpressionTree(tree)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      let tree = Program.BinaryTree(value: -1)\n      tree.left = Program.BinaryTree(value: 2)\n      tree.right = Program.BinaryTree(value: -2)\n      tree.right!.left = Program.BinaryTree(value: 5)\n      tree.right!.right = Program.BinaryTree(value: 1)\n      let expected = 6\n      var actual = Program().evaluateExpressionTree(tree)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function evaluateExpressionTree(tree: BinaryTree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the Binary Tree,\n// and h is the height of the Binary Tree\nexport function evaluateExpressionTree(tree: BinaryTree): number {\n  if (tree.value >= 0) return tree.value;\n\n  const leftValue = evaluateExpressionTree(tree.left!);\n  const rightValue = evaluateExpressionTree(tree.right!);\n\n  if (tree.value === -1) return leftValue + rightValue;\n  if (tree.value === -2) return leftValue - rightValue;\n  if (tree.value === -3) return Math.trunc(leftValue / rightValue);\n\n  return leftValue * rightValue;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(-1);\n  tree.left = new program.BinaryTree(2);\n  tree.right = new program.BinaryTree(-2);\n  tree.right.left = new program.BinaryTree(5);\n  tree.right.right = new program.BinaryTree(1);\n  const expected = 6;\n  const actual = program.evaluateExpressionTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(-1);\n  tree.left = new program.BinaryTree(2);\n  tree.right = new program.BinaryTree(-2);\n  tree.right.left = new program.BinaryTree(5);\n  tree.right.right = new program.BinaryTree(1);\n  const expected = 6;\n  const actual = program.evaluateExpressionTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "tree",
      "example": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      },
      "schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -2
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "2",
            "value": -2
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "2",
            "value": -3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -4
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": "4",
            "right": "5",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "10",
            "right": "3",
            "value": -3
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "3",
            "left": "4",
            "right": "6",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "3",
            "value": -3
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "3",
            "left": "4",
            "right": "6",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "3",
            "value": -3
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "3",
            "left": "6",
            "right": "4",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -2
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -4
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -4
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -3
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -1
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -2
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -2
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -3
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -3
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -3
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -4
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -4
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -4
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -4
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "9",
            "value": -4
          },
          {
            "id": "2",
            "left": "4",
            "right": "3",
            "value": -1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "4",
            "left": "5",
            "right": "6",
            "value": -1
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "6",
            "left": "7",
            "right": "8",
            "value": -2
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "9",
            "left": "10",
            "right": "11",
            "value": -3
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "11",
            "left": "12",
            "right": "13",
            "value": -2
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 42
          },
          {
            "id": "13",
            "left": "14",
            "right": "15",
            "value": -3
          },
          {
            "id": "14",
            "left": "16",
            "right": "17",
            "value": -4
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "17",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "1"
      }
    }
  ],
  "jsonTests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -2
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "2",
            "value": -2
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "2",
            "value": -3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -4
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": "4",
            "right": "5",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "10",
            "right": "3",
            "value": -3
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "3",
            "left": "4",
            "right": "6",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "3",
            "value": -3
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "3",
            "left": "4",
            "right": "6",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "3",
            "value": -3
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "3",
            "left": "6",
            "right": "4",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -2
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -4
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -4
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -3
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -1
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -2
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -2
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -3
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -3
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -3
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": -4
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": -4
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": -4
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "7",
            "left": "8",
            "right": "9",
            "value": -4
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "9",
            "value": -4
          },
          {
            "id": "2",
            "left": "4",
            "right": "3",
            "value": -1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "4",
            "left": "5",
            "right": "6",
            "value": -1
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "6",
            "left": "7",
            "right": "8",
            "value": -2
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "9",
            "left": "10",
            "right": "11",
            "value": -3
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "11",
            "left": "12",
            "right": "13",
            "value": -2
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 42
          },
          {
            "id": "13",
            "left": "14",
            "right": "15",
            "value": -3
          },
          {
            "id": "14",
            "left": "16",
            "right": "17",
            "value": -4
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "17",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "1"
      }
    }
  ],
  "changelog": []
}