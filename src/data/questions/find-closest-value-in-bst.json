{
  "uid": "find-closest-value-in-bst",
  "testStrategy": "JSON",
  "name": "Find Closest Value In BST",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Binary Search Trees",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 90405,
    "failureCount": 44265
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "228453275",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 948
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a Binary Search Tree (BST) and a target integer\n  value and returns the closest value to that target value contained in the BST.\n</p>\n<p>You can assume that there will only be one closest value.</p>\n<p>\n  Each <span>BST</span> node has an integer <span>value</span>, a\n  <span>left</span> child node, and a <span>right</span> child node. A node is\n  said to be a valid <span>BST</span> node if and only if it satisfies the BST\n  property: its <span>value</span> is strictly greater than the values of every\n  node to its left; its <span>value</span> is less than or equal to the values\n  of every node to its right; and its children nodes are either valid\n  <span>BST</span> nodes themselves or <span>None</span> / <span>null</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> =   10\n       /     \\\n      5      15\n    /   \\   /   \\\n   2     5 13   22\n /           \\\n1            14\n<span class=\"CodeEditor-promptParameter\">target</span> = 12\n</pre>\n<h3>Sample Output</h3>\n<pre>13</pre>\n</div>",
  "hints": [
    "<p>\nTry traversing the BST node by node, all the while keeping track of the node with the value closest to the target value. Calculating the absolute value of the difference between a node's value and the target value should allow you to check if that node is closer than the current closest one.\n</p>\n",
    "\n<p>\nMake use of the BST property to determine what side of any given node has values close to the target value and is therefore worth exploring.\n</p>\n",
    "\n<p>\nWhat are the advantages and disadvantages of solving this problem iteratively as opposed to recursively?\n</p>"
  ],
  "spaceTime": "Average: O(log(n)) time | O(1) space - where n is the number of nodes in the BST\nWorst: O(n) time | O(1) space - where n is the number of nodes in the BST",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": "tree",
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "class BST {\n public:\n  int value;\n  BST* left;\n  BST* right;\n\n  BST(int val);\n  BST& insert(int val);\n};\n\nint findClosestValueInBst(BST* tree, int target) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <float.h>\n\n#include <cmath>\nusing namespace std;\n\nclass BST {\n public:\n  int value;\n  BST* left;\n  BST* right;\n\n  BST(int val);\n  BST& insert(int val);\n};\n\nint findClosestValueInBst(BST* tree, int target);\nint findClosestValueInBstHelper(BST* tree, int target, int closest);\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nint findClosestValueInBst(BST* tree, int target) {\n  return findClosestValueInBstHelper(tree, target, tree->value);\n}\n\nint findClosestValueInBstHelper(BST* tree, int target, int closest) {\n  if (abs(target - closest) > abs(target - tree->value)) {\n    closest = tree->value;\n  }\n  if (target < tree->value && tree->left != nullptr) {\n    return findClosestValueInBstHelper(tree->left, target, closest);\n  } else if (target > tree->value && tree->right != nullptr) {\n    return findClosestValueInBstHelper(tree->right, target, closest);\n  } else {\n    return closest;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <float.h>\n\n#include <cmath>\nusing namespace std;\n\nclass BST {\n public:\n  int value;\n  BST* left;\n  BST* right;\n\n  BST(int val);\n  BST& insert(int val);\n};\n\nint findClosestValueInBst(BST* tree, int target);\nint findClosestValueInBstHelper(BST* tree, int target, int closest);\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nint findClosestValueInBst(BST* tree, int target) {\n  return findClosestValueInBstHelper(tree, target, tree->value);\n}\n\nint findClosestValueInBstHelper(BST* tree, int target, int closest) {\n  BST* currentNode = tree;\n  while (currentNode != nullptr) {\n    if (abs(target - closest) > abs(target - currentNode->value)) {\n      closest = currentNode->value;\n    }\n    if (target < currentNode->value) {\n      currentNode = currentNode->left;\n    } else if (target > currentNode->value) {\n      currentNode = currentNode->right;\n    } else {\n      break;\n    }\n  }\n  return (int)closest;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nBST::BST(int val) {\n  value = val;\n  left = nullptr;\n  right = nullptr;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BST* root = new BST(10);\n      root->left = new BST(5);\n      root->left->left = new BST(2);\n      root->left->left->left = new BST(1);\n      root->left->right = new BST(5);\n      root->right = new BST(15);\n      root->right->left = new BST(13);\n      root->right->left->right = new BST(14);\n      root->right->right = new BST(22);\n      int expected = 13;\n      int actual = findClosestValueInBst(root, 12);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "BST::BST(int val) {\n  value = val;\n  left = nullptr;\n  right = nullptr;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BST* root = new BST(10);\n      root->left = new BST(5);\n      root->left->left = new BST(2);\n      root->left->left->left = new BST(1);\n      root->left->right = new BST(5);\n      root->right = new BST(15);\n      root->right->left = new BST(13);\n      root->right->left->right = new BST(14);\n      root->right->right = new BST(22);\n      int expected = 13;\n      int actual = findClosestValueInBst(root, 12);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int FindClosestValueInBst(BST tree, int target) {\n    // Write your code here.\n    return -1;\n  }\n\n  public class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  public static int FindClosestValueInBst(BST tree, int target) {\n    return FindClosestValueInBst(tree, target, tree.value);\n  }\n\n  public static int FindClosestValueInBst(BST tree, int target, int closest) {\n    if (Math.Abs(target - closest) > Math.Abs(target - tree.value)) {\n      closest = tree.value;\n    }\n    if (target < tree.value && tree.left != null) {\n      return FindClosestValueInBst(tree.left, target, closest);\n    } else if (target > tree.value && tree.right != null) {\n      return FindClosestValueInBst(tree.right, target, closest);\n    } else {\n      return closest;\n    }\n  }\n\n  public class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  public static int FindClosestValueInBst(BST tree, int target) {\n    return FindClosestValueInBst(tree, target, tree.value);\n  }\n\n  public static int FindClosestValueInBst(BST tree, int target, int closest) {\n    BST currentNode = tree;\n    while (currentNode != null) {\n      if (Math.Abs(target - closest) > Math.Abs(target - currentNode.value)) {\n        closest = currentNode.value;\n      }\n      if (target < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (target > currentNode.value) {\n        currentNode = currentNode.right;\n      } else {\n        break;\n      }\n    }\n    return closest;\n  }\n\n  public class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var root = new Program.BST(10);\n    root.left = new Program.BST(5);\n    root.left.left = new Program.BST(2);\n    root.left.left.left = new Program.BST(1);\n    root.left.right = new Program.BST(5);\n    root.right = new Program.BST(15);\n    root.right.left = new Program.BST(13);\n    root.right.left.right = new Program.BST(14);\n    root.right.right = new Program.BST(22);\n\n    var expected = 13;\n    var actual = Program.FindClosestValueInBst(root, 12);\n    Utils.AssertEquals(expected, actual);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var root = new Program.BST(10);\n    root.left = new Program.BST(5);\n    root.left.left = new Program.BST(2);\n    root.left.left.left = new Program.BST(1);\n    root.left.right = new Program.BST(5);\n    root.right = new Program.BST(15);\n    root.right.left = new Program.BST(13);\n    root.right.left.right = new Program.BST(14);\n    root.right.right = new Program.BST(22);\n\n    var expected = 13;\n    var actual = Program.FindClosestValueInBst(root, 12);\n    Utils.AssertEquals(expected, actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\nfunc (tree *BST) FindClosestValue(target int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nfunc (tree *BST) FindClosestValue(target int) int {\n\treturn tree.findClosestValue(target, tree.Value)\n}\n\nfunc (tree *BST) findClosestValue(target, closest int) int {\n\tif absdiff(target, closest) > absdiff(target, tree.Value) {\n\t\tclosest = tree.Value\n\t}\n\tif target < tree.Value && tree.Left != nil {\n\t\treturn tree.Left.findClosestValue(target, closest)\n\t} else if target > tree.Value && tree.Right != nil {\n\t\treturn tree.Right.findClosestValue(target, closest)\n\t}\n\treturn closest\n}\n\nfunc absdiff(a, b int) int {\n\tif a > b {\n\t\treturn a - b\n\t}\n\treturn b - a\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nfunc (tree *BST) FindClosestValue(target int) int {\n\treturn tree.findClosestValue(target, tree.Value)\n}\n\nfunc (tree *BST) findClosestValue(target, closest int) int {\n\tcurrentnode := tree\n\tfor currentnode != nil {\n\t\tif absdiff(target, closest) > absdiff(target, currentnode.Value) {\n\t\t\tclosest = currentnode.Value\n\t\t}\n\t\tif target < currentnode.Value {\n\t\t\tcurrentnode = currentnode.Left\n\t\t} else if target > currentnode.Value {\n\t\t\tcurrentnode = currentnode.Right\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn closest\n}\n\nfunc absdiff(a, b int) int {\n\tif a > b {\n\t\treturn a - b\n\t}\n\treturn b - a\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc NewBST(value int) *BST {\n\treturn &BST{Value: value}\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := NewBST(10)\n\troot.Left = NewBST(5)\n\troot.Left.Left = NewBST(2)\n\troot.Left.Left.Left = NewBST(1)\n\troot.Left.Right = NewBST(5)\n\troot.Right = NewBST(15)\n\troot.Right.Left = NewBST(13)\n\troot.Right.Left.Right = NewBST(14)\n\troot.Right.Right = NewBST(22)\n\n\texpected := 13\n\tactual := root.FindClosestValue(12)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc NewBST(value int) *BST {\n\treturn &BST{Value: value}\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := NewBST(10)\n\troot.Left = NewBST(5)\n\troot.Left.Left = NewBST(2)\n\troot.Left.Left.Left = NewBST(1)\n\troot.Left.Right = NewBST(5)\n\troot.Right = NewBST(15)\n\troot.Right.Left = NewBST(13)\n\troot.Right.Left.Right = NewBST(14)\n\troot.Right.Right = NewBST(22)\n\n\texpected := 13\n\tactual := root.FindClosestValue(12)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int findClosestValueInBst(BST tree, int target) {\n    // Write your code here.\n    return -1;\n  }\n\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  public static int findClosestValueInBst(BST tree, int target) {\n    return findClosestValueInBst(tree, target, tree.value);\n  }\n\n  public static int findClosestValueInBst(BST tree, int target, int closest) {\n    if (Math.abs(target - closest) > Math.abs(target - tree.value)) {\n      closest = tree.value;\n    }\n    if (target < tree.value && tree.left != null) {\n      return findClosestValueInBst(tree.left, target, closest);\n    } else if (target > tree.value && tree.right != null) {\n      return findClosestValueInBst(tree.right, target, closest);\n    } else {\n      return closest;\n    }\n  }\n\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  public static int findClosestValueInBst(BST tree, int target) {\n    return findClosestValueInBst(tree, target, tree.value);\n  }\n\n  public static int findClosestValueInBst(BST tree, int target, int closest) {\n    BST currentNode = tree;\n    while (currentNode != null) {\n      if (Math.abs(target - closest) > Math.abs(target - currentNode.value)) {\n        closest = currentNode.value;\n      }\n      if (target < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (target > currentNode.value) {\n        currentNode = currentNode.right;\n      } else {\n        break;\n      }\n    }\n    return closest;\n  }\n\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var root = new Program.BST(10);\n    root.left = new Program.BST(5);\n    root.left.left = new Program.BST(2);\n    root.left.left.left = new Program.BST(1);\n    root.left.right = new Program.BST(5);\n    root.right = new Program.BST(15);\n    root.right.left = new Program.BST(13);\n    root.right.left.right = new Program.BST(14);\n    root.right.right = new Program.BST(22);\n\n    var expected = 13;\n    var actual = Program.findClosestValueInBst(root, 12);\n    Utils.assertEquals(expected, actual);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    var root = new Program.BST(10);\n    root.left = new Program.BST(5);\n    root.left.left = new Program.BST(2);\n    root.left.left.left = new Program.BST(1);\n    root.left.right = new Program.BST(5);\n    root.right = new Program.BST(15);\n    root.right.left = new Program.BST(13);\n    root.right.left.right = new Program.BST(14);\n    root.right.right = new Program.BST(22);\n\n    var expected = 13;\n    var actual = Program.findClosestValueInBst(root, 12);\n    Utils.assertEquals(expected, actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function findClosestValueInBst(tree, target) {\n  // Write your code here.\n}\n\n// This is the class of the input tree. Do not edit.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// Do not edit the line below.\nexports.findClosestValueInBst = findClosestValueInBst;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nfunction findClosestValueInBst(tree, target) {\n  return findClosestValueInBstHelper(tree, target, tree.value);\n}\n\nfunction findClosestValueInBstHelper(tree, target, closest) {\n  if (tree === null) return closest;\n  if (Math.abs(target - closest) > Math.abs(target - tree.value)) {\n    closest = tree.value;\n  }\n  if (target < tree.value) {\n    return findClosestValueInBstHelper(tree.left, target, closest);\n  } else if (target > tree.value) {\n    return findClosestValueInBstHelper(tree.right, target, closest);\n  } else {\n    return closest;\n  }\n}\n\n// This is the class of the input tree.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexports.findClosestValueInBst = findClosestValueInBst;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nfunction findClosestValueInBst(tree, target) {\n  return findClosestValueInBstHelper(tree, target, tree.value);\n}\n\nfunction findClosestValueInBstHelper(tree, target, closest) {\n  let currentNode = tree;\n  while (currentNode !== null) {\n    if (Math.abs(target - closest) > Math.abs(target - currentNode.value)) {\n      closest = currentNode.value;\n    }\n    if (target < currentNode.value) {\n      currentNode = currentNode.left;\n    } else if (target > currentNode.value) {\n      currentNode = currentNode.right;\n    } else {\n      break;\n    }\n  }\n  return closest;\n}\n\n// This is the class of the input tree.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexports.findClosestValueInBst = findClosestValueInBst;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n  const expected = 13;\n  const actual = program.findClosestValueInBst(root, 12);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n  const expected = 13;\n  const actual = program.findClosestValueInBst(root, 12);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nopen class BST(value: Int) {\n    var value = value\n    var left: BST? = null\n    var right: BST? = null\n}\n\nfun findClosestValueInBst(tree: BST, target: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\n\nopen class BST(value: Int) {\n    var value = value\n    var left: BST? = null\n    var right: BST? = null\n}\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nfun findClosestValueInBst(tree: BST, target: Int): Int {\n    return findClosestValueInBstHelper(tree, target, tree.value)\n}\n\nfun findClosestValueInBstHelper(tree: BST, target: Int, closest: Int): Int {\n    var newClosest = closest\n\n    if (abs(target - closest) > abs(target - tree.value)) {\n        newClosest = tree.value\n    }\n    if (target < tree.value && tree.left != null) {\n        return findClosestValueInBstHelper(tree.left!!, target, newClosest)\n    } else if (target > tree.value && tree.right != null) {\n        return findClosestValueInBstHelper(tree.right!!, target, newClosest)\n    } else {\n        return newClosest\n    }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\n\nopen class BST(value: Int) {\n    var value = value\n    var left: BST? = null\n    var right: BST? = null\n}\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nfun findClosestValueInBst(tree: BST, target: Int): Int {\n    return findClosestValueInBstHelper(tree, target, tree.value)\n}\n\nfun findClosestValueInBstHelper(tree: BST?, target: Int, closest: Int): Int {\n    var newClosest = closest\n    var currentNode = tree\n    while (currentNode != null) {\n        if (abs(target - newClosest) > abs(target - currentNode.value)) {\n            newClosest = currentNode.value\n        }\n        if (target < currentNode.value) {\n            currentNode = currentNode.left\n        } else if (target > currentNode.value) {\n            currentNode = currentNode.right\n        } else {\n            break\n        }\n    }\n    return newClosest\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.BST as BST\nimport com.algoexpert.program.findClosestValueInBst as findClosestValueInBst\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BST(10)\n        tree.left = BST(5)\n        tree.left!!.left = BST(2)\n        tree.left!!.left!!.left = BST(1)\n        tree.left!!.right = BST(5)\n        tree.right = BST(15)\n        tree.right!!.left = BST(13)\n        tree.right!!.left!!.right = BST(14)\n        tree.right!!.right = BST(22)\n\n        val result = findClosestValueInBst(tree, 12)\n\n        assert(result == 13)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.BST as BST\nimport com.algoexpert.program.findClosestValueInBst as findClosestValueInBst\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BST(10)\n        tree.left = BST(5)\n        tree.left!!.left = BST(2)\n        tree.left!!.left!!.left = BST(1)\n        tree.left!!.right = BST(5)\n        tree.right = BST(15)\n        tree.right!!.left = BST(13)\n        tree.right!!.left!!.right = BST(14)\n        tree.right!!.right = BST(22)\n\n        val result = findClosestValueInBst(tree, 12)\n\n        assert(result == 13)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def findClosestValueInBst(tree, target):\n    # Write your code here.\n    pass\n\n\n# This is the class of the input tree. Do not edit.\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Average: O(log(n)) time | O(log(n)) space\n# Worst: O(n) time | O(n) space\ndef findClosestValueInBst(tree, target):\n    return findClosestValueInBstHelper(tree, target, tree.value)\n\n\ndef findClosestValueInBstHelper(tree, target, closest):\n    if tree is None:\n        return closest\n    if abs(target - closest) > abs(target - tree.value):\n        closest = tree.value\n    if target < tree.value:\n        return findClosestValueInBstHelper(tree.left, target, closest)\n    elif target > tree.value:\n        return findClosestValueInBstHelper(tree.right, target, closest)\n    else:\n        return closest\n\n\n# This is the class of the input tree.\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Average: O(log(n)) time | O(1) space\n# Worst: O(n) time | O(1) space\ndef findClosestValueInBst(tree, target):\n    return findClosestValueInBstHelper(tree, target, tree.value)\n\n\ndef findClosestValueInBstHelper(tree, target, closest):\n    currentNode = tree\n    while currentNode is not None:\n        if abs(target - closest) > abs(target - currentNode.value):\n            closest = currentNode.value\n        if target < currentNode.value:\n            currentNode = currentNode.left\n        elif target > currentNode.value:\n            currentNode = currentNode.right\n        else:\n            break\n    return closest\n\n\n# This is the class of the input tree.\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = BST(10)\n        root.left = BST(5)\n        root.left.left = BST(2)\n        root.left.left.left = BST(1)\n        root.left.right = BST(5)\n        root.right = BST(15)\n        root.right.left = BST(13)\n        root.right.left.right = BST(14)\n        root.right.right = BST(22)\n        expected = 13\n        actual = program.findClosestValueInBst(root, 12)\n        self.assertEqual(expected, actual)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = BST(10)\n        root.left = BST(5)\n        root.left.left = BST(2)\n        root.left.left.left = BST(1)\n        root.left.right = BST(5)\n        root.right = BST(15)\n        root.right.left = BST(13)\n        root.right.left.right = BST(14)\n        root.right.right = BST(22)\n        expected = 13\n        actual = program.findClosestValueInBst(root, 12)\n        self.assertEqual(expected, actual)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def findClosestValueInBst(tree, target)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def findClosestValueInBst(tree, target)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def findClosestValueInBst(tree, target)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.findClosestValueInBst\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.findClosestValueInBst\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  class BST {\n    var value: Int\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func findClosestValueInBST(tree: BST?, target: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  class BST {\n    var value: Int\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  func findClosestValueInBST(tree: BST?, target: Int) -> Int {\n    var closest = tree!.value\n    return findClosestValueInBSTHelper(tree: tree,\n                                       target: target, closest: &closest)\n  }\n\n  func findClosestValueInBSTHelper(tree: BST?,\n                                   target: Int, closest: inout Int) -> Int\n  {\n    if tree === nil {\n      return closest\n    }\n\n    if let tree = tree {\n      let closestDifference = target - closest\n      let currentDifference = target - tree.value\n\n      if closestDifference.magnitude > currentDifference.magnitude {\n        closest = tree.value\n      }\n    }\n\n    if let tree = tree, target < tree.value {\n      if let left = tree.left {\n        return findClosestValueInBSTHelper(\n          tree: left, target: target, closest: &closest\n        )\n      } else {\n        return closest\n      }\n    } else if let tree = tree, target > tree.value {\n      if let right = tree.right {\n        return findClosestValueInBSTHelper(\n          tree: right, target: target, closest: &closest\n        )\n      } else {\n        return closest\n      }\n    } else {\n      return closest\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  class BST {\n    var value: Int\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  func findClosestValueInBST(tree: BST?, target: Int) -> Int {\n    var closest = tree!.value\n    return findClosestValueInBSTHelper(tree: tree, target: target, closest: &closest)\n  }\n\n  func findClosestValueInBSTHelper(tree: BST?, target: Int,\n                                   closest: inout Int) -> Int\n  {\n    var currentNode = tree\n\n    while currentNode !== nil {\n      if let node = currentNode {\n        let closestDifference = target - closest\n        let currentDifference = target - node.value\n\n        if closestDifference.magnitude > currentDifference.magnitude {\n          closest = node.value\n        }\n      }\n\n      if let node = currentNode, target < node.value {\n        currentNode = node.left\n      } else if let node = currentNode, target > node.value {\n        currentNode = node.right\n      } else {\n        break\n      }\n    }\n\n    return closest\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let root = Program.BST(value: 10)\n      root.left = Program.BST(value: 5)\n      root.left!.left = Program.BST(value: 2)\n      root.left!.left!.left = Program.BST(value: 1)\n      root.left!.right = Program.BST(value: 5)\n      root.right = Program.BST(value: 15)\n      root.right!.left = Program.BST(value: 13)\n      root.right!.left!.right = Program.BST(value: 14)\n      root.right!.right = Program.BST(value: 22)\n      let expected = 13\n      let actual = program.findClosestValueInBST(tree: root, target: 12)\n\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let root = Program.BST(value: 10)\n      root.left = Program.BST(value: 5)\n      root.left!.left = Program.BST(value: 2)\n      root.left!.left!.left = Program.BST(value: 1)\n      root.left!.right = Program.BST(value: 5)\n      root.right = Program.BST(value: 15)\n      root.right!.left = Program.BST(value: 13)\n      root.right!.left!.right = Program.BST(value: 14)\n      root.right!.right = Program.BST(value: 22)\n      let expected = 13\n      let actual = program.findClosestValueInBST(tree: root, target: 12)\n\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "class BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function findClosestValueInBst(tree: BST, target: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nexport function findClosestValueInBst(tree: BST, target: number) {\n  return findClosestValueInBstHelper(tree, target, tree.value);\n}\n\nfunction findClosestValueInBstHelper(tree: BST | null, target: number, closest: number): number {\n  if (tree === null) return closest;\n  if (Math.abs(target - closest) > Math.abs(target - tree.value)) {\n    closest = tree.value;\n  }\n  if (target < tree.value) {\n    return findClosestValueInBstHelper(tree.left, target, closest);\n  } else if (target > tree.value) {\n    return findClosestValueInBstHelper(tree.right, target, closest);\n  } else {\n    return closest;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nexport function findClosestValueInBst(tree: BST, target: number) {\n  return findClosestValueInBstHelper(tree, target, tree.value);\n}\n\nfunction findClosestValueInBstHelper(tree: BST | null, target: number, closest: number) {\n  let currentNode = tree;\n  while (currentNode !== null) {\n    if (Math.abs(target - closest) > Math.abs(target - currentNode.value)) {\n      closest = currentNode.value;\n    }\n    if (target < currentNode.value) {\n      currentNode = currentNode.left;\n    } else if (target > currentNode.value) {\n      currentNode = currentNode.right;\n    } else {\n      break;\n    }\n  }\n  return closest;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n  const expected = 13;\n  const actual = program.findClosestValueInBst(root, 12);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n  const expected = 13;\n  const actual = program.findClosestValueInBst(root, 12);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "tree",
      "example": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      },
      "schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    },
    {
      "name": "target",
      "example": 12,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "target": 12,
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "target": 100,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 208,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 4500,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 4501,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": -70,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 2000,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 6,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 30000,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": -1,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 29751,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 29749,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    }
  ],
  "jsonTests": [
    {
      "target": 12,
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "target": 100,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 208,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 4500,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 4501,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": -70,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 2000,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 6,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 30000,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": -1,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 29751,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    },
    {
      "target": 29749,
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": "1001",
            "right": null,
            "value": 55000
          },
          {
            "id": "1001",
            "left": null,
            "right": "4500",
            "value": 1001
          },
          {
            "id": "4500",
            "left": null,
            "right": null,
            "value": 4500
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "57",
            "value": 22
          },
          {
            "id": "57",
            "left": null,
            "right": "60",
            "value": 57
          },
          {
            "id": "60",
            "left": null,
            "right": null,
            "value": 60
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": "-51",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-51",
            "left": "-403",
            "right": null,
            "value": -51
          },
          {
            "id": "-403",
            "left": null,
            "right": null,
            "value": -403
          }
        ],
        "root": "100"
      }
    }
  ],
  "changelog": []
}