{
  "uid": "knapsack-problem",
  "testStrategy": "JSON",
  "name": "Knapsack Problem",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 12529,
    "failureCount": 4989
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225692965",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1929
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given an array of arrays where each subarray holds two integer values\n  and represents an item; the first integer is the item's value, and the second\n  integer is the item's weight. You're also given an integer representing the\n  maximum capacity of a knapsack that you have.\n</p>\n<p>\n  Your goal is to fit items in your knapsack without having the sum of their\n  weights exceed the knapsack's capacity, all the while maximizing their\n  combined value. Note that you only have one of each item at your disposal.\n</p>\n<p>\n  Write a function that returns the maximized combined value of the items that\n  you should pick as well as an array of the indices of each item picked.\n</p>\n<p>\n  If there are multiple combinations of items that maximize the total value in\n  the knapsack, your function can return any of them.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">items</span> = [[1, 2], [4, 3], [5, 6], [6, 7]]\n<span class=\"CodeEditor-promptParameter\">capacity</span> = 10\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[10, [1, 3]] <span class=\"CodeEditor-promptComment\"></span>// items [4, 3] and [6, 7]\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building a two-dimensional array of the maximum values that knapsacks of all capacities between 0 and c inclusive could hold, given one, two, three, etc., items. Let columns represent capacities and rows represent items.\n</p>\n",
    "\n<p>\nBuild up the array mentioned in Hint #1 one row at a time. In other words, find the maximum values that knapsacks of all capacities between 0 and c can hold with only one item, then with two, etc., until you use all items. Find a formula that relates the maximum value at any given point to previous values.\n</p>\n",
    "\n<p>\nBacktrack your way through the two-dimensional array mentioned in Hint #1 to find which items are in your knapsack. Start at the final index in the array and check whether or not the value stored at that index is equal to the value located one row above. If it isn't, then the item represented by the current row is in the knapsack.\n</p>"
  ],
  "spaceTime": "O(nc) time | O(nc) space - where n is the number of items and c is the capacity",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> knapsackProblem(vector<vector<int>> items, int capacity) {\n  // Write your code here.\n  // Replace return below.\n  return {\n    {10},    // total value\n    {1, 2},  // item indices\n  };\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> getKnapsackItems(\n  vector<vector<int>> knapsackValues, vector<vector<int>> items, int weight\n);\n\n// O(nc) time | O(nc) space\nvector<vector<int>> knapsackProblem(vector<vector<int>> items, int capacity) {\n  vector<vector<int>> knapsackValues(\n    items.size() + 1, vector<int>(capacity + 1, 0)\n  );\n  for (int i = 1; i < items.size() + 1; i++) {\n    int currentWeight = items[i - 1][1];\n    int currentValue = items[i - 1][0];\n    for (int c = 0; c < capacity + 1; c++) {\n      if (currentWeight > c) {\n        knapsackValues[i][c] = knapsackValues[i - 1][c];\n      } else {\n        knapsackValues[i][c] = max(\n          knapsackValues[i - 1][c],\n          knapsackValues[i - 1][c - currentWeight] + currentValue\n        );\n      }\n    }\n  }\n  return getKnapsackItems(\n    knapsackValues, items, knapsackValues[items.size()][capacity]\n  );\n}\n\nvector<vector<int>> getKnapsackItems(\n  vector<vector<int>> knapsackValues, vector<vector<int>> items, int weight\n) {\n  vector<vector<int>> solution = {{}, {}};\n  int i = knapsackValues.size() - 1;\n  int c = knapsackValues[0].size() - 1;\n  while (i > 0) {\n    if (knapsackValues[i][c] == knapsackValues[i - 1][c]) {\n      i--;\n    } else {\n      solution[1].insert(solution[1].begin(), i - 1);\n      c -= items[i - 1][1];\n      i--;\n    }\n    if (c == 0) {\n      break;\n    }\n  }\n  solution[0].push_back(weight);\n  return solution;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> vector1{{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n      vector<vector<int>> vector1S{{10}, {1, 3}};\n      assert(knapsackProblem(vector1, 10) == vector1S);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> vector1{{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n      vector<vector<int>> vector1S{{10}, {1, 3}};\n      assert(knapsackProblem(vector1, 10) == vector1S);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<List<int> > KnapsackProblem(int[,] items, int capacity) {\n    // Write your code here.\n    // Replace the code below.\n    List<int> totalValue = new List<int> { 10 };\n    List<int> finalItems = new List<int> { 1, 2 };\n    var result = new List<List<int> >();\n    result.Add(totalValue);\n    result.Add(finalItems);\n    return result;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(nc) time | O(nc) space\n  public static List<List<int> > KnapsackProblem(int[,] items, int capacity) {\n    int[,] knapsackValues = new int[items.GetLength(0) + 1, capacity + 1];\n    for (int i = 1; i < items.GetLength(0) + 1; i++) {\n      int currentWeight = items[i - 1, 1];\n      int currentValue = items[i - 1, 0];\n      for (int c = 0; c < capacity + 1; c++) {\n        if (currentWeight > c) {\n          knapsackValues[i, c] = knapsackValues[i - 1, c];\n        } else {\n          knapsackValues[i, c] = Math.Max(\n            knapsackValues[i - 1, c],\n            knapsackValues[i - 1, c - currentWeight] + currentValue\n          );\n        }\n      }\n    }\n    return getKnapsackItems(\n      knapsackValues, items, knapsackValues[items.GetLength(0), capacity]\n    );\n  }\n\n  public static List<List<int> > getKnapsackItems(\n    int[,] knapsackValues, int[,] items, int weight\n  ) {\n    List<List<int> > sequence = new List<List<int> >();\n    List<int> totalWeight = new List<int>();\n    totalWeight.Add(weight);\n    sequence.Add(totalWeight);\n    sequence.Add(new List<int>());\n    int i = knapsackValues.GetLength(0) - 1;\n    int c = knapsackValues.GetLength(1) - 1;\n    while (i > 0) {\n      if (knapsackValues[i, c] == knapsackValues[i - 1, c]) {\n        i--;\n      } else {\n        sequence[1].Insert(0, i - 1);\n        c -= items[i - 1, 1];\n        i--;\n      }\n      if (c == 0) {\n        break;\n      }\n    }\n    return sequence;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[,] input = { { 1, 2 }, { 4, 3 }, { 5, 6 }, { 6, 7 } };\n    Tuple<int, int[]> expected = Tuple.Create(10, new int[] { 1, 3 });\n    Utils.AssertTrue(compare(Program.KnapsackProblem(input, 10), expected));\n  }\n\n  private static bool compare(List<List<int> > arr1, Tuple<int, int[]> arr2) {\n    if (arr1[0][0] != arr2.Item1) {\n      return false;\n    }\n    if (arr1[1].Count != arr2.Item2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1[1].Count; i++) {\n      if (arr1[1][i] != arr2.Item2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "using System;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[,] input = { { 1, 2 }, { 4, 3 }, { 5, 6 }, { 6, 7 } };\n    Tuple<int, int[]> expected = Tuple.Create(10, new int[] { 1, 3 });\n    Utils.AssertTrue(compare(Program.KnapsackProblem(input, 10), expected));\n  }\n\n  private static bool compare(List<List<int> > arr1, Tuple<int, int[]> arr2) {\n    if (arr1[0][0] != arr2.Item1) {\n      return false;\n    }\n    if (arr1[1].Count != arr2.Item2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1[1].Count; i++) {\n      if (arr1[1][i] != arr2.Item2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc KnapsackProblem(items [][]int, capacity int) []interface{} {\n\t// Write your code here.\n\t// Replace return below.\n\treturn []interface{}{\n\t\t10,          // total value\n\t\t[]int{1, 2}, // item indices\n\t}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nfunc KnapsackProblem(items [][]int, capacity int) []interface{} {\n\tvalues := make([][]int, len(items)+1)\n\tfor i := range values {\n\t\tvalues[i] = make([]int, capacity+1)\n\t}\n\tfor i := 1; i < len(items)+1; i++ {\n\t\tcurrentValue := items[i-1][0]\n\t\tcurrentWeight := items[i-1][1]\n\t\tfor c := 0; c < capacity+1; c++ {\n\t\t\tif currentWeight > c {\n\t\t\t\tvalues[i][c] = values[i-1][c]\n\t\t\t} else {\n\t\t\t\tvalues[i][c] = max(values[i-1][c], values[i-1][c-currentWeight]+currentValue)\n\t\t\t}\n\t\t}\n\t}\n\n\tvalue := values[len(items)][capacity]\n\tsequence := getKnapsackItems(values, items)\n\treturn []interface{}{value, sequence}\n}\n\nfunc getKnapsackItems(values [][]int, items [][]int) []int {\n\tsequence := []int{}\n\ti, c := len(values)-1, len(values[0])-1\n\tfor i > 0 {\n\t\tif values[i][c] == values[i-1][c] {\n\t\t\ti--\n\t\t} else {\n\t\t\tsequence = append(sequence, i-1)\n\t\t\tc -= items[i-1][1]\n\t\t\ti--\n\t\t}\n\t\tif c == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\treverse(sequence)\n\treturn sequence\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i < j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n\nfunc max(arg int, rest ...int) int {\n\tcurr := arg\n\tfor _, num := range rest {\n\t\tif curr < num {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []interface{}{10, []int{1, 3}}\n\toutput := KnapsackProblem([][]int{{1, 2}, {4, 3}, {5, 6}, {6, 7}}, 10)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []interface{}{10, []int{1, 3}}\n\toutput := KnapsackProblem([][]int{{1, 2}, {4, 3}, {5, 6}, {6, 7}}, 10)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<List<Integer>> knapsackProblem(\n    int[][] items, int capacity\n  ) {\n    // Write your code here.\n    // Replace the code below.\n    List<Integer> totalValue = Arrays.asList(10);\n    List<Integer> finalItems = Arrays.asList(1, 2);\n    var result = new ArrayList<List<Integer>>();\n    result.add(totalValue);\n    result.add(finalItems);\n    return result;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nc) time | O(nc) space\n  public static List<List<Integer>> knapsackProblem(\n    int[][] items, int capacity\n  ) {\n    int[][] knapsackValues = new int[items.length + 1][capacity + 1];\n    for (int i = 1; i < items.length + 1; i++) {\n      int currentWeight = items[i - 1][1];\n      int currentValue = items[i - 1][0];\n      for (int c = 0; c < capacity + 1; c++) {\n        if (currentWeight > c) {\n          knapsackValues[i][c] = knapsackValues[i - 1][c];\n        } else {\n          knapsackValues[i][c] = Math.max(\n            knapsackValues[i - 1][c],\n            knapsackValues[i - 1][c - currentWeight] + currentValue\n          );\n        }\n      }\n    }\n    return getKnapsackItems(\n      knapsackValues, items, knapsackValues[items.length][capacity]\n    );\n  }\n\n  public static List<List<Integer>> getKnapsackItems(\n    int[][] knapsackValues, int[][] items, int weight\n  ) {\n    List<List<Integer>> sequence = new ArrayList<List<Integer>>();\n    List<Integer> totalWeight = new ArrayList<Integer>();\n    totalWeight.add(weight);\n    sequence.add(totalWeight);\n    sequence.add(new ArrayList<Integer>());\n    int i = knapsackValues.length - 1;\n    int c = knapsackValues[0].length - 1;\n    while (i > 0) {\n      if (knapsackValues[i][c] == knapsackValues[i - 1][c]) {\n        i--;\n      } else {\n        sequence.get(1).add(0, i - 1);\n        c -= items[i - 1][1];\n        i--;\n      }\n      if (c == 0) {\n        break;\n      }\n    }\n    return sequence;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] input = {{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n    int[][] expected = {{10}, {1, 3}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 10), expected));\n  }\n\n  private static boolean compare(List<List<Integer>> arr1, int[][] arr2) {\n    if (arr1.get(0).get(0) != arr2[0][0]) {\n      return false;\n    }\n    if (arr1.get(1).size() != arr2[1].length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.get(1).size(); i++) {\n      if (arr1.get(1).get(i) != arr2[1][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] input = {{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n    int[][] expected = {{10}, {1, 3}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 10), expected));\n  }\n\n  private static boolean compare(List<List<Integer>> arr1, int[][] arr2) {\n    if (arr1.get(0).get(0) != arr2[0][0]) {\n      return false;\n    }\n    if (arr1.get(1).size() != arr2[1].length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.get(1).size(); i++) {\n      if (arr1.get(1).get(i) != arr2[1][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function knapsackProblem(items, capacity) {\n  // Write your code here.\n  // Replace return below.\n  return [\n    10, // total value\n    [1, 2], // item indices\n  ];\n}\n\n// Do not edit the line below.\nexports.knapsackProblem = knapsackProblem;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nc) time | O(nc) space\nfunction knapsackProblem(items, capacity) {\n  const knapsackValues = [];\n  for (let i = 0; i < items.length + 1; i++) {\n    const row = new Array(capacity + 1).fill(0);\n    knapsackValues.push(row);\n  }\n  for (let i = 1; i < items.length + 1; i++) {\n    const currentWeight = items[i - 1][1];\n    const currentValue = items[i - 1][0];\n    for (let c = 0; c < capacity + 1; c++) {\n      if (currentWeight > c) {\n        knapsackValues[i][c] = knapsackValues[i - 1][c];\n      } else {\n        knapsackValues[i][c] = Math.max(\n          knapsackValues[i - 1][c],\n          knapsackValues[i - 1][c - currentWeight] + currentValue,\n        );\n      }\n    }\n  }\n  return [knapsackValues[items.length][capacity], getKnapsackItems(knapsackValues, items)];\n}\n\nfunction getKnapsackItems(knapsackValues, items) {\n  const sequence = [];\n  let i = knapsackValues.length - 1;\n  let c = knapsackValues[0].length - 1;\n  while (i > 0) {\n    if (knapsackValues[i][c] === knapsackValues[i - 1][c]) {\n      i -= 1;\n    } else {\n      sequence.unshift(i - 1);\n      c -= items[i - 1][1];\n      i -= 1;\n    }\n    if (c === 0) break;\n  }\n  return sequence;\n}\n\nexports.knapsackProblem = knapsackProblem;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun knapsackProblem(items: List<List<Int>>, capacity: Int): Pair<Int, List<Int>> {\n    // Write your code here.\n    return Pair(-1, listOf())\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(nc) time | O(nc) space\nfun knapsackProblem(items: List<List<Int>>, capacity: Int): Pair<Int, List<Int>> {\n    val knapsackValues = List(items.size + 1) { MutableList(capacity + 1) { 0 } }\n    for (i in 1 until items.size + 1) {\n        val currentWeight = items[i - 1][1]\n        val currentValue = items[i - 1][0]\n        for (c in 0 until capacity + 1) {\n            if (currentWeight > c) {\n                knapsackValues[i][c] = knapsackValues[i - 1][c]\n            } else {\n                val potentialMax = knapsackValues[i - 1][c - currentWeight] + currentValue\n                knapsackValues[i][c] = max(knapsackValues[i - 1][c], potentialMax)\n            }\n        }\n    }\n    return getKnapsackItems(knapsackValues, items, knapsackValues[items.size][capacity])\n}\n\nfun getKnapsackItems(knapsackValues: List<MutableList<Int>>, items: List<List<Int>>, weight: Int): Pair<Int, List<Int>> {\n    val sequence = mutableListOf<Int>()\n    val pair = Pair(weight, sequence)\n    var i = knapsackValues.size - 1\n    var c = knapsackValues[0].size - 1\n    while (i > 0) {\n        if (knapsackValues[i][c] == knapsackValues[i - 1][c]) {\n            i--\n        } else {\n            sequence.add(0, i - 1)\n            c -= items[i - 1][1]\n            i--\n        }\n        if (c == 0) {\n            break\n        }\n    }\n    return pair\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.knapsackProblem\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(\n            listOf(1, 2),\n            listOf(4, 3),\n            listOf(5, 6),\n            listOf(6, 7),\n        )\n        val expected = Pair(10, listOf(1, 3))\n        val output = knapsackProblem(input, 10)\n        assert(expected.equals(output))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.knapsackProblem\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(\n            listOf(1, 2),\n            listOf(4, 3),\n            listOf(5, 6),\n            listOf(6, 7),\n        )\n        val expected = Pair(10, listOf(1, 3))\n        val output = knapsackProblem(input, 10)\n        assert(expected.equals(output))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def knapsackProblem(items, capacity):\n    # Write your code here.\n    # return [\n    #   10, // total value\n    #   [1, 2], // item indices\n    # ]\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nc) time | O(nc) space\ndef knapsackProblem(items, capacity):\n    knapsackValues = [[0 for x in range(0, capacity + 1)] for y in range(0, len(items) + 1)]\n    for i in range(1, len(items) + 1):\n        currentWeight = items[i - 1][1]\n        currentValue = items[i - 1][0]\n        for c in range(0, capacity + 1):\n            if currentWeight > c:\n                knapsackValues[i][c] = knapsackValues[i - 1][c]\n            else:\n                knapsackValues[i][c] = max(\n                    knapsackValues[i - 1][c],\n                    knapsackValues[i - 1][c - currentWeight] + currentValue,\n                )\n    return [knapsackValues[-1][-1], getKnapsackItems(knapsackValues, items)]\n\n\ndef getKnapsackItems(knapsackValues, items):\n    sequence = []\n    i = len(knapsackValues) - 1\n    c = len(knapsackValues[0]) - 1\n    while i > 0:\n        if knapsackValues[i][c] == knapsackValues[i - 1][c]:\n            i -= 1\n        else:\n            sequence.append(i - 1)\n            c -= items[i - 1][1]\n            i -= 1\n        if c == 0:\n            break\n    return list(reversed(sequence))\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10), [10, [1, 3]]\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10), [10, [1, 3]]\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def knapsackProblem(items, capacity)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def knapsackProblem(items, capacity)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.knapsackProblem\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.knapsackProblem\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func knapsackProblem(_ items: [[Int]], _ capacity: Int) -> (Int, [Int]) {\n    // Write your code here.\n    // Replace the return blow.\n    return (\n      10, // total value\n      [1, 2] // item indices\n    )\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nc) time | O(nc) space\n  func knapsackProblem(_ items: [[Int]], _ capacity: Int) -> (Int, [Int]) {\n    var knapsackValues = [[Int]]()\n\n    for _ in 0 ..< items.count + 1 {\n      let row = Array(repeating: 0, count: capacity + 1)\n      knapsackValues.append(row)\n    }\n\n    for currentItemIndex in 1 ..< items.count + 1 {\n      let currentValue = items[currentItemIndex - 1][0]\n      let currentWeight = items[currentItemIndex - 1][1]\n\n      for currentCapacity in 0 ..< capacity + 1 {\n        if currentWeight <= currentCapacity {\n          knapsackValues[currentItemIndex][currentCapacity] = max(knapsackValues[currentItemIndex - 1][currentCapacity], knapsackValues[currentItemIndex - 1][currentCapacity - currentWeight] + currentValue)\n        } else {\n          knapsackValues[currentItemIndex][currentCapacity] = knapsackValues[currentItemIndex - 1][currentCapacity]\n        }\n      }\n    }\n\n    return (knapsackValues[items.count][capacity], getKnapsackItems(items, knapsackValues))\n  }\n\n  func getKnapsackItems(_ items: [[Int]], _ knapsackValues: [[Int]]) -> [Int] {\n    var sequence = [Int]()\n\n    var currentItemIndex = knapsackValues.count - 1\n    var currentCapacity = knapsackValues[0].count - 1\n\n    while currentItemIndex > 0 {\n      if knapsackValues[currentItemIndex][currentCapacity] == knapsackValues[currentItemIndex - 1][currentCapacity] {\n        currentItemIndex -= 1\n      } else {\n        sequence.insert(currentItemIndex - 1, at: 0)\n\n        currentCapacity -= items[currentItemIndex - 1][1]\n        currentItemIndex -= 1\n      }\n\n      if currentCapacity == 0 {\n        break\n      }\n    }\n\n    return sequence\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws in\n      let expected = (10, [1, 3])\n      let output = program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10)\n      try assert(expected == output)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws in\n      let expected = (10, [1, 3])\n      let output = program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10)\n      try assert(expected == output)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function knapsackProblem(items: [number, number][], capacity: number): [number, number[]] {\n  // Write your code here.\n  // Replace return below.\n  return [\n    10, // total value\n    [1, 2], // item indices\n  ];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nc) time | O(nc) space\nexport function knapsackProblem(items: [number, number][], capacity: number): [number, number[]] {\n  const knapsackValues: number[][] = [];\n  for (let i = 0; i < items.length + 1; i++) {\n    const row = new Array(capacity + 1).fill(0);\n    knapsackValues.push(row);\n  }\n  for (let i = 1; i < items.length + 1; i++) {\n    const currentWeight = items[i - 1][1];\n    const currentValue = items[i - 1][0];\n    for (let c = 0; c < capacity + 1; c++) {\n      if (currentWeight > c) {\n        knapsackValues[i][c] = knapsackValues[i - 1][c];\n      } else {\n        knapsackValues[i][c] = Math.max(\n          knapsackValues[i - 1][c],\n          knapsackValues[i - 1][c - currentWeight] + currentValue,\n        );\n      }\n    }\n  }\n  return [knapsackValues[items.length][capacity], getKnapsackItems(knapsackValues, items)];\n}\n\nfunction getKnapsackItems(knapsackValues: number[][], items: [number, number][]) {\n  const sequence: number[] = [];\n  let i = knapsackValues.length - 1;\n  let c = knapsackValues[0].length - 1;\n  while (i > 0) {\n    if (knapsackValues[i][c] === knapsackValues[i - 1][c]) {\n      i -= 1;\n    } else {\n      sequence.unshift(i - 1);\n      c -= items[i - 1][1];\n      i -= 1;\n    }\n    if (c === 0) break;\n  }\n  return sequence;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "items",
      "example": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          7
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "type": "array"
      }
    },
    {
      "name": "capacity",
      "example": 10,
      "schema": {
        "minimum": 0,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "capacity": 10,
      "items": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          7
        ]
      ]
    },
    {
      "capacity": 11,
      "items": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          9
        ]
      ]
    },
    {
      "capacity": 200,
      "items": [
        [
          465,
          100
        ],
        [
          400,
          85
        ],
        [
          255,
          55
        ],
        [
          350,
          45
        ],
        [
          650,
          130
        ],
        [
          1000,
          190
        ],
        [
          455,
          100
        ],
        [
          100,
          25
        ],
        [
          1200,
          190
        ],
        [
          320,
          65
        ],
        [
          750,
          100
        ],
        [
          50,
          45
        ],
        [
          550,
          65
        ],
        [
          100,
          50
        ],
        [
          600,
          70
        ],
        [
          240,
          40
        ]
      ]
    },
    {
      "capacity": 200,
      "items": [
        [
          465,
          100
        ],
        [
          400,
          85
        ],
        [
          255,
          55
        ],
        [
          350,
          45
        ],
        [
          650,
          130
        ],
        [
          1000,
          190
        ],
        [
          455,
          100
        ],
        [
          100,
          25
        ],
        [
          1200,
          190
        ],
        [
          320,
          65
        ],
        [
          750,
          100
        ],
        [
          50,
          45
        ],
        [
          550,
          65
        ],
        [
          100,
          50
        ],
        [
          600,
          70
        ],
        [
          255,
          40
        ]
      ]
    },
    {
      "capacity": 100,
      "items": [
        [
          2,
          1
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          100,
          100
        ]
      ]
    },
    {
      "capacity": 100,
      "items": [
        [
          1,
          2
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          99,
          100
        ]
      ]
    },
    {
      "capacity": 0,
      "items": [
        [
          1,
          2
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          100,
          100
        ]
      ]
    }
  ],
  "jsonTests": [
    {
      "capacity": 10,
      "items": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          7
        ]
      ]
    },
    {
      "capacity": 11,
      "items": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          9
        ]
      ]
    },
    {
      "capacity": 200,
      "items": [
        [
          465,
          100
        ],
        [
          400,
          85
        ],
        [
          255,
          55
        ],
        [
          350,
          45
        ],
        [
          650,
          130
        ],
        [
          1000,
          190
        ],
        [
          455,
          100
        ],
        [
          100,
          25
        ],
        [
          1200,
          190
        ],
        [
          320,
          65
        ],
        [
          750,
          100
        ],
        [
          50,
          45
        ],
        [
          550,
          65
        ],
        [
          100,
          50
        ],
        [
          600,
          70
        ],
        [
          240,
          40
        ]
      ]
    },
    {
      "capacity": 200,
      "items": [
        [
          465,
          100
        ],
        [
          400,
          85
        ],
        [
          255,
          55
        ],
        [
          350,
          45
        ],
        [
          650,
          130
        ],
        [
          1000,
          190
        ],
        [
          455,
          100
        ],
        [
          100,
          25
        ],
        [
          1200,
          190
        ],
        [
          320,
          65
        ],
        [
          750,
          100
        ],
        [
          50,
          45
        ],
        [
          550,
          65
        ],
        [
          100,
          50
        ],
        [
          600,
          70
        ],
        [
          255,
          40
        ]
      ]
    },
    {
      "capacity": 100,
      "items": [
        [
          2,
          1
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          100,
          100
        ]
      ]
    },
    {
      "capacity": 100,
      "items": [
        [
          1,
          2
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          99,
          100
        ]
      ]
    },
    {
      "capacity": 0,
      "items": [
        [
          1,
          2
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          100,
          100
        ]
      ]
    }
  ],
  "changelog": []
}