{
  "uid": "largest-range",
  "testStrategy": "JSON",
  "name": "Largest Range",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Arrays",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 26085,
    "failureCount": 10976
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "241819502",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1107
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns an array of\n  length 2 representing the largest range of integers contained in that array.\n</p>\n<p>\n  The first number in the output array should be the first number in the range,\n  while the second number should be the last number in the range.\n</p>\n<p>\n  A range of numbers is defined as a set of numbers that come right after each\n  other in the set of real integers. For instance, the output array\n  <span>[2, 6]</span> represents the range <span>{2, 3, 4, 5, 6}</span>, which\n  is a range of length 5. Note that numbers don't need to be sorted or adjacent\n  in the input array in order to form a range.\n</p>\n<p>You can assume that there will only be one largest range.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[0, 7]\n</pre>\n</div>",
  "hints": [
    "<p>\nHow can you use a hash table to solve this problem with an algorithm that runs in linear time?\n</p>\n",
    "\n<p>\nIterate through the input array once, storing every unique number in a hash table and mapping every number to a falsy value. This hash table will not only provide for fast access of the numbers in the input array, but it will also allow you to keep track of \"visited\" and \"unvisited\" numbers, so as not to unnecessarily repeat work.\n</p>\n",
    "\n<p>\nIterate through the input array once more, this time stopping at every number to check if the number is marked as \"visited\" in the hash table. If it is, skip it; if it isn't, start expanding outwards from that number with a left number and a right number, continuously checking if those left and right numbers are in the hash table (and thus in the input array), and marking them as \"visited\" in the hash table if they are. This should allow you to quickly find the largest range in which the current number is contained, all the while setting you up not to perform unnecessary work later.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> largestRange(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space\nvector<int> largestRange(vector<int> array) {\n  vector<int> bestRange = {};\n  int longestLength = 0;\n  unordered_map<int, bool> nums = {};\n  for (int num : array) {\n    nums[num] = true;\n  }\n  for (int num : array) {\n    if (!nums[num]) {\n      continue;\n    }\n    nums[num] = false;\n    int currentLength = 1;\n    int left = num - 1;\n    int right = num + 1;\n    while (nums.find(left) != nums.end()) {\n      nums[left] = false;\n      currentLength++;\n      left--;\n    }\n    while (nums.find(right) != nums.end()) {\n      nums[right] = false;\n      currentLength++;\n      right++;\n    }\n    if (currentLength > longestLength) {\n      longestLength = currentLength;\n      bestRange = {left + 1, right - 1};\n    }\n  }\n  return bestRange;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{0, 7};\n      assert(\n        largestRange({1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6}) == expected\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{0, 7};\n      assert(\n        largestRange({1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6}) == expected\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] LargestRange(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(n) space\n  public static int[] LargestRange(int[] array) {\n    int[] bestRange = new int[2];\n    int longestLength = 0;\n    HashSet<int> nums = new HashSet<int>();\n    foreach (int num in array) {\n      nums.Add(num);\n    }\n    foreach (int num in array) {\n      if (!nums.Contains(num)) {\n        continue;\n      }\n      nums.Remove(num);\n      int currentLength = 1;\n      int left = num - 1;\n      int right = num + 1;\n      while (nums.Contains(left)) {\n        nums.Remove(left);\n        currentLength++;\n        left--;\n      }\n      while (nums.Contains(right)) {\n        nums.Remove(right);\n        currentLength++;\n        right++;\n      }\n      if (currentLength > longestLength) {\n        longestLength = currentLength;\n        bestRange = new int[] { left + 1, right - 1 };\n      }\n    }\n    return bestRange;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase6() {\n    int[] expected = { 0, 7 };\n    Utils.AssertTrue(Enumerable.SequenceEqual(\n      Program.LargestRange(new int[] { 1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6 }\n      ),\n      expected\n    ));\n  }\n}\n",
      "unitTests": "using System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase6() {\n    int[] expected = { 0, 7 };\n    Utils.AssertTrue(Enumerable.SequenceEqual(\n      Program.LargestRange(new int[] { 1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6 }\n      ),\n      expected\n    ));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc LargestRange(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space\nfunc LargestRange(array []int) []int {\n\tbest := []int{}\n\tlongestLength := 0\n\tnums := map[int]bool{}\n\tfor _, num := range array {\n\t\tnums[num] = true\n\t}\n\tfor _, num := range array {\n\t\tif !nums[num] {\n\t\t\tcontinue\n\t\t}\n\t\tnums[num] = false\n\t\tcurrentLength, left, right := 1, num-1, num+1\n\t\tfor nums[left] {\n\t\t\tnums[left] = false\n\t\t\tcurrentLength += 1\n\t\t\tleft -= 1\n\t\t}\n\t\tfor nums[right] {\n\t\t\tnums[right] = false\n\t\t\tcurrentLength += 1\n\t\t\tright += 1\n\t\t}\n\t\tif currentLength > longestLength {\n\t\t\tlongestLength = currentLength\n\t\t\tbest = []int{left + 1, right - 1}\n\t\t}\n\t}\n\treturn best\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{0, 7}\n\toutput := LargestRange([]int{1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{0, 7}\n\toutput := LargestRange([]int{1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] largestRange(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space\n  public static int[] largestRange(int[] array) {\n    int[] bestRange = new int[2];\n    int longestLength = 0;\n    Map<Integer, Boolean> nums = new HashMap<Integer, Boolean>();\n    for (int num : array) {\n      nums.put(num, true);\n    }\n    for (int num : array) {\n      if (!nums.get(num)) {\n        continue;\n      }\n      nums.put(num, false);\n      int currentLength = 1;\n      int left = num - 1;\n      int right = num + 1;\n      while (nums.containsKey(left)) {\n        nums.put(left, false);\n        currentLength++;\n        left--;\n      }\n      while (nums.containsKey(right)) {\n        nums.put(right, false);\n        currentLength++;\n        right++;\n      }\n      if (currentLength > longestLength) {\n        longestLength = currentLength;\n        bestRange = new int[] {left + 1, right - 1};\n      }\n    }\n    return bestRange;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.Arrays;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {0, 7};\n    Utils.assertTrue(Arrays.equals(\n      Program.largestRange(new int[] {1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6}),\n      expected\n    ));\n  }\n}\n",
      "unitTests": "import java.util.Arrays;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {0, 7};\n    Utils.assertTrue(Arrays.equals(\n      Program.largestRange(new int[] {1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6}),\n      expected\n    ));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function largestRange(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.largestRange = largestRange;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nfunction largestRange(array) {\n  let bestRange = [];\n  let longestLength = 0;\n  const nums = {};\n  for (const num of array) {\n    nums[num] = true;\n  }\n  for (const num of array) {\n    if (!nums[num]) continue;\n    nums[num] = false;\n    let currentLength = 1;\n    let left = num - 1;\n    let right = num + 1;\n    while (left in nums) {\n      nums[left] = false;\n      currentLength++;\n      left--;\n    }\n    while (right in nums) {\n      nums[right] = false;\n      currentLength++;\n      right++;\n    }\n    if (currentLength > longestLength) {\n      longestLength = currentLength;\n      bestRange = [left + 1, right - 1];\n    }\n  }\n  return bestRange;\n}\n\nexports.largestRange = largestRange;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.largestRange([1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6])).to.deep.equal([0, 7]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.largestRange([1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6])).to.deep.equal([0, 7]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun largestRange(array: List<Int>): Pair<Int, Int> {\n    // Write your code here.\n    return Pair(-1, -1)\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space\nfun largestRange(array: List<Int>): Pair<Int, Int> {\n    var bestRange = Pair(array[0], array[0])\n    var longestLength = 0\n    val nums = mutableMapOf<Int, Boolean>()\n    for (num in array) {\n        nums[num] = true\n    }\n    for (num in array) {\n        if (nums[num] == false) continue\n        nums[num] = false\n        var currentLength = 1\n        var left = num - 1\n        var right = num + 1\n        while (nums.containsKey(left)) {\n            nums[left] = false\n            currentLength++\n            left--\n        }\n        while (nums.containsKey(right)) {\n            nums[right] = false\n            currentLength++\n            right++\n        }\n        if (currentLength > longestLength) {\n            longestLength = currentLength\n            bestRange = Pair(left + 1, right - 1)\n        }\n    }\n    return bestRange\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.largestRange as largestRange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf(1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6)\n        val output = largestRange(array)\n        val expected = Pair(0, 7)\n        assert(output == expected)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.largestRange as largestRange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf(1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6)\n        val output = largestRange(array)\n        val expected = Pair(0, 7)\n        assert(output == expected)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def largestRange(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space\ndef largestRange(array):\n    bestRange = []\n    longestLength = 0\n    nums = {}\n    for num in array:\n        nums[num] = True\n    for num in array:\n        if not nums[num]:\n            continue\n        nums[num] = False\n        currentLength = 1\n        left = num - 1\n        right = num + 1\n        while left in nums:\n            nums[left] = False\n            currentLength += 1\n            left -= 1\n        while right in nums:\n            nums[right] = False\n            currentLength += 1\n            right += 1\n        if currentLength > longestLength:\n            longestLength = currentLength\n            bestRange = [left + 1, right - 1]\n    return bestRange\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.largestRange([1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]), [0, 7])\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.largestRange([1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]), [0, 7])\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def largestRange(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def largestRange(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.largestRange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.largestRange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func largestRange(array: [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func largestRange(array: [Int]) -> [Int] {\n    var longestLength = 0\n    var bestRange = [Int]()\n    var hash = [Int: Bool]()\n\n    for number in array {\n      hash[number] = true\n    }\n\n    for number in array {\n      if let hashAtNumber = hash[number], !hashAtNumber {\n        continue\n      }\n\n      var currentLength = 1\n      var left = number - 1\n      var right = number + 1\n\n      while hash.keys.contains(left) {\n        hash[left] = false\n        currentLength += 1\n        left -= 1\n      }\n\n      while hash.keys.contains(right) {\n        hash[right] = false\n        currentLength += 1\n        right += 1\n      }\n\n      if currentLength > longestLength {\n        bestRange = [left + 1, right - 1]\n        longestLength = currentLength\n      }\n    }\n\n    return bestRange\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([0, 7], program.largestRange(array: [1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([0, 7], program.largestRange(array: [1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function largestRange(array: number[]): [number, number] {\n  // Write your code here.\n  return [-1, -1];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nexport function largestRange(array: number[]) {\n  let bestRange: [number, number] = [-1, -1];\n  let longestLength = 0;\n  const nums: {[key: number]: boolean} = {};\n  for (const num of array) {\n    nums[num] = true;\n  }\n  for (const num of array) {\n    if (!nums[num]) continue;\n    nums[num] = false;\n    let currentLength = 1;\n    let left = num - 1;\n    let right = num + 1;\n    while (left in nums) {\n      nums[left] = false;\n      currentLength++;\n      left--;\n    }\n    while (right in nums) {\n      nums[right] = false;\n      currentLength++;\n      right++;\n    }\n    if (currentLength > longestLength) {\n      longestLength = currentLength;\n      bestRange = [left + 1, right - 1];\n    }\n  }\n  return bestRange;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.largestRange([1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6])).to.deep.equal([0, 7]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.largestRange([1, 11, 3, 0, 15, 5, 2, 4, 10, 7, 12, 6])).to.deep.equal([0, 7]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        11,
        3,
        0,
        15,
        5,
        2,
        4,
        10,
        7,
        12,
        6
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        11,
        3,
        0,
        15,
        5,
        2,
        4,
        10,
        7,
        12,
        6
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        4,
        2,
        1,
        3
      ]
    },
    {
      "array": [
        4,
        2,
        1,
        3,
        6
      ]
    },
    {
      "array": [
        8,
        4,
        2,
        10,
        3,
        6,
        7,
        9,
        1
      ]
    },
    {
      "array": [
        19,
        -1,
        18,
        17,
        2,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        8,
        7,
        6,
        15,
        12,
        12,
        2,
        1,
        6,
        13,
        14
      ]
    },
    {
      "array": [
        0,
        9,
        19,
        -1,
        18,
        17,
        2,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        8,
        7,
        6,
        15,
        12,
        12,
        2,
        1,
        6,
        13,
        14
      ]
    },
    {
      "array": [
        0,
        -5,
        9,
        19,
        -1,
        18,
        17,
        2,
        -4,
        -3,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        7,
        -6,
        -7,
        6,
        15,
        12,
        12,
        2,
        1,
        6,
        13,
        14,
        -2
      ]
    },
    {
      "array": [
        -7,
        -7,
        -7,
        -7,
        8,
        -8,
        0,
        9,
        19,
        -1,
        -3,
        18,
        17,
        2,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        -6,
        8,
        7,
        6,
        15,
        12,
        12,
        -5,
        2,
        1,
        6,
        13,
        14,
        -4,
        -2
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        3,
        4
      ]
    },
    {
      "array": [
        -1,
        0,
        1
      ]
    },
    {
      "array": [
        10,
        0,
        1
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        11,
        3,
        0,
        15,
        5,
        2,
        4,
        10,
        7,
        12,
        6
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        4,
        2,
        1,
        3
      ]
    },
    {
      "array": [
        4,
        2,
        1,
        3,
        6
      ]
    },
    {
      "array": [
        8,
        4,
        2,
        10,
        3,
        6,
        7,
        9,
        1
      ]
    },
    {
      "array": [
        19,
        -1,
        18,
        17,
        2,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        8,
        7,
        6,
        15,
        12,
        12,
        2,
        1,
        6,
        13,
        14
      ]
    },
    {
      "array": [
        0,
        9,
        19,
        -1,
        18,
        17,
        2,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        8,
        7,
        6,
        15,
        12,
        12,
        2,
        1,
        6,
        13,
        14
      ]
    },
    {
      "array": [
        0,
        -5,
        9,
        19,
        -1,
        18,
        17,
        2,
        -4,
        -3,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        7,
        -6,
        -7,
        6,
        15,
        12,
        12,
        2,
        1,
        6,
        13,
        14,
        -2
      ]
    },
    {
      "array": [
        -7,
        -7,
        -7,
        -7,
        8,
        -8,
        0,
        9,
        19,
        -1,
        -3,
        18,
        17,
        2,
        10,
        3,
        12,
        5,
        16,
        4,
        11,
        -6,
        8,
        7,
        6,
        15,
        12,
        12,
        -5,
        2,
        1,
        6,
        13,
        14,
        -4,
        -2
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        3,
        4
      ]
    },
    {
      "array": [
        -1,
        0,
        1
      ]
    },
    {
      "array": [
        10,
        0,
        1
      ]
    }
  ],
  "changelog": []
}