{
  "uid": "longest-palindromic-substring",
  "testStrategy": "JSON",
  "name": "Longest Palindromic Substring",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Strings",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 32546,
    "failureCount": 10689
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225764100",
    "duration": 0,
    "annotations": [
      {
        "title": "Space Complexity",
        "content": "It'll actually be O(n), since we have to slice and store the final substring.",
        "start": 926,
        "end": 932
      },
      {
        "title": "Space Complexity",
        "content": "It'll actually be O(n), since we have to slice and store the final substring.",
        "start": 1601,
        "end": 1607
      }
    ],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 996
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that, given a string, returns its longest palindromic\n  substring.\n</p>\n<p>\n  A palindrome is defined as a string that's written the same forward and\n  backward. Note that single-character strings are palindromes.\n</p>\n<p>You can assume that there will only be one longest palindromic substring.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"abaxyzzyxf\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"xyzzyx\"\n</pre>\n</div>",
  "hints": [
    "<p>\nTry generating all possible substrings of the input string and checking for their palindromicity. What is the runtime of the isPalindrome check? What is the total runtime of this approach?\n</p>\n",
    "\n<p>\nRecognize that a palindrome is a string that is symmetrical with respect to its center, which can either be a character (in the case of odd-length palindromes) or an empty string (in the case of even-length palindromes). Thus, you can check the palindromicity of a string by simply expanding from its center and making sure that characters on both sides are indeed mirrored.\n</p>\n",
    "\n<p>\nTraverse the input string, and at each index, apply the logic mentioned in Hint #2. What does this accomplish? Is the runtime of this approach better?\n</p>"
  ],
  "spaceTime": "O(n^2) time | O(n) space - where n is the length of the input string",
  "notes": "<div class=\"html\">\n<p>\n  In the video explanation of this question, we mistakenly state that the\n  optimal solution runs with constant space.\n</p>\n<p>\n  It's true that throughout our traversal of the input string, we only store an\n  array of length 2; however, we ultimately still need to slice the longest\n  palindromic substring out of the string, and this longest palindromic\n  substring can be as large as the string itself, in the worst case.\n</p>\n<p>Thus, the algorithm runs with linear space.</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nstring longestPalindromicSubstring(string str) {\n  // Write your code here.\n  return \"\";\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nbool isPalindrome(string str);\n\n// O(n^3) time | O(n) space\nstring longestPalindromicSubstring(string str) {\n  string longest = \"\";\n  for (int i = 0; i < str.length(); i++) {\n    for (int j = i; j < str.length(); j++) {\n      string substring = str.substr(i, j + 1 - i);\n      if (substring.length() > longest.length() && isPalindrome(substring)) {\n        longest = substring;\n      }\n    }\n  }\n  return longest;\n}\n\nbool isPalindrome(string str) {\n  int leftIdx = 0;\n  int rightIdx = str.length() - 1;\n  while (leftIdx < rightIdx) {\n    if (str[leftIdx] != str[rightIdx]) {\n      return false;\n    }\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<int> getLongestPalindromeFrom(string str, int leftIdx, int rightIdx);\n\n// O(n^2) time | O(n) space\nstring longestPalindromicSubstring(string str) {\n  vector<int> currentLongest{0, 1};\n  for (int i = 1; i < str.length(); i++) {\n    vector<int> odd = getLongestPalindromeFrom(str, i - 1, i + 1);\n    vector<int> even = getLongestPalindromeFrom(str, i - 1, i);\n    vector<int> longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n    currentLongest =\n      currentLongest[1] - currentLongest[0] > longest[1] - longest[0]\n        ? currentLongest\n        : longest;\n  }\n  return str.substr(currentLongest[0], currentLongest[1] - currentLongest[0]);\n}\n\nvector<int> getLongestPalindromeFrom(string str, int leftIdx, int rightIdx) {\n  while (leftIdx >= 0 && rightIdx < str.length()) {\n    if (str[leftIdx] != str[rightIdx]) {\n      break;\n    }\n    leftIdx--;\n    rightIdx++;\n  }\n  return vector<int>{leftIdx + 1, rightIdx};\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(longestPalindromicSubstring(\"abaxyzzyxf\") == \"xyzzyx\");\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(longestPalindromicSubstring(\"abaxyzzyxf\") == \"xyzzyx\");\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static string LongestPalindromicSubstring(string str) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n^3) time | O(n) space\n  public static string LongestPalindromicSubstring(string str) {\n    string longest = \"\";\n    for (int i = 0; i < str.Length; i++) {\n      for (int j = i; j < str.Length; j++) {\n        string substring = str.Substring(i, j + 1 - i);\n        if (substring.Length > longest.Length && IsPalindrome(substring)) {\n          longest = substring;\n        }\n      }\n    }\n    return longest;\n  }\n\n  public static bool IsPalindrome(string str) {\n    int leftIdx = 0;\n    int rightIdx = str.Length - 1;\n    while (leftIdx < rightIdx) {\n      if (str[leftIdx] != str[rightIdx]) {\n        return false;\n      }\n      leftIdx++;\n      rightIdx--;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n^2) time | O(n) space\n  public static string LongestPalindromicSubstring(string str) {\n    int[] currentLongest = { 0, 1 };\n    for (int i = 1; i < str.Length; i++) {\n      int[] odd = getLongestPalindromeFrom(str, i - 1, i + 1);\n      int[] even = getLongestPalindromeFrom(str, i - 1, i);\n      int[] longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n      currentLongest =\n        currentLongest[1] - currentLongest[0] > longest[1] - longest[0]\n          ? currentLongest\n          : longest;\n    }\n    return str.Substring(\n      currentLongest[0], currentLongest[1] - currentLongest[0]\n    );\n  }\n\n  public static int[] getLongestPalindromeFrom(\n    string str, int leftIdx, int rightIdx\n  ) {\n    while (leftIdx >= 0 && rightIdx < str.Length) {\n      if (str[leftIdx] != str[rightIdx]) {\n        break;\n      }\n      leftIdx--;\n      rightIdx++;\n    }\n    return new int[] { leftIdx + 1, rightIdx };\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.LongestPalindromicSubstring(\"abaxyzzyxf\").Equals(\"xyzzyx\")\n    );\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.LongestPalindromicSubstring(\"abaxyzzyxf\").Equals(\"xyzzyx\")\n    );\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc LongestPalindromicSubstring(str string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^3) time | O(n) space\nfunc LongestPalindromicSubstring(str string) string {\n\tlongest := \"\"\n\tfor i := range str {\n\t\tfor j := i; j < len(str); j++ {\n\t\t\tsubstring := str[i : j+1]\n\t\t\tif len(substring) > len(longest) && isPalindrome(substring) {\n\t\t\t\tlongest = substring\n\t\t\t}\n\t\t}\n\t}\n\treturn longest\n}\n\nfunc isPalindrome(str string) bool {\n\tfor i := range str {\n\t\tj := len(str) - i - 1\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype substring struct {\n\tleft  int\n\tright int\n}\n\nfunc (ss substring) length() int {\n\treturn ss.right - ss.left\n}\n\n// O(n^2) time | O(n) space\nfunc LongestPalindromicSubstring(str string) string {\n\tresult := substring{0, 1}\n\tfor i := 1; i < len(str); i++ {\n\t\todd := getLongestPalindromeFrom(str, i-1, i+1)\n\t\teven := getLongestPalindromeFrom(str, i-1, i)\n\t\tlongest := even\n\t\tif odd.length() > even.length() {\n\t\t\tlongest = odd\n\t\t}\n\t\tif longest.length() > result.length() {\n\t\t\tresult = longest\n\t\t}\n\t}\n\treturn str[result.left:result.right]\n}\n\nfunc getLongestPalindromeFrom(str string, leftIndex, rightIndex int) substring {\n\tfor leftIndex >= 0 && rightIndex < len(str) {\n\t\tif str[leftIndex] != str[rightIndex] {\n\t\t\tbreak\n\t\t}\n\t\tleftIndex -= 1\n\t\trightIndex += 1\n\t}\n\treturn substring{leftIndex + 1, rightIndex}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"xyzzyx\"\n\toutput := LongestPalindromicSubstring(\"abaxyzzyxf\")\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"xyzzyx\"\n\toutput := LongestPalindromicSubstring(\"abaxyzzyxf\")\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static String longestPalindromicSubstring(String str) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^3) time | O(n) space\n  public static String longestPalindromicSubstring(String str) {\n    String longest = \"\";\n    for (int i = 0; i < str.length(); i++) {\n      for (int j = i; j < str.length(); j++) {\n        String substring = str.substring(i, j + 1);\n        if (substring.length() > longest.length() && isPalindrome(substring)) {\n          longest = substring;\n        }\n      }\n    }\n    return longest;\n  }\n\n  public static boolean isPalindrome(String str) {\n    int leftIdx = 0;\n    int rightIdx = str.length() - 1;\n    while (leftIdx < rightIdx) {\n      if (str.charAt(leftIdx) != str.charAt(rightIdx)) {\n        return false;\n      }\n      leftIdx++;\n      rightIdx--;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static String longestPalindromicSubstring(String str) {\n    int[] currentLongest = {0, 1};\n    for (int i = 1; i < str.length(); i++) {\n      int[] odd = getLongestPalindromeFrom(str, i - 1, i + 1);\n      int[] even = getLongestPalindromeFrom(str, i - 1, i);\n      int[] longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n      currentLongest =\n        currentLongest[1] - currentLongest[0] > longest[1] - longest[0]\n        ? currentLongest\n        : longest;\n    }\n    return str.substring(currentLongest[0], currentLongest[1]);\n  }\n\n  public static int[] getLongestPalindromeFrom(\n    String str, int leftIdx, int rightIdx\n  ) {\n    while (leftIdx >= 0 && rightIdx < str.length()) {\n      if (str.charAt(leftIdx) != str.charAt(rightIdx)) {\n        break;\n      }\n      leftIdx--;\n      rightIdx++;\n    }\n    return new int[] {leftIdx + 1, rightIdx};\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.longestPalindromicSubstring(\"abaxyzzyxf\").equals(\"xyzzyx\")\n    );\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.longestPalindromicSubstring(\"abaxyzzyxf\").equals(\"xyzzyx\")\n    );\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function longestPalindromicSubstring(string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.longestPalindromicSubstring = longestPalindromicSubstring;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^3) time | O(n) space\nfunction longestPalindromicSubstring(string) {\n  let longest = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      const substring = string.slice(i, j + 1);\n      if (substring.length > longest.length && isPalindrome(substring)) {\n        longest = substring;\n      }\n    }\n  }\n  return longest;\n}\n\nfunction isPalindrome(string) {\n  let leftIdx = 0;\n  let rightIdx = string.length - 1;\n  while (leftIdx < rightIdx) {\n    if (string[leftIdx] !== string[rightIdx]) return false;\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n\nexports.longestPalindromicSubstring = longestPalindromicSubstring;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction longestPalindromicSubstring(string) {\n  let currentLongest = [0, 1];\n  for (let i = 1; i < string.length; i++) {\n    const odd = getLongestPalindromeFrom(string, i - 1, i + 1);\n    const even = getLongestPalindromeFrom(string, i - 1, i);\n    const longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n    currentLongest =\n      currentLongest[1] - currentLongest[0] > longest[1] - longest[0] ? currentLongest : longest;\n  }\n  return string.slice(currentLongest[0], currentLongest[1]);\n}\n\nfunction getLongestPalindromeFrom(string, leftIdx, rightIdx) {\n  while (leftIdx >= 0 && rightIdx < string.length) {\n    if (string[leftIdx] !== string[rightIdx]) break;\n    leftIdx--;\n    rightIdx++;\n  }\n  return [leftIdx + 1, rightIdx];\n}\n\nexports.longestPalindromicSubstring = longestPalindromicSubstring;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.longestPalindromicSubstring('abaxyzzyxf')).to.deep.equal('xyzzyx');\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.longestPalindromicSubstring('abaxyzzyxf')).to.deep.equal('xyzzyx');\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun longestPalindromicSubstring(string: String): String {\n    // Write your code here.\n    return \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^3) time | O(n) space\nfun longestPalindromicSubstring(string: String): String {\n    var longest = \"\"\n    for (i in 0 until string.length) {\n        for (j in i until string.length) {\n            val substring = string.substring(i, j + 1)\n            if (substring.length > longest.length && isPalindrome(substring)) {\n                longest = substring\n            }\n        }\n    }\n    return longest\n}\n\nfun isPalindrome(string: String): Boolean {\n    var leftIdx = 0\n    var rightIdx = string.length - 1\n    while (leftIdx < rightIdx) {\n        if (string[leftIdx] != string[rightIdx]) return false\n        leftIdx++\n        rightIdx--\n    }\n    return true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space\nfun longestPalindromicSubstring(string: String): String {\n    var currentLongest = Pair(0, 1)\n    for (i in 1 until string.length) {\n        val odd = getLongestPalindromeFrom(string, i - 1, i + 1)\n        val even = getLongestPalindromeFrom(string, i - 1, i)\n        val longest = if (odd.second - odd.first > even.second - even.first) odd else even\n        currentLongest = if (currentLongest.second - currentLongest.first > longest.second - longest.first) currentLongest else longest\n    }\n    return string.substring(currentLongest.first, currentLongest.second)\n}\n\nfun getLongestPalindromeFrom(string: String, leftIdx: Int, rightIdx: Int): Pair<Int, Int> {\n    var newLeftIdx = leftIdx\n    var newRightIdx = rightIdx\n    while (newLeftIdx >= 0 && newRightIdx < string.length) {\n        if (string[newLeftIdx] !== string[newRightIdx]) break\n        newLeftIdx--\n        newRightIdx++\n    }\n    return Pair(newLeftIdx + 1, newRightIdx)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.longestPalindromicSubstring as longestPalindromicSubstring\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(longestPalindromicSubstring(\"abaxyzzyxf\") == \"xyzzyx\")\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.longestPalindromicSubstring as longestPalindromicSubstring\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(longestPalindromicSubstring(\"abaxyzzyxf\") == \"xyzzyx\")\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def longestPalindromicSubstring(string):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^3) time | O(n) space\ndef longestPalindromicSubstring(string):\n    longest = \"\"\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substring = string[i : j + 1]\n            if len(substring) > len(longest) and isPalindrome(substring):\n                longest = substring\n    return longest\n\n\ndef isPalindrome(string):\n    leftIdx = 0\n    rightIdx = len(string) - 1\n    while leftIdx < rightIdx:\n        if string[leftIdx] != string[rightIdx]:\n            return False\n        leftIdx += 1\n        rightIdx -= 1\n    return True\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef longestPalindromicSubstring(string):\n    currentLongest = [0, 1]\n    for i in range(1, len(string)):\n        odd = getLongestPalindromeFrom(string, i - 1, i + 1)\n        even = getLongestPalindromeFrom(string, i - 1, i)\n        longest = max(odd, even, key=lambda x: x[1] - x[0])\n        currentLongest = max(longest, currentLongest, key=lambda x: x[1] - x[0])\n    return string[currentLongest[0] : currentLongest[1]]\n\n\ndef getLongestPalindromeFrom(string, leftIdx, rightIdx):\n    while leftIdx >= 0 and rightIdx < len(string):\n        if string[leftIdx] != string[rightIdx]:\n            break\n        leftIdx -= 1\n        rightIdx += 1\n    return [leftIdx + 1, rightIdx]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.longestPalindromicSubstring(\"abaxyzzyxf\"), \"xyzzyx\")\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.longestPalindromicSubstring(\"abaxyzzyxf\"), \"xyzzyx\")\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def longestPalindromicSubstring(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def longestPalindromicSubstring(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def longestPalindromicSubstring(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.longestPalindromicSubstring\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.longestPalindromicSubstring\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func longestPalindromicSubstring(string: String) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^3) time | O(n) space\n  func longestPalindromicSubstring(string: String) -> String {\n    var longest = \"\"\n\n    for i in 0 ..< string.count {\n      for j in i ..< string.count {\n        let leftIndex = string.index(string.startIndex, offsetBy: i)\n        let rightIndex = string.index(string.startIndex, offsetBy: j + 1)\n        let substring = String(string[leftIndex ..< rightIndex])\n\n        if substring.count > longest.count, isPalindrome(string: substring) {\n          longest = substring\n        }\n      }\n    }\n\n    return longest\n  }\n\n  func isPalindrome(string: String) -> Bool {\n    var leftPointer = 0\n    var rightPointer = string.count - 1\n    var leftIndex = string.index(string.startIndex, offsetBy: leftPointer)\n    var rightIndex = string.index(string.startIndex, offsetBy: rightPointer)\n\n    while leftIndex < rightIndex {\n      if string[leftIndex] != string[rightIndex] {\n        return false\n      }\n\n      leftPointer = leftPointer + 1\n      rightPointer = rightPointer - 1\n      leftIndex = string.index(string.startIndex, offsetBy: leftPointer)\n      rightIndex = string.index(string.startIndex, offsetBy: rightPointer)\n    }\n\n    return true\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space\n  func longestPalindromicSubstring(string: String) -> String {\n    var currentLongest = [0, 1]\n\n    for i in 1 ..< string.count {\n      var oddLeftIndex = i - 1\n      var oddRightIndex = i + 1\n      let odd = getLongestPalindromeFrom(string: string, leftIndex: &oddLeftIndex, rightIndex: &oddRightIndex)\n\n      var evenLeftIndex = i - 1\n      var evenRightIndex = i\n      let even = getLongestPalindromeFrom(string: string, leftIndex: &evenLeftIndex, rightIndex: &evenRightIndex)\n\n      var temporaryLongest = [Int]()\n\n      if let oddFirst = odd.first, let oddLast = odd.last, let evenFirst = even.first, let evenLast = even.last {\n        if oddLast - oddFirst > evenLast - evenFirst {\n          temporaryLongest = odd\n        } else {\n          temporaryLongest = even\n        }\n      }\n\n      if let temporaryFirst = temporaryLongest.first, let temporaryLast = temporaryLongest.last, let currentFirst = currentLongest.first, let currentLast = currentLongest.last {\n        if temporaryLast - temporaryFirst > currentLast - currentFirst {\n          currentLongest = temporaryLongest\n        }\n      }\n    }\n\n    let firstIndex = string.index(string.startIndex, offsetBy: currentLongest.first!)\n    let lastIndex = string.index(string.startIndex, offsetBy: currentLongest.last!)\n    let result = String(string[firstIndex ..< lastIndex])\n\n    return result\n  }\n\n  func getLongestPalindromeFrom(string: String, leftIndex: inout Int, rightIndex: inout Int) -> [Int] {\n    while leftIndex >= 0, rightIndex < string.count {\n      let leftStringIndex = string.index(string.startIndex, offsetBy: leftIndex)\n      let rightStringIndex = string.index(string.startIndex, offsetBy: rightIndex)\n\n      if string[leftStringIndex] != string[rightStringIndex] {\n        break\n      }\n\n      leftIndex -= 1\n      rightIndex += 1\n    }\n\n    return [leftIndex + 1, rightIndex]\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"xyzzyx\", program.longestPalindromicSubstring(string: \"abaxyzzyxf\"))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"xyzzyx\", program.longestPalindromicSubstring(string: \"abaxyzzyxf\"))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function longestPalindromicSubstring(string: string) {\n  // Write your code here.\n  return '';\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^3) time | O(n) space\nexport function longestPalindromicSubstring(string: string) {\n  let longest = '';\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      const substring = string.slice(i, j + 1);\n      if (substring.length > longest.length && isPalindrome(substring)) {\n        longest = substring;\n      }\n    }\n  }\n  return longest;\n}\n\nfunction isPalindrome(string: string) {\n  let leftIdx = 0;\n  let rightIdx = string.length - 1;\n  while (leftIdx < rightIdx) {\n    if (string[leftIdx] !== string[rightIdx]) return false;\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nexport function longestPalindromicSubstring(string: string) {\n  let currentLongest = [0, 1];\n  for (let i = 1; i < string.length; i++) {\n    const odd = getLongestPalindromeFrom(string, i - 1, i + 1);\n    const even = getLongestPalindromeFrom(string, i - 1, i);\n    const longest = odd[1] - odd[0] > even[1] - even[0] ? odd : even;\n    currentLongest =\n      currentLongest[1] - currentLongest[0] > longest[1] - longest[0] ? currentLongest : longest;\n  }\n  return string.slice(currentLongest[0], currentLongest[1]);\n}\n\nfunction getLongestPalindromeFrom(string: string, leftIdx: number, rightIdx: number) {\n  while (leftIdx >= 0 && rightIdx < string.length) {\n    if (string[leftIdx] !== string[rightIdx]) break;\n    leftIdx--;\n    rightIdx++;\n  }\n  return [leftIdx + 1, rightIdx];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.longestPalindromicSubstring('abaxyzzyxf')).to.deep.equal('xyzzyx');\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.longestPalindromicSubstring('abaxyzzyxf')).to.deep.equal('xyzzyx');\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "abaxyzzyxf",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "abaxyzzyxf"
    },
    {
      "string": "a"
    },
    {
      "string": "it's highnoon"
    },
    {
      "string": "noon high it is"
    },
    {
      "string": "abccbait's highnoon"
    },
    {
      "string": "abcdefgfedcbazzzzzzzzzzzzzzzzzzzz"
    },
    {
      "string": "abcdefgfedcba"
    },
    {
      "string": "abcdefghfedcbaa"
    },
    {
      "string": "abcdefggfedcba"
    },
    {
      "string": "zzzzzzz2345abbbba5432zzbbababa"
    },
    {
      "string": "z234a5abbbba54a32z"
    },
    {
      "string": "z234a5abbba54a32z"
    },
    {
      "string": "ab12365456321bb"
    },
    {
      "string": "aca"
    }
  ],
  "jsonTests": [
    {
      "string": "abaxyzzyxf"
    },
    {
      "string": "a"
    },
    {
      "string": "it's highnoon"
    },
    {
      "string": "noon high it is"
    },
    {
      "string": "abccbait's highnoon"
    },
    {
      "string": "abcdefgfedcbazzzzzzzzzzzzzzzzzzzz"
    },
    {
      "string": "abcdefgfedcba"
    },
    {
      "string": "abcdefghfedcbaa"
    },
    {
      "string": "abcdefggfedcba"
    },
    {
      "string": "zzzzzzz2345abbbba5432zzbbababa"
    },
    {
      "string": "z234a5abbbba54a32z"
    },
    {
      "string": "z234a5abbba54a32z"
    },
    {
      "string": "ab12365456321bb"
    },
    {
      "string": "aca"
    }
  ],
  "changelog": []
}