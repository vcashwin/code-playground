{
  "uid": "longest-substring-without-duplication",
  "testStrategy": "JSON",
  "name": "Longest Substring Without Duplication",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Strings",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 17373,
    "failureCount": 5479
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225764436",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1309
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a string and returns its longest substring\n  without duplicate characters.\n</p>\n<p>You can assume that there will only be one longest substring without duplication.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"clementisacap\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"mentisac\"\n</pre>\n</div>",
  "hints": [
    "<p>\nTry traversing the input string and storing the last position at which you see each character in a hash table. How can this help you solve the given problem?\n</p>\n",
    "\n<p>\nAs you traverse the input string, keep track of a starting index variable. This variable, as its name suggests, should represent the most recent index from which you could start a substring with no duplicate characters, ending at your current index. Use the hash table mentioned in Hint #1 to update this variable correctly, and update the longest substring as you go.\n</p>"
  ],
  "spaceTime": "O(n) time | O(min(n, a)) space - where n is the length of the input string and a is the length of the character alphabet represented in the input string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nstring longestSubstringWithoutDuplication(string str) {\n  // Write your code here.\n  return \"\";\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(min(n, a)) space\nstring longestSubstringWithoutDuplication(string str) {\n  unordered_map<char, int> lastSeen;\n  vector<int> longest{0, 1};\n  int startIdx = 0;\n  for (int i = 0; i < str.length(); i++) {\n    char character = str[i];\n    if (lastSeen.find(character) != lastSeen.end()) {\n      startIdx = max(startIdx, lastSeen[character] + 1);\n    }\n    if (longest[1] - longest[0] < i + 1 - startIdx) {\n      longest = {startIdx, i + 1};\n    }\n    lastSeen[character] = i;\n  }\n  string result = str.substr(longest[0], longest[1] - longest[0]);\n  return result;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(longestSubstringWithoutDuplication(\"clementisacap\") == \"mentisac\");\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(longestSubstringWithoutDuplication(\"clementisacap\") == \"mentisac\");\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static string LongestSubstringWithoutDuplication(string str) {\n    // Write your code here\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(min(n, a)) space\n  public static string LongestSubstringWithoutDuplication(string str) {\n    Dictionary<char, int> lastSeen = new Dictionary<char, int>();\n    int[] longest = { 0, 1 };\n    int startIdx = 0;\n    for (int i = 0; i < str.Length; i++) {\n      char c = str[i];\n      if (lastSeen.ContainsKey(c)) {\n        startIdx = Math.Max(startIdx, lastSeen[c] + 1);\n      }\n      if (longest[1] - longest[0] < i + 1 - startIdx) {\n        longest = new int[] { startIdx, i + 1 };\n      }\n      lastSeen[c] = i;\n    }\n    string result = str.Substring(longest[0], longest[1] - longest[0]);\n    return result;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.LongestSubstringWithoutDuplication(\"clementisacap\")\n                       .Equals(\"mentisac\"));\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.LongestSubstringWithoutDuplication(\"clementisacap\")\n                       .Equals(\"mentisac\"));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc LongestSubstringWithoutDuplication(str string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype substring struct {\n\tleft  int\n\tright int\n}\n\nfunc (ss substring) length() int { return ss.right - ss.left }\n\n// O(n) time | O(min(n, a)) space\nfunc LongestSubstringWithoutDuplication(str string) string {\n\tlastSeen := map[rune]int{}\n\tlongest := substring{0, 1}\n\tstartIndex := 0\n\tfor i, char := range str {\n\t\tif seenIndex, found := lastSeen[char]; found &&\n\t\t\tstartIndex < seenIndex+1 {\n\t\t\tstartIndex = seenIndex + 1\n\t\t}\n\t\tif longest.length() < i+1-startIndex {\n\t\t\tlongest = substring{startIndex, i + 1}\n\t\t}\n\t\tlastSeen[char] = i\n\t}\n\treturn str[longest.left:longest.right]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"mentisac\"\n\toutput := LongestSubstringWithoutDuplication(\"clementisacap\")\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"mentisac\"\n\toutput := LongestSubstringWithoutDuplication(\"clementisacap\")\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static String longestSubstringWithoutDuplication(String str) {\n    // Write your code here\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(min(n, a)) space\n  public static String longestSubstringWithoutDuplication(String str) {\n    Map<Character, Integer> lastSeen = new HashMap<Character, Integer>();\n    int[] longest = {0, 1};\n    int startIdx = 0;\n    for (int i = 0; i < str.length(); i++) {\n      char c = str.charAt(i);\n      if (lastSeen.containsKey(c)) {\n        startIdx = Math.max(startIdx, lastSeen.get(c) + 1);\n      }\n      if (longest[1] - longest[0] < i + 1 - startIdx) {\n        longest = new int[] {startIdx, i + 1};\n      }\n      lastSeen.put(c, i);\n    }\n    String result = str.substring(longest[0], longest[1]);\n    return result;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.longestSubstringWithoutDuplication(\"clementisacap\")\n                       .equals(\"mentisac\"));\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.longestSubstringWithoutDuplication(\"clementisacap\")\n                       .equals(\"mentisac\"));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function longestSubstringWithoutDuplication(string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.longestSubstringWithoutDuplication = longestSubstringWithoutDuplication;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(min(n, a)) space\nfunction longestSubstringWithoutDuplication(string) {\n  const lastSeen = {};\n  let longest = [0, 1];\n  let startIdx = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char in lastSeen) {\n      startIdx = Math.max(startIdx, lastSeen[char] + 1);\n    }\n    if (longest[1] - longest[0] < i + 1 - startIdx) {\n      longest = [startIdx, i + 1];\n    }\n    lastSeen[char] = i;\n  }\n  return string.slice(longest[0], longest[1]);\n}\n\nexports.longestSubstringWithoutDuplication = longestSubstringWithoutDuplication;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.longestSubstringWithoutDuplication('clementisacap'))\n    .to.deep.equal('mentisac');\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.longestSubstringWithoutDuplication('clementisacap'))\n    .to.deep.equal('mentisac');\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun longestSubstringWithoutDuplication(string: String): String {\n    // Write your code here.\n    return \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(n) time | O(min(n, a)) space\nfun longestSubstringWithoutDuplication(string: String): String {\n    val lastSeen = mutableMapOf<Char, Int>()\n    var longest = Pair(0, 1)\n    var startIdx = 0\n    for (i in 0 until string.length) {\n        val char = string[i]\n        if (char in lastSeen) {\n            startIdx = max(startIdx, lastSeen[char]!! + 1)\n        }\n        if (longest.second - longest.first < i + 1 - startIdx) {\n            longest = Pair(startIdx, i + 1)\n        }\n        lastSeen[char] = i\n    }\n    return string.substring(longest.first, longest.second)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.longestSubstringWithoutDuplication as longestSubstringWithoutDuplication\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(longestSubstringWithoutDuplication(\"clementisacap\") == \"mentisac\")\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.longestSubstringWithoutDuplication as longestSubstringWithoutDuplication\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(longestSubstringWithoutDuplication(\"clementisacap\") == \"mentisac\")\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def longestSubstringWithoutDuplication(string):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(min(n, a)) space\ndef longestSubstringWithoutDuplication(string):\n    lastSeen = {}\n    longest = [0, 1]\n    startIdx = 0\n    for i, char in enumerate(string):\n        if char in lastSeen:\n            startIdx = max(startIdx, lastSeen[char] + 1)\n        if longest[1] - longest[0] < i + 1 - startIdx:\n            longest = [startIdx, i + 1]\n        lastSeen[char] = i\n    return string[longest[0] : longest[1]]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.longestSubstringWithoutDuplication(\"clementisacap\"), \"mentisac\")\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.longestSubstringWithoutDuplication(\"clementisacap\"), \"mentisac\")\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def longestSubstringWithoutDuplication(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def longestSubstringWithoutDuplication(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.longestSubstringWithoutDuplication\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.longestSubstringWithoutDuplication\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func longestSubstringWithoutDuplication(_ string: String) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(min(n, a)) space\n  func longestSubstringWithoutDuplication(_ string: String) -> String {\n    var startingPointer = 0\n    var indicesOfLongestSubstring = [0, 1]\n    var indicesDictionary = [Character: Int]()\n\n    for (index, character) in string.enumerated() {\n      if let index = indicesDictionary[character] {\n        startingPointer = max(startingPointer, index + 1)\n      }\n\n      if indicesOfLongestSubstring[1] - indicesOfLongestSubstring[0] < index + 1 - startingPointer {\n        indicesOfLongestSubstring = [startingPointer, index + 1]\n      }\n\n      indicesDictionary[character] = index\n    }\n\n    let start = indicesOfLongestSubstring[0]\n    let startingIndex = string.index(string.startIndex, offsetBy: start)\n\n    let end = indicesOfLongestSubstring[1]\n    let endingIndex = string.index(string.startIndex, offsetBy: end)\n\n    return String(string[startingIndex ..< endingIndex])\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"mentisac\", program.longestSubstringWithoutDuplication(\"clementisacap\"))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"mentisac\", program.longestSubstringWithoutDuplication(\"clementisacap\"))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function longestSubstringWithoutDuplication(string: string) {\n  // Write your code here.\n  return '';\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(min(n, a)) space\nexport function longestSubstringWithoutDuplication(string: string) {\n  const lastSeen: {[key: string]: number} = {};\n  let longest = [0, 1];\n  let startIdx = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char in lastSeen) {\n      startIdx = Math.max(startIdx, lastSeen[char] + 1);\n    }\n    if (longest[1] - longest[0] < i + 1 - startIdx) {\n      longest = [startIdx, i + 1];\n    }\n    lastSeen[char] = i;\n  }\n  return string.slice(longest[0], longest[1]);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.longestSubstringWithoutDuplication('clementisacap'))\n    .to.deep.equal('mentisac');\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.longestSubstringWithoutDuplication('clementisacap'))\n    .to.deep.equal('mentisac');\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "clementisacap",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "clementisacap"
    },
    {
      "string": "a"
    },
    {
      "string": "abc"
    },
    {
      "string": "abcb"
    },
    {
      "string": "abcdeabcdefc"
    },
    {
      "string": "abccdeaabbcddef"
    },
    {
      "string": "abacacacaaabacaaaeaaafa"
    },
    {
      "string": "abcdabcef"
    },
    {
      "string": "abcbde"
    },
    {
      "string": "clementisanarm"
    }
  ],
  "jsonTests": [
    {
      "string": "clementisacap"
    },
    {
      "string": "a"
    },
    {
      "string": "abc"
    },
    {
      "string": "abcb"
    },
    {
      "string": "abcdeabcdefc"
    },
    {
      "string": "abccdeaabbcddef"
    },
    {
      "string": "abacacacaaabacaaaeaaafa"
    },
    {
      "string": "abcdabcef"
    },
    {
      "string": "abcbde"
    },
    {
      "string": "clementisanarm"
    }
  ],
  "changelog": []
}