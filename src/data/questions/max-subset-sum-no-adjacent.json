{
  "uid": "max-subset-sum-no-adjacent",
  "testStrategy": "JSON",
  "name": "Max Subset Sum No Adjacent",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 45556,
    "failureCount": 15656
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "249798598",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 924
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of positive integers and returns the\n  maximum sum of non-adjacent elements in the array.\n</p>\n<p>If the input array is empty, the function should return <span>0</span>.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [75, 105, 120, 75, 90, 135]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n330 <span class=\"CodeEditor-promptComment\">// 75 + 120 + 135</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building an array of the same length as the input array. At each index in this new array, store the maximum sum that can be generated using no adjacent numbers located between index 0 and the current index.\n</p>\n",
    "\n<p>\nCan you come up with a formula that relates the max sum at index i to the max sums at indices i - 1 and i - 2?\n</p>\n",
    "\n<p>\nDo you really need to store the entire array mentioned in Hint #1, or can you somehow store just the max sums that you need at any point in time?\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint maxSubsetSumNoAdjacent(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space\nint maxSubsetSumNoAdjacent(vector<int> array) {\n  if (array.size() == 0) {\n    return 0;\n  } else if (array.size() == 1) {\n    return array[0];\n  }\n  vector<int> maxSums = array;\n  maxSums[1] = max(array[0], array[1]);\n  for (int i = 2; i < array.size(); i++) {\n    maxSums[i] = max(maxSums[i - 1], maxSums[i - 2] + array[i]);\n  }\n  return maxSums[array.size() - 1];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space\nint maxSubsetSumNoAdjacent(vector<int> array) {\n  if (array.size() == 0) {\n    return 0;\n  } else if (array.size() == 1) {\n    return array[0];\n  }\n  int second = array[0];\n  int first = max(array[0], array[1]);\n  for (int i = 2; i < array.size(); i++) {\n    int current = max(first, second + array[i]);\n    second = first;\n    first = current;\n  }\n  return first;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> vector{75, 105, 120, 75, 90, 135};\n      assert(maxSubsetSumNoAdjacent(vector) == 330);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> vector{75, 105, 120, 75, 90, 135};\n      assert(maxSubsetSumNoAdjacent(vector) == 330);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int MaxSubsetSumNoAdjacent(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space\n  public static int MaxSubsetSumNoAdjacent(int[] array) {\n    if (array.Length == 0) {\n      return 0;\n    } else if (array.Length == 1) {\n      return array[0];\n    }\n    int[] maxSums = (int[])array.Clone();\n    maxSums[1] = Math.Max(array[0], array[1]);\n    for (int i = 2; i < array.Length; i++) {\n      maxSums[i] = Math.Max(maxSums[i - 1], maxSums[i - 2] + array[i]);\n    }\n    return maxSums[array.Length - 1];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static int MaxSubsetSumNoAdjacent(int[] array) {\n    if (array.Length == 0) {\n      return 0;\n    } else if (array.Length == 1) {\n      return array[0];\n    }\n    int second = array[0];\n    int first = Math.Max(array[0], array[1]);\n    for (int i = 2; i < array.Length; i++) {\n      int current = Math.Max(first, second + array[i]);\n      second = first;\n      first = current;\n    }\n    return first;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 75, 105, 120, 75, 90, 135 };\n    Utils.AssertTrue(Program.MaxSubsetSumNoAdjacent(input) == 330);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 75, 105, 120, 75, 90, 135 };\n    Utils.AssertTrue(Program.MaxSubsetSumNoAdjacent(input) == 330);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MaxSubsetSumNoAdjacent(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space\nfunc MaxSubsetSumNoAdjacent(array []int) int {\n\tif len(array) == 0 {\n\t\treturn 0\n\t} else if len(array) == 1 {\n\t\treturn array[0]\n\t}\n\tmaxSums := make([]int, len(array))\n\tmaxSums[0], maxSums[1] = array[0], max(array[0], array[1])\n\tfor i := 2; i < len(array); i++ {\n\t\tmaxSums[i] = max(maxSums[i-1], maxSums[i-2]+array[i])\n\t}\n\treturn maxSums[len(array)-1]\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space\nfunc MaxSubsetSumNoAdjacent(array []int) int {\n\tif len(array) == 0 {\n\t\treturn 0\n\t} else if len(array) == 1 {\n\t\treturn array[0]\n\t}\n\tfirst := max(array[0], array[1])\n\tsecond := array[0]\n\tfor i := 2; i < len(array); i++ {\n\t\tcurrent := max(first, second+array[i])\n\t\tsecond = first\n\t\tfirst = current\n\t}\n\treturn first\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tres := MaxSubsetSumNoAdjacent([]int{75, 105, 120, 75, 90, 135})\n\trequire.Equal(t, res, 330)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tres := MaxSubsetSumNoAdjacent([]int{75, 105, 120, 75, 90, 135})\n\trequire.Equal(t, res, 330)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int maxSubsetSumNoAdjacent(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  public static int maxSubsetSumNoAdjacent(int[] array) {\n    if (array.length == 0) {\n      return 0;\n    } else if (array.length == 1) {\n      return array[0];\n    }\n    int[] maxSums = array.clone();\n    maxSums[1] = Math.max(array[0], array[1]);\n    for (int i = 2; i < array.length; i++) {\n      maxSums[i] = Math.max(maxSums[i - 1], maxSums[i - 2] + array[i]);\n    }\n    return maxSums[array.length - 1];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int maxSubsetSumNoAdjacent(int[] array) {\n    if (array.length == 0) {\n      return 0;\n    } else if (array.length == 1) {\n      return array[0];\n    }\n    int second = array[0];\n    int first = Math.max(array[0], array[1]);\n    for (int i = 2; i < array.length; i++) {\n      int current = Math.max(first, second + array[i]);\n      second = first;\n      first = current;\n    }\n    return first;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {75, 105, 120, 75, 90, 135};\n    Utils.assertTrue(Program.maxSubsetSumNoAdjacent(input) == 330);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {75, 105, 120, 75, 90, 135};\n    Utils.assertTrue(Program.maxSubsetSumNoAdjacent(input) == 330);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function maxSubsetSumNoAdjacent(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.maxSubsetSumNoAdjacent = maxSubsetSumNoAdjacent;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nfunction maxSubsetSumNoAdjacent(array) {\n  if (!array.length) return 0;\n  if (array.length === 1) return array[0];\n  const maxSums = array.slice();\n  maxSums[1] = Math.max(array[0], array[1]);\n  for (let i = 2; i < array.length; i++) {\n    maxSums[i] = Math.max(maxSums[i - 1], maxSums[i - 2] + array[i]);\n  }\n  return maxSums[maxSums.length - 1];\n}\n\nexports.maxSubsetSumNoAdjacent = maxSubsetSumNoAdjacent;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nfunction maxSubsetSumNoAdjacent(array) {\n  if (!array.length) return 0;\n  if (array.length === 1) return array[0];\n  let second = array[0];\n  let first = Math.max(array[0], array[1]);\n  for (let i = 2; i < array.length; i++) {\n    const current = Math.max(first, second + array[i]);\n    second = first;\n    first = current;\n  }\n  return first;\n}\n\nexports.maxSubsetSumNoAdjacent = maxSubsetSumNoAdjacent;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.maxSubsetSumNoAdjacent([75, 105, 120, 75, 90, 135])).to.deep.equal(330);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.maxSubsetSumNoAdjacent([75, 105, 120, 75, 90, 135])).to.deep.equal(330);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun maxSubsetSumNoAdjacent(array: List<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\nfun maxSubsetSumNoAdjacent(array: List<Int>): Int {\n    if (array.size == 0) {\n        return 0\n    } else if (array.size == 1) {\n        return array[0]\n    }\n    var maxSums = array.toMutableList()\n    maxSums[1] = max(array[0], array[1])\n    for (i in 2 until array.size) {\n        maxSums[i] = max(maxSums[i - 1], maxSums[i - 2] + array[i])\n    }\n    return maxSums[array.size - 1]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\nfun maxSubsetSumNoAdjacent(array: List<Int>): Int {\n    if (array.size == 0) {\n        return 0\n    } else if (array.size == 1) {\n        return array[0]\n    }\n    var second = array[0]\n    var first = max(array[0], array[1])\n    for (i in 2 until array.size) {\n        val current = max(first, second + array[i])\n        second = first\n        first = current\n    }\n    return first\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.maxSubsetSumNoAdjacent as maxSubsetSumNoAdjacent\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(75, 105, 120, 75, 90, 135)\n        val output = maxSubsetSumNoAdjacent(input)\n        val expected = 330\n        assert(output == expected)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.maxSubsetSumNoAdjacent as maxSubsetSumNoAdjacent\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(75, 105, 120, 75, 90, 135)\n        val output = maxSubsetSumNoAdjacent(input)\n        val expected = 330\n        assert(output == expected)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def maxSubsetSumNoAdjacent(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space\ndef maxSubsetSumNoAdjacent(array):\n    if not len(array):\n        return 0\n    elif len(array) == 1:\n        return array[0]\n    maxSums = array[:]\n    maxSums[1] = max(array[0], array[1])\n    for i in range(2, len(array)):\n        maxSums[i] = max(maxSums[i - 1], maxSums[i - 2] + array[i])\n    return maxSums[-1]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space\ndef maxSubsetSumNoAdjacent(array):\n    if not len(array):\n        return 0\n    elif len(array) == 1:\n        return array[0]\n    second = array[0]\n    first = max(array[0], array[1])\n    for i in range(2, len(array)):\n        current = max(first, second + array[i])\n        second = first\n        first = current\n    return first\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.maxSubsetSumNoAdjacent([75, 105, 120, 75, 90, 135]), 330)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.maxSubsetSumNoAdjacent([75, 105, 120, 75, 90, 135]), 330)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def maxSubsetSumNoAdjacent(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def maxSubsetSumNoAdjacent(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def maxSubsetSumNoAdjacent(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxSubsetSumNoAdjacent\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxSubsetSumNoAdjacent\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func maximumSubsetSum(array: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func maximumSubsetSum(array: [Int]) -> Int {\n    if array.count == 0 {\n      return 0\n    }\n\n    if array.count == 1 {\n      return array.first!\n    }\n\n    var maxSums = array\n    maxSums[1] = max(maxSums[0], maxSums[1])\n\n    for i in 2 ..< array.count {\n      maxSums[i] = max(maxSums[i - 1], maxSums[i - 2] + array[i])\n    }\n\n    return maxSums[maxSums.count - 1]\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  func maximumSubsetSum(array: [Int]) -> Int {\n    if array.count == 0 {\n      return 0\n    }\n\n    if array.count == 1 {\n      return array[0]\n    }\n\n    var second = array[0]\n    var first = max(array[0], array[1])\n\n    for i in 2 ..< array.count {\n      var current = max(first, second + array[i])\n      second = first\n      first = current\n    }\n\n    return first\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(330, program.maximumSubsetSum(array: [75, 105, 120, 75, 90, 135]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(330, program.maximumSubsetSum(array: [75, 105, 120, 75, 90, 135]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function maxSubsetSumNoAdjacent(array: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nexport function maxSubsetSumNoAdjacent(array: number[]) {\n  if (!array.length) return 0;\n  if (array.length === 1) return array[0];\n  const maxSums = array.slice();\n  maxSums[1] = Math.max(array[0], array[1]);\n  for (let i = 2; i < array.length; i++) {\n    maxSums[i] = Math.max(maxSums[i - 1], maxSums[i - 2] + array[i]);\n  }\n  return maxSums[maxSums.length - 1];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nexport function maxSubsetSumNoAdjacent(array: number[]) {\n  if (!array.length) return 0;\n  if (array.length === 1) return array[0];\n  let second = array[0];\n  let first = Math.max(array[0], array[1]);\n  for (let i = 2; i < array.length; i++) {\n    const current = Math.max(first, second + array[i]);\n    second = first;\n    first = current;\n  }\n  return first;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.maxSubsetSumNoAdjacent([75, 105, 120, 75, 90, 135])).to.deep.equal(330);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.maxSubsetSumNoAdjacent([75, 105, 120, 75, 90, 135])).to.deep.equal(330);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        75,
        105,
        120,
        75,
        90,
        135
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        75,
        105,
        120,
        75,
        90,
        135
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        1,
        15,
        3
      ]
    },
    {
      "array": [
        7,
        10,
        12,
        7,
        9,
        14
      ]
    },
    {
      "array": [
        4,
        3,
        5,
        200,
        5,
        3
      ]
    },
    {
      "array": [
        10,
        5,
        20,
        25,
        15,
        5,
        5,
        15
      ]
    },
    {
      "array": [
        10,
        5,
        20,
        25,
        15,
        5,
        5,
        15,
        3,
        15,
        5,
        5,
        15
      ]
    },
    {
      "array": [
        125,
        210,
        250,
        120,
        150,
        300
      ]
    },
    {
      "array": [
        30,
        25,
        50,
        55,
        100
      ]
    },
    {
      "array": [
        30,
        25,
        50,
        55,
        100,
        120
      ]
    },
    {
      "array": [
        7,
        10,
        12,
        7,
        9,
        14,
        15,
        16,
        25,
        20,
        4
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        75,
        105,
        120,
        75,
        90,
        135
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        1,
        15,
        3
      ]
    },
    {
      "array": [
        7,
        10,
        12,
        7,
        9,
        14
      ]
    },
    {
      "array": [
        4,
        3,
        5,
        200,
        5,
        3
      ]
    },
    {
      "array": [
        10,
        5,
        20,
        25,
        15,
        5,
        5,
        15
      ]
    },
    {
      "array": [
        10,
        5,
        20,
        25,
        15,
        5,
        5,
        15,
        3,
        15,
        5,
        5,
        15
      ]
    },
    {
      "array": [
        125,
        210,
        250,
        120,
        150,
        300
      ]
    },
    {
      "array": [
        30,
        25,
        50,
        55,
        100
      ]
    },
    {
      "array": [
        30,
        25,
        50,
        55,
        100,
        120
      ]
    },
    {
      "array": [
        7,
        10,
        12,
        7,
        9,
        14,
        15,
        16,
        25,
        20,
        4
      ]
    }
  ],
  "changelog": []
}