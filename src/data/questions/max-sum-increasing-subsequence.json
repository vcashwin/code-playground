{
  "uid": "max-sum-increasing-subsequence",
  "testStrategy": "JSON",
  "name": "Max Sum Increasing Subsequence",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 14816,
    "failureCount": 5531
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225712211",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1105
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of integers and returns the\n  greatest sum that can be generated from a strictly-increasing subsequence in\n  the array as well as an array of the numbers in that subsequence.\n</p>\n<p>\n  A subsequence of an array is a set of numbers that aren't necessarily adjacent\n  in the array but that are in the same order as they appear in the array. For\n  instance, the numbers <span>[1, 3, 4]</span> form a subsequence of the array\n  <span>[1, 2, 3, 4]</span>, and so do the numbers <span>[2, 4]</span>. Note\n  that a single number in an array and the array itself are both valid\n  subsequences of the array.\n</p>\n<p>\n  You can assume that there will only be one increasing subsequence with the\n  greatest sum.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [10, 70, 20, 30, 50, 11, 30]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[110, [10, 20, 30, 50]] <span class=\"CodeEditor-promptComment\">// The subsequence [10, 20, 30, 50] is strictly increasing and yields the greatest sum: 110.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building an array of the same length as the input array. At each index in this new array, store the maximum sum that can be generated from an increasing subsequence ending with the number found at that index in the input array.\n</p>\n",
    "\n<p>\nCan you efficiently keep track of potential sequences in another array? Instead of storing entire sequences, try storing the indices of previous numbers. For example, at index 3 in this other array, store the index of the before-last number in the max-sum increasing subsequence ending with the number at index 3.\n</p>"
  ],
  "spaceTime": "O(n^2) time | O(n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> maxSumIncreasingSubsequence(vector<int> array) {\n  // Write your code here.\n  return {\n    {0},  // Sum of sequence.\n    {},   // Elements of the sequence.\n  };\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <climits>\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> buildSequence(\n  vector<int> array, vector<int> sequences, int currentIdx, int sum\n);\n\n// O(n^2) time | O(n) space\nvector<vector<int>> maxSumIncreasingSubsequence(vector<int> array) {\n  vector<int> sequences(array.size(), INT_MIN);\n  vector<int> sums = array;\n  int maxSumIdx = 0;\n  for (int i = 0; i < array.size(); i++) {\n    int currentNum = array[i];\n    for (int j = 0; j < i; j++) {\n      int otherNum = array[j];\n      if (otherNum < currentNum && sums[j] + currentNum >= sums[i]) {\n        sums[i] = sums[j] + currentNum;\n        sequences[i] = j;\n      }\n    }\n    if (sums[i] >= sums[maxSumIdx]) {\n      maxSumIdx = i;\n    }\n  }\n  return buildSequence(array, sequences, maxSumIdx, sums[maxSumIdx]);\n}\n\nvector<vector<int>> buildSequence(\n  vector<int> array, vector<int> sequences, int currentIdx, int sum\n) {\n  vector<vector<int>> sequence = {{}, {}};\n  sequence[0].push_back(sum);\n  while (currentIdx != INT_MIN) {\n    sequence[1].insert(sequence[1].begin(), array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{10, 70, 20, 30, 50, 11, 30};\n      vector<vector<int>> expected{{110}, {10, 20, 30, 50}};\n      assert(maxSumIncreasingSubsequence(input) == expected);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{10, 70, 20, 30, 50, 11, 30};\n      vector<vector<int>> expected{{110}, {10, 20, 30, 50}};\n      assert(maxSumIncreasingSubsequence(input) == expected);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<List<int> > MaxSumIncreasingSubsequence(int[] array) {\n    // Write your code here.\n    return new List<List<int> >() {\n      new List<int>() {\n        -1,  // Sum of the items.\n      },\n      new List<int>(),  // Item sequence.\n    };\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^2) time | O(n) space\n  public static List<List<int> > MaxSumIncreasingSubsequence(int[] array) {\n    int[] sequences = new int[array.Length];\n    Array.Fill(sequences, Int32.MinValue);\n    int[] sums = (int[])array.Clone();\n    int maxSumIdx = 0;\n    for (int i = 0; i < array.Length; i++) {\n      int currentNum = array[i];\n      for (int j = 0; j < i; j++) {\n        int otherNum = array[j];\n        if (otherNum < currentNum && sums[j] + currentNum >= sums[i]) {\n          sums[i] = sums[j] + currentNum;\n          sequences[i] = j;\n        }\n      }\n      if (sums[i] >= sums[maxSumIdx]) {\n        maxSumIdx = i;\n      }\n    }\n    return buildSequence(array, sequences, maxSumIdx, sums[maxSumIdx]);\n  }\n\n  public static List<List<int> > buildSequence(\n    int[] array, int[] sequences, int currentIdx, int sums\n  ) {\n    List<List<int> > sequence = new List<List<int> >();\n    sequence.Add(new List<int>());\n    sequence.Add(new List<int>());\n    sequence[0].Add(sums);\n    while (currentIdx != Int32.MinValue) {\n      sequence[1].Insert(0, array[currentIdx]);\n      currentIdx = sequences[currentIdx];\n    }\n    return sequence;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 10, 70, 20, 30, 50, 11, 30 };\n    Tuple<int, int[]> expected =\n      Tuple.Create(110, new int[] { 10, 20, 30, 50 });\n    Utils.AssertTrue(\n      compare(Program.MaxSumIncreasingSubsequence(input), expected)\n    );\n  }\n\n  private static bool compare(List<List<int> > arr1, Tuple<int, int[]> arr2) {\n    if (arr1[0][0] != arr2.Item1) {\n      return false;\n    }\n    if (arr1[1].Count != arr2.Item2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1[1].Count; i++) {\n      if (arr1[1][i] != arr2.Item2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "using System;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 10, 70, 20, 30, 50, 11, 30 };\n    Tuple<int, int[]> expected =\n      Tuple.Create(110, new int[] { 10, 20, 30, 50 });\n    Utils.AssertTrue(\n      compare(Program.MaxSumIncreasingSubsequence(input), expected)\n    );\n  }\n\n  private static bool compare(List<List<int> > arr1, Tuple<int, int[]> arr2) {\n    if (arr1[0][0] != arr2.Item1) {\n      return false;\n    }\n    if (arr1[1].Count != arr2.Item2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1[1].Count; i++) {\n      if (arr1[1][i] != arr2.Item2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MaxSumIncreasingSubsequence(array []int) (int, []int) {\n\t// Write your code here.\n\treturn 0, nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(n^2) time | O(n) space\nfunc MaxSumIncreasingSubsequence(array []int) (int, []int) {\n\tsequences := make([]int, len(array))\n\tsums := make([]int, len(array))\n\tfor i := range sequences {\n\t\tsequences[i] = math.MinInt32\n\t\tsums[i] = array[i]\n\t}\n\tmaxSumIndex := 0\n\tfor i, currentNum := range array {\n\t\tfor j := 0; j < i; j++ {\n\t\t\totherNum := array[j]\n\t\t\tif otherNum < currentNum && sums[j]+currentNum >= sums[i] {\n\t\t\t\tsums[i] = sums[j] + currentNum\n\t\t\t\tsequences[i] = j\n\t\t\t}\n\t\t}\n\t\tif sums[i] > sums[maxSumIndex] {\n\t\t\tmaxSumIndex = i\n\t\t}\n\t}\n\n\tmaxSum := sums[maxSumIndex]\n\tsequence := buildSequence(array, sequences, maxSumIndex)\n\treturn maxSum, sequence\n}\n\nfunc buildSequence(array []int, sequences []int, index int) []int {\n\tsequence := []int{}\n\tfor index != math.MinInt32 {\n\t\tsequence = append(sequence, array[index])\n\t\tindex = sequences[index]\n\t}\n\treverse(sequence)\n\treturn sequence\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i < j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutputSum, outputSequence := MaxSumIncreasingSubsequence([]int{10, 70, 20, 30, 50, 11, 30})\n\trequire.Equal(t, 110, outputSum)\n\trequire.Equal(t, []int{10, 20, 30, 50}, outputSequence)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutputSum, outputSequence := MaxSumIncreasingSubsequence([]int{10, 70, 20, 30, 50, 11, 30})\n\trequire.Equal(t, 110, outputSum)\n\trequire.Equal(t, []int{10, 20, 30, 50}, outputSequence)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<List<Integer>> maxSumIncreasingSubsequence(int[] array) {\n    // Write your code here.\n    return new ArrayList<List<Integer>>() {\n      {\n        add(List.of(10)); // Example max sum\n        add(List.of(2, 3, 5)); // Example max sequence\n      }\n    };\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static List<List<Integer>> maxSumIncreasingSubsequence(int[] array) {\n    int[] sequences = new int[array.length];\n    Arrays.fill(sequences, Integer.MIN_VALUE);\n    int[] sums = array.clone();\n    int maxSumIdx = 0;\n    for (int i = 0; i < array.length; i++) {\n      int currentNum = array[i];\n      for (int j = 0; j < i; j++) {\n        int otherNum = array[j];\n        if (otherNum < currentNum && sums[j] + currentNum >= sums[i]) {\n          sums[i] = sums[j] + currentNum;\n          sequences[i] = j;\n        }\n      }\n      if (sums[i] >= sums[maxSumIdx]) {\n        maxSumIdx = i;\n      }\n    }\n    return buildSequence(array, sequences, maxSumIdx, sums[maxSumIdx]);\n  }\n\n  public static List<List<Integer>> buildSequence(\n    int[] array, int[] sequences, int currentIdx, int sums\n  ) {\n    List<List<Integer>> sequence = new ArrayList<List<Integer>>();\n    sequence.add(new ArrayList<Integer>());\n    sequence.add(new ArrayList<Integer>());\n    sequence.get(0).add(sums);\n    while (currentIdx != Integer.MIN_VALUE) {\n      sequence.get(1).add(0, array[currentIdx]);\n      currentIdx = sequences[currentIdx];\n    }\n    return sequence;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {10, 70, 20, 30, 50, 11, 30};\n    int[][] expected = {{110}, {10, 20, 30, 50}};\n    Utils.assertTrue(\n      compare(Program.maxSumIncreasingSubsequence(input), expected)\n    );\n  }\n\n  public static boolean compare(List<List<Integer>> arr1, int[][] arr2) {\n    if (arr1.get(0).get(0) != arr2[0][0]) {\n      return false;\n    }\n    for (int i = 0; i < arr1.get(1).size(); i++) {\n      if (arr1.get(1).get(i) != arr2[1][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {10, 70, 20, 30, 50, 11, 30};\n    int[][] expected = {{110}, {10, 20, 30, 50}};\n    Utils.assertTrue(\n      compare(Program.maxSumIncreasingSubsequence(input), expected)\n    );\n  }\n\n  public static boolean compare(List<List<Integer>> arr1, int[][] arr2) {\n    if (arr1.get(0).get(0) != arr2[0][0]) {\n      return false;\n    }\n    for (int i = 0; i < arr1.get(1).size(); i++) {\n      if (arr1.get(1).get(i) != arr2[1][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function maxSumIncreasingSubsequence(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.maxSumIncreasingSubsequence = maxSumIncreasingSubsequence;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction maxSumIncreasingSubsequence(array) {\n  const sequences = new Array(array.length);\n  const sums = array.map(num => num);\n  let maxSumIdx = 0;\n  for (let i = 0; i < array.length; i++) {\n    const currentNum = array[i];\n    for (let j = 0; j < i; j++) {\n      const otherNum = array[j];\n      if (otherNum < currentNum && sums[j] + currentNum >= sums[i]) {\n        sums[i] = sums[j] + currentNum;\n        sequences[i] = j;\n      }\n    }\n    if (sums[i] >= sums[maxSumIdx]) maxSumIdx = i;\n  }\n  return [sums[maxSumIdx], buildSequence(array, sequences, maxSumIdx)];\n}\n\nfunction buildSequence(array, sequences, currentIdx) {\n  const sequence = [];\n  while (currentIdx !== undefined) {\n    sequence.unshift(array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n\nexports.maxSumIncreasingSubsequence = maxSumIncreasingSubsequence;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.maxSumIncreasingSubsequence([10, 70, 20, 30, 50, 11, 30]))\n    .to.deep.equal([110, [10, 20, 30, 50]]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.maxSumIncreasingSubsequence([10, 70, 20, 30, 50, 11, 30]))\n    .to.deep.equal([110, [10, 20, 30, 50]]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun maxSumIncreasingSubsequence(array: List<Int>): Pair<Int, List<Int>> {\n    // Write your code here.\n    return Pair(-1, listOf())\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space\nfun maxSumIncreasingSubsequence(array: List<Int>): Pair<Int, List<Int>> {\n    val sequences = MutableList<Int>(array.size) { Int.MIN_VALUE }\n    val sums = array.toMutableList()\n    var maxSumIdx = 0\n    for (i in 0 until array.size) {\n        val currentNum = array[i]\n        for (j in 0 until i) {\n            val otherNum = array[j]\n            if (otherNum < currentNum && sums[j] + currentNum >= sums[i]) {\n                sums[i] = sums[j] + currentNum\n                sequences[i] = j\n            }\n        }\n        if (sums[i] >= sums[maxSumIdx]) {\n            maxSumIdx = i\n        }\n    }\n    return buildSequence(array, sequences, maxSumIdx, sums[maxSumIdx])\n}\n\nfun buildSequence(array: List<Int>, sequences: List<Int>, startIdx: Int, sums: Int): Pair<Int, List<Int>> {\n    var currentIdx = startIdx\n    val sequence = mutableListOf<Int>()\n    while (currentIdx != Int.MIN_VALUE) {\n        sequence.add(0, array[currentIdx])\n        currentIdx = sequences[currentIdx]\n    }\n    val pair = Pair<Int, List<Int>>(sums, sequence)\n    return pair\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.maxSumIncreasingSubsequence\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(10, 70, 20, 30, 50, 11, 30)\n        val expected = Pair(110, listOf(10, 20, 30, 50))\n        val output = maxSumIncreasingSubsequence(input)\n        assert(expected.equals(output))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.maxSumIncreasingSubsequence\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(10, 70, 20, 30, 50, 11, 30)\n        val expected = Pair(110, listOf(10, 20, 30, 50))\n        val output = maxSumIncreasingSubsequence(input)\n        assert(expected.equals(output))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def maxSumIncreasingSubsequence(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef maxSumIncreasingSubsequence(array):\n    sequences = [None for x in array]\n    sums = [num for num in array]\n    maxSumIdx = 0\n    for i in range(len(array)):\n        currentNum = array[i]\n        for j in range(0, i):\n            otherNum = array[j]\n            if otherNum < currentNum and sums[j] + currentNum >= sums[i]:\n                sums[i] = sums[j] + currentNum\n                sequences[i] = j\n        if sums[i] >= sums[maxSumIdx]:\n            maxSumIdx = i\n    return [sums[maxSumIdx], buildSequence(array, sequences, maxSumIdx)]\n\n\ndef buildSequence(array, sequences, currentIdx):\n    sequence = []\n    while currentIdx is not None:\n        sequence.append(array[currentIdx])\n        currentIdx = sequences[currentIdx]\n    return list(reversed(sequence))\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.maxSumIncreasingSubsequence([10, 70, 20, 30, 50, 11, 30]),\n            [110, [10, 20, 30, 50]],\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.maxSumIncreasingSubsequence([10, 70, 20, 30, 50, 11, 30]),\n            [110, [10, 20, 30, 50]],\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def maxSumIncreasingSubsequence(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def maxSumIncreasingSubsequence(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxSumIncreasingSubsequence\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxSumIncreasingSubsequence\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func maximumSumIncreasingSubsequence(array: [Int]) -> (Int, [Int]) {\n    // Write your code here.\n    return (-1, [])\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space\n  func maximumSumIncreasingSubsequence(array: [Int]) -> (Int, [Int]) {\n    var maxSumIndex = 0\n    var sums = array.map { $0 }\n    var previousIndices: [Int?] = Array(repeating: nil, count: array.count)\n\n    for i in 0 ..< array.count {\n      let currentNumber = array[i]\n      for j in 0 ..< i {\n        let previousNumber = array[j]\n        if previousNumber < currentNumber, sums[j] + currentNumber > sums[i] {\n          sums[i] = sums[j] + currentNumber\n          previousIndices[i] = j\n        }\n      }\n\n      if sums[i] > sums[maxSumIndex] {\n        maxSumIndex = i\n      }\n    }\n\n    return (sums[maxSumIndex], buildSequence(array, maxSumIndex, previousIndices))\n  }\n\n  func buildSequence(_ array: [Int], _ maxSumIndex: Int, _ previousIndices: [Int?]) -> [Int] {\n    var sequence = [Int]()\n    var currentIndex: Int? = maxSumIndex\n\n    while currentIndex != nil {\n      sequence.insert(array[currentIndex!], at: 0)\n      currentIndex = previousIndices[currentIndex!]\n    }\n\n    return sequence\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.maximumSumIncreasingSubsequence(array: [10, 70, 20, 30, 50, 11, 30])\n      try assert(output == (110, [10, 20, 30, 50]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.maximumSumIncreasingSubsequence(array: [10, 70, 20, 30, 50, 11, 30])\n      try assert(output == (110, [10, 20, 30, 50]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function maxSumIncreasingSubsequence(array: number[]): [number, number[]] {\n  // Write your code here.\n  return [-1, [-1]];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nexport function maxSumIncreasingSubsequence(array: number[]): [number, number[]] {\n  const sequences: number[] = new Array(array.length);\n  const sums: number[] = array.map(num => num);\n  let maxSumIdx = 0;\n  for (let i = 0; i < array.length; i++) {\n    const currentNum = array[i];\n    for (let j = 0; j < i; j++) {\n      const otherNum = array[j];\n      if (otherNum < currentNum && sums[j] + currentNum >= sums[i]) {\n        sums[i] = sums[j] + currentNum;\n        sequences[i] = j;\n      }\n    }\n    if (sums[i] >= sums[maxSumIdx]) maxSumIdx = i;\n  }\n  return [sums[maxSumIdx], buildSequence(array, sequences, maxSumIdx)];\n}\n\nfunction buildSequence(array: number[], sequences: number[], currentIdx: number) {\n  const sequence: number[] = [];\n  while (currentIdx !== undefined) {\n    sequence.unshift(array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.maxSumIncreasingSubsequence([10, 70, 20, 30, 50, 11, 30]))\n    .to.deep.equal([110, [10, 20, 30, 50]]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.maxSumIncreasingSubsequence([10, 70, 20, 30, 50, 11, 30]))\n    .to.deep.equal([110, [10, 20, 30, 50]]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        10,
        70,
        20,
        30,
        50,
        11,
        30
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        10,
        70,
        20,
        30,
        50,
        11,
        30
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        -1
      ]
    },
    {
      "array": [
        -1,
        1
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        -5,
        -4,
        -3,
        -2,
        -1
      ]
    },
    {
      "array": [
        8,
        12,
        2,
        3,
        15,
        5,
        7
      ]
    },
    {
      "array": [
        10,
        15,
        4,
        5,
        11,
        14,
        31,
        25,
        31,
        23,
        25,
        31,
        50
      ]
    },
    {
      "array": [
        10,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        10,
        70,
        20,
        30,
        50,
        11,
        30
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        -1
      ]
    },
    {
      "array": [
        -1,
        1
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        -5,
        -4,
        -3,
        -2,
        -1
      ]
    },
    {
      "array": [
        8,
        12,
        2,
        3,
        15,
        5,
        7
      ]
    },
    {
      "array": [
        10,
        15,
        4,
        5,
        11,
        14,
        31,
        25,
        31,
        23,
        25,
        31,
        50
      ]
    },
    {
      "array": [
        10,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    }
  ],
  "changelog": []
}