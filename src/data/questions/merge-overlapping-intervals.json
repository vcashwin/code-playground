{
  "uid": "merge-overlapping-intervals",
  "testStrategy": "JSON",
  "name": "Merge Overlapping Intervals",
  "version": 0,
  "releaseDate": "2021-04-01T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 32917,
    "failureCount": 9105
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "557896069",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1082
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of arbitrary intervals,\n  merges any overlapping intervals, and returns the new intervals in no\n  particular order.\n</p>\n<p>\n  Each interval <span>interval</span> is an array of two integers, with\n  <span>interval[0]</span> as the start of the interval and\n  <span>interval[1]</span> as the end of the interval.\n</p>\n<p>\n  Note that back-to-back intervals aren't considered to be overlapping. For\n  example, <span>[1, 5]</span> and <span>[6, 7]</span> aren't overlapping;\n  however, <span>[1, 6]</span> and <span>[6, 7]</span> <i>are</i> indeed\n  overlapping.\n</p>\n<p>\n  Also note that the start of any particular interval will always be less than\n  or equal to the end of that interval.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">intervals</span> = [[1, 2], [3, 5], [4, 7], [6, 8], [9, 10]]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[[1, 2], [3, 8], [9, 10]]\n<span class=\"CodeEditor-promptComment\">// Merge the intervals [3, 5], [4, 7], and [6, 8].</span>\n<span class=\"CodeEditor-promptComment\">// The intervals could be ordered differently.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  The problem asks you to merge overlapping intervals. How can you determine if\n  two intervals are overlapping?\n</p>\n",
    "\n<p>\n  Sort the intervals with respect to their starting values. This will allow you\n  to merge all overlapping intervals in a single traversal through the sorted\n  intervals.\n</p>\n",
    "\n<p>\n  After sorting the intervals with respect to their starting values, traverse\n  them, and at each iteration, compare the start of the next interval to the end\n  of the current interval to look for an overlap. If you find an overlap, mutate\n  the current interval so as to merge the next interval into it.\n</p>"
  ],
  "spaceTime": "O(nlog(n)) time | O(n) space - where n is the length of the input array",
  "notes": "<div class=\"html\">\n<p>\n  Important note: while this problem's prompt specifies that the input array of\n  intervals is non-empty, in a real coding interview, it would be important to\n  double-check this with your interviewer and to ask them if they'd like you to\n  handle that edge case in your function.\n</p>\n<p>\n  As they currently stand, our sample solutions would have a run-time error if\n  the input array were empty.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> intervals) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(nlog(n)) time | O(n) space - where n is the length of the input array\nvector<vector<int>> mergeOverlappingIntervals(vector<vector<int>> intervals) {\n  vector<vector<int>> sortedIntervals = intervals;\n  sort(\n    sortedIntervals.begin(),\n    sortedIntervals.end(),\n    [](vector<int> a, vector<int> b) { return a[0] < b[0]; }\n  );\n\n  vector<vector<int>*> mergedIntervals;\n  vector<int>* currentInterval = &sortedIntervals[0];\n  mergedIntervals.push_back(currentInterval);\n\n  for (auto& nextInterval : sortedIntervals) {\n    int currentIntervalEnd = currentInterval->at(1);\n    int nextIntervalStart = nextInterval[0];\n    int nextIntervalEnd = nextInterval[1];\n\n    if (currentIntervalEnd >= nextIntervalStart) {\n      currentInterval->at(1) = max(currentIntervalEnd, nextIntervalEnd);\n    } else {\n      currentInterval = &nextInterval;\n      mergedIntervals.push_back(currentInterval);\n    }\n  }\n\n  vector<vector<int>> mergedIntervalsCopy;\n  for (auto interval : mergedIntervals) {\n    mergedIntervalsCopy.push_back(*interval);\n  }\n  return mergedIntervalsCopy;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> intervals = {{1, 2}, {3, 5}, {4, 7}, {6, 8}, {9, 10}};\n      vector<vector<int>> expected = {{1, 2}, {3, 8}, {9, 10}};\n      auto actual = mergeOverlappingIntervals(intervals);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> intervals = {{1, 2}, {3, 5}, {4, 7}, {6, 8}, {9, 10}};\n      vector<vector<int>> expected = {{1, 2}, {3, 8}, {9, 10}};\n      auto actual = mergeOverlappingIntervals(intervals);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int[][] MergeOverlappingIntervals(int[][] intervals) {\n    // Write your code here.\n    return new int[][] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(nlog(n)) time | O(n) space - where n is the length of the input array\n  public int[][] MergeOverlappingIntervals(int[][] intervals) {\n    // Sort the intervals by starting value.\n    int[][] sortedIntervals = intervals.Clone() as int[][];\n    Array.Sort(sortedIntervals, (a, b) => a[0].CompareTo(b[0]));\n\n    List<int[]> mergedIntervals = new List<int[]>();\n    int[] currentInterval = sortedIntervals[0];\n    mergedIntervals.Add(currentInterval);\n\n    foreach (var nextInterval in sortedIntervals) {\n      int currentIntervalEnd = currentInterval[1];\n      int nextIntervalStart = nextInterval[0];\n      int nextIntervalEnd = nextInterval[1];\n\n      if (currentIntervalEnd >= nextIntervalStart) {\n        currentInterval[1] = Math.Max(currentIntervalEnd, nextIntervalEnd);\n      } else {\n        currentInterval = nextInterval;\n        mergedIntervals.Add(currentInterval);\n      }\n    }\n\n    return mergedIntervals.ToArray();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[][] intervals = new int[][] {\n      new int[] { 1, 2 },\n      new int[] { 3, 5 },\n      new int[] { 4, 7 },\n      new int[] { 6, 8 },\n      new int[] { 9, 10 },\n    };\n    int[][] expected = new int[][] {\n      new int[] { 1, 2 },\n      new int[] { 3, 8 },\n      new int[] { 9, 10 },\n    };\n    int[][] actual = new Program().MergeOverlappingIntervals(intervals);\n    for (int i = 0; i < actual.Length; i++) {\n      for (int j = 0; j < actual[i].Length; j++) {\n        Utils.AssertTrue(expected[i][j] == actual[i][j]);\n      }\n    }\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[][] intervals = new int[][] {\n      new int[] { 1, 2 },\n      new int[] { 3, 5 },\n      new int[] { 4, 7 },\n      new int[] { 6, 8 },\n      new int[] { 9, 10 },\n    };\n    int[][] expected = new int[][] {\n      new int[] { 1, 2 },\n      new int[] { 3, 8 },\n      new int[] { 9, 10 },\n    };\n    int[][] actual = new Program().MergeOverlappingIntervals(intervals);\n    for (int i = 0; i < actual.Length; i++) {\n      for (int j = 0; j < actual[i].Length; j++) {\n        Utils.AssertTrue(expected[i][j] == actual[i][j]);\n      }\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MergeOverlappingIntervals(intervals [][]int) [][]int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"sort\"\n)\n\n// O(nlog(n)) time | O(n) space - where n is the length of the input array\nfunc MergeOverlappingIntervals(intervals [][]int) [][]int {\n\tsortedIntervals := make([][]int, len(intervals))\n\tcopy(sortedIntervals, intervals)\n\tsort.Slice(sortedIntervals, func(i, j int) bool {\n\t\treturn sortedIntervals[i][0] < sortedIntervals[j][0]\n\t})\n\n\tmergedIntervals := make([][]int, 0)\n\tcurrentInterval := sortedIntervals[0]\n\tmergedIntervals = append(mergedIntervals, currentInterval)\n\n\tfor _, nextInterval := range sortedIntervals {\n\t\tcurrentIntervalEnd := currentInterval[1]\n\t\tnextIntervalStart, nextIntervalEnd := nextInterval[0], nextInterval[1]\n\n\t\tif currentIntervalEnd >= nextIntervalStart {\n\t\t\tcurrentInterval[1] = max(currentIntervalEnd, nextIntervalEnd)\n\t\t} else {\n\t\t\tcurrentInterval = nextInterval\n\t\t\tmergedIntervals = append(mergedIntervals, currentInterval)\n\t\t}\n\t}\n\n\treturn mergedIntervals\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 2},\n\t\t{3, 5},\n\t\t{4, 7},\n\t\t{6, 8},\n\t\t{9, 10},\n\t}\n\texpected := [][]int{\n\t\t{1, 2},\n\t\t{3, 8},\n\t\t{9, 10},\n\t}\n\tactual := MergeOverlappingIntervals(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 2},\n\t\t{3, 5},\n\t\t{4, 7},\n\t\t{6, 8},\n\t\t{9, 10},\n\t}\n\texpected := [][]int{\n\t\t{1, 2},\n\t\t{3, 8},\n\t\t{9, 10},\n\t}\n\tactual := MergeOverlappingIntervals(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int[][] mergeOverlappingIntervals(int[][] intervals) {\n    // Write your code here.\n    return new int[][] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlog(n)) time | O(n) space - where n is the length of the input array\n  public int[][] mergeOverlappingIntervals(int[][] intervals) {\n    // Sort the intervals by starting value.\n    int[][] sortedIntervals = intervals.clone();\n    Arrays.sort(sortedIntervals, (a, b) -> Integer.compare(a[0], b[0]));\n\n    List<int[]> mergedIntervals = new ArrayList<int[]>();\n    int[] currentInterval = sortedIntervals[0];\n    mergedIntervals.add(currentInterval);\n\n    for (int[] nextInterval : sortedIntervals) {\n      int currentIntervalEnd = currentInterval[1];\n      int nextIntervalStart = nextInterval[0];\n      int nextIntervalEnd = nextInterval[1];\n\n      if (currentIntervalEnd >= nextIntervalStart) {\n        currentInterval[1] = Math.max(currentIntervalEnd, nextIntervalEnd);\n      } else {\n        currentInterval = nextInterval;\n        mergedIntervals.add(currentInterval);\n      }\n    }\n\n    return mergedIntervals.toArray(new int[mergedIntervals.size()][]);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] intervals = new int[][] {{1, 2}, {3, 5}, {4, 7}, {6, 8}, {9, 10}};\n    int[][] expected = new int[][] {{1, 2}, {3, 8}, {9, 10}};\n    int[][] actual = new Program().mergeOverlappingIntervals(intervals);\n    for (int i = 0; i < actual.length; i++) {\n      for (int j = 0; j < actual[i].length; j++) {\n        Utils.assertTrue(expected[i][j] == actual[i][j]);\n      }\n    }\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] intervals = new int[][] {{1, 2}, {3, 5}, {4, 7}, {6, 8}, {9, 10}};\n    int[][] expected = new int[][] {{1, 2}, {3, 8}, {9, 10}};\n    int[][] actual = new Program().mergeOverlappingIntervals(intervals);\n    for (int i = 0; i < actual.length; i++) {\n      for (int j = 0; j < actual[i].length; j++) {\n        Utils.assertTrue(expected[i][j] == actual[i][j]);\n      }\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function mergeOverlappingIntervals(array) {\n  // Write your code here.\n  return [[]];\n}\n\n// Do not edit the line below.\nexports.mergeOverlappingIntervals = mergeOverlappingIntervals;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(n) space - where n is the length of the input array\nfunction mergeOverlappingIntervals(intervals) {\n  const sortedIntervals = intervals.sort((a, b) => a[0] - b[0]);\n\n  const mergedIntervals = [];\n  let currentInterval = sortedIntervals[0];\n  mergedIntervals.push(currentInterval);\n\n  for (const nextInterval of sortedIntervals) {\n    const [_, currentIntervalEnd] = currentInterval;\n    const [nextIntervalStart, nextIntervalEnd] = nextInterval;\n\n    if (currentIntervalEnd >= nextIntervalStart)\n      currentInterval[1] = Math.max(currentIntervalEnd, nextIntervalEnd);\n    else {\n      currentInterval = nextInterval;\n      mergedIntervals.push(currentInterval);\n    }\n  }\n\n  return mergedIntervals;\n}\n\n// Do not edit the line below.\nexports.mergeOverlappingIntervals = mergeOverlappingIntervals;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const intervals = [\n    [1, 2],\n    [3, 5],\n    [4, 7],\n    [6, 8],\n    [9, 10],\n  ];\n  const expected = [\n    [1, 2],\n    [3, 8],\n    [9, 10],\n  ];\n  const actual = program.mergeOverlappingIntervals(intervals);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const intervals = [\n    [1, 2],\n    [3, 5],\n    [4, 7],\n    [6, 8],\n    [9, 10],\n  ];\n  const expected = [\n    [1, 2],\n    [3, 8],\n    [9, 10],\n  ];\n  const actual = program.mergeOverlappingIntervals(intervals);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun mergeOverlappingIntervals(intervals: List<List<Int>>): List<List<Int>> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(nlog(n)) time | O(n) space - where n is the length of the input array\nfun mergeOverlappingIntervals(intervals: List<List<Int>>): List<List<Int>> {\n    // Sort the intervals by starting value.\n    var sortedIntervals = intervals.toMutableList().sortedWith(\n        Comparator<List<Int>> { a, b -> a[0].compareTo(b[0]) },\n    )\n    sortedIntervals = sortedIntervals.map() { it -> it.toMutableList() }\n\n    val mergedIntervals = mutableListOf<MutableList<Int>>()\n    var currentInterval = sortedIntervals[0]\n    mergedIntervals.add(currentInterval)\n\n    for (nextInterval in sortedIntervals) {\n        val (currentIntervalStart, currentIntervalEnd) = currentInterval\n        val (nextIntervalStart, nextIntervalEnd) = nextInterval\n\n        if (currentIntervalEnd >= nextIntervalStart) {\n            currentInterval[1] = max(currentIntervalEnd, nextIntervalEnd)\n        } else {\n            currentInterval = nextInterval\n            mergedIntervals.add(currentInterval)\n        }\n    }\n\n    return mergedIntervals\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.mergeOverlappingIntervals\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val intervals =\n            listOf(listOf(1, 2), listOf(3, 5), listOf(4, 7), listOf(6, 8), listOf(9, 10))\n        val expected = listOf(listOf(1, 2), listOf(3, 8), listOf(9, 10))\n        val output = mergeOverlappingIntervals(intervals)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.mergeOverlappingIntervals\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val intervals =\n            listOf(listOf(1, 2), listOf(3, 5), listOf(4, 7), listOf(6, 8), listOf(9, 10))\n        val expected = listOf(listOf(1, 2), listOf(3, 8), listOf(9, 10))\n        val output = mergeOverlappingIntervals(intervals)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def mergeOverlappingIntervals(intervals):\n    # Write your code here.\n    return [[]]\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlog(n)) time | O(n) space - where n is the length of the input array\ndef mergeOverlappingIntervals(intervals):\n    # Sort the intervals by starting value.\n    sortedIntervals = sorted(intervals, key=lambda x: x[0])\n\n    mergedIntervals = []\n    currentInterval = sortedIntervals[0]\n    mergedIntervals.append(currentInterval)\n\n    for nextInterval in sortedIntervals:\n        _, currentIntervalEnd = currentInterval\n        nextIntervalStart, nextIntervalEnd = nextInterval\n\n        if currentIntervalEnd >= nextIntervalStart:\n            currentInterval[1] = max(currentIntervalEnd, nextIntervalEnd)\n        else:\n            currentInterval = nextInterval\n            mergedIntervals.append(currentInterval)\n\n    return mergedIntervals\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        intervals = [[1, 2], [3, 5], [4, 7], [6, 8], [9, 10]]\n        expected = [[1, 2], [3, 8], [9, 10]]\n        actual = program.mergeOverlappingIntervals(intervals)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        intervals = [[1, 2], [3, 5], [4, 7], [6, 8], [9, 10]]\n        expected = [[1, 2], [3, 8], [9, 10]]\n        actual = program.mergeOverlappingIntervals(intervals)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def mergeOverlappingIntervals(intervals)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def mergeOverlappingIntervals(intervals)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.mergeOverlappingIntervals\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.mergeOverlappingIntervals\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func mergeOverlappingIntervals(_ intervals: [[Int]]) -> [[Int]] {\n    // Write your code here.\n    return [[Int]]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlog(n)) time | O(n) space - where n is the length of the input array\n  func mergeOverlappingIntervals(_ intervals: [[Int]]) -> [[Int]] {\n    let sortedIntervals = intervals.sorted(by: { $0[0] < $1[0] })\n\n    var mergedIntervals = [[Int]]()\n    var currentInterval = sortedIntervals[0]\n    mergedIntervals.append(currentInterval)\n\n    for nextInterval in sortedIntervals {\n      let currentIntervalEnd = currentInterval[1]\n      let (nextIntervalStart, nextIntervalEnd) = (nextInterval[0], nextInterval[1])\n\n      if currentIntervalEnd >= nextIntervalStart {\n        currentInterval[1] = max(currentIntervalEnd, nextIntervalEnd)\n        mergedIntervals[mergedIntervals.count - 1][1] = currentInterval[1]\n      } else {\n        currentInterval = nextInterval\n        mergedIntervals.append(currentInterval)\n      }\n    }\n\n    return mergedIntervals\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [\n        [1, 2],\n        [3, 5],\n        [4, 7],\n        [6, 8],\n        [9, 10],\n      ]\n      var expected = [\n        [1, 2],\n        [3, 8],\n        [9, 10],\n      ]\n      var actual = Program().mergeOverlappingIntervals(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [\n        [1, 2],\n        [3, 5],\n        [4, 7],\n        [6, 8],\n        [9, 10],\n      ]\n      var expected = [\n        [1, 2],\n        [3, 8],\n        [9, 10],\n      ]\n      var actual = Program().mergeOverlappingIntervals(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function mergeOverlappingIntervals(array: number[][]) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(n) space - where n is the length of the input array\nexport function mergeOverlappingIntervals(intervals: number[][]) {\n  const sortedIntervals = intervals.sort((a, b) => a[0] - b[0]);\n\n  const mergedIntervals: number[][] = [];\n  let currentInterval = sortedIntervals[0];\n  mergedIntervals.push(currentInterval);\n\n  for (const nextInterval of sortedIntervals) {\n    const [_, currentIntervalEnd] = currentInterval;\n    const [nextIntervalStart, nextIntervalEnd] = nextInterval;\n\n    if (currentIntervalEnd >= nextIntervalStart)\n      currentInterval[1] = Math.max(currentIntervalEnd, nextIntervalEnd);\n    else {\n      currentInterval = nextInterval;\n      mergedIntervals.push(currentInterval);\n    }\n  }\n\n  return mergedIntervals;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const intervals = [\n    [1, 2],\n    [3, 5],\n    [4, 7],\n    [6, 8],\n    [9, 10],\n  ];\n  const expected = [\n    [1, 2],\n    [3, 8],\n    [9, 10],\n  ];\n  const actual = program.mergeOverlappingIntervals(intervals);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const intervals = [\n    [1, 2],\n    [3, 5],\n    [4, 7],\n    [6, 8],\n    [9, 10],\n  ];\n  const expected = [\n    [1, 2],\n    [3, 8],\n    [9, 10],\n  ];\n  const actual = program.mergeOverlappingIntervals(intervals);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "intervals",
      "example": [
        [
          1,
          2
        ],
        [
          3,
          5
        ],
        [
          4,
          7
        ],
        [
          6,
          8
        ],
        [
          9,
          10
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "intervals": [
        [
          1,
          2
        ],
        [
          3,
          5
        ],
        [
          4,
          7
        ],
        [
          6,
          8
        ],
        [
          9,
          10
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          3
        ],
        [
          2,
          8
        ],
        [
          9,
          10
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          10
        ],
        [
          10,
          20
        ],
        [
          20,
          30
        ],
        [
          30,
          40
        ],
        [
          40,
          50
        ],
        [
          50,
          60
        ],
        [
          60,
          70
        ],
        [
          70,
          80
        ],
        [
          80,
          90
        ],
        [
          90,
          100
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          10
        ],
        [
          11,
          20
        ],
        [
          21,
          30
        ],
        [
          31,
          40
        ],
        [
          41,
          50
        ],
        [
          51,
          60
        ],
        [
          61,
          70
        ],
        [
          71,
          80
        ],
        [
          81,
          90
        ],
        [
          91,
          100
        ]
      ]
    },
    {
      "intervals": [
        [
          100,
          105
        ],
        [
          1,
          104
        ]
      ]
    },
    {
      "intervals": [
        [
          89,
          90
        ],
        [
          -10,
          20
        ],
        [
          -50,
          0
        ],
        [
          70,
          90
        ],
        [
          90,
          91
        ],
        [
          90,
          95
        ]
      ]
    },
    {
      "intervals": [
        [
          -5,
          -4
        ],
        [
          -4,
          -3
        ],
        [
          -3,
          -2
        ],
        [
          -2,
          -1
        ],
        [
          -1,
          0
        ]
      ]
    },
    {
      "intervals": [
        [
          43,
          49
        ],
        [
          9,
          12
        ],
        [
          12,
          54
        ],
        [
          45,
          90
        ],
        [
          91,
          93
        ]
      ]
    },
    {
      "intervals": [
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "intervals": [
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          1
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          22
        ],
        [
          -20,
          30
        ]
      ]
    },
    {
      "intervals": [
        [
          20,
          21
        ],
        [
          22,
          23
        ],
        [
          0,
          1
        ],
        [
          3,
          4
        ],
        [
          23,
          24
        ],
        [
          25,
          27
        ],
        [
          5,
          6
        ],
        [
          7,
          19
        ]
      ]
    },
    {
      "intervals": [
        [
          2,
          3
        ],
        [
          4,
          5
        ],
        [
          6,
          7
        ],
        [
          8,
          9
        ],
        [
          1,
          10
        ]
      ]
    }
  ],
  "jsonTests": [
    {
      "intervals": [
        [
          1,
          2
        ],
        [
          3,
          5
        ],
        [
          4,
          7
        ],
        [
          6,
          8
        ],
        [
          9,
          10
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          3
        ],
        [
          2,
          8
        ],
        [
          9,
          10
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          10
        ],
        [
          10,
          20
        ],
        [
          20,
          30
        ],
        [
          30,
          40
        ],
        [
          40,
          50
        ],
        [
          50,
          60
        ],
        [
          60,
          70
        ],
        [
          70,
          80
        ],
        [
          80,
          90
        ],
        [
          90,
          100
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          10
        ],
        [
          11,
          20
        ],
        [
          21,
          30
        ],
        [
          31,
          40
        ],
        [
          41,
          50
        ],
        [
          51,
          60
        ],
        [
          61,
          70
        ],
        [
          71,
          80
        ],
        [
          81,
          90
        ],
        [
          91,
          100
        ]
      ]
    },
    {
      "intervals": [
        [
          100,
          105
        ],
        [
          1,
          104
        ]
      ]
    },
    {
      "intervals": [
        [
          89,
          90
        ],
        [
          -10,
          20
        ],
        [
          -50,
          0
        ],
        [
          70,
          90
        ],
        [
          90,
          91
        ],
        [
          90,
          95
        ]
      ]
    },
    {
      "intervals": [
        [
          -5,
          -4
        ],
        [
          -4,
          -3
        ],
        [
          -3,
          -2
        ],
        [
          -2,
          -1
        ],
        [
          -1,
          0
        ]
      ]
    },
    {
      "intervals": [
        [
          43,
          49
        ],
        [
          9,
          12
        ],
        [
          12,
          54
        ],
        [
          45,
          90
        ],
        [
          91,
          93
        ]
      ]
    },
    {
      "intervals": [
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "intervals": [
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          0
        ],
        [
          0,
          1
        ]
      ]
    },
    {
      "intervals": [
        [
          1,
          22
        ],
        [
          -20,
          30
        ]
      ]
    },
    {
      "intervals": [
        [
          20,
          21
        ],
        [
          22,
          23
        ],
        [
          0,
          1
        ],
        [
          3,
          4
        ],
        [
          23,
          24
        ],
        [
          25,
          27
        ],
        [
          5,
          6
        ],
        [
          7,
          19
        ]
      ]
    },
    {
      "intervals": [
        [
          2,
          3
        ],
        [
          4,
          5
        ],
        [
          6,
          7
        ],
        [
          8,
          9
        ],
        [
          1,
          10
        ]
      ]
    }
  ],
  "changelog": []
}