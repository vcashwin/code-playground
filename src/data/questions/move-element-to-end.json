{
  "uid": "move-element-to-end",
  "testStrategy": "JSON",
  "name": "Move Element To End",
  "version": 0,
  "releaseDate": "2019-11-21T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 74628,
    "failureCount": 21649
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "374589194",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 797
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given an array of integers and an integer. Write a function that moves\n  all instances of that integer in the array to the end of the array and returns\n  the array.\n</p>\n<p>\n  The function should perform this in place (i.e., it should mutate the input\n  array) and doesn't need to maintain the order of the other integers.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [2, 1, 2, 2, 2, 3, 4, 2]\n<span class=\"CodeEditor-promptParameter\">toMove</span> = 2\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[1, 3, 4, 2, 2, 2, 2, 2] <span class=\"CodeEditor-promptComment\">// the numbers 1, 3, and 4 could be ordered differently</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nYou can solve this problem in linear time.\n</p>\n",
    "\n<p>\nIn view of Hint #1, you can solve this problem without sorting the input array. Try setting two pointers at the start and end of the array, respectively, and progressively moving them inwards.\n</p>\n",
    "\n<p>\nFollowing Hint #2, set two pointers at the start and end of the array, respectively. Move the right pointer inwards so long as it points to the integer to move, and move the left pointer inwards so long as it doesn't point to the integer to move. When both pointers aren't moving, swap their values in place. Repeat this process until the pointers pass each other.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\n\nusing namespace std;\n\nvector<int> moveElementToEnd(vector<int> array, int toMove) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the array\nvector<int> moveElementToEnd(vector<int>& array, int toMove) {\n  int i = 0;\n  int j = array.size() - 1;\n  while (i < j) {\n    while (i < j && array[j] == toMove) j--;\n    if (array[i] == toMove) swap(array[i], array[j]);\n    i++;\n  }\n  return array;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\n#include <algorithm>\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> array = {2, 1, 2, 2, 2, 3, 4, 2};\n      int toMove = 2;\n      vector<int> expectedStart = {1, 3, 4};\n      vector<int> expectedEnd = {2, 2, 2, 2, 2};\n      vector<int> output = moveElementToEnd(array, toMove);\n      assert(output.size() == array.size());\n      vector<int> outputStart = vector<int>(output.begin(), output.begin() + 3);\n      sort(outputStart.begin(), outputStart.end());\n      vector<int> outputEnd = vector<int>(output.begin() + 3, output.end());\n      assert(outputStart == expectedStart);\n      assert(outputEnd == expectedEnd);\n    });\n  }\n};\n",
      "unitTests": "#include <algorithm>\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> array = {2, 1, 2, 2, 2, 3, 4, 2};\n      int toMove = 2;\n      vector<int> expectedStart = {1, 3, 4};\n      vector<int> expectedEnd = {2, 2, 2, 2, 2};\n      vector<int> output = moveElementToEnd(array, toMove);\n      assert(output.size() == array.size());\n      vector<int> outputStart = vector<int>(output.begin(), output.begin() + 3);\n      sort(outputStart.begin(), outputStart.end());\n      vector<int> outputEnd = vector<int>(output.begin() + 3, output.end());\n      assert(outputStart == expectedStart);\n      assert(outputEnd == expectedEnd);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<int> MoveElementToEnd(List<int> array, int toMove) {\n    // Write your code here.\n    return new List<int>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static List<int> MoveElementToEnd(List<int> array, int toMove) {\n    int i = 0;\n    int j = array.Count - 1;\n    while (i < j) {\n      while (i < j && array[j] == toMove) j--;\n      if (array[i] == toMove) Swap(i, j, array);\n      i++;\n    }\n    return array;\n  }\n\n  public static void Swap(int i, int j, List<int> array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> array = new List<int>() { 2, 1, 2, 2, 2, 3, 4, 2 };\n    int toMove = 2;\n    List<int> expectedStart = new List<int>() { 1, 3, 4 };\n    List<int> expectedEnd = new List<int>() { 2, 2, 2, 2, 2 };\n    List<int> output = Program.MoveElementToEnd(array, toMove);\n    List<int> outputStart = output.GetRange(0, 3);\n    outputStart.Sort();\n    List<int> outputEnd = output.GetRange(3, output.Count - 3);\n    Utils.AssertTrue(outputStart.SequenceEqual(expectedStart));\n    Utils.AssertTrue(outputEnd.SequenceEqual(expectedEnd));\n  }\n}\n",
      "unitTests": "using System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> array = new List<int>() { 2, 1, 2, 2, 2, 3, 4, 2 };\n    int toMove = 2;\n    List<int> expectedStart = new List<int>() { 1, 3, 4 };\n    List<int> expectedEnd = new List<int>() { 2, 2, 2, 2, 2 };\n    List<int> output = Program.MoveElementToEnd(array, toMove);\n    List<int> outputStart = output.GetRange(0, 3);\n    outputStart.Sort();\n    List<int> outputEnd = output.GetRange(3, output.Count - 3);\n    Utils.AssertTrue(outputStart.SequenceEqual(expectedStart));\n    Utils.AssertTrue(outputEnd.SequenceEqual(expectedEnd));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MoveElementToEnd(array []int, toMove int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc MoveElementToEnd(array []int, toMove int) []int {\n\ti, j := 0, len(array)-1\n\tfor i < j {\n\t\tfor i < j && array[j] == toMove {\n\t\t\tj--\n\t\t}\n\t\tif array[i] == toMove {\n\t\t\tarray[i], array[j] = array[j], array[i]\n\t\t}\n\t\ti++\n\t}\n\treturn array\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"sort\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{2, 1, 2, 2, 2, 3, 4, 2}\n\ttoMove := 2\n\texpected := []int{1, 3, 4, 2, 2, 2, 2, 2}\n\toutput := MoveElementToEnd(array, toMove)\n\tsort.Ints(output[0:3])\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"sort\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{2, 1, 2, 2, 2, 3, 4, 2}\n\ttoMove := 2\n\texpected := []int{1, 3, 4, 2, 2, 2, 2, 2}\n\toutput := MoveElementToEnd(array, toMove)\n\tsort.Ints(output[0:3])\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<Integer> moveElementToEnd(\n    List<Integer> array, int toMove\n  ) {\n    // Write your code here.\n    return new ArrayList<Integer>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static List<Integer> moveElementToEnd(\n    List<Integer> array, int toMove\n  ) {\n    int i = 0;\n    int j = array.size() - 1;\n    while (i < j) {\n      while (i < j && array.get(j) == toMove) j--;\n      if (array.get(i) == toMove) swap(i, j, array);\n      i++;\n    }\n    return array;\n  }\n\n  public static void swap(int i, int j, List<Integer> array) {\n    int temp = array.get(j);\n    array.set(j, array.get(i));\n    array.set(i, temp);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Integer> array =\n      new ArrayList<Integer>(Arrays.asList(2, 1, 2, 2, 2, 3, 4, 2));\n    int toMove = 2;\n    List<Integer> expectedStart =\n      new ArrayList<Integer>(Arrays.asList(1, 3, 4));\n    List<Integer> expectedEnd =\n      new ArrayList<Integer>(Arrays.asList(2, 2, 2, 2, 2));\n    List<Integer> output = Program.moveElementToEnd(array, toMove);\n    List<Integer> outputStart = output.subList(0, 3);\n    outputStart.sort(Comparator.naturalOrder());\n    List<Integer> outputEnd = output.subList(3, output.size());\n    Utils.assertTrue(outputStart.equals(expectedStart));\n    Utils.assertTrue(outputEnd.equals(expectedEnd));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Integer> array =\n      new ArrayList<Integer>(Arrays.asList(2, 1, 2, 2, 2, 3, 4, 2));\n    int toMove = 2;\n    List<Integer> expectedStart =\n      new ArrayList<Integer>(Arrays.asList(1, 3, 4));\n    List<Integer> expectedEnd =\n      new ArrayList<Integer>(Arrays.asList(2, 2, 2, 2, 2));\n    List<Integer> output = Program.moveElementToEnd(array, toMove);\n    List<Integer> outputStart = output.subList(0, 3);\n    outputStart.sort(Comparator.naturalOrder());\n    List<Integer> outputEnd = output.subList(3, output.size());\n    Utils.assertTrue(outputStart.equals(expectedStart));\n    Utils.assertTrue(outputEnd.equals(expectedEnd));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function moveElementToEnd(array, toMove) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.moveElementToEnd = moveElementToEnd;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction moveElementToEnd(array, toMove) {\n  let i = 0;\n  let j = array.length - 1;\n  while (i < j) {\n    while (i < j && array[j] === toMove) j--;\n    if (array[i] === toMove) swap(i, j, array);\n    i++;\n  }\n  return array;\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexports.moveElementToEnd = moveElementToEnd;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [2, 1, 2, 2, 2, 3, 4, 2];\n  const toMove = 2;\n  const expectedStart = [1, 3, 4];\n  const expectedEnd = [2, 2, 2, 2, 2];\n  const output = program.moveElementToEnd(array, toMove);\n  const outputStart = sorted(output.slice(0, 3));\n  const outputEnd = output.slice(3);\n  chai.expect(outputStart).to.deep.equal(expectedStart);\n  chai.expect(outputEnd).to.deep.equal(expectedEnd);\n});\n\nconst sorted = array => array.sort((a, b) => a - b);\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [2, 1, 2, 2, 2, 3, 4, 2];\n  const toMove = 2;\n  const expectedStart = [1, 3, 4];\n  const expectedEnd = [2, 2, 2, 2, 2];\n  const output = program.moveElementToEnd(array, toMove);\n  const outputStart = sorted(output.slice(0, 3));\n  const outputEnd = output.slice(3);\n  chai.expect(outputStart).to.deep.equal(expectedStart);\n  chai.expect(outputEnd).to.deep.equal(expectedEnd);\n});\n\nconst sorted = array => array.sort((a, b) => a - b);\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun moveElementToEnd(array: MutableList<Int>, toMove: Int): List<Int> {\n    // Write your code here.\n    return array\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the array\nfun moveElementToEnd(array: MutableList<Int>, toMove: Int): List<Int> {\n    var i = 0\n    var j = array.size - 1\n    while (i < j) {\n        while (i < j && array[j] == toMove) j--\n        if (array[i] == toMove) swap(i, j, array)\n        i++\n    }\n    return array\n}\n\nfun swap(i: Int, j: Int, array: MutableList<Int>) {\n    val temp = array[j]\n    array[j] = array[i]\n    array[i] = temp\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.moveElementToEnd as moveElementToEnd\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = mutableListOf(2, 1, 2, 2, 2, 3, 4, 2)\n        val toMove = 2\n        val expectedStart = listOf(1, 3, 4)\n        val expectedEnd = listOf(2, 2, 2, 2, 2)\n        val output = moveElementToEnd(array, toMove)\n        val outputStart = output.slice(0..2).toMutableList()\n        outputStart.sort()\n        val outputEnd = output.slice(3..output.size - 1)\n        assert(outputStart.equals(expectedStart))\n        assert(outputEnd.equals(expectedEnd))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.moveElementToEnd as moveElementToEnd\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = mutableListOf(2, 1, 2, 2, 2, 3, 4, 2)\n        val toMove = 2\n        val expectedStart = listOf(1, 3, 4)\n        val expectedEnd = listOf(2, 2, 2, 2, 2)\n        val output = moveElementToEnd(array, toMove)\n        val outputStart = output.slice(0..2).toMutableList()\n        outputStart.sort()\n        val outputEnd = output.slice(3..output.size - 1)\n        assert(outputStart.equals(expectedStart))\n        assert(outputEnd.equals(expectedEnd))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def moveElementToEnd(array, toMove):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef moveElementToEnd(array, toMove):\n    i = 0\n    j = len(array) - 1\n    while i < j:\n        while i < j and array[j] == toMove:\n            j -= 1\n        if array[i] == toMove:\n            array[i], array[j] = array[j], array[i]\n        i += 1\n    return array\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [2, 1, 2, 2, 2, 3, 4, 2]\n        toMove = 2\n        expectedStart = [1, 3, 4]\n        expectedEnd = [2, 2, 2, 2, 2]\n        output = program.moveElementToEnd(array, toMove)\n        outputStart = sorted(output[0:3])\n        outputEnd = output[3:]\n        self.assertEqual(outputStart, expectedStart)\n        self.assertEqual(outputEnd, expectedEnd)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [2, 1, 2, 2, 2, 3, 4, 2]\n        toMove = 2\n        expectedStart = [1, 3, 4]\n        expectedEnd = [2, 2, 2, 2, 2]\n        output = program.moveElementToEnd(array, toMove)\n        outputStart = sorted(output[0:3])\n        outputEnd = output[3:]\n        self.assertEqual(outputStart, expectedStart)\n        self.assertEqual(outputEnd, expectedEnd)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def moveElementToEnd(array, toMove)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def moveElementToEnd(array, toMove)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.moveElementToEnd\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.moveElementToEnd\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func moveElementToEnd(_ array: inout [Int], _ toMove: Int) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func moveElementToEnd(_ array: inout [Int], _ toMove: Int) -> [Int] {\n    var i = 0\n    var j = array.count - 1\n    while i < j {\n      while i < j, array[j] == toMove {\n        j -= 1\n      }\n      if array[i] == toMove {\n        (array[i], array[j]) = (array[j], array[i])\n      }\n      i += 1\n    }\n    return array\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [2, 1, 2, 2, 2, 3, 4, 2]\n      let toMove = 2\n      let expected = [1, 3, 4, 2, 2, 2, 2, 2]\n      var output = program.moveElementToEnd(&array, toMove)\n      var outputStart = output.prefix(3)\n      outputStart.sort()\n      var outputEnd = output.suffix(expected.count - 3)\n      try assertEqual(Array(outputStart + outputEnd), expected)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [2, 1, 2, 2, 2, 3, 4, 2]\n      let toMove = 2\n      let expected = [1, 3, 4, 2, 2, 2, 2, 2]\n      var output = program.moveElementToEnd(&array, toMove)\n      var outputStart = output.prefix(3)\n      outputStart.sort()\n      var outputEnd = output.suffix(expected.count - 3)\n      try assertEqual(Array(outputStart + outputEnd), expected)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function moveElementToEnd(array: number[], toMove: number) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function moveElementToEnd(array: number[], toMove: number) {\n  let i = 0;\n  let j = array.length - 1;\n  while (i < j) {\n    while (i < j && array[j] === toMove) j--;\n    if (array[i] === toMove) swap(i, j, array);\n    i++;\n  }\n  return array;\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [2, 1, 2, 2, 2, 3, 4, 2];\n  const toMove = 2;\n  const expectedStart = [1, 3, 4];\n  const expectedEnd = [2, 2, 2, 2, 2];\n  const output = program.moveElementToEnd(array, toMove);\n  const outputStart = sorted(output.slice(0, 3));\n  const outputEnd = output.slice(3);\n  chai.expect(outputStart).to.deep.equal(expectedStart);\n  chai.expect(outputEnd).to.deep.equal(expectedEnd);\n});\n\nconst sorted = (array: number[]) => array.sort((a, b) => a - b);\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [2, 1, 2, 2, 2, 3, 4, 2];\n  const toMove = 2;\n  const expectedStart = [1, 3, 4];\n  const expectedEnd = [2, 2, 2, 2, 2];\n  const output = program.moveElementToEnd(array, toMove);\n  const outputStart = sorted(output.slice(0, 3));\n  const outputEnd = output.slice(3);\n  chai.expect(outputStart).to.deep.equal(expectedStart);\n  chai.expect(outputEnd).to.deep.equal(expectedEnd);\n});\n\nconst sorted = (array: number[]) => array.sort((a, b) => a - b);\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        2,
        1,
        2,
        2,
        2,
        3,
        4,
        2
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "toMove",
      "example": 2,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        2,
        1,
        2,
        2,
        2,
        3,
        4,
        2
      ],
      "toMove": 2
    },
    {
      "array": [],
      "toMove": 3
    },
    {
      "array": [
        1,
        2,
        4,
        5,
        6
      ],
      "toMove": 3
    },
    {
      "array": [
        3,
        3,
        3,
        3,
        3
      ],
      "toMove": 3
    },
    {
      "array": [
        3,
        1,
        2,
        4,
        5
      ],
      "toMove": 3
    },
    {
      "array": [
        1,
        2,
        4,
        5,
        3
      ],
      "toMove": 3
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ],
      "toMove": 3
    },
    {
      "array": [
        2,
        4,
        2,
        5,
        6,
        2,
        2
      ],
      "toMove": 2
    },
    {
      "array": [
        5,
        5,
        5,
        5,
        5,
        5,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "toMove": 5
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "toMove": 5
    },
    {
      "array": [
        5,
        1,
        2,
        5,
        5,
        3,
        4,
        6,
        7,
        5,
        8,
        9,
        10,
        11,
        5,
        5,
        12
      ],
      "toMove": 5
    }
  ],
  "jsonTests": [
    {
      "array": [
        2,
        1,
        2,
        2,
        2,
        3,
        4,
        2
      ],
      "toMove": 2
    },
    {
      "array": [],
      "toMove": 3
    },
    {
      "array": [
        1,
        2,
        4,
        5,
        6
      ],
      "toMove": 3
    },
    {
      "array": [
        3,
        3,
        3,
        3,
        3
      ],
      "toMove": 3
    },
    {
      "array": [
        3,
        1,
        2,
        4,
        5
      ],
      "toMove": 3
    },
    {
      "array": [
        1,
        2,
        4,
        5,
        3
      ],
      "toMove": 3
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ],
      "toMove": 3
    },
    {
      "array": [
        2,
        4,
        2,
        5,
        6,
        2,
        2
      ],
      "toMove": 2
    },
    {
      "array": [
        5,
        5,
        5,
        5,
        5,
        5,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "toMove": 5
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "toMove": 5
    },
    {
      "array": [
        5,
        1,
        2,
        5,
        5,
        3,
        4,
        6,
        7,
        5,
        8,
        9,
        10,
        11,
        5,
        5,
        12
      ],
      "toMove": 5
    }
  ],
  "changelog": []
}