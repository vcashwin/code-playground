{
  "uid": "nth-fibonacci",
  "testStrategy": "JSON",
  "name": "Nth Fibonacci",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Recursion",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 101057,
    "failureCount": 44870
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "226676573",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1475
  },
  "prompt": "<div class=\"html\">\n<p>\n  The Fibonacci sequence is defined as follows: the first number of the sequence\n  is <span>0</span>, the second number is <span>1</span>, and the nth number is the sum of the (n - 1)th\n  and (n - 2)th numbers. Write a function that takes in an integer\n  <span>n</span> and returns the nth Fibonacci number.\n</p>\n<p>\n  Important note: the Fibonacci sequence is often defined with its first two\n  numbers as <span>F0 = 0</span> and <span>F1 = 1</span>. For the purpose of\n  this question, the first Fibonacci number is <span>F0</span>; therefore,\n  <span>getNthFib(1)</span> is equal to <span>F0</span>, <span>getNthFib(2)</span>\n  is equal to <span>F1</span>, etc..\n</p>\n<h3>Sample Input #1</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">n</span> = 2\n</pre>\n<h3>Sample Output #1</h3>\n<pre>\n1 <span class=\"CodeEditor-promptComment\">// 0, 1</span>\n</pre>\n<h3>Sample Input #2</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">n</span> = 6\n</pre>\n<h3>Sample Output #2</h3>\n<pre>\n5 <span class=\"CodeEditor-promptComment\">// 0, 1, 1, 2, 3, 5</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nThe formula to generate the nth Fibonacci number can be written as follows: F(n) = F(n - 1) + F(n - 2). Think of the case(s) for which this formula doesn't apply (the base case(s)) and try to implement a simple recursive algorithm to find the nth Fibonacci number with this formula.\n</p>\n",
    "\n<p>\nWhat are the runtime implications of solving this problem as is described in Hint #1? Can you use memoization (caching) to improve the performance of your algorithm?\n</p>\n",
    "\n<p>\nRealize that to calculate any single Fibonacci number you only need to have the two previous Fibonacci numbers. Knowing this, can you implement an iterative algorithm to solve this question, storing only the last two Fibonacci numbers at any given time?\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the input number",
  "notes": "<div class=\"html\">\n<p>\n  Important note: the Fibonacci sequence is often defined with its first two\n  numbers as <span>F0 = 0</span> and <span>F1 = 1</span>. For the purpose of\n  this question, the first Fibonacci number is <span>F0</span>; therefore,\n  <span>getNthFib(1)</span> is equal to <span>F0</span>,\n  <span>getNthFib(2)</span> is equal to <span>F1</span>, etc..\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint getNthFib(int n) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(2^n) time | O(n) space\nint getNthFib(int n) {\n  if (n == 2) {\n    return 1;\n  } else if (n == 1) {\n    return 0;\n  } else {\n    return getNthFib(n - 1) + getNthFib(n - 2);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\nusing namespace std;\n\nint getNthFib(int n);\nint helper(int n, unordered_map<int, int>& memoize);\n\n// O(n) time | O(n) space\nint getNthFib(int n) {\n  unordered_map<int, int> memoize({{1, 0}, {2, 1}});\n  return helper(n, memoize);\n}\n\nint helper(int n, unordered_map<int, int>& memoize) {\n  if (memoize.find(n) != memoize.end()) {\n    return memoize[n];\n  } else {\n    memoize[n] = helper(n - 1, memoize) + helper(n - 2, memoize);\n    return memoize[n];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n) time | O(1) space\nint getNthFib(int n) {\n  int lastTwo[] = {0, 1};\n  int counter = 3;\n  while (counter <= n) {\n    int nextFib = lastTwo[0] + lastTwo[1];\n    lastTwo[0] = lastTwo[1];\n    lastTwo[1] = nextFib;\n    counter++;\n  }\n  return n > 1 ? lastTwo[1] : lastTwo[0];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() { assert(getNthFib(6) == 5); });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() { assert(getNthFib(6) == 5); });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int GetNthFib(int n) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(2^n) time | O(n) space\n  public static int GetNthFib(int n) {\n    if (n == 2) {\n      return 1;\n    } else if (n == 1) {\n      return 0;\n    } else {\n      return GetNthFib(n - 1) + GetNthFib(n - 2);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(n) space\n  public static int GetNthFib(int n) {\n    Dictionary<int, int> memoize = new Dictionary<int, int>();\n    memoize.Add(1, 0);\n    memoize.Add(2, 1);\n    return GetNthFib(n, memoize);\n  }\n\n  public static int GetNthFib(int n, Dictionary<int, int> memoize) {\n    if (memoize.ContainsKey(n)) {\n      return memoize[n];\n    } else {\n      memoize.Add(n, GetNthFib(n - 1, memoize) + GetNthFib(n - 2, memoize));\n      return memoize[n];\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static int GetNthFib(int n) {\n    int[] lastTwo = { 0, 1 };\n    int counter = 3;\n    while (counter <= n) {\n      int nextFib = lastTwo[0] + lastTwo[1];\n      lastTwo[0] = lastTwo[1];\n      lastTwo[1] = nextFib;\n      counter++;\n    }\n    return n > 1 ? lastTwo[1] : lastTwo[0];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertEquals(5, Program.GetNthFib(6));\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertEquals(5, Program.GetNthFib(6));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc GetNthFib(n int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(2^n) time | O(n) space\nfunc GetNthFib(n int) int {\n\tif n == 2 {\n\t\treturn 1\n\t} else if n == 1 {\n\t\treturn 0\n\t}\n\treturn GetNthFib(n-1) + GetNthFib(n-2)\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space\nfunc GetNthFib(n int) int {\n\treturn helper(n, map[int]int{\n\t\t1: 0,\n\t\t2: 1,\n\t})\n}\n\nfunc helper(n int, memoize map[int]int) int {\n\tif val, found := memoize[n]; found {\n\t\treturn val\n\t}\n\tmemoize[n] = helper(n-1, memoize) + helper(n-2, memoize)\n\treturn memoize[n]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space\nfunc GetNthFib(n int) int {\n\tlastTwo := []int{0, 1}\n\tcounter := 3\n\tfor counter <= n {\n\t\tnextFib := lastTwo[0] + lastTwo[1]\n\t\tlastTwo = []int{lastTwo[1], nextFib}\n\t\tcounter += 1\n\t}\n\tif n > 1 {\n\t\treturn lastTwo[1]\n\t}\n\treturn lastTwo[0]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 5\n\toutput := GetNthFib(6)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 5\n\toutput := GetNthFib(6)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int getNthFib(int n) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(2^n) time | O(n) space\n  public static int getNthFib(int n) {\n    if (n == 2) {\n      return 1;\n    } else if (n == 1) {\n      return 0;\n    } else {\n      return getNthFib(n - 1) + getNthFib(n - 2);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space\n  public static int getNthFib(int n) {\n    Map<Integer, Integer> memoize = new HashMap<Integer, Integer>();\n    memoize.put(1, 0);\n    memoize.put(2, 1);\n    return getNthFib(n, memoize);\n  }\n\n  public static int getNthFib(int n, Map<Integer, Integer> memoize) {\n    if (memoize.containsKey(n)) {\n      return memoize.get(n);\n    } else {\n      memoize.put(n, getNthFib(n - 1, memoize) + getNthFib(n - 2, memoize));\n      return memoize.get(n);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int getNthFib(int n) {\n    int[] lastTwo = {0, 1};\n    int counter = 3;\n    while (counter <= n) {\n      int nextFib = lastTwo[0] + lastTwo[1];\n      lastTwo[0] = lastTwo[1];\n      lastTwo[1] = nextFib;\n      counter++;\n    }\n    return n > 1 ? lastTwo[1] : lastTwo[0];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.getNthFib(6) == 5);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.getNthFib(6) == 5);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function getNthFib(n) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.getNthFib = getNthFib;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(2^n) time | O(n) space\nfunction getNthFib(n) {\n  if (n === 2) {\n    return 1;\n  } else if (n === 1) {\n    return 0;\n  } else {\n    return getNthFib(n - 1) + getNthFib(n - 2);\n  }\n}\n\nexports.getNthFib = getNthFib;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nfunction getNthFib(n, memoize = {1: 0, 2: 1}) {\n  if (n in memoize) {\n    return memoize[n];\n  } else {\n    memoize[n] = getNthFib(n - 1, memoize) + getNthFib(n - 2, memoize);\n    return memoize[n];\n  }\n}\n\nexports.getNthFib = getNthFib;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nfunction getNthFib(n) {\n  const lastTwo = [0, 1];\n  let counter = 3;\n  while (counter <= n) {\n    const nextFib = lastTwo[0] + lastTwo[1];\n    lastTwo[0] = lastTwo[1];\n    lastTwo[1] = nextFib;\n    counter++;\n  }\n  return n > 1 ? lastTwo[1] : lastTwo[0];\n}\n\nexports.getNthFib = getNthFib;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.getNthFib(6)).to.deep.equal(5);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.getNthFib(6)).to.deep.equal(5);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun getNthFib(n: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(2^n) time | O(n) space\nfun getNthFib(n: Int): Int {\n    if (n == 2) {\n        return 1\n    } else if (n == 1) {\n        return 0\n    }\n    return getNthFib(n - 1) + getNthFib(n - 2)\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space\nfun getNthFib(n: Int): Int {\n    val cache = mutableMapOf<Int, Int>(1 to 0, 2 to 1)\n    return getNthFib(n, cache)\n}\n\nfun getNthFib(n: Int, cache: MutableMap<Int, Int>): Int {\n    if (cache.containsKey(n)) return cache[n]!!\n    cache[n] = getNthFib(n - 1, cache) + getNthFib(n - 2, cache)\n    return cache[n]!!\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space\nfun getNthFib(n: Int): Int {\n    var lastTwo = Pair(0, 1)\n    var counter = 3\n    while (counter <= n) {\n        val nextFib = lastTwo.first + lastTwo.second\n        lastTwo = Pair(lastTwo.second, nextFib)\n        counter++\n    }\n    return if (n > 1) lastTwo.second else lastTwo.first\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.getNthFib as getNthFib\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(getNthFib(6) == 5)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.getNthFib as getNthFib\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(getNthFib(6) == 5)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def getNthFib(n):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(2^n) time | O(n) space\ndef getNthFib(n):\n    if n == 2:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return getNthFib(n - 1) + getNthFib(n - 2)\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space\ndef getNthFib(n, memoize={1: 0, 2: 1}):\n    if n in memoize:\n        return memoize[n]\n    else:\n        memoize[n] = getNthFib(n - 1, memoize) + getNthFib(n - 2, memoize)\n        return memoize[n]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space\ndef getNthFib(n):\n    lastTwo = [0, 1]\n    counter = 3\n    while counter <= n:\n        nextFib = lastTwo[0] + lastTwo[1]\n        lastTwo[0] = lastTwo[1]\n        lastTwo[1] = nextFib\n        counter += 1\n    return lastTwo[1] if n > 1 else lastTwo[0]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.getNthFib(6), 5)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.getNthFib(6), 5)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def getNthFib(n)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ndef getNthFib(n)\n  if n == 2\n    return 1\n  elsif n == 1\n    return 0\n  end\n  return getNthFib(n - 1) + getNthFib(n - 2)\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def getNthFib(n)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def getNthFib(n)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.getNthFib\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.getNthFib\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func getNthFib(n: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(2^n) time | O(n) space\n  func getNthFib(n: Int) -> Int {\n    if n == 2 {\n      return 1\n    } else if n == 1 {\n      return 0\n    } else {\n      return getNthFib(n: n - 1) + getNthFib(n: n - 2)\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func getNthFib(n: Int) -> Int {\n    var memoize = [1: 0, 2: 1]\n    return helper(n: n, memoize: &memoize)\n  }\n\n  func helper(n: Int, memoize: inout [Int: Int]) -> Int {\n    if memoize.keys.contains(n) {\n      return memoize[n]!\n    }\n    memoize[n] = helper(n: n - 1, memoize: &memoize) + helper(n: n - 2, memoize: &memoize)\n    return memoize[n]!\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  func getNthFib(n: Int) -> Int {\n    var lastTwo = [0, 1]\n    var counter = 3\n    while counter <= n {\n      let nextFib = lastTwo[0] + lastTwo[1]\n      lastTwo[0] = lastTwo[1]\n      lastTwo[1] = nextFib\n\n      counter = counter + 1\n    }\n    return n > 1 ? lastTwo[1] : lastTwo[0]\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws in\n      try assertEqual(5, program.getNthFib(n: 6))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws in\n      try assertEqual(5, program.getNthFib(n: 6))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function getNthFib(n: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(2^n) time | O(n) space\nexport function getNthFib(n: number): number {\n  if (n === 2) {\n    return 1;\n  } else if (n === 1) {\n    return 0;\n  } else {\n    return getNthFib(n - 1) + getNthFib(n - 2);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface Cache {\n  [key: number]: number;\n}\n\n// O(n) time | O(n) space\nexport function getNthFib(n: number, memoize: Cache = {1: 0, 2: 1}) {\n  if (n in memoize) {\n    return memoize[n];\n  } else {\n    memoize[n] = getNthFib(n - 1, memoize) + getNthFib(n - 2, memoize);\n    return memoize[n];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nexport function getNthFib(n: number) {\n  const lastTwo: [number, number] = [0, 1];\n  let counter = 3;\n  while (counter <= n) {\n    const nextFib = lastTwo[0] + lastTwo[1];\n    lastTwo[0] = lastTwo[1];\n    lastTwo[1] = nextFib;\n    counter++;\n  }\n  return n > 1 ? lastTwo[1] : lastTwo[0];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.getNthFib(6)).to.deep.equal(5);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.getNthFib(6)).to.deep.equal(5);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "n",
      "example": 6,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "n": 6
    },
    {
      "n": 1
    },
    {
      "n": 2
    },
    {
      "n": 3
    },
    {
      "n": 4
    },
    {
      "n": 5
    },
    {
      "n": 7
    },
    {
      "n": 8
    },
    {
      "n": 9
    },
    {
      "n": 10
    },
    {
      "n": 11
    },
    {
      "n": 12
    },
    {
      "n": 13
    },
    {
      "n": 14
    },
    {
      "n": 15
    },
    {
      "n": 16
    },
    {
      "n": 17
    },
    {
      "n": 18
    }
  ],
  "jsonTests": [
    {
      "n": 6
    },
    {
      "n": 1
    },
    {
      "n": 2
    },
    {
      "n": 3
    },
    {
      "n": 4
    },
    {
      "n": 5
    },
    {
      "n": 7
    },
    {
      "n": 8
    },
    {
      "n": 9
    },
    {
      "n": 10
    },
    {
      "n": 11
    },
    {
      "n": 12
    },
    {
      "n": 13
    },
    {
      "n": 14
    },
    {
      "n": 15
    },
    {
      "n": 16
    },
    {
      "n": 17
    },
    {
      "n": 18
    }
  ],
  "changelog": []
}