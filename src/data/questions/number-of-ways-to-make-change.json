{
  "uid": "number-of-ways-to-make-change",
  "testStrategy": "JSON",
  "name": "Number Of Ways To Make Change",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 36000,
    "failureCount": 10847
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225713346",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 851
  },
  "prompt": "<div class=\"html\">\n<p>\n  Given an array of distinct positive integers representing coin denominations and a\n  single non-negative integer <span>n</span> representing a target amount of\n  money, write a function that returns the number of ways to make change for\n  that target amount using the given coin denominations.\n</p>\n<p>Note that an unlimited amount of coins is at your disposal.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">n</span> = 6\n<span class=\"CodeEditor-promptParameter\">denoms</span> = [1, 5]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n2 <span class=\"CodeEditor-promptComment\">// 1x1 + 1x5 and 6x1</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building an array of the number of ways to make change for all amounts between 0 and n inclusive. Note that there is only one way to make change for 0: that is to not use any coins.\n</p>\n",
    "\n<p>\nBuild up the array mentioned in Hint #1 one coin denomination at a time. In other words, find the number of ways to make change for all amounts between 0 and n with only one denomination, then with two, etc., until you use all denominations.\n</p>"
  ],
  "spaceTime": "O(nd) time | O(n) space - where n is the target amount and d is the number of coin denominations",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint numberOfWaysToMakeChange(int n, vector<int> denoms) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(nd) time | O(n) space\nint numberOfWaysToMakeChange(int n, vector<int> denoms) {\n  vector<int> ways(n + 1, 0);\n  ways[0] = 1;\n  for (int denom : denoms) {\n    for (int amount = 1; amount < n + 1; amount++) {\n      if (denom <= amount) {\n        ways[amount] += ways[amount - denom];\n      }\n    }\n  }\n  return ways[n];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(numberOfWaysToMakeChange(6, {1, 5}) == 2);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(numberOfWaysToMakeChange(6, {1, 5}) == 2);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int NumberOfWaysToMakeChange(int n, int[] denoms) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(nd) time | O(n) space\n  public static int NumberOfWaysToMakeChange(int n, int[] denoms) {\n    int[] ways = new int[n + 1];\n    ways[0] = 1;\n    foreach (int denom in denoms) {\n      for (int amount = 1; amount < n + 1; amount++) {\n        if (denom <= amount) {\n          ways[amount] += ways[amount - denom];\n        }\n      }\n    }\n    return ways[n];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 1, 5 };\n    Utils.AssertTrue(Program.NumberOfWaysToMakeChange(6, input) == 2);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 1, 5 };\n    Utils.AssertTrue(Program.NumberOfWaysToMakeChange(6, input) == 2);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc NumberOfWaysToMakeChange(n int, denoms []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(nd) time | O(n) space\nfunc NumberOfWaysToMakeChange(n int, denoms []int) int {\n\tways := make([]int, n+1)\n\tways[0] = 1\n\tfor _, denom := range denoms {\n\t\tfor amount := 1; amount < n+1; amount++ {\n\t\t\tif denom <= amount {\n\t\t\t\tways[amount] += ways[amount-denom]\n\t\t\t}\n\t\t}\n\t}\n\treturn ways[n]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := NumberOfWaysToMakeChange(6, []int{1, 5})\n\trequire.Equal(t, 2, output)\n}\n",
      "unitTests": "package main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := NumberOfWaysToMakeChange(6, []int{1, 5})\n\trequire.Equal(t, 2, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int numberOfWaysToMakeChange(int n, int[] denoms) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nd) time | O(n) space\n  public static int numberOfWaysToMakeChange(int n, int[] denoms) {\n    int[] ways = new int[n + 1];\n    ways[0] = 1;\n    for (int denom : denoms) {\n      for (int amount = 1; amount < n + 1; amount++) {\n        if (denom <= amount) {\n          ways[amount] += ways[amount - denom];\n        }\n      }\n    }\n    return ways[n];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {1, 5};\n    Utils.assertTrue(Program.numberOfWaysToMakeChange(6, input) == 2);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {1, 5};\n    Utils.assertTrue(Program.numberOfWaysToMakeChange(6, input) == 2);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function numberOfWaysToMakeChange(n, denoms) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.numberOfWaysToMakeChange = numberOfWaysToMakeChange;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nd) time | O(n) space\nfunction numberOfWaysToMakeChange(n, denoms) {\n  const ways = new Array(n + 1).fill(0);\n  ways[0] = 1;\n  for (let denom of denoms) {\n    for (let amount = 1; amount < n + 1; amount++) {\n      if (denom <= amount) {\n        ways[amount] += ways[amount - denom];\n      }\n    }\n  }\n  return ways[n];\n}\n\nexports.numberOfWaysToMakeChange = numberOfWaysToMakeChange;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfWaysToMakeChange(6, [1, 5])).to.deep.equal(2);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfWaysToMakeChange(6, [1, 5])).to.deep.equal(2);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun numberOfWaysToMakeChange(n: Int, denoms: List<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nd) time | O(n) space\nfun numberOfWaysToMakeChange(n: Int, denoms: List<Int>): Int {\n    val ways = MutableList(n + 1) { 0 }\n    ways[0] = 1\n    for (denom in denoms) {\n        for (amount in 1 until n + 1) {\n            if (denom <= amount) {\n                ways[amount] += ways[amount - denom]\n            }\n        }\n    }\n    return ways[n]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.numberOfWaysToMakeChange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val denoms = listOf(1, 5)\n        val output = numberOfWaysToMakeChange(6, denoms)\n        val expected = 2\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.numberOfWaysToMakeChange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val denoms = listOf(1, 5)\n        val output = numberOfWaysToMakeChange(6, denoms)\n        val expected = 2\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def numberOfWaysToMakeChange(n, denoms):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nd) time | O(n) space\ndef numberOfWaysToMakeChange(n, denoms):\n    ways = [0 for amount in range(n + 1)]\n    ways[0] = 1\n    for denom in denoms:\n        for amount in range(1, n + 1):\n            if denom <= amount:\n                ways[amount] += ways[amount - denom]\n    return ways[n]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.numberOfWaysToMakeChange(6, [1, 5]), 2)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.numberOfWaysToMakeChange(6, [1, 5]), 2)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def numberOfWaysToMakeChange(n, denoms)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfWaysToMakeChange(n, denoms)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numberOfWaysToMakeChange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numberOfWaysToMakeChange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func numberOfWaysToMakeChange(target: Int, denominations: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nd) time | O(n) space\n  func numberOfWaysToMakeChange(target: Int, denominations: [Int]) -> Int {\n    var ways = Array(repeating: 0, count: target + 1)\n    ways[0] = 1\n\n    for denomination in denominations {\n      for amount in 1 ..< target + 1 {\n        if denomination <= amount {\n          ways[amount] = ways[amount] + ways[amount - denomination]\n        }\n      }\n    }\n\n    return ways[target]\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.numberOfWaysToMakeChange(target: 6, denominations: [1, 5])\n      try assertEqual(2, output)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.numberOfWaysToMakeChange(target: 6, denominations: [1, 5])\n      try assertEqual(2, output)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function numberOfWaysToMakeChange(n: number, denoms: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nd) time | O(n) space\nexport function numberOfWaysToMakeChange(n: number, denoms: number[]) {\n  const ways: number[] = new Array(n + 1).fill(0);\n  ways[0] = 1;\n  for (let denom of denoms) {\n    for (let amount = 1; amount < n + 1; amount++) {\n      if (denom <= amount) {\n        ways[amount] += ways[amount - denom];\n      }\n    }\n  }\n  return ways[n];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfWaysToMakeChange(6, [1, 5])).to.deep.equal(2);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfWaysToMakeChange(6, [1, 5])).to.deep.equal(2);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "n",
      "example": 6,
      "schema": {
        "minimum": 0,
        "type": "integer"
      }
    },
    {
      "name": "denoms",
      "example": [
        1,
        5
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "tests": [
    {
      "denoms": [
        1,
        5
      ],
      "n": 6
    },
    {
      "denoms": [
        2,
        3,
        4,
        7
      ],
      "n": 0
    },
    {
      "denoms": [
        5
      ],
      "n": 9
    },
    {
      "denoms": [
        2,
        4
      ],
      "n": 7
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 4
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 5
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 10
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 25
    },
    {
      "denoms": [
        2,
        3,
        7
      ],
      "n": 12
    },
    {
      "denoms": [
        2,
        3,
        4,
        7
      ],
      "n": 7
    }
  ],
  "jsonTests": [
    {
      "denoms": [
        1,
        5
      ],
      "n": 6
    },
    {
      "denoms": [
        2,
        3,
        4,
        7
      ],
      "n": 0
    },
    {
      "denoms": [
        5
      ],
      "n": 9
    },
    {
      "denoms": [
        2,
        4
      ],
      "n": 7
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 4
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 5
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 10
    },
    {
      "denoms": [
        1,
        5,
        10,
        25
      ],
      "n": 25
    },
    {
      "denoms": [
        2,
        3,
        7
      ],
      "n": 12
    },
    {
      "denoms": [
        2,
        3,
        4,
        7
      ],
      "n": 7
    }
  ],
  "changelog": []
}