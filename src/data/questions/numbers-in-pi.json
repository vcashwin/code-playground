{
  "uid": "numbers-in-pi",
  "testStrategy": "JSON",
  "name": "Numbers In Pi",
  "version": 0,
  "releaseDate": "2019-09-01T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 8624,
    "failureCount": 2822
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "355629406",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1562
  },
  "prompt": "<div class=\"html\">\n<p>\n  Given a string representation of the first n digits of Pi and a list of\n  positive integers (all in string format), write a function that returns the\n  smallest number of spaces that can be added to the n digits of Pi such that\n  all resulting numbers are found in the list of integers.\n</p>\n<p>\n  Note that a single number can appear multiple times in the resulting numbers.\n  For example, if Pi is <span>\"3141\"</span> and the numbers are\n  <span>[\"1\", \"3\", \"4\"]</span>, the number <span>\"1\"</span> is allowed to appear\n  twice in the list of resulting numbers after three spaces are added:\n  <span>\"3 | 1 | 4 | 1\"</span>.\n</p>\n<p>\n  If no number of spaces to be added exists such that all resulting numbers are\n  found in the list of integers, the function should return\n  <span>-1</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">pi</span> = \"3141592653589793238462643383279\",\n<span class=\"CodeEditor-promptParameter\">numbers</span> = [\"314159265358979323846\", \"26433\", \"8\", \"3279\", \"314159265\", \"35897932384626433832\", \"79\"]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n2 <span class=\"CodeEditor-promptComment\">// \"314159265 | 35897932384626433832 | 79\"</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nYou'll need to look numbers up quickly; is the input array the best data structure for this?\n</p>\n",
    "\n<p>\nDump every favorite number in a hash table for fast lookup. Iterate through the digits of Pi, checking if every prefix of the n digits is a favorite number. What should you do if you find that a prefix of the n digits of Pi is a favorite number?\n</p>\n",
    "\n<p>\nGoing off of Hint #2, if you find a prefix of the n digits of Pi that is a favorite number, try adding 1 space after it and then recursively calculating the smallest number of spaces in the suffix that comes after it. Do this for every prefix, and you'll find the answer. Can this method be optimized with a cache?\n</p>"
  ],
  "spaceTime": "O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint numbersInPi(string pi, vector<string> numbers) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <climits>\n#include <set>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nint getMinSpaces(\n  string pi, set<string> numbersTable, unordered_map<int, int>* cache, int idx\n);\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and\n// m is the number of favorite numbers\nint numbersInPi(string pi, vector<string> numbers) {\n  set<string> numbersTable;\n  for (string number : numbers) {\n    numbersTable.insert(number);\n  }\n  unordered_map<int, int> cache;\n  int minSpaces = getMinSpaces(pi, numbersTable, &cache, 0);\n  return minSpaces == INT_MAX ? -1 : minSpaces;\n}\n\nint getMinSpaces(\n  string pi, set<string> numbersTable, unordered_map<int, int>* cache, int idx\n) {\n  if (idx == pi.length()) return -1;\n  if (cache->find(idx) != cache->end()) return cache->at(idx);\n  int minSpaces = INT_MAX;\n  for (int i = idx; i < pi.length(); i++) {\n    string prefix = pi.substr(idx, i + 1 - idx);\n    if (numbersTable.find(prefix) != numbersTable.end()) {\n      int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n      // Handle int overflow.\n      if (minSpacesInSuffix == INT_MAX) {\n        minSpaces = min(minSpaces, minSpacesInSuffix);\n      } else {\n        minSpaces = min(minSpaces, minSpacesInSuffix + 1);\n      }\n    }\n  }\n  cache->insert({idx, minSpaces});\n  return cache->at(idx);\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <climits>\n#include <set>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nint getMinSpaces(\n  string pi, set<string> numbersTable, unordered_map<int, int>* cache, int idx\n);\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and\n// m is the number of favorite numbers\nint numbersInPi(string pi, vector<string> numbers) {\n  set<string> numbersTable;\n  for (string number : numbers) {\n    numbersTable.insert(number);\n  }\n  unordered_map<int, int> cache;\n  for (int i = pi.length() - 1; i >= 0; i--) {\n    getMinSpaces(pi, numbersTable, &cache, i);\n  }\n  return cache.at(0) == INT_MAX ? -1 : cache.at(0);\n}\n\nint getMinSpaces(\n  string pi, set<string> numbersTable, unordered_map<int, int>* cache, int idx\n) {\n  if (idx == pi.length()) return -1;\n  if (cache->find(idx) != cache->end()) return cache->at(idx);\n  int minSpaces = INT_MAX;\n  for (int i = idx; i < pi.length(); i++) {\n    string prefix = pi.substr(idx, i + 1 - idx);\n    if (numbersTable.find(prefix) != numbersTable.end()) {\n      int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n      // Handle int overflow.\n      if (minSpacesInSuffix == INT_MAX) {\n        minSpaces = min(minSpaces, minSpacesInSuffix);\n      } else {\n        minSpaces = min(minSpaces, minSpacesInSuffix + 1);\n      }\n    }\n  }\n  cache->insert({idx, minSpaces});\n  return cache->at(idx);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nstring PI = \"3141592653589793238462643383279\";\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<string> numbers = {\n        \"314159265358979323846\",\n        \"26433\",\n        \"8\",\n        \"3279\",\n        \"314159265\",\n        \"35897932384626433832\",\n        \"79\"};\n      assert(numbersInPi(PI, numbers) == 2);\n    });\n  }\n};\n",
      "unitTests": "string PI = \"3141592653589793238462643383279\";\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<string> numbers = {\n        \"314159265358979323846\",\n        \"26433\",\n        \"8\",\n        \"3279\",\n        \"314159265\",\n        \"35897932384626433832\",\n        \"79\"};\n      assert(numbersInPi(PI, numbers) == 2);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int NumbersInPi(string pi, string[] numbers) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi\n  // and m is the number of favorite numbers\n  public static int NumbersInPi(string pi, string[] numbers) {\n    HashSet<string> numbersTable = new HashSet<string>();\n    foreach (string number in numbers) {\n      numbersTable.Add(number);\n    }\n    Dictionary<int, int> cache = new Dictionary<int, int>();\n    int minSpaces = getMinSpaces(pi, numbersTable, cache, 0);\n    return minSpaces == Int32.MaxValue ? -1 : minSpaces;\n  }\n\n  public static int getMinSpaces(\n    string pi, HashSet<string> numbersTable, Dictionary<int, int> cache, int idx\n  ) {\n    if (idx == pi.Length) return -1;\n    if (cache.ContainsKey(idx)) return cache[idx];\n    int minSpaces = Int32.MaxValue;\n    for (int i = idx; i < pi.Length; i++) {\n      string prefix = pi.Substring(idx, i + 1 - idx);\n      if (numbersTable.Contains(prefix)) {\n        int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n        // Handle int overflow.\n        if (minSpacesInSuffix == Int32.MaxValue) {\n          minSpaces = Math.Min(minSpaces, minSpacesInSuffix);\n        } else {\n          minSpaces = Math.Min(minSpaces, minSpacesInSuffix + 1);\n        }\n      }\n    }\n    cache[idx] = minSpaces;\n    return cache[idx];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi\n  // and m is the number of favorite numbers\n  public static int NumbersInPi(string pi, string[] numbers) {\n    HashSet<string> numbersTable = new HashSet<string>();\n    foreach (string number in numbers) {\n      numbersTable.Add(number);\n    }\n    Dictionary<int, int> cache = new Dictionary<int, int>();\n    for (int i = pi.Length - 1; i >= 0; i--) {\n      getMinSpaces(pi, numbersTable, cache, i);\n    }\n    return cache[0] == Int32.MaxValue ? -1 : cache[0];\n  }\n\n  public static int getMinSpaces(\n    string pi, HashSet<string> numbersTable, Dictionary<int, int> cache, int idx\n  ) {\n    if (idx == pi.Length) return -1;\n    if (cache.ContainsKey(idx)) return cache[idx];\n    int minSpaces = Int32.MaxValue;\n    for (int i = idx; i < pi.Length; i++) {\n      string prefix = pi.Substring(idx, i + 1 - idx);\n      if (numbersTable.Contains(prefix)) {\n        int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n        // Handle int overflow.\n        if (minSpacesInSuffix == Int32.MaxValue) {\n          minSpaces = Math.Min(minSpaces, minSpacesInSuffix);\n        } else {\n          minSpaces = Math.Min(minSpaces, minSpacesInSuffix + 1);\n        }\n      }\n    }\n    cache.Add(idx, minSpaces);\n    return cache[idx];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  string PI = \"3141592653589793238462643383279\";\n\n  [Test]\n  public void TestCase1() {\n    string[] numbers = new string[] {\n      \"314159265358979323846\",\n      \"26433\",\n      \"8\",\n      \"3279\",\n      \"314159265\",\n      \"35897932384626433832\",\n      \"79\"\n    };\n    Utils.AssertTrue(Program.NumbersInPi(PI, numbers) == 2);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  string PI = \"3141592653589793238462643383279\";\n\n  [Test]\n  public void TestCase1() {\n    string[] numbers = new string[] {\n      \"314159265358979323846\",\n      \"26433\",\n      \"8\",\n      \"3279\",\n      \"314159265\",\n      \"35897932384626433832\",\n      \"79\"\n    };\n    Utils.AssertTrue(Program.NumbersInPi(PI, numbers) == 2);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc NumbersInPi(pi string, numbers []string) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits\n// in Pi and m is the number of favorite numbers.\nfunc NumbersInPi(pi string, numbers []string) int {\n\tnumbersTable := map[string]bool{}\n\tfor _, number := range numbers {\n\t\tnumbersTable[number] = true\n\t}\n\tminSpaces := getMinSpaces(pi, numbersTable, map[int]int{}, 0)\n\tif minSpaces == math.MaxInt32 {\n\t\treturn -1\n\t}\n\treturn minSpaces\n}\n\nfunc getMinSpaces(pi string, numbersTable map[string]bool,\n\tcache map[int]int, idx int) int {\n\tif idx == len(pi) {\n\t\treturn -1\n\t} else if val, found := cache[idx]; found {\n\t\treturn val\n\t}\n\tminSpaces := math.MaxInt32\n\tfor i := idx; i < len(pi); i++ {\n\t\tprefix := pi[idx : i+1]\n\t\tif _, found := numbersTable[prefix]; found {\n\t\t\tminSpacesInSuffix := getMinSpaces(pi, numbersTable, cache, i+1)\n\t\t\tminSpaces = min(minSpaces, minSpacesInSuffix+1)\n\t\t}\n\t}\n\tcache[idx] = minSpaces\n\treturn cache[idx]\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits\n// in Pi and m is the number of favorite numbers.\nfunc NumbersInPi(pi string, numbers []string) int {\n\tnumbersTable := map[string]bool{}\n\tfor _, number := range numbers {\n\t\tnumbersTable[number] = true\n\t}\n\n\tcache := map[int]int{}\n\tfor i := len(pi) - 1; i >= 0; i-- {\n\t\tgetMinSpaces(pi, numbersTable, cache, i)\n\t}\n\n\tif cache[0] == math.MaxInt32 {\n\t\treturn -1\n\t}\n\treturn cache[0]\n}\n\nfunc getMinSpaces(pi string, numbersTable map[string]bool,\n\tcache map[int]int, idx int) int {\n\tif idx == len(pi) {\n\t\treturn -1\n\t} else if val, found := cache[idx]; found {\n\t\treturn val\n\t}\n\tminSpaces := math.MaxInt32\n\tfor i := idx; i < len(pi); i++ {\n\t\tprefix := pi[idx : i+1]\n\t\tif _, found := numbersTable[prefix]; found {\n\t\t\tminSpacesInSuffix := getMinSpaces(pi, numbersTable, cache, i+1)\n\t\t\tminSpaces = min(minSpaces, minSpacesInSuffix+1)\n\t\t}\n\t}\n\tcache[idx] = minSpaces\n\treturn cache[idx]\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nconst PI = \"3141592653589793238462643383279\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tnumbers := []string{\"314159265358979323846\", \"26433\", \"8\", \"3279\", \"314159265\", \"35897932384626433832\", \"79\"}\n\trequire.Equal(t, NumbersInPi(PI, numbers), 2)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nconst PI = \"3141592653589793238462643383279\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tnumbers := []string{\"314159265358979323846\", \"26433\", \"8\", \"3279\", \"314159265\", \"35897932384626433832\", \"79\"}\n\trequire.Equal(t, NumbersInPi(PI, numbers), 2)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int numbersInPi(String pi, String[] numbers) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi\n  // and m is the number of favorite numbers\n  public static int numbersInPi(String pi, String[] numbers) {\n    Set<String> numbersTable = new HashSet<String>();\n    for (String number : numbers) {\n      numbersTable.add(number);\n    }\n    Map<Integer, Integer> cache = new HashMap<Integer, Integer>();\n    int minSpaces = getMinSpaces(pi, numbersTable, cache, 0);\n    return minSpaces == Integer.MAX_VALUE ? -1 : minSpaces;\n  }\n\n  public static int getMinSpaces(\n    String pi, Set<String> numbersTable, Map<Integer, Integer> cache, int idx\n  ) {\n    if (idx == pi.length()) return -1;\n    if (cache.containsKey(idx)) return cache.get(idx);\n    int minSpaces = Integer.MAX_VALUE;\n    for (int i = idx; i < pi.length(); i++) {\n      String prefix = pi.substring(idx, i + 1);\n      if (numbersTable.contains(prefix)) {\n        int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n        // Handle int overflow.\n        if (minSpacesInSuffix == Integer.MAX_VALUE) {\n          minSpaces = Math.min(minSpaces, minSpacesInSuffix);\n        } else {\n          minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1);\n        }\n      }\n    }\n    cache.put(idx, minSpaces);\n    return cache.get(idx);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi\n  // and m is the number of favorite numbers\n  public static int numbersInPi(String pi, String[] numbers) {\n    Set<String> numbersTable = new HashSet<String>();\n    for (String number : numbers) {\n      numbersTable.add(number);\n    }\n    Map<Integer, Integer> cache = new HashMap<Integer, Integer>();\n    for (int i = pi.length() - 1; i >= 0; i--) {\n      getMinSpaces(pi, numbersTable, cache, i);\n    }\n    return cache.get(0) == Integer.MAX_VALUE ? -1 : cache.get(0);\n  }\n\n  public static int getMinSpaces(\n    String pi, Set<String> numbersTable, Map<Integer, Integer> cache, int idx\n  ) {\n    if (idx == pi.length()) return -1;\n    if (cache.containsKey(idx)) return cache.get(idx);\n    int minSpaces = Integer.MAX_VALUE;\n    for (int i = idx; i < pi.length(); i++) {\n      String prefix = pi.substring(idx, i + 1);\n      if (numbersTable.contains(prefix)) {\n        int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n        // Handle int overflow.\n        if (minSpacesInSuffix == Integer.MAX_VALUE) {\n          minSpaces = Math.min(minSpaces, minSpacesInSuffix);\n        } else {\n          minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1);\n        }\n      }\n    }\n    cache.put(idx, minSpaces);\n    return cache.get(idx);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  String PI = \"3141592653589793238462643383279\";\n\n  @Test\n  public void TestCase1() {\n    String[] numbers = new String[] {\n      \"314159265358979323846\",\n      \"26433\",\n      \"8\",\n      \"3279\",\n      \"314159265\",\n      \"35897932384626433832\",\n      \"79\"};\n    Utils.assertTrue(Program.numbersInPi(PI, numbers) == 2);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  String PI = \"3141592653589793238462643383279\";\n\n  @Test\n  public void TestCase1() {\n    String[] numbers = new String[] {\n      \"314159265358979323846\",\n      \"26433\",\n      \"8\",\n      \"3279\",\n      \"314159265\",\n      \"35897932384626433832\",\n      \"79\"};\n    Utils.assertTrue(Program.numbersInPi(PI, numbers) == 2);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function numbersInPi(pi, numbers) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.numbersInPi = numbersInPi;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers\nfunction numbersInPi(pi, numbers) {\n  const numbersTable = {};\n  for (const number of numbers) {\n    numbersTable[number] = true;\n  }\n  const minSpaces = getMinSpaces(pi, numbersTable, {}, 0);\n  return minSpaces === Infinity ? -1 : minSpaces;\n}\n\nfunction getMinSpaces(pi, numbersTable, cache, idx) {\n  if (idx === pi.length) return -1;\n  if (idx in cache) return cache[idx];\n  let minSpaces = Infinity;\n  for (let i = idx; i < pi.length; i++) {\n    const prefix = pi.slice(idx, i + 1);\n    if (prefix in numbersTable) {\n      const minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n      minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1);\n    }\n  }\n  cache[idx] = minSpaces;\n  return cache[idx];\n}\n\nexports.numbersInPi = numbersInPi;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers\nfunction numbersInPi(pi, numbers) {\n  const numbersTable = {};\n  for (const number of numbers) {\n    numbersTable[number] = true;\n  }\n  const cache = {};\n  for (let i = pi.length - 1; i >= 0; i--) {\n    getMinSpaces(pi, numbersTable, cache, i);\n  }\n  return cache[0] === Infinity ? -1 : cache[0];\n}\n\nfunction getMinSpaces(pi, numbersTable, cache, idx) {\n  if (idx === pi.length) return -1;\n  if (idx in cache) return cache[idx];\n  let minSpaces = Infinity;\n  for (let i = idx; i < pi.length; i++) {\n    const prefix = pi.slice(idx, i + 1);\n    if (prefix in numbersTable) {\n      const minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n      minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1);\n    }\n  }\n  cache[idx] = minSpaces;\n  return cache[idx];\n}\n\nexports.numbersInPi = numbersInPi;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nconst PI = '3141592653589793238462643383279';\n\nit('Test Case #1', function () {\n  const numbers = [\n    '314159265358979323846',\n    '26433',\n    '8',\n    '3279',\n    '314159265',\n    '35897932384626433832',\n    '79',\n  ];\n  chai.expect(program.numbersInPi(PI, numbers)).to.deep.equal(2);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nconst PI = '3141592653589793238462643383279';\n\nit('Test Case #1', function () {\n  const numbers = [\n    '314159265358979323846',\n    '26433',\n    '8',\n    '3279',\n    '314159265',\n    '35897932384626433832',\n    '79',\n  ];\n  chai.expect(program.numbersInPi(PI, numbers)).to.deep.equal(2);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun numbersInPi(pi: String, numbers: List<String>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of\n// favorite numbers\nfun numbersInPi(pi: String, numbers: List<String>): Int {\n    val numbersTable = mutableSetOf<String>()\n    for (number in numbers) {\n        numbersTable.add(number)\n    }\n    val cache = mutableMapOf<Int, Int>()\n    val minSpaces = getMinSpaces(pi, numbersTable, cache, 0)\n    return if (minSpaces == Int.MAX_VALUE) -1 else minSpaces\n}\n\nfun getMinSpaces(pi: String, numbersTable: Set<String>, cache: MutableMap<Int, Int>, idx: Int): Int {\n    if (idx == pi.length) return -1\n    if (cache.containsKey(idx)) return cache[idx]!!\n    var minSpaces = Int.MAX_VALUE\n\n    for (i in idx until pi.length) {\n        val prefix = pi.substring(idx, i + 1)\n        if (numbersTable.contains(prefix)) {\n            val minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1)\n            // Handle int overflow.\n            if (minSpacesInSuffix == Int.MAX_VALUE) {\n                minSpaces = Math.min(minSpaces, minSpacesInSuffix)\n            } else {\n                minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1)\n            }\n        }\n    }\n    cache[idx] = minSpaces\n    return cache[idx]!!\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of\n// favorite numbers\nfun numbersInPi(pi: String, numbers: List<String>): Int {\n    val numbersTable = mutableSetOf<String>()\n    for (number in numbers) {\n        numbersTable.add(number)\n    }\n    val cache = mutableMapOf<Int, Int>()\n    for (i in pi.length - 1 downTo 0) {\n        getMinSpaces(pi, numbersTable, cache, i)\n    }\n    return if (cache[0] == Int.MAX_VALUE) -1 else cache[0]!!\n}\n\nfun getMinSpaces(pi: String, numbersTable: Set<String>, cache: MutableMap<Int, Int>, idx: Int): Int {\n    if (idx == pi.length) return -1\n    if (cache.containsKey(idx)) return cache[idx]!!\n    var minSpaces = Int.MAX_VALUE\n\n    for (i in idx until pi.length) {\n        val prefix = pi.substring(idx, i + 1)\n        if (numbersTable.contains(prefix)) {\n            val minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1)\n            // Handle int overflow.\n            if (minSpacesInSuffix == Int.MAX_VALUE) {\n                minSpaces = Math.min(minSpaces, minSpacesInSuffix)\n            } else {\n                minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1)\n            }\n        }\n    }\n    cache[idx] = minSpaces\n    return cache[idx]!!\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.numbersInPi\n\nval PI = \"3141592653589793238462643383279\"\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val numbers =\n            listOf(\n                \"314159265358979323846\",\n                \"26433\",\n                \"8\",\n                \"3279\",\n                \"314159265\",\n                \"35897932384626433832\",\n                \"79\",\n            )\n        assert(numbersInPi(PI, numbers) == 2)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.numbersInPi\n\nval PI = \"3141592653589793238462643383279\"\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val numbers =\n            listOf(\n                \"314159265358979323846\",\n                \"26433\",\n                \"8\",\n                \"3279\",\n                \"314159265\",\n                \"35897932384626433832\",\n                \"79\",\n            )\n        assert(numbersInPi(PI, numbers) == 2)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def numbersInPi(pi, numbers):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers\ndef numbersInPi(pi, numbers):\n    numbersTable = {number: True for number in numbers}\n    minSpaces = getMinSpaces(pi, numbersTable, {}, 0)\n    return -1 if minSpaces == float(\"inf\") else minSpaces\n\n\ndef getMinSpaces(pi, numbersTable, cache, idx):\n    if idx == len(pi):\n        return -1\n    if idx in cache:\n        return cache[idx]\n    minSpaces = float(\"inf\")\n    for i in range(idx, len(pi)):\n        prefix = pi[idx : i + 1]\n        if prefix in numbersTable:\n            minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1)\n            minSpaces = min(minSpaces, minSpacesInSuffix + 1)\n    cache[idx] = minSpaces\n    return cache[idx]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers\ndef numbersInPi(pi, numbers):\n    numbersTable = {number: True for number in numbers}\n    cache = {}\n    for i in reversed(range(len(pi))):\n        getMinSpaces(pi, numbersTable, cache, i)\n    return -1 if cache[0] == float(\"inf\") else cache[0]\n\n\ndef getMinSpaces(pi, numbersTable, cache, idx):\n    if idx == len(pi):\n        return -1\n    if idx in cache:\n        return cache[idx]\n    minSpaces = float(\"inf\")\n    for i in range(idx, len(pi)):\n        prefix = pi[idx : i + 1]\n        if prefix in numbersTable:\n            minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1)\n            minSpaces = min(minSpaces, minSpacesInSuffix + 1)\n    cache[idx] = minSpaces\n    return cache[idx]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nPI = \"3141592653589793238462643383279\"\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        numbers = [\n            \"314159265358979323846\",\n            \"26433\",\n            \"8\",\n            \"3279\",\n            \"314159265\",\n            \"35897932384626433832\",\n            \"79\",\n        ]\n        self.assertEqual(program.numbersInPi(PI, numbers), 2)\n",
      "unitTests": "import program\nimport unittest\n\n\nPI = \"3141592653589793238462643383279\"\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        numbers = [\n            \"314159265358979323846\",\n            \"26433\",\n            \"8\",\n            \"3279\",\n            \"314159265\",\n            \"35897932384626433832\",\n            \"79\",\n        ]\n        self.assertEqual(program.numbersInPi(PI, numbers), 2)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def numbersInPi(pi, numbers)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numbersInPi(pi, numbers)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numbersInPi(pi, numbers)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numbersInPi\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numbersInPi\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func numbersInPi(_ pi: String, _ favoriteNumbers: [String]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^3 + m) time | O(n + m) space\n  func numbersInPi(_ pi: String, _ favoriteNumbers: [String]) -> Int {\n    var numbersDictionary = [String: Bool]()\n\n    for number in favoriteNumbers {\n      numbersDictionary[number] = true\n    }\n\n    var cache = [Int: Int]()\n\n    let minimumNumberOfSpaces = getMinimumNumberOfSpaces(pi, numbersDictionary, &cache, 0)\n\n    if minimumNumberOfSpaces == Int(Int32.max) {\n      return -1\n    } else {\n      return minimumNumberOfSpaces\n    }\n  }\n\n  func getMinimumNumberOfSpaces(_ pi: String, _ numbersDictionary: [String: Bool], _ cache: inout [Int: Int], _ index: Int) -> Int {\n    if index == pi.count {\n      return -1\n    }\n\n    if let minimumNumberOfSpaces = cache[index] {\n      return minimumNumberOfSpaces\n    }\n\n    var minimumNumberOfSpaces = Int(Int32.max)\n\n    for i in index ..< pi.count {\n      let startingIndex = pi.index(pi.startIndex, offsetBy: index)\n\n      let endingIndex = pi.index(pi.startIndex, offsetBy: i + 1)\n\n      let prefix = String(pi[startingIndex ..< endingIndex])\n\n      if numbersDictionary.keys.contains(prefix) {\n        let minimumNumberOfSpacesInSuffix = getMinimumNumberOfSpaces(pi, numbersDictionary, &cache, i + 1)\n\n        minimumNumberOfSpaces = min(minimumNumberOfSpaces, minimumNumberOfSpacesInSuffix + 1)\n      }\n    }\n\n    cache[index] = minimumNumberOfSpaces\n\n    return minimumNumberOfSpaces\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^3 + m) time | O(n + m) space\n  func numbersInPi(_ pi: String, _ favoriteNumbers: [String]) -> Int {\n    var numbersDictionary = [String: Bool]()\n\n    for number in favoriteNumbers {\n      numbersDictionary[number] = true\n    }\n\n    var cache = [Int: Int]()\n\n    for i in stride(from: pi.count - 1, through: 0, by: -1) {\n      getMinimumNumberOfSpaces(pi, numbersDictionary, &cache, i)\n    }\n\n    if cache[0] == Int(Int32.max) {\n      return -1\n    } else {\n      return cache[0]!\n    }\n  }\n\n  func getMinimumNumberOfSpaces(_ pi: String, _ numbersDictionary: [String: Bool], _ cache: inout [Int: Int], _ index: Int) -> Int {\n    if index == pi.count {\n      return -1\n    }\n\n    if let minimumNumberOfSpaces = cache[index] {\n      return minimumNumberOfSpaces\n    }\n\n    var minimumNumberOfSpaces = Int(Int32.max)\n\n    for i in index ..< pi.count {\n      let startingIndex = pi.index(pi.startIndex, offsetBy: index)\n\n      let endingIndex = pi.index(pi.startIndex, offsetBy: i + 1)\n\n      let prefix = String(pi[startingIndex ..< endingIndex])\n\n      if numbersDictionary.keys.contains(prefix) {\n        let minimumNumberOfSpacesInSuffix = getMinimumNumberOfSpaces(pi, numbersDictionary, &cache, i + 1)\n\n        minimumNumberOfSpaces = min(minimumNumberOfSpaces, minimumNumberOfSpacesInSuffix + 1)\n      }\n    }\n\n    cache[index] = minimumNumberOfSpaces\n\n    return minimumNumberOfSpaces\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  let pi = \"3141592653589793238462643383279\"\n\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = [\"314159265358979323846\", \"26433\", \"8\", \"3279\", \"314159265\", \"35897932384626433832\", \"79\"]\n      try assertEqual(2, program.numbersInPi(pi, input))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  let pi = \"3141592653589793238462643383279\"\n\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = [\"314159265358979323846\", \"26433\", \"8\", \"3279\", \"314159265\", \"35897932384626433832\", \"79\"]\n      try assertEqual(2, program.numbersInPi(pi, input))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function numbersInPi(pi: string, numbers: string[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface NumbersTable {\n  [key: string]: boolean;\n}\n\ninterface Cache {\n  [key: number]: number;\n}\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers\nexport function numbersInPi(pi: string, numbers: string[]) {\n  const numbersTable: NumbersTable = {};\n  for (const number of numbers) {\n    numbersTable[number] = true;\n  }\n  const minSpaces = getMinSpaces(pi, numbersTable, {}, 0);\n  return minSpaces === Infinity ? -1 : minSpaces;\n}\n\nfunction getMinSpaces(pi: string, numbersTable: NumbersTable, cache: Cache, idx: number) {\n  if (idx === pi.length) return -1;\n  if (idx in cache) return cache[idx];\n  let minSpaces = Infinity;\n  for (let i = idx; i < pi.length; i++) {\n    const prefix = pi.slice(idx, i + 1);\n    if (prefix in numbersTable) {\n      const minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n      minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1);\n    }\n  }\n  cache[idx] = minSpaces;\n  return cache[idx];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface NumbersTable {\n  [key: string]: boolean;\n}\n\ninterface Cache {\n  [key: number]: number;\n}\n\n// O(n^3 + m) time | O(n + m) space - where n is the number of digits in Pi and m is the number of favorite numbers\nexport function numbersInPi(pi: string, numbers: string[]) {\n  const numbersTable: NumbersTable = {};\n  for (const number of numbers) {\n    numbersTable[number] = true;\n  }\n  const cache: Cache = {};\n  for (let i = pi.length - 1; i >= 0; i--) {\n    getMinSpaces(pi, numbersTable, cache, i);\n  }\n  return cache[0] === Infinity ? -1 : cache[0];\n}\n\nfunction getMinSpaces(pi: string, numbersTable: NumbersTable, cache: Cache, idx: number) {\n  if (idx === pi.length) return -1;\n  if (idx in cache) return cache[idx];\n  let minSpaces = Infinity;\n  for (let i = idx; i < pi.length; i++) {\n    const prefix = pi.slice(idx, i + 1);\n    if (prefix in numbersTable) {\n      const minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i + 1);\n      minSpaces = Math.min(minSpaces, minSpacesInSuffix + 1);\n    }\n  }\n  cache[idx] = minSpaces;\n  return cache[idx];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nconst PI = '3141592653589793238462643383279';\n\nit('Test Case #1', function () {\n  const numbers = [\n    '314159265358979323846',\n    '26433',\n    '8',\n    '3279',\n    '314159265',\n    '35897932384626433832',\n    '79',\n  ];\n  chai.expect(program.numbersInPi(PI, numbers)).to.deep.equal(2);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nconst PI = '3141592653589793238462643383279';\n\nit('Test Case #1', function () {\n  const numbers = [\n    '314159265358979323846',\n    '26433',\n    '8',\n    '3279',\n    '314159265',\n    '35897932384626433832',\n    '79',\n  ];\n  chai.expect(program.numbersInPi(PI, numbers)).to.deep.equal(2);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "pi",
      "example": "3141592653589793238462643383279",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "numbers",
      "example": [
        "314159265358979323846",
        "26433",
        "8",
        "3279",
        "314159265",
        "35897932384626433832",
        "79"
      ],
      "schema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "numbers": [
        "314159265358979323846",
        "26433",
        "8",
        "3279",
        "314159265",
        "35897932384626433832",
        "79"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "314159265358979323846264338327",
        "9"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "314",
        "49",
        "9001",
        "15926535897",
        "14",
        "9323",
        "8462643383279",
        "4",
        "793"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3141592653589793238462643383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3141",
        "1512",
        "159",
        "793",
        "12412451",
        "8462643383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "314159265358979323846",
        "327",
        "26433",
        "8",
        "3279",
        "9",
        "314159265",
        "35897932384626433832",
        "79"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "141592653589793238462643383279",
        "314159265358979323846",
        "327",
        "26433",
        "8",
        "3279",
        "9",
        "314159265",
        "35897932384626433832",
        "79",
        "3"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "1",
        "4",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "2384626",
        "83279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "1",
        "4",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "2384626",
        "383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "141",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "2384626",
        "383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "141",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "23846264",
        "383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "141",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "23846264",
        "3832798"
      ],
      "pi": "3141592653589793238462643383279"
    }
  ],
  "jsonTests": [
    {
      "numbers": [
        "314159265358979323846",
        "26433",
        "8",
        "3279",
        "314159265",
        "35897932384626433832",
        "79"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "314159265358979323846264338327",
        "9"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "314",
        "49",
        "9001",
        "15926535897",
        "14",
        "9323",
        "8462643383279",
        "4",
        "793"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3141592653589793238462643383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3141",
        "1512",
        "159",
        "793",
        "12412451",
        "8462643383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "314159265358979323846",
        "327",
        "26433",
        "8",
        "3279",
        "9",
        "314159265",
        "35897932384626433832",
        "79"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "141592653589793238462643383279",
        "314159265358979323846",
        "327",
        "26433",
        "8",
        "3279",
        "9",
        "314159265",
        "35897932384626433832",
        "79",
        "3"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "1",
        "4",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "2384626",
        "83279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "1",
        "4",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "2384626",
        "383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "141",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "2384626",
        "383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "141",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "23846264",
        "383279"
      ],
      "pi": "3141592653589793238462643383279"
    },
    {
      "numbers": [
        "3",
        "141",
        "592",
        "65",
        "55",
        "35",
        "8",
        "9793",
        "23846264",
        "3832798"
      ],
      "pi": "3141592653589793238462643383279"
    }
  ],
  "changelog": []
}