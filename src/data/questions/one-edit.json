{
  "uid": "one-edit",
  "testStrategy": "JSON",
  "name": "One Edit",
  "version": 0,
  "releaseDate": "2022-12-15T00:00:00Z",
  "category": "Strings",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 3865,
    "failureCount": 640
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "768364467",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 650
  },
  "prompt": "<div class=\"html\">\n  <p>\n    You're given two strings <span>stringOne</span> and <span>stringTwo</span>.\n    Write a function that determines if these two strings can be made equal\n    using only one edit.\n  </p>\n\n  <p>\n    There are 3 possible edits:\n    <ul>\n      <li>\n        <b>Replace</b>: One character in one string is swapped for a different\n        character.\n      </li>\n      <li>\n        <b>Add</b>: One character is added at any index in one string.\n      </li>\n      <li>\n        <b>Remove</b>: One character is removed at any index in one string.\n      </li>\n    </ul>\n  </p>\n\n  <p>\n    Note that both strings will contain at least one character. If the strings\n    are the same, your function should return true.\n  </p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">stringOne</span> = \"hello\"\n<span class=\"CodeEditor-promptParameter\">stringTwo</span> = \"hollo\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\nTrue <span class=\"CodeEditor-promptComment\">// A single replace at index 1 of either string can make the strings equal</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  If the difference in lengths of the strings is greater than 1, then there\n  is no way to make them equal with a single edit.\n</p>\n",
    "\n<p>\n  If the lengths of the strings are the same, then the only possible edit is a\n  replace, because adding or removing a character would make the strings different\n  lengths.\n</p>\n",
    "\n<p>\n  If the strings are different lengths, the only possible moves are adding\n  and removing a character. These are essentially the same operation, because\n  they represent the case where one string has a character that another does\n  not.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the shorter string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool oneEdit(string stringOne, string stringTwo) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n// O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n// m is the length of stringTwo\nbool oneEdit(string stringOne, string stringTwo) {\n  int lengthOne = stringOne.length();\n  int lengthTwo = stringTwo.length();\n\n  if (abs(lengthOne - lengthTwo) > 1) {\n    return false;\n  }\n\n  for (int i = 0; i < min(lengthOne, lengthTwo); i++) {\n    if (stringOne[i] != stringTwo[i]) {\n      if (lengthOne > lengthTwo) {\n        return stringOne.substr(i + 1) == stringTwo.substr(i);\n      } else if (lengthTwo > lengthOne) {\n        return stringOne.substr(i) == stringTwo.substr(i + 1);\n      } else {\n        return stringOne.substr(i + 1) == stringTwo.substr(i + 1);\n      }\n    }\n  }\n\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the shorter string\nbool oneEdit(string stringOne, string stringTwo) {\n  int lengthOne = stringOne.length();\n  int lengthTwo = stringTwo.length();\n\n  if (abs(lengthOne - lengthTwo) > 1) {\n    return false;\n  }\n\n  bool madeEdit = false;\n  int indexOne = 0;\n  int indexTwo = 0;\n\n  while (indexOne < lengthOne && indexTwo < lengthTwo) {\n    if (stringOne[indexOne] != stringTwo[indexTwo]) {\n      if (madeEdit) {\n        return false;\n      }\n      madeEdit = true;\n\n      if (lengthOne > lengthTwo) {\n        indexOne++;\n      } else if (lengthTwo > lengthOne) {\n        indexTwo++;\n      } else {\n        indexOne++;\n        indexTwo++;\n      }\n    } else {\n      indexOne++;\n      indexTwo++;\n    }\n  }\n\n  return true;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto stringOne = \"hello\";\n      auto stringTwo = \"helo\";\n      auto expected = true;\n      auto actual = oneEdit(stringOne, stringTwo);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto stringOne = \"hello\";\n      auto stringTwo = \"helo\";\n      auto expected = true;\n      auto actual = oneEdit(stringOne, stringTwo);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public bool OneEdit(string stringOne, string stringTwo) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n  // m is the length of stringTwo\n  public bool OneEdit(string stringOne, string stringTwo) {\n    int lengthOne = stringOne.Length;\n    int lengthTwo = stringTwo.Length;\n    if (Math.Abs(lengthOne - lengthTwo) > 1) {\n      return false;\n    }\n\n    for (int i = 0; i < Math.Min(lengthOne, lengthTwo); i++) {\n      if (stringOne[i] != stringTwo[i]) {\n        if (lengthOne > lengthTwo) {\n          return stringOne.Substring(i + 1).Equals(stringTwo.Substring(i));\n        } else if (lengthTwo > lengthOne) {\n          return stringOne.Substring(i).Equals(stringTwo.Substring(i + 1));\n        } else {\n          return stringOne.Substring(i + 1).Equals(stringTwo.Substring(i + 1));\n        }\n      }\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the shorter string\n  public bool OneEdit(string stringOne, string stringTwo) {\n    int lengthOne = stringOne.Length;\n    int lengthTwo = stringTwo.Length;\n    if (Math.Abs(lengthOne - lengthTwo) > 1) {\n      return false;\n    }\n\n    bool madeEdit = false;\n    int indexOne = 0;\n    int indexTwo = 0;\n\n    while (indexOne < lengthOne && indexTwo < lengthTwo) {\n      if (stringOne[indexOne] != stringTwo[indexTwo]) {\n        if (madeEdit) {\n          return false;\n        }\n        madeEdit = true;\n\n        if (lengthOne > lengthTwo) {\n          indexOne++;\n        } else if (lengthTwo > lengthOne) {\n          indexTwo++;\n        } else {\n          indexOne++;\n          indexTwo++;\n        }\n      } else {\n        indexOne++;\n        indexTwo++;\n      }\n    }\n\n    return true;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var stringOne = \"hello\";\n    var stringTwo = \"helo\";\n    var expected = true;\n    var actual = new Program().OneEdit(stringOne, stringTwo);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var stringOne = \"hello\";\n    var stringTwo = \"helo\";\n    var expected = true;\n    var actual = new Program().OneEdit(stringOne, stringTwo);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc OneEdit(stringOne string, stringTwo string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n// m is the length of stringTwo\nfunc OneEdit(stringOne string, stringTwo string) bool {\n\tlengthOne := len(stringOne)\n\tlengthTwo := len(stringTwo)\n\n\tif abs(lengthOne-lengthTwo) > 1 {\n\t\treturn false\n\t}\n\n\tfor i := 0; i < min(lengthOne, lengthTwo); i++ {\n\t\tif stringOne[i] != stringTwo[i] {\n\t\t\tif lengthOne > lengthTwo {\n\t\t\t\treturn stringOne[i+1:] == stringTwo[i:]\n\t\t\t} else if lengthTwo > lengthOne {\n\t\t\t\treturn stringOne[i:] == stringTwo[i+1:]\n\t\t\t} else {\n\t\t\t\treturn stringOne[i+1:] == stringTwo[i+1:]\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nfunc abs(i int) int {\n\tif i < 0 {\n\t\treturn -i\n\t}\n\treturn i\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the shorter string\nfunc OneEdit(stringOne string, stringTwo string) bool {\n\tlengthOne := len(stringOne)\n\tlengthTwo := len(stringTwo)\n\n\tif abs(lengthOne-lengthTwo) > 1 {\n\t\treturn false\n\t}\n\n\tmadeEdit := false\n\tindexOne, indexTwo := 0, 0\n\tfor indexOne < lengthOne && indexTwo < lengthTwo {\n\t\tif stringOne[indexOne] != stringTwo[indexTwo] {\n\t\t\tif madeEdit {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tmadeEdit = true\n\n\t\t\tif lengthOne > lengthTwo {\n\t\t\t\tindexOne += 1\n\t\t\t} else if lengthTwo > lengthOne {\n\t\t\t\tindexTwo += 1\n\t\t\t} else {\n\t\t\t\tindexOne += 1\n\t\t\t\tindexTwo += 1\n\t\t\t}\n\t\t} else {\n\t\t\tindexOne += 1\n\t\t\tindexTwo += 1\n\t\t}\n\t}\n\treturn true\n}\n\nfunc abs(i int) int {\n\tif i < 0 {\n\t\treturn -i\n\t}\n\treturn i\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tstringOne := \"hello\"\n\tstringTwo := \"helo\"\n\texpected := true\n\tactual := OneEdit(stringOne, stringTwo)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tstringOne := \"hello\"\n\tstringTwo := \"helo\"\n\texpected := true\n\tactual := OneEdit(stringOne, stringTwo)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public boolean oneEdit(String stringOne, String stringTwo) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n  // m is the length of stringTwo\n  public boolean oneEdit(String stringOne, String stringTwo) {\n    int lengthOne = stringOne.length();\n    int lengthTwo = stringTwo.length();\n    if (Math.abs(lengthOne - lengthTwo) > 1) {\n      return false;\n    }\n\n    for (int i = 0; i < Math.min(lengthOne, lengthTwo); i++) {\n      if (stringOne.charAt(i) != stringTwo.charAt(i)) {\n        if (lengthOne > lengthTwo) {\n          return stringOne.substring(i + 1).equals(stringTwo.substring(i));\n        } else if (lengthTwo > lengthOne) {\n          return stringOne.substring(i).equals(stringTwo.substring(i + 1));\n        } else {\n          return stringOne.substring(i + 1).equals(stringTwo.substring(i + 1));\n        }\n      }\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the shorter string\n  public boolean oneEdit(String stringOne, String stringTwo) {\n    int lengthOne = stringOne.length();\n    int lengthTwo = stringTwo.length();\n    if (Math.abs(lengthOne - lengthTwo) > 1) {\n      return false;\n    }\n\n    boolean madeEdit = false;\n    int indexOne = 0;\n    int indexTwo = 0;\n\n    while (indexOne < lengthOne && indexTwo < lengthTwo) {\n      if (stringOne.charAt(indexOne) != stringTwo.charAt(indexTwo)) {\n        if (madeEdit) {\n          return false;\n        }\n        madeEdit = true;\n\n        if (lengthOne > lengthTwo) {\n          indexOne++;\n        } else if (lengthTwo > lengthOne) {\n          indexTwo++;\n        } else {\n          indexOne++;\n          indexTwo++;\n        }\n      } else {\n        indexOne++;\n        indexTwo++;\n      }\n    }\n\n    return true;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var stringOne = \"hello\";\n    var stringTwo = \"helo\";\n    var expected = true;\n    var actual = new Program().oneEdit(stringOne, stringTwo);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var stringOne = \"hello\";\n    var stringTwo = \"helo\";\n    var expected = true;\n    var actual = new Program().oneEdit(stringOne, stringTwo);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function oneEdit(stringOne, stringTwo) {\n  // Write your code here.\n  return false;\n}\n\n// Do not edit the line below.\nexports.oneEdit = oneEdit;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n// m is the length of stringTwo\nfunction oneEdit(stringOne, stringTwo) {\n  const lengthOne = stringOne.length;\n  const lengthTwo = stringTwo.length;\n  if (Math.abs(lengthOne - lengthTwo) > 1) return false;\n\n  for (let i = 0; i < Math.min(lengthOne, lengthTwo); i++) {\n    if (stringOne[i] !== stringTwo[i]) {\n      if (lengthOne > lengthTwo) {\n        return stringOne.slice(i + 1) === stringTwo.slice(i);\n      } else if (lengthTwo > lengthOne) {\n        return stringOne.slice(i) === stringTwo.slice(i + 1);\n      } else {\n        return stringOne.slice(i + 1) === stringTwo.slice(i + 1);\n      }\n    }\n  }\n\n  return true;\n}\n\n// Do not edit the line below.\nexports.oneEdit = oneEdit;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the shorter string\nfunction oneEdit(stringOne, stringTwo) {\n  const lengthOne = stringOne.length;\n  const lengthTwo = stringTwo.length;\n  if (Math.abs(lengthOne - lengthTwo) > 1) return false;\n\n  let madeEdit = false;\n  let indexOne = 0;\n  let indexTwo = 0;\n\n  while (indexOne < lengthOne && indexTwo < lengthTwo) {\n    if (stringOne[indexOne] !== stringTwo[indexTwo]) {\n      if (madeEdit) return false;\n      madeEdit = true;\n\n      if (lengthOne > lengthTwo) {\n        indexOne++;\n      } else if (lengthTwo > lengthOne) {\n        indexTwo++;\n      } else {\n        indexOne++;\n        indexTwo++;\n      }\n    } else {\n      indexOne++;\n      indexTwo++;\n    }\n  }\n\n  return true;\n}\n\n// Do not edit the line below.\nexports.oneEdit = oneEdit;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const stringOne = 'hello';\n  const stringTwo = 'helo';\n  const expected = true;\n  const actual = program.oneEdit(stringOne, stringTwo);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const stringOne = 'hello';\n  const stringTwo = 'helo';\n  const expected = true;\n  const actual = program.oneEdit(stringOne, stringTwo);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun oneEdit(stringOne: String, stringTwo: String): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\n// O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n// m is the length of stringTwo\nfun oneEdit(stringOne: String, stringTwo: String): Boolean {\n    val lengthOne = stringOne.length\n    val lengthTwo = stringTwo.length\n\n    for (i in 0 until min(lengthOne, lengthTwo)) {\n        if (stringOne[i] != stringTwo[i]) {\n            if (lengthOne > lengthTwo) {\n                return stringOne.substring(i + 1) == stringTwo.substring(i)\n            } else if (lengthTwo > lengthOne) {\n                return stringOne.substring(i) == stringTwo.substring(i + 1)\n            } else {\n                return stringOne.substring(i + 1) == stringTwo.substring(i + 1)\n            }\n        }\n    }\n\n    return true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\n\n// O(n) time | O(1) space - where n is the length of the shorter string\nfun oneEdit(stringOne: String, stringTwo: String): Boolean {\n    val lengthOne = stringOne.length\n    val lengthTwo = stringTwo.length\n    if (abs(lengthOne - lengthTwo) > 1) return false\n\n    var madeEdit = false\n    var indexOne = 0\n    var indexTwo = 0\n\n    while (indexOne < lengthOne && indexTwo < lengthTwo) {\n        if (stringOne[indexOne] != stringTwo[indexTwo]) {\n            if (madeEdit) return false\n            madeEdit = true\n\n            if (lengthOne > lengthTwo) {\n                indexOne += 1\n            } else if (lengthTwo > lengthOne) {\n                indexTwo += 1\n            } else {\n                indexOne += 1\n                indexTwo += 1\n            }\n        } else {\n            indexOne += 1\n            indexTwo += 1\n        }\n    }\n\n    return true\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.oneEdit\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val stringOne = \"hello\"\n        val stringTwo = \"helo\"\n        val expected = true\n        val output = oneEdit(stringOne, stringTwo)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.oneEdit\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val stringOne = \"hello\"\n        val stringTwo = \"helo\"\n        val expected = true\n        val output = oneEdit(stringOne, stringTwo)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def oneEdit(stringOne, stringTwo):\n    # Write your code here.\n    return False\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n# m is the length of stringTwo\ndef oneEdit(stringOne, stringTwo):\n    lengthOne, lengthTwo = len(stringOne), len(stringTwo)\n    if abs(lengthOne - lengthTwo) > 1:\n        return False\n\n    for i in range(min(lengthOne, lengthTwo)):\n        if stringOne[i] != stringTwo[i]:\n            if lengthOne > lengthTwo:\n                return stringOne[i + 1 :] == stringTwo[i:]\n            elif lengthTwo > lengthOne:\n                return stringOne[i:] == stringTwo[i + 1 :]\n            else:\n                return stringOne[i + 1 :] == stringTwo[i + 1 :]\n\n    return True\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the shorter string\ndef oneEdit(stringOne, stringTwo):\n    lengthOne, lengthTwo = len(stringOne), len(stringTwo)\n    if abs(lengthOne - lengthTwo) > 1:\n        return False\n\n    madeEdit = False\n    indexOne = 0\n    indexTwo = 0\n\n    while indexOne < lengthOne and indexTwo < lengthTwo:\n        if stringOne[indexOne] != stringTwo[indexTwo]:\n            if madeEdit:\n                return False\n            madeEdit = True\n\n            if lengthOne > lengthTwo:\n                indexOne += 1\n            elif lengthTwo > lengthOne:\n                indexTwo += 1\n            else:\n                indexOne += 1\n                indexTwo += 1\n        else:\n            indexOne += 1\n            indexTwo += 1\n\n    return True\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        stringOne = \"hello\"\n        stringTwo = \"helo\"\n        expected = True\n        actual = program.oneEdit(stringOne, stringTwo)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        stringOne = \"hello\"\n        stringTwo = \"helo\"\n        expected = True\n        actual = program.oneEdit(stringOne, stringTwo)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "\nclass Program\n    def oneEdit(stringOne, stringTwo)\n        # Write your code here.\n        return false\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n\nclass Program\n    def oneEdit(stringOne, stringTwo)\n        # Write your code here.\n        return false\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.oneEdit\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.oneEdit\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func oneEdit(_ stringOne: String, _ stringTwo: String) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n  // m is the length of stringTwo\n  func oneEdit(_ stringOne: String, _ stringTwo: String) -> Bool {\n    let lengthOne = stringOne.count\n    let lengthTwo = stringTwo.count\n\n    if abs(lengthOne - lengthTwo) > 1 {\n      return false\n    }\n\n    for i in 0 ..< min(lengthOne, lengthTwo) {\n      let charOne = stringOne.index(stringOne.startIndex, offsetBy: i)\n      let charTwo = stringTwo.index(stringTwo.startIndex, offsetBy: i)\n      if stringOne[charOne] != stringTwo[charTwo] {\n        if lengthOne > lengthTwo {\n          return stringOne.suffix(stringOne.count - (i + 1)) == stringTwo.suffix(stringTwo.count - i)\n        } else if lengthTwo > lengthOne {\n          return stringOne.suffix(stringOne.count - i) == stringTwo.suffix(stringTwo.count - (i + 1))\n        } else {\n          return stringOne.suffix(stringOne.count - (i + 1)) == stringTwo.suffix(stringTwo.count - (i + 1))\n        }\n      }\n    }\n    return true\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the shorter string\n  func oneEdit(_ stringOne: String, _ stringTwo: String) -> Bool {\n    let lengthOne = stringOne.count\n    let lengthTwo = stringTwo.count\n\n    if abs(lengthOne - lengthTwo) > 1 {\n      return false\n    }\n\n    var madeEdit = false\n    var indexOne = 0\n    var indexTwo = 0\n    while indexOne < lengthOne && indexTwo < lengthTwo {\n      let charOne = stringOne.index(stringOne.startIndex, offsetBy: indexOne)\n      let charTwo = stringTwo.index(stringTwo.startIndex, offsetBy: indexTwo)\n      if stringOne[charOne] != stringTwo[charTwo] {\n        if madeEdit {\n          return false\n        }\n        madeEdit = true\n\n        if lengthOne > lengthTwo {\n          indexOne += 1\n        } else if lengthTwo > lengthOne {\n          indexTwo += 1\n        } else {\n          indexOne += 1\n          indexTwo += 1\n        }\n      } else {\n        indexOne += 1\n        indexTwo += 1\n      }\n    }\n    return true\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var stringOne = \"hello\"\n      var stringTwo = \"helo\"\n      var expected = true\n      var actual = Program().oneEdit(stringOne, stringTwo)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var stringOne = \"hello\"\n      var stringTwo = \"helo\"\n      var expected = true\n      var actual = Program().oneEdit(stringOne, stringTwo)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function oneEdit(stringOne: string, stringTwo: string) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(n + m) space - where n is the length of stringOne, and\n// m is the length of stringTwo\nexport function oneEdit(stringOne: string, stringTwo: string) {\n  const lengthOne = stringOne.length;\n  const lengthTwo = stringTwo.length;\n  if (Math.abs(lengthOne - lengthTwo) > 1) return false;\n\n  for (let i = 0; i < Math.min(lengthOne, lengthTwo); i++) {\n    if (stringOne[i] !== stringTwo[i]) {\n      if (lengthOne > lengthTwo) {\n        return stringOne.slice(i + 1) === stringTwo.slice(i);\n      } else if (lengthTwo > lengthOne) {\n        return stringOne.slice(i) === stringTwo.slice(i + 1);\n      } else {\n        return stringOne.slice(i + 1) === stringTwo.slice(i + 1);\n      }\n    }\n  }\n\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the shorter string\nexport function oneEdit(stringOne: string, stringTwo: string) {\n  const lengthOne = stringOne.length;\n  const lengthTwo = stringTwo.length;\n  if (Math.abs(lengthOne - lengthTwo) > 1) return false;\n\n  let madeEdit = false;\n  let indexOne = 0;\n  let indexTwo = 0;\n\n  while (indexOne < lengthOne && indexTwo < lengthTwo) {\n    if (stringOne[indexOne] !== stringTwo[indexTwo]) {\n      if (madeEdit) return false;\n      madeEdit = true;\n\n      if (lengthOne > lengthTwo) {\n        indexOne++;\n      } else if (lengthTwo > lengthOne) {\n        indexTwo++;\n      } else {\n        indexOne++;\n        indexTwo++;\n      }\n    } else {\n      indexOne++;\n      indexTwo++;\n    }\n  }\n\n  return true;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const stringOne = 'hello';\n  const stringTwo = 'helo';\n  const expected = true;\n  const actual = program.oneEdit(stringOne, stringTwo);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const stringOne = 'hello';\n  const stringTwo = 'helo';\n  const expected = true;\n  const actual = program.oneEdit(stringOne, stringTwo);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "stringOne",
      "example": "a",
      "schema": {
        "minLength": 1,
        "type": "string"
      }
    },
    {
      "name": "stringTwo",
      "example": "a",
      "schema": {
        "minLength": 1,
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "stringOne": "a",
      "stringTwo": "a"
    },
    {
      "stringOne": "aaa",
      "stringTwo": "aaa"
    },
    {
      "stringOne": "a",
      "stringTwo": "b"
    },
    {
      "stringOne": "ab",
      "stringTwo": "b"
    },
    {
      "stringOne": "abc",
      "stringTwo": "b"
    },
    {
      "stringOne": "ab",
      "stringTwo": "a"
    },
    {
      "stringOne": "b",
      "stringTwo": "ab"
    },
    {
      "stringOne": "bb",
      "stringTwo": "a"
    },
    {
      "stringOne": "a",
      "stringTwo": "ab"
    },
    {
      "stringOne": "bb",
      "stringTwo": "ab"
    },
    {
      "stringOne": "ab",
      "stringTwo": "bb"
    },
    {
      "stringOne": "hello",
      "stringTwo": "helo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heloo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heloos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heloos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "helllo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "helllos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "ello"
    },
    {
      "stringOne": "hello",
      "stringTwo": "llo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "ellos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "elllos"
    },
    {
      "stringOne": "helo",
      "stringTwo": "helle"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefgijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "acdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxy"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyza"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklnopqrstuvwxyz"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmmnopqrstuvwxyz"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklnnopqrstuvwxyz"
    }
  ],
  "jsonTests": [
    {
      "stringOne": "a",
      "stringTwo": "a"
    },
    {
      "stringOne": "aaa",
      "stringTwo": "aaa"
    },
    {
      "stringOne": "a",
      "stringTwo": "b"
    },
    {
      "stringOne": "ab",
      "stringTwo": "b"
    },
    {
      "stringOne": "abc",
      "stringTwo": "b"
    },
    {
      "stringOne": "ab",
      "stringTwo": "a"
    },
    {
      "stringOne": "b",
      "stringTwo": "ab"
    },
    {
      "stringOne": "bb",
      "stringTwo": "a"
    },
    {
      "stringOne": "a",
      "stringTwo": "ab"
    },
    {
      "stringOne": "bb",
      "stringTwo": "ab"
    },
    {
      "stringOne": "ab",
      "stringTwo": "bb"
    },
    {
      "stringOne": "hello",
      "stringTwo": "helo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heloo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heloos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "heloos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "helllo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "helllos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "ello"
    },
    {
      "stringOne": "hello",
      "stringTwo": "llo"
    },
    {
      "stringOne": "hello",
      "stringTwo": "ellos"
    },
    {
      "stringOne": "hello",
      "stringTwo": "elllos"
    },
    {
      "stringOne": "helo",
      "stringTwo": "helle"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefgijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "acdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abdefghijklmnopqrstuvwxyz"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxy"
    },
    {
      "stringOne": "bcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmnopqrstuvwxyza"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklnopqrstuvwxyz"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklmmnopqrstuvwxyz"
    },
    {
      "stringOne": "abcdefghijklmnopqrstuvwxyz",
      "stringTwo": "abcdefghijklnnopqrstuvwxyz"
    }
  ],
  "changelog": []
}