{
  "uid": "pattern-matcher",
  "testStrategy": "JSON",
  "name": "Pattern Matcher",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Strings",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 5979,
    "failureCount": 2437
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "226841210",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1633
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given two non-empty strings. The first one is a pattern consisting of\n  only <span>\"x\"</span>s and / or <span>\"y\"</span>s; the other one is a normal\n  string of alphanumeric characters. Write a function that checks whether the\n  normal string matches the pattern.\n</p>\n<p>\n  A string <span>S0</span> is said to match a pattern if replacing all\n  <span>\"x\"</span>s in the pattern with some non-empty substring\n  <span>S1</span> of <span>S0</span> and replacing all <span>\"y\"</span>s in the\n  pattern with some non-empty substring <span>S2</span> of\n  <span>S0</span> yields the same string <span>S0</span>.\n</p>\n<p>\n  If the input string doesn't match the input pattern, the function should\n  return an empty array; otherwise, it should return an array holding the\n  strings <span>S1</span> and <span>S2</span> that represent\n  <span>\"x\"</span> and <span>\"y\"</span> in the normal string, in that order. If\n  the pattern doesn't contain any <span>\"x\"</span>s or <span>\"y\"</span>s, the\n  respective letter should be represented by an empty string in the final array\n  that you return.\n</p>\n<p>\n  You can assume that there will never be more than one pair of strings\n  <span>S1</span> and <span>S2</span> that appropriately represent\n  <span>\"x\"</span> and <span>\"y\"</span> in the normal string.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">pattern</span> = \"xxyxxy\"\n<span class=\"CodeEditor-promptParameter\">string</span> = \"gogopowerrangergogopowerranger\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[\"go\", \"powerranger\"]\n</pre>\n</div>",
  "hints": [
    "<p>\nStart by checking if the pattern starts with an \"x\". If it doesn't, consider generating a new pattern that swaps all \"x\"s for \"y\"s and vice versa; this might greatly simplify the rest of your algorithm. Make sure to keep track of whether or not you do this swap, as your final answer will be affected by it.\n</p>\n",
    "\n<p>\nUse a hash table to store the number of \"x\"s and \"y\"s that appear in the pattern, and keep track of the position of the first \"y\". Knowing how many \"x\"s and \"y\"s appear in the pattern, paired with the length of the main string which you have access to, will allow you to quickly test out various possible lengths for \"x\" and \"y\". Knowing where the first \"y\" appears in the pattern will allow you to actually generate potential substrings.\n</p>\n",
    "\n<p>\nTraverse the main string and try different combinations of substrings that could represent \"x\" and \"y\". For each potential combination, map the new pattern mentioned in Hint #1 and see if it matches the main string.\n</p>"
  ],
  "spaceTime": "O(n^2 + m) time | O(n + m) space - where n is the length of the main string and m is the length of the pattern",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<string> patternMatcher(string pattern, string str) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <math.h>\n\n#include <algorithm>\n#include <numeric>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nvector<char> getNewPattern(string pattern);\nint getCountsAndFirstYPos(\n  vector<char> pattern, unordered_map<char, int>* counts\n);\n\n// O(n^2 + m) time | O(n + m) space\nvector<string> patternMatcher(string pattern, string str) {\n  if (pattern.length() > str.length()) {\n    return vector<string>{};\n  }\n  vector<char> newPattern = getNewPattern(pattern);\n  bool didSwitch = newPattern[0] != pattern[0];\n  unordered_map<char, int> counts({{'x', 0}, {'y', 0}});\n  int firstYPos = getCountsAndFirstYPos(newPattern, &counts);\n  if (counts['y'] != 0) {\n    for (int lenOfX = 1; lenOfX < str.length(); lenOfX++) {\n      double lenOfY =\n        ((double)str.length() - (double)lenOfX * (double)counts['x']) /\n        (double)counts['y'];\n      if (lenOfY <= 0 || fmod(lenOfY, 1) != 0) {\n        continue;\n      }\n      int yIdx = firstYPos * lenOfX;\n      string x = str.substr(0, lenOfX);\n      string y = str.substr(yIdx, lenOfY);\n      vector<string> potentialMatch(newPattern.size(), \"\");\n      transform(\n        newPattern.begin(),\n        newPattern.end(),\n        potentialMatch.begin(),\n        [x, y](char c) -> string { return c == 'x' ? x : y; }\n      );\n      if (str == accumulate(potentialMatch.begin(), potentialMatch.end(), string(\"\"))) {\n        return !didSwitch ? vector<string>{x, y} : vector<string>{y, x};\n      }\n    }\n  } else {\n    double lenOfX = str.length() / counts['x'];\n    if (fmod(lenOfX, 1) == 0) {\n      string x = str.substr(0, lenOfX);\n      vector<string> potentialMatch(newPattern.size(), \"\");\n      transform(\n        newPattern.begin(),\n        newPattern.end(),\n        potentialMatch.begin(),\n        [x](char c) -> string { return x; }\n      );\n      if (str == accumulate(potentialMatch.begin(), potentialMatch.end(), string(\"\"))) {\n        return !didSwitch ? vector<string>{x, \"\"} : vector<string>{\"\", x};\n      }\n    }\n  }\n  return vector<string>{};\n}\n\nvector<char> getNewPattern(string pattern) {\n  vector<char> patternLetters(pattern.begin(), pattern.end());\n  if (pattern[0] == 'x') {\n    return patternLetters;\n  } else {\n    transform(\n      patternLetters.begin(),\n      patternLetters.end(),\n      patternLetters.begin(),\n      [](char c) -> char { return c == 'y' ? 'x' : 'y'; }\n    );\n    return patternLetters;\n  }\n}\n\nint getCountsAndFirstYPos(\n  vector<char> pattern, unordered_map<char, int>* counts\n) {\n  int firstYPos = -1;\n  for (int i = 0; i < pattern.size(); i++) {\n    char c = pattern[i];\n    counts->at(c)++;\n    if (c == 'y' && firstYPos == -1) {\n      firstYPos = i;\n    }\n  }\n  return firstYPos;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<string> expected{\"go\", \"powerranger\"};\n      assert(\n        patternMatcher(\n          \"xxyxxy\",\n          \"gogopowerrangergogopo\"\n          \"werranger\"\n        ) == expected\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<string> expected{\"go\", \"powerranger\"};\n      assert(\n        patternMatcher(\n          \"xxyxxy\",\n          \"gogopowerrangergogopo\"\n          \"werranger\"\n        ) == expected\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static string[] PatternMatcher(string pattern, string str) {\n    // Write your code here.\n    return new string[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Text;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^2 + m) time | O(n + m) space\n  public static string[] PatternMatcher(string pattern, string str) {\n    if (pattern.Length > str.Length) {\n      return new string[] {};\n    }\n    char[] newPattern = getNewPattern(pattern);\n    bool didSwitch = newPattern[0] != pattern[0];\n    Dictionary<char, int> counts = new Dictionary<char, int>();\n    counts['x'] = 0;\n    counts['y'] = 0;\n    int firstYPos = getCountsAndFirstYPos(newPattern, counts);\n    if (counts['y'] != 0) {\n      for (int lenOfX = 1; lenOfX < str.Length; lenOfX++) {\n        double lenOfY =\n          ((double)str.Length - (double)lenOfX * (double)counts['x']) /\n          (double)counts['y'];\n        if (lenOfY <= 0 || lenOfY % 1 != 0) {\n          continue;\n        }\n        int yIdx = firstYPos * lenOfX;\n        string x = str.Substring(0, lenOfX);\n        string y = str.Substring(yIdx, (int)lenOfY);\n        string potentialMatch = buildPotentialMatch(newPattern, x, y);\n        if (str.Equals(potentialMatch)) {\n          return didSwitch ? new string[] { y, x } : new string[] { x, y };\n        }\n      }\n    } else {\n      double lenOfX = str.Length / counts['x'];\n      if (lenOfX % 1 == 0) {\n        string x = str.Substring(0, (int)lenOfX);\n        string potentialMatch = buildPotentialMatch(newPattern, x, \"\");\n        if (str.Equals(potentialMatch)) {\n          return didSwitch ? new string[] { \"\", x } : new string[] { x, \"\" };\n        }\n      }\n    }\n    return new string[] {};\n  }\n\n  public static char[] getNewPattern(string pattern) {\n    char[] patternLetters = pattern.ToCharArray();\n    if (pattern[0] == 'x') {\n      return patternLetters;\n    }\n    for (int i = 0; i < patternLetters.Length; i++) {\n      if (patternLetters[i] == 'x') {\n        patternLetters[i] = 'y';\n      } else {\n        patternLetters[i] = 'x';\n      }\n    }\n    return patternLetters;\n  }\n\n  public static int getCountsAndFirstYPos(\n    char[] pattern, Dictionary<char, int> counts\n  ) {\n    int firstYPos = -1;\n    for (int i = 0; i < pattern.Length; i++) {\n      char c = pattern[i];\n      counts[c] = counts[c] + 1;\n      if (c == 'y' && firstYPos == -1) {\n        firstYPos = i;\n      }\n    }\n    return firstYPos;\n  }\n\n  public static string buildPotentialMatch(char[] pattern, string x, string y) {\n    StringBuilder potentialMatch = new StringBuilder();\n    foreach (char c in pattern) {\n      if (c == 'x') {\n        potentialMatch.Append(x);\n      } else {\n        potentialMatch.Append(y);\n      }\n    }\n    return potentialMatch.ToString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string[] expected = { \"go\", \"powerranger\" };\n    string inputPattern = \"xxyxxy\";\n    string inputstring = \"gogopowerrangergogopowerranger\";\n    Utils.AssertTrue(\n      compare(Program.PatternMatcher(inputPattern, inputstring), expected)\n    );\n  }\n\n  public bool compare(string[] arr1, string[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    if (arr1.Length == 0 && arr2.Length == 0) {\n      return true;\n    }\n    return arr1[0].Equals(arr2[0]) && arr1[1].Equals(arr2[1]);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string[] expected = { \"go\", \"powerranger\" };\n    string inputPattern = \"xxyxxy\";\n    string inputstring = \"gogopowerrangergogopowerranger\";\n    Utils.AssertTrue(\n      compare(Program.PatternMatcher(inputPattern, inputstring), expected)\n    );\n  }\n\n  public bool compare(string[] arr1, string[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    if (arr1.Length == 0 && arr2.Length == 0) {\n      return true;\n    }\n    return arr1[0].Equals(arr2[0]) && arr1[1].Equals(arr2[1]);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc PatternMatcher(pattern, str string) []string {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"strings\"\n\ntype counts struct {\n\tx int\n\ty int\n}\n\n// O(n^2 + m) time | O(n + m) space\nfunc PatternMatcher(pattern string, str string) []string {\n\tif len(pattern) > len(str) {\n\t\treturn []string{}\n\t}\n\tpattern, switched := getNewPattern(pattern)\n\tcount, firstY := getCountsAndFirstYPos(pattern)\n\tif count.y != 0 {\n\t\tfor lenx := 1; lenx < len(str); lenx++ {\n\t\t\ttotalLeny := len(str) - lenx*count.x\n\t\t\tif len(str) <= lenx*count.x || totalLeny%count.y != 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tleny := totalLeny / count.y\n\t\t\tyindex := firstY * lenx\n\t\t\tx, y := str[:lenx], str[yindex:yindex+leny]\n\t\t\tpotentialMatch := doReplace(pattern, x, y, count)\n\t\t\tif str == potentialMatch {\n\t\t\t\tif !switched {\n\t\t\t\t\treturn []string{x, y}\n\t\t\t\t}\n\t\t\t\treturn []string{y, x}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif len(str)%count.x == 0 {\n\t\t\tlenx := len(str) / count.x\n\t\t\tx := str[:lenx]\n\t\t\tpotentialMatch := strings.Repeat(x, len(pattern))\n\t\t\tif str == potentialMatch {\n\t\t\t\tif !switched {\n\t\t\t\t\treturn []string{x, \"\"}\n\t\t\t\t}\n\t\t\t\treturn []string{\"\", x}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn []string{}\n}\n\nfunc doReplace(pattern, x, y string, count counts) string {\n\tresult := make([]byte, 0)\n\tfor _, r := range pattern {\n\t\tif r == 'x' {\n\t\t\tresult = append(result, []byte(x)...)\n\t\t} else {\n\t\t\tresult = append(result, []byte(y)...)\n\t\t}\n\t}\n\treturn string(result)\n}\n\nfunc getNewPattern(pattern string) (string, bool) {\n\tif pattern[0] == 'x' {\n\t\treturn pattern, false\n\t}\n\trunes := make([]rune, len(pattern))\n\tfor i := range pattern {\n\t\tif pattern[i] == 'x' {\n\t\t\trunes[i] = 'y'\n\t\t} else {\n\t\t\trunes[i] = 'x'\n\t\t}\n\t}\n\treturn string(runes), true\n}\n\nfunc getCountsAndFirstYPos(pattern string) (counts, int) {\n\tfirstY := strings.Index(pattern, \"y\")\n\tcount := counts{}\n\tfor _, r := range pattern {\n\t\tif r == 'x' {\n\t\t\tcount.x += 1\n\t\t} else {\n\t\t\tcount.y += 1\n\t\t}\n\t}\n\treturn count, firstY\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []string{\"go\", \"powerranger\"}\n\toutput := PatternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\")\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []string{\"go\", \"powerranger\"}\n\toutput := PatternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\")\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static String[] patternMatcher(String pattern, String str) {\n    // Write your code here.\n    return new String[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2 + m) time | O(n + m) space\n  public static String[] patternMatcher(String pattern, String str) {\n    if (pattern.length() > str.length()) {\n      return new String[] {};\n    }\n    char[] newPattern = getNewPattern(pattern);\n    boolean didSwitch = newPattern[0] != pattern.charAt(0);\n    Map<Character, Integer> counts = new HashMap<Character, Integer>();\n    counts.put('x', 0);\n    counts.put('y', 0);\n    int firstYPos = getCountsAndFirstYPos(newPattern, counts);\n    if (counts.get('y') != 0) {\n      for (int lenOfX = 1; lenOfX < str.length(); lenOfX++) {\n        double lenOfY =\n          ((double) str.length() - (double) lenOfX * (double) counts.get('x'))\n          / (double) counts.get('y');\n        if (lenOfY <= 0 || lenOfY % 1 != 0) {\n          continue;\n        }\n        int yIdx = firstYPos * lenOfX;\n        String x = str.substring(0, lenOfX);\n        String y = str.substring(yIdx, yIdx + (int) lenOfY);\n        String potentialMatch = buildPotentialMatch(newPattern, x, y);\n        if (str.equals(potentialMatch)) {\n          return didSwitch ? new String[] {y, x} : new String[] {x, y};\n        }\n      }\n    } else {\n      double lenOfX = str.length() / counts.get('x');\n      if (lenOfX % 1 == 0) {\n        String x = str.substring(0, (int) lenOfX);\n        String potentialMatch = buildPotentialMatch(newPattern, x, \"\");\n        if (str.equals(potentialMatch)) {\n          return didSwitch ? new String[] {\"\", x} : new String[] {x, \"\"};\n        }\n      }\n    }\n    return new String[] {};\n  }\n\n  public static char[] getNewPattern(String pattern) {\n    char[] patternLetters = pattern.toCharArray();\n    if (pattern.charAt(0) == 'x') {\n      return patternLetters;\n    }\n    for (int i = 0; i < patternLetters.length; i++) {\n      if (patternLetters[i] == 'x') {\n        patternLetters[i] = 'y';\n      } else {\n        patternLetters[i] = 'x';\n      }\n    }\n    return patternLetters;\n  }\n\n  public static int getCountsAndFirstYPos(\n    char[] pattern, Map<Character, Integer> counts\n  ) {\n    int firstYPos = -1;\n    for (int i = 0; i < pattern.length; i++) {\n      char c = pattern[i];\n      counts.put(c, counts.get(c) + 1);\n      if (c == 'y' && firstYPos == -1) {\n        firstYPos = i;\n      }\n    }\n    return firstYPos;\n  }\n\n  public static String buildPotentialMatch(char[] pattern, String x, String y) {\n    StringBuilder potentialMatch = new StringBuilder();\n    for (char c : pattern) {\n      if (c == 'x') {\n        potentialMatch.append(x);\n      } else {\n        potentialMatch.append(y);\n      }\n    }\n    return potentialMatch.toString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String[] expected = {\"go\", \"powerranger\"};\n    String inputPattern = \"xxyxxy\";\n    String inputString = \"gogopowerrangergogopowerranger\";\n    Utils.assertTrue(\n      compare(Program.patternMatcher(inputPattern, inputString), expected)\n    );\n  }\n\n  public boolean compare(String[] arr1, String[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    if (arr1.length == 0 && arr2.length == 0) {\n      return true;\n    }\n    return arr1[0].equals(arr2[0]) && arr1[1].equals(arr2[1]);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String[] expected = {\"go\", \"powerranger\"};\n    String inputPattern = \"xxyxxy\";\n    String inputString = \"gogopowerrangergogopowerranger\";\n    Utils.assertTrue(\n      compare(Program.patternMatcher(inputPattern, inputString), expected)\n    );\n  }\n\n  public boolean compare(String[] arr1, String[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    if (arr1.length == 0 && arr2.length == 0) {\n      return true;\n    }\n    return arr1[0].equals(arr2[0]) && arr1[1].equals(arr2[1]);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function patternMatcher(pattern, string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.patternMatcher = patternMatcher;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2 + m) time | O(n + m) space\nfunction patternMatcher(pattern, string) {\n  if (pattern.length > string.length) return [];\n  const newPattern = getNewPattern(pattern);\n  const didSwitch = newPattern[0] !== pattern[0];\n  const counts = {x: 0, y: 0};\n  const firstYPos = getCountsAndFirstYPos(newPattern, counts);\n  if (counts['y'] !== 0) {\n    for (let lenOfX = 1; lenOfX < string.length; lenOfX++) {\n      const lenOfY = (string.length - lenOfX * counts['x']) / counts['y'];\n      if (lenOfY <= 0 || lenOfY % 1 !== 0) continue;\n      const yIdx = firstYPos * lenOfX;\n      const x = string.slice(0, lenOfX);\n      const y = string.slice(yIdx, yIdx + lenOfY);\n      const potentialMatch = newPattern.map(char => (char === 'x' ? x : y));\n      if (string === potentialMatch.join('')) {\n        return !didSwitch ? [x, y] : [y, x];\n      }\n    }\n  } else {\n    const lenOfX = string.length / counts['x'];\n    if (lenOfX % 1 === 0) {\n      const x = string.slice(0, lenOfX);\n      const potentialMatch = newPattern.map(char => (char === 'x' ? x : ''));\n      if (string === potentialMatch.join('')) {\n        return !didSwitch ? [x, ''] : ['', x];\n      }\n    }\n  }\n  return [];\n}\n\nfunction getNewPattern(pattern) {\n  const patternLetters = pattern.split('');\n  if (pattern[0] === 'x') {\n    return patternLetters;\n  } else {\n    return patternLetters.map(char => (char === 'y' ? 'x' : 'y'));\n  }\n}\n\nfunction getCountsAndFirstYPos(pattern, counts) {\n  let firstYPos = null;\n  for (let i = 0; i < pattern.length; i++) {\n    const char = pattern[i];\n    counts[char]++;\n    if (char === 'y' && firstYPos === null) firstYPos = i;\n  }\n  return firstYPos;\n}\n\nexports.patternMatcher = patternMatcher;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.patternMatcher('xxyxxy', 'gogopowerrangergogopowerranger'))\n    .to.deep.equal(['go', 'powerranger']);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.patternMatcher('xxyxxy', 'gogopowerrangergogopowerranger'))\n    .to.deep.equal(['go', 'powerranger']);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun patternMatcher(pattern: String, string: String): List<String> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nval charX = \"x\"[0]\nval charY = \"y\"[0]\n\n// O(n^2 + m) time | O(n + m) space\nfun patternMatcher(pattern: String, string: String): List<String> {\n    if (pattern.length > string.length) return listOf()\n    val newPattern = getNewPattern(pattern)\n    val didSwitch = newPattern[0] != pattern[0]\n    val counts = mutableMapOf(charX to 0, charY to 0)\n    val firstYPos = getCountsAndFirstYPos(newPattern, counts)\n    if (counts[charY] != 0) {\n        for (lenOfX in 1 until string.length) {\n            val lenOfY = (string.length - lenOfX * counts[charX]!!) / counts[charY]!!\n            if (lenOfY <= 0 || lenOfY % 1 != 0) continue\n            val yIdx = firstYPos!! * lenOfX\n            val x = string.substring(0, lenOfX)\n            val y = string.substring(yIdx, yIdx + lenOfY)\n            val potentialMatch = newPattern.map() { if (it == charX) x else y }\n            if (string == potentialMatch.joinToString(\"\")) {\n                return if (!didSwitch) listOf(x, y) else listOf(y, x)\n            }\n        }\n    } else {\n        val lenOfX = string.length / counts[charX]!!\n        if (lenOfX % 1 == 0) {\n            val x = string.substring(0, lenOfX)\n            val potentialMatch = newPattern.map() { if (it == charX) x else \"\" }\n            if (string == potentialMatch.joinToString(\"\")) {\n                return if (!didSwitch) listOf(x, \"\") else listOf(\"\", x)\n            }\n        }\n    }\n    return listOf()\n}\n\nfun getNewPattern(pattern: String): CharArray {\n    val patternLetters = pattern.toCharArray()\n    if (pattern[0] == charX) {\n        return patternLetters\n    } else {\n        return patternLetters.map() { if (it == charY) charX else charY }.joinToString(\n            \"\",\n        ).toCharArray()\n    }\n}\n\nfun getCountsAndFirstYPos(pattern: CharArray, counts: MutableMap<Char, Int>): Int? {\n    var firstYPos: Int? = null\n    for (i in 0 until pattern.size) {\n        val char = pattern[i]\n        counts[char] = counts.getOrDefault(char, 0) + 1\n        if (char == charY && firstYPos == null) firstYPos = i\n    }\n    return firstYPos\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.patternMatcher as patternMatcher\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(\n            patternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\") == listOf(\"go\", \"powerranger\"),\n        )\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.patternMatcher as patternMatcher\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(\n            patternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\") == listOf(\"go\", \"powerranger\"),\n        )\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def patternMatcher(pattern, string):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2 + m) time | O(n + m) space\ndef patternMatcher(pattern, string):\n    if len(pattern) > len(string):\n        return []\n    newPattern = getNewPattern(pattern)\n    didSwitch = newPattern[0] != pattern[0]\n    counts = {\"x\": 0, \"y\": 0}\n    firstYPos = getCountsAndFirstYPos(newPattern, counts)\n    if counts[\"y\"] != 0:\n        for lenOfX in range(1, len(string)):\n            lenOfY = (len(string) - lenOfX * counts[\"x\"]) / counts[\"y\"]\n            if lenOfY <= 0 or lenOfY % 1 != 0:\n                continue\n            lenOfY = int(lenOfY)\n            yIdx = firstYPos * lenOfX\n            x = string[:lenOfX]\n            y = string[yIdx : yIdx + lenOfY]\n            potentialMatch = map(lambda char: x if char == \"x\" else y, newPattern)\n            if string == \"\".join(potentialMatch):\n                return [x, y] if not didSwitch else [y, x]\n    else:\n        lenOfX = len(string) / counts[\"x\"]\n        if lenOfX % 1 == 0:\n            lenOfX = int(lenOfX)\n            x = string[:lenOfX]\n            potentialMatch = map(lambda char: x, newPattern)\n            if string == \"\".join(potentialMatch):\n                return [x, \"\"] if not didSwitch else [\"\", x]\n    return []\n\n\ndef getNewPattern(pattern):\n    patternLetters = list(pattern)\n    if pattern[0] == \"x\":\n        return patternLetters\n    else:\n        return list(map(lambda char: \"x\" if char == \"y\" else \"y\", patternLetters))\n\n\ndef getCountsAndFirstYPos(pattern, counts):\n    firstYPos = None\n    for i, char in enumerate(pattern):\n        counts[char] += 1\n        if char == \"y\" and firstYPos is None:\n            firstYPos = i\n    return firstYPos\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.patternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\"),\n            [\"go\", \"powerranger\"],\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.patternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\"),\n            [\"go\", \"powerranger\"],\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def patternMatcher(pattern, string)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def patternMatcher(pattern, string)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.patternMatcher\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.patternMatcher\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func patternMatcher(_ pattern: String, _ string: String) -> [String] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n ^ 2 + m) time | O(n + m) space\n  func patternMatcher(_ pattern: String, _ string: String) -> [String] {\n    if pattern.count > string.count {\n      return []\n    }\n\n    let oldPattern = pattern.map { String($0) }\n    let newPattern = generateNewPattern(pattern)\n    let didSwitch = oldPattern[0] != newPattern[0]\n\n    var counts = [\"x\": 0, \"y\": 0]\n    let firstYPosition = populateCountsAndGetFirstYPosition(&counts, newPattern)\n\n    if counts[\"y\"] != 0 {\n      for lengthOfX in 1 ..< string.count {\n        if let countsOfX = counts[\"x\"], let countsOfY = counts[\"y\"] {\n          let lengthOfY = Double(string.count - (lengthOfX * countsOfX)) / Double(countsOfY)\n\n          if lengthOfY <= 0 || lengthOfY.truncatingRemainder(dividingBy: 1) != 0 {\n            continue\n          }\n\n          let indexOfY = lengthOfX * firstYPosition\n\n          let startX = string.index(string.startIndex, offsetBy: 0)\n          let endX = string.index(string.startIndex, offsetBy: lengthOfX)\n          let x = String(string[startX ..< endX])\n\n          let startY = string.index(string.startIndex, offsetBy: indexOfY)\n          let endY = string.index(string.startIndex, offsetBy: indexOfY + Int(lengthOfY))\n          let y = String(string[startY ..< endY])\n\n          let potentialMatch = newPattern.map { $0 == \"x\" ? x : y }.joined(separator: \"\")\n\n          if string == potentialMatch {\n            if didSwitch {\n              return [y, x]\n            } else {\n              return [x, y]\n            }\n          }\n        }\n      }\n    } else {\n      if let countsOfX = counts[\"x\"] {\n        let lengthOfX = string.count / countsOfX\n        let startX = string.index(string.startIndex, offsetBy: 0)\n        let endX = string.index(string.startIndex, offsetBy: lengthOfX)\n        let x = String(string[startX ..< endX])\n\n        let potentialMatch = newPattern.map { $0 == \"x\" ? x : \"\" }.joined(separator: \"\")\n\n        if string == potentialMatch {\n          if didSwitch {\n            return [\"\", x]\n          } else {\n            return [x, \"\"]\n          }\n        }\n      }\n    }\n\n    return []\n  }\n\n  func generateNewPattern(_ pattern: String) -> [String] {\n    let patternCharacters = Array(pattern)\n\n    if patternCharacters[0] == \"x\" {\n      return patternCharacters.map { String($0) }\n    } else {\n      return patternCharacters.map { $0 == \"x\" ? \"y\" : \"x\" }\n    }\n  }\n\n  func populateCountsAndGetFirstYPosition(_ counts: inout [String: Int], _ newPattern: [String]) -> Int {\n    var firstYPosition = -1\n\n    for (index, currentPatternCharacter) in newPattern.enumerated() {\n      if var countPerCharacter = counts[currentPatternCharacter] {\n        countPerCharacter += 1\n        counts[currentPatternCharacter] = countPerCharacter\n      }\n\n      if currentPatternCharacter == \"y\", firstYPosition == -1 {\n        firstYPosition = index\n      }\n    }\n\n    return firstYPosition\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([\"go\", \"powerranger\"], program.patternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\"))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([\"go\", \"powerranger\"], program.patternMatcher(\"xxyxxy\", \"gogopowerrangergogopowerranger\"))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function patternMatcher(pattern: string, string: string) {\n  // Write your code here.\n  return [''];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface Counts {\n  [key: string]: number;\n}\n\n// O(n^2 + m) time | O(n + m) space\nexport function patternMatcher(pattern: string, string: string) {\n  if (pattern.length > string.length) return [];\n  const newPattern = getNewPattern(pattern);\n  const didSwitch = newPattern[0] !== pattern[0];\n  const counts: Counts = {x: 0, y: 0};\n  const firstYPos = getCountsAndFirstYPos(newPattern, counts);\n  if (counts['y'] !== 0) {\n    for (let lenOfX = 1; lenOfX < string.length; lenOfX++) {\n      const lenOfY = (string.length - lenOfX * counts['x']) / counts['y'];\n      if (lenOfY <= 0 || lenOfY % 1 !== 0) continue;\n      const yIdx = firstYPos! * lenOfX;\n      const x = string.slice(0, lenOfX);\n      const y = string.slice(yIdx, yIdx + lenOfY);\n      const potentialMatch = newPattern.map(char => (char === 'x' ? x : y));\n      if (string === potentialMatch.join('')) {\n        return !didSwitch ? [x, y] : [y, x];\n      }\n    }\n  } else {\n    const lenOfX = string.length / counts['x'];\n    if (lenOfX % 1 === 0) {\n      const x = string.slice(0, lenOfX);\n      const potentialMatch = newPattern.map(char => (char === 'x' ? x : ''));\n      if (string === potentialMatch.join('')) {\n        return !didSwitch ? [x, ''] : ['', x];\n      }\n    }\n  }\n  return [];\n}\n\nfunction getNewPattern(pattern: string) {\n  const patternLetters = pattern.split('');\n  if (pattern[0] === 'x') {\n    return patternLetters;\n  } else {\n    return patternLetters.map(char => (char === 'y' ? 'x' : 'y'));\n  }\n}\n\nfunction getCountsAndFirstYPos(pattern: string[], counts: Counts) {\n  let firstYPos: number | null = null;\n  for (let i = 0; i < pattern.length; i++) {\n    const char = pattern[i];\n    counts[char]++;\n    if (char === 'y' && firstYPos === null) firstYPos = i;\n  }\n  return firstYPos;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.patternMatcher('xxyxxy', 'gogopowerrangergogopowerranger'))\n    .to.deep.equal(['go', 'powerranger']);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.patternMatcher('xxyxxy', 'gogopowerrangergogopowerranger'))\n    .to.deep.equal(['go', 'powerranger']);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "pattern",
      "example": "xxyxxy",
      "schema": {
        "minLength": 1,
        "type": "string"
      }
    },
    {
      "name": "string",
      "example": "gogopowerrangergogopowerranger",
      "schema": {
        "minLength": 1,
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "pattern": "xxyxxy",
      "string": "gogopowerrangergogopowerranger"
    },
    {
      "pattern": "xyxy",
      "string": "abab"
    },
    {
      "pattern": "yxyx",
      "string": "abab"
    },
    {
      "pattern": "yxx",
      "string": "yomama"
    },
    {
      "pattern": "yyxyyx",
      "string": "gogopowerrangergogopowerranger"
    },
    {
      "pattern": "xyx",
      "string": "thisshouldobviouslybewrong"
    },
    {
      "pattern": "xxxx",
      "string": "testtesttesttest"
    },
    {
      "pattern": "yyyy",
      "string": "testtesttesttest"
    },
    {
      "pattern": "xxyxyy",
      "string": "testtestwrongtestwrongtest"
    },
    {
      "pattern": "xyxxxyyx",
      "string": "baddaddoombaddadoomibaddaddoombaddaddoombaddaddoombaddaddoomibaddaddoomibaddaddoom"
    },
    {
      "pattern": "yxyyyxxy",
      "string": "baddaddoombaddaddoomibaddaddoombaddaddoombaddaddoombaddaddoomibaddaddoomibaddaddoom"
    },
    {
      "pattern": "xyxxxyyx",
      "string": "baddaddoombaddaddoomibaddaddoombaddaddoombaddaddoombaddaddoomibaddaddoomibaddaddoom"
    }
  ],
  "jsonTests": [
    {
      "pattern": "xxyxxy",
      "string": "gogopowerrangergogopowerranger"
    },
    {
      "pattern": "xyxy",
      "string": "abab"
    },
    {
      "pattern": "yxyx",
      "string": "abab"
    },
    {
      "pattern": "yxx",
      "string": "yomama"
    },
    {
      "pattern": "yyxyyx",
      "string": "gogopowerrangergogopowerranger"
    },
    {
      "pattern": "xyx",
      "string": "thisshouldobviouslybewrong"
    },
    {
      "pattern": "xxxx",
      "string": "testtesttesttest"
    },
    {
      "pattern": "yyyy",
      "string": "testtesttesttest"
    },
    {
      "pattern": "xxyxyy",
      "string": "testtestwrongtestwrongtest"
    },
    {
      "pattern": "xyxxxyyx",
      "string": "baddaddoombaddadoomibaddaddoombaddaddoombaddaddoombaddaddoomibaddaddoomibaddaddoom"
    },
    {
      "pattern": "yxyyyxxy",
      "string": "baddaddoombaddaddoomibaddaddoombaddaddoombaddaddoombaddaddoomibaddaddoomibaddaddoom"
    },
    {
      "pattern": "xyxxxyyx",
      "string": "baddaddoombaddaddoomibaddaddoombaddaddoombaddaddoombaddaddoomibaddaddoomibaddaddoom"
    }
  ],
  "changelog": []
}