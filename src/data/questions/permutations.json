{
  "uid": "permutations",
  "testStrategy": "JSON",
  "name": "Permutations",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Recursion",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 29423,
    "failureCount": 9279
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "263747711",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2271
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of unique integers and returns an\n  array of all permutations of those integers in no particular order.\n</p>\n<p>If the input array is empty, the function should return an empty array.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 2, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n</pre>\n</div>",
  "hints": [
    "<p>\nA permutation is defined as a way in which a set of things can be ordered. Thus, for the list [1, 2, 3], there exist some permutations starting with 1, some starting with 2, and some starting with 3. For the permutations starting with 1, there will be a permutation where 2 is the second number and one where 3 is the second number. For permutations starting with 3, there will be a permutation where 1 is the second number and one where 2 is the second number. The idea is that, in order to construct a permutation, we can pick a random number from our list to be the first number, then we can pick a random number from the remaining list (without the first number) to be the second number, then we can pick a random number from the remaining list (without the first and second numbers) to be the third number, and we can repeat the process until we exhaust all of our list of numbers. At that point, we will have constructed a valid permutation. How can we implement this construction algorithmically, without picking numbers at random?\n</p>\n",
    "\n<p>\nIterate through the list of numbers, and begin constructing new permutations starting with each number. For each permutation that you've begun constructing, remove the number already used (the first number of each permutation) from the list of numbers - you'll likely have to make copies of the original list. Repeat this process by recursively iterating through the mutated lists of numbers, appending numbers to the corresponding permutations you've already begun constructing and then removing those numbers from the respective mutated lists; repeat this until your mutated lists are empty, at which point your constructed permutations will be as big as the original list and will be valid permutations.\n</p>\n",
    "\n<p>\nDo you have to create so many mutated lists of numbers? Can you come up with an alternative approach that would allow you to only rely on the original list of numbers, without ever copying it and without removing numbers from it?\n</p>"
  ],
  "spaceTime": "O(n*n!) time | O(n*n!) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> getPermutations(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid permutationsHelper(\n  vector<int> array,\n  vector<int> currentPermutation,\n  vector<vector<int>>* permutations\n);\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nvector<vector<int>> getPermutations(vector<int> array) {\n  vector<vector<int>> permutations;\n  permutationsHelper(array, {}, &permutations);\n  return permutations;\n}\n\nvoid permutationsHelper(\n  vector<int> array,\n  vector<int> currentPermutation,\n  vector<vector<int>>* permutations\n) {\n  if (array.size() == 0 && currentPermutation.size() > 0) {\n    permutations->push_back(currentPermutation);\n  } else {\n    for (int i = 0; i < array.size(); i++) {\n      vector<int> newArray;\n      newArray.insert(newArray.end(), array.begin(), array.begin() + i);\n      newArray.insert(newArray.end(), array.begin() + i + 1, array.end());\n      vector<int> newPermutation = currentPermutation;\n      newPermutation.push_back(array[i]);\n      permutationsHelper(newArray, newPermutation, permutations);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid permutationsHelper(\n  int i, vector<int>& array, vector<vector<int>>& permutations\n);\n\n// O(n*n!) time | O(n*n!) space\nvector<vector<int>> getPermutations(vector<int> array) {\n  vector<vector<int>> permutations;\n  permutationsHelper(0, array, permutations);\n  return permutations;\n}\n\nvoid permutationsHelper(\n  int i, vector<int>& array, vector<vector<int>>& permutations\n) {\n  if (i == array.size() - 1) {\n    permutations.push_back(array);\n  } else {\n    for (int j = i; j < array.size(); j++) {\n      swap(array[i], array[j]);\n      permutationsHelper(i + 1, array, permutations);\n      swap(array[i], array[j]);\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nbool contains(vector<vector<int>> array1, vector<int> array2) {\n  for (vector<int> subArray : array1) {\n    if (array2 == subArray) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> perms = getPermutations({1, 2, 3});\n      assert(perms.size() == 6);\n      assert(contains(perms, {1, 2, 3}));\n      assert(contains(perms, {1, 3, 2}));\n      assert(contains(perms, {2, 1, 3}));\n      assert(contains(perms, {2, 3, 1}));\n      assert(contains(perms, {3, 1, 2}));\n      assert(contains(perms, {3, 2, 1}));\n    });\n  }\n};\n",
      "unitTests": "bool contains(vector<vector<int>> array1, vector<int> array2) {\n  for (vector<int> subArray : array1) {\n    if (array2 == subArray) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> perms = getPermutations({1, 2, 3});\n      assert(perms.size() == 6);\n      assert(contains(perms, {1, 2, 3}));\n      assert(contains(perms, {1, 3, 2}));\n      assert(contains(perms, {2, 1, 3}));\n      assert(contains(perms, {2, 3, 1}));\n      assert(contains(perms, {3, 1, 2}));\n      assert(contains(perms, {3, 2, 1}));\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<List<int> > GetPermutations(List<int> array) {\n    // Write your code here.\n    return new List<List<int> >();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // Upper Bound: O(n^2*n!) time | O(n*n!) space\n  // Roughly: O(n*n!) time | O(n*n!) space\n  public static List<List<int> > GetPermutations(List<int> array) {\n    List<List<int> > permutations = new List<List<int> >();\n    GetPermutations(array, new List<int>(), permutations);\n    return permutations;\n  }\n\n  public static void GetPermutations(\n    List<int> array, List<int> currentPermutation, List<List<int> > permutations\n  ) {\n    if (array.Count == 0 && currentPermutation.Count > 0) {\n      permutations.Add(currentPermutation);\n    } else {\n      for (int i = 0; i < array.Count; i++) {\n        List<int> newArray = new List<int>(array);\n        newArray.RemoveAt(i);\n        List<int> newPermutation = new List<int>(currentPermutation);\n        newPermutation.Add(array[i]);\n        GetPermutations(newArray, newPermutation, permutations);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n*n!) time | O(n*n!) space\n  public static List<List<int> > GetPermutations(List<int> array) {\n    List<List<int> > permutations = new List<List<int> >();\n    GetPermutations(0, array, permutations);\n    return permutations;\n  }\n\n  public static void GetPermutations(\n    int i, List<int> array, List<List<int> > permutations\n  ) {\n    if (i == array.Count - 1) {\n      permutations.Add(new List<int>(array));\n    } else {\n      for (int j = i; j < array.Count; j++) {\n        swap(array, i, j);\n        GetPermutations(i + 1, array, permutations);\n        swap(array, i, j);\n      }\n    }\n  }\n\n  public static void swap(List<int> array, int i, int j) {\n    int tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> input = new List<int>() { 1, 2, 3 };\n    List<List<int> > perms = Program.GetPermutations(input);\n    Utils.AssertTrue(perms.Count == 6);\n    Utils.AssertTrue(Contains(perms, new List<int>() { 1, 2, 3 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 1, 3, 2 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 2, 1, 3 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 2, 3, 1 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 3, 1, 2 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 3, 2, 1 }));\n  }\n\n  public bool Contains(List<List<int> > arr1, List<int> arr2) {\n    foreach (List<int> subArray in arr1) {\n      if (subArray.SequenceEqual(arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
      "unitTests": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> input = new List<int>() { 1, 2, 3 };\n    List<List<int> > perms = Program.GetPermutations(input);\n    Utils.AssertTrue(perms.Count == 6);\n    Utils.AssertTrue(Contains(perms, new List<int>() { 1, 2, 3 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 1, 3, 2 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 2, 1, 3 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 2, 3, 1 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 3, 1, 2 }));\n    Utils.AssertTrue(Contains(perms, new List<int>() { 3, 2, 1 }));\n  }\n\n  public bool Contains(List<List<int> > arr1, List<int> arr2) {\n    foreach (List<int> subArray in arr1) {\n      if (subArray.SequenceEqual(arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc GetPermutations(array []int) [][]int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nfunc GetPermutations(array []int) [][]int {\n\tpermutations := [][]int{}\n\tpermutationsHelper(array, []int{}, &permutations)\n\treturn permutations\n}\n\nfunc permutationsHelper(array []int, currentPermutation []int, permutations *[][]int) {\n\tif len(array) == 0 && len(currentPermutation) != 0 {\n\t\t*permutations = append(*permutations, currentPermutation)\n\t\treturn\n\t}\n\tfor i := range array {\n\t\tnewArray := make([]int, i)\n\t\tcopy(newArray, array[:i])\n\t\tnewArray = append(newArray, array[i+1:]...)\n\t\tnewPermutation := make([]int, len(currentPermutation))\n\t\tcopy(newPermutation, currentPermutation)\n\t\tnewPermutation = append(newPermutation, array[i])\n\t\tpermutationsHelper(newArray, newPermutation, permutations)\n\t}\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n*n!) time | O(n*n!) space\nfunc GetPermutations(array []int) [][]int {\n\tpermutations := [][]int{}\n\tpermutationsHelper(0, array, &permutations)\n\treturn permutations\n}\n\nfunc permutationsHelper(i int, array []int, permutations *[][]int) {\n\tif i == len(array)-1 {\n\t\tnewPerm := make([]int, len(array))\n\t\tcopy(newPerm, array)\n\t\t*permutations = append(*permutations, newPerm)\n\t\treturn\n\t}\n\tfor j := i; j < len(array); j++ {\n\t\tswap(array, i, j)\n\t\tpermutationsHelper(i+1, array, permutations)\n\t\tswap(array, i, j)\n\t}\n}\n\nfunc swap(array []int, i, j int) {\n\tarray[i], array[j] = array[j], array[i]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := GetPermutations([]int{1, 2, 3})\n\trequire.Contains(t, output, []int{1, 2, 3})\n\trequire.Contains(t, output, []int{1, 3, 2})\n\trequire.Contains(t, output, []int{2, 1, 3})\n\trequire.Contains(t, output, []int{2, 3, 1})\n\trequire.Contains(t, output, []int{3, 1, 2})\n\trequire.Contains(t, output, []int{3, 2, 1})\n\trequire.Len(t, output, 6)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := GetPermutations([]int{1, 2, 3})\n\trequire.Contains(t, output, []int{1, 2, 3})\n\trequire.Contains(t, output, []int{1, 3, 2})\n\trequire.Contains(t, output, []int{2, 1, 3})\n\trequire.Contains(t, output, []int{2, 3, 1})\n\trequire.Contains(t, output, []int{3, 1, 2})\n\trequire.Contains(t, output, []int{3, 2, 1})\n\trequire.Len(t, output, 6)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<List<Integer>> getPermutations(List<Integer> array) {\n    // Write your code here.\n    return new ArrayList<List<Integer>>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // Upper Bound: O(n^2*n!) time | O(n*n!) space\n  // Roughly: O(n*n!) time | O(n*n!) space\n  public static List<List<Integer>> getPermutations(List<Integer> array) {\n    List<List<Integer>> permutations = new ArrayList<List<Integer>>();\n    getPermutations(array, new ArrayList<Integer>(), permutations);\n    return permutations;\n  }\n\n  public static void getPermutations(\n    List<Integer> array,\n    List<Integer> currentPermutation,\n    List<List<Integer>> permutations\n  ) {\n    if (array.size() == 0 && currentPermutation.size() > 0) {\n      permutations.add(currentPermutation);\n    } else {\n      for (int i = 0; i < array.size(); i++) {\n        List<Integer> newArray = new ArrayList<Integer>(array);\n        newArray.remove(i);\n        List<Integer> newPermutation =\n          new ArrayList<Integer>(currentPermutation);\n        newPermutation.add(array.get(i));\n        getPermutations(newArray, newPermutation, permutations);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n*n!) time | O(n*n!) space\n  public static List<List<Integer>> getPermutations(List<Integer> array) {\n    List<List<Integer>> permutations = new ArrayList<List<Integer>>();\n    getPermutations(0, array, permutations);\n    return permutations;\n  }\n\n  public static void getPermutations(\n    int i, List<Integer> array, List<List<Integer>> permutations\n  ) {\n    if (i == array.size() - 1) {\n      permutations.add(new ArrayList<Integer>(array));\n    } else {\n      for (int j = i; j < array.size(); j++) {\n        swap(array, i, j);\n        getPermutations(i + 1, array, permutations);\n        swap(array, i, j);\n      }\n    }\n  }\n\n  public static void swap(List<Integer> array, int i, int j) {\n    Integer tmp = array.get(i);\n    array.set(i, array.get(j));\n    array.set(j, tmp);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1, 2, 3));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 6);\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2, 3)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(1, 3, 2)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1, 3)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(2, 3, 1)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(3, 1, 2)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(3, 2, 1)))\n    );\n  }\n\n  public boolean contains(List<List<Integer>> arr1, List<Integer> arr2) {\n    for (List<Integer> subArray : arr1) {\n      if (subArray.equals(arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1, 2, 3));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 6);\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2, 3)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(1, 3, 2)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1, 3)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(2, 3, 1)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(3, 1, 2)))\n    );\n    Utils.assertTrue(\n      contains(perms, new ArrayList<Integer>(Arrays.asList(3, 2, 1)))\n    );\n  }\n\n  public boolean contains(List<List<Integer>> arr1, List<Integer> arr2) {\n    for (List<Integer> subArray : arr1) {\n      if (subArray.equals(arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function getPermutations(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.getPermutations = getPermutations;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nfunction getPermutations(array) {\n  const permutations = [];\n  permutationsHelper(array, [], permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(array, currentPermutation, permutations) {\n  if (!array.length && currentPermutation.length) {\n    permutations.push(currentPermutation);\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      const newArray = array.slice(0, i).concat(array.slice(i + 1));\n      const newPermutation = currentPermutation.concat([array[i]]);\n      permutationsHelper(newArray, newPermutation, permutations);\n    }\n  }\n}\n\nexports.getPermutations = getPermutations;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n*n!) time | O(n*n!) space\nfunction getPermutations(array) {\n  const permutations = [];\n  permutationsHelper(0, array, permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(i, array, permutations) {\n  if (i === array.length - 1) {\n    permutations.push(array.slice());\n  } else {\n    for (let j = i; j < array.length; j++) {\n      swap(i, j, array);\n      permutationsHelper(i + 1, array, permutations);\n      swap(i, j, array);\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\nexports.getPermutations = getPermutations;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun getPermutations(array: List<Int>): List<List<Int>> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nfun getPermutations(array: List<Int>): List<List<Int>> {\n    val permutations = mutableListOf<List<Int>>()\n    getPermutations(array, listOf<Int>(), permutations)\n    return permutations\n}\n\nfun getPermutations(array: List<Int>, currentPermutation: List<Int>, permutations: MutableList<List<Int>>) {\n    if (array.size == 0 && currentPermutation.size > 0) {\n        permutations.add(currentPermutation)\n        return\n    }\n\n    for (el in array) {\n        val newArray = array.toMutableList()\n        newArray.remove(el)\n        val newPermutation = currentPermutation.toMutableList()\n        newPermutation.add(el)\n        getPermutations(newArray, newPermutation, permutations)\n    }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nfun getPermutations(array: List<Int>): List<List<Int>> {\n    val permutations = mutableListOf<List<Int>>()\n    getPermutations(0, array.toMutableList(), permutations)\n    return permutations\n}\n\nfun getPermutations(i: Int, array: MutableList<Int>, permutations: MutableList<List<Int>>) {\n    if (i == array.size - 1) {\n        permutations.add(array.toList())\n        return\n    }\n    for (j in i until array.size) {\n        swap(array, i, j)\n        getPermutations(i + 1, array, permutations)\n        swap(array, i, j)\n    }\n}\n\nfun swap(array: MutableList<Int>, i: Int, j: Int) {\n    val tmp = array[i]\n    array[i] = array[j]\n    array[j] = tmp\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.getPermutations\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(1, 2, 3)\n        val output = getPermutations(input)\n        assert(output.size == 6)\n        assert(output.contains(listOf(1, 2, 3)))\n        assert(output.contains(listOf(1, 3, 2)))\n        assert(output.contains(listOf(2, 1, 3)))\n        assert(output.contains(listOf(2, 3, 1)))\n        assert(output.contains(listOf(3, 1, 2)))\n        assert(output.contains(listOf(3, 2, 1)))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.getPermutations\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(1, 2, 3)\n        val output = getPermutations(input)\n        assert(output.size == 6)\n        assert(output.contains(listOf(1, 2, 3)))\n        assert(output.contains(listOf(1, 3, 2)))\n        assert(output.contains(listOf(2, 1, 3)))\n        assert(output.contains(listOf(2, 3, 1)))\n        assert(output.contains(listOf(3, 1, 2)))\n        assert(output.contains(listOf(3, 2, 1)))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def getPermutations(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Upper Bound: O(n^2*n!) time | O(n*n!) space\n# Roughly: O(n*n!) time | O(n*n!) space\ndef getPermutations(array):\n    permutations = []\n    permutationsHelper(array, [], permutations)\n    return permutations\n\n\ndef permutationsHelper(array, currentPermutation, permutations):\n    if not len(array) and len(currentPermutation):\n        permutations.append(currentPermutation)\n    else:\n        for i in range(len(array)):\n            newArray = array[:i] + array[i + 1 :]\n            newPermutation = currentPermutation + [array[i]]\n            permutationsHelper(newArray, newPermutation, permutations)\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n*n!) time | O(n*n!) space\ndef getPermutations(array):\n    permutations = []\n    permutationsHelper(0, array, permutations)\n    return permutations\n\n\ndef permutationsHelper(i, array, permutations):\n    if i == len(array) - 1:\n        permutations.append(array[:])\n    else:\n        for j in range(i, len(array)):\n            swap(array, i, j)\n            permutationsHelper(i + 1, array, permutations)\n            swap(array, i, j)\n\n\ndef swap(array, i, j):\n    array[i], array[j] = array[j], array[i]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        perms = program.getPermutations([1, 2, 3])\n        self.assertTrue(len(perms) == 6)\n        self.assertTrue([1, 2, 3] in perms)\n        self.assertTrue([1, 3, 2] in perms)\n        self.assertTrue([2, 1, 3] in perms)\n        self.assertTrue([2, 3, 1] in perms)\n        self.assertTrue([3, 1, 2] in perms)\n        self.assertTrue([3, 2, 1] in perms)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        perms = program.getPermutations([1, 2, 3])\n        self.assertTrue(len(perms) == 6)\n        self.assertTrue([1, 2, 3] in perms)\n        self.assertTrue([1, 3, 2] in perms)\n        self.assertTrue([2, 1, 3] in perms)\n        self.assertTrue([2, 3, 1] in perms)\n        self.assertTrue([3, 1, 2] in perms)\n        self.assertTrue([3, 2, 1] in perms)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def getPermutations(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def getPermutations(array)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def getPermutations(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.getPermutations\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.getPermutations\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func permutations(array: inout [Int]) -> [[Int]] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Upper Bound: O(n^2 * n!) time | O(n * n!) space\n  // Roughly: O(n * n!) time | O(n * n!) space\n  func permutations(array: inout [Int]) -> [[Int]] {\n    var permutations = [[Int]]()\n    permutationsHelper(array: array, currentPermutation: [], permutations: &permutations)\n\n    return permutations\n  }\n\n  func permutationsHelper(array: [Int], currentPermutation: [Int], permutations: inout [[Int]]) {\n    if array.count == 0, currentPermutation.count > 0 {\n      permutations.append(currentPermutation)\n    } else {\n      for i in 0 ..< array.count {\n        let newArray = Array(array.prefix(upTo: i) + array.suffix(from: i + 1))\n        let newPermutation = currentPermutation + [array[i]]\n\n        permutationsHelper(array: newArray, currentPermutation: newPermutation, permutations: &permutations)\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n * n!) time | O(n * n!) space\n  func permutations(array: inout [Int]) -> [[Int]] {\n    var permutations = [[Int]]()\n    permutationsHelper(firstIndex: 0, array: &array, permutations: &permutations)\n\n    return permutations\n  }\n\n  func permutationsHelper(firstIndex: Int, array: inout [Int], permutations: inout [[Int]]) {\n    if firstIndex == array.count - 1 {\n      permutations.append(array)\n    } else {\n      for secondIndex in firstIndex ..< array.count {\n        swap(firstIndex: firstIndex, secondIndex: secondIndex, array: &array)\n        permutationsHelper(firstIndex: firstIndex + 1, array: &array, permutations: &permutations)\n        swap(firstIndex: firstIndex, secondIndex: secondIndex, array: &array)\n      }\n    }\n  }\n\n  func swap(firstIndex: Int, secondIndex: Int, array: inout [Int]) {\n    let temp = array[firstIndex]\n    array[firstIndex] = array[secondIndex]\n    array[secondIndex] = temp\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var fourthTest: [Int] = [1, 2, 3]\n      var fourthTestResults = program.permutations(array: &fourthTest)\n      try assertEqual(6, fourthTestResults.count)\n      try assert(fourthTestResults.contains([1, 2, 3]))\n      try assert(fourthTestResults.contains([1, 3, 2]))\n      try assert(fourthTestResults.contains([2, 1, 3]))\n      try assert(fourthTestResults.contains([2, 3, 1]))\n      try assert(fourthTestResults.contains([3, 1, 2]))\n      try assert(fourthTestResults.contains([3, 2, 1]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var fourthTest: [Int] = [1, 2, 3]\n      var fourthTestResults = program.permutations(array: &fourthTest)\n      try assertEqual(6, fourthTestResults.count)\n      try assert(fourthTestResults.contains([1, 2, 3]))\n      try assert(fourthTestResults.contains([1, 3, 2]))\n      try assert(fourthTestResults.contains([2, 1, 3]))\n      try assert(fourthTestResults.contains([2, 3, 1]))\n      try assert(fourthTestResults.contains([3, 1, 2]))\n      try assert(fourthTestResults.contains([3, 2, 1]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function getPermutations(array: number[]) {\n  // Write your code here.\n  return [[]];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nexport function getPermutations(array: number[]) {\n  const permutations: number[][] = [];\n  permutationsHelper(array, [], permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(\n  array: number[],\n  currentPermutation: number[],\n  permutations: number[][],\n) {\n  if (!array.length && currentPermutation.length) {\n    permutations.push(currentPermutation);\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      const newArray = array.slice(0, i).concat(array.slice(i + 1));\n      const newPermutation = currentPermutation.concat([array[i]]);\n      permutationsHelper(newArray, newPermutation, permutations);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n*n!) time | O(n*n!) space\nexport function getPermutations(array: number[]) {\n  const permutations: number[][] = [];\n  permutationsHelper(0, array, permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(i: number, array: number[], permutations: number[][]) {\n  if (i === array.length - 1) {\n    permutations.push(array.slice());\n  } else {\n    for (let j = i; j < array.length; j++) {\n      swap(i, j, array);\n      permutationsHelper(i + 1, array, permutations);\n      swap(i, j, array);\n    }\n  }\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #4', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #4', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        2,
        3
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    }
  ],
  "changelog": []
}