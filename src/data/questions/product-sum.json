{
  "uid": "product-sum",
  "testStrategy": "JSON",
  "name": "Product Sum",
  "version": 0,
  "releaseDate": "2019-09-01T00:00:00Z",
  "category": "Recursion",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 59987,
    "failureCount": 17872
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "347166190",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 800
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a \"special\" array and returns its product sum.\n</p>\n<p>\n  A \"special\" array is a non-empty array that contains either integers or other\n  \"special\" arrays. The product sum of a \"special\" array is the sum of its\n  elements, where \"special\" arrays inside it are summed themselves and then\n  multiplied by their level of depth.\n</p>\n<p>\n  The depth of a \"special\" array is how far nested it is. For instance, the\n  depth of <span>[]</span> is <span>1</span>; the depth of the inner array in\n  <span>[[]]</span> is <span>2</span>; the depth of the innermost array in\n  <span>[[[]]]</span> is <span>3</span>.\n</p>\n<p>\n  Therefore, the product sum of <span>[x, y]</span> is <span>x + y</span>; the\n  product sum of <span>[x, [y, z]]</span> is <span>x + 2 * (y + z)</span>; the\n  product sum of <span>[x, [y, [z]]]</span> is <span>x + 2 * (y + 3z)</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [5, 2, [7, -1], 3, [6, [-13, 8], 4]]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n12 <span class=\"CodeEditor-promptComment\">// calculated as: 5 + 2 + 2 * (7 - 1) + 3 + 2 * (6 + 3 * (-13 + 8) + 4)</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry using recursion to solve this problem.\n</p>\n",
    "\n<p>\nInitialize the product sum of the \"special\" array to 0. Then, iterate through all of the array's elements; if you come across a number, add it to the product sum; if you come across another \"special\" array, recursively call the productSum function on it and add the returned value to the product sum. How will you handle multiplying the product sums at a given level of depth?\n</p>\n",
    "\n<p>\nHave the productSum function take in a second parameter: the multiplier, initialized to 1. Whenever you recursively call the productSum function, pass in the multiplier incremented by 1.\n</p>"
  ],
  "spaceTime": "O(n) time | O(d) space - where n is the total number of elements in the array, including sub-elements, and d is the greatest depth of \"special\" arrays in the array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <any>\n#include <vector>\n\nusing namespace std;\n\n// Tip: You can use el.type() == typeid(vector<any>) to check whether an item is\n// a list or an integer.\n// If you know an element of the array is vector<any> you can cast it using:\n//     any_cast<vector<any>>(element)\n// If you know an element of the array is an int you can cast it using:\n//     any_cast<int>(element)\nint productSum(vector<any> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <any>\n#include <vector>\n\nusing namespace std;\n\n// O(n) time | O(d) space - where n is the total number of elements in the\n// array, including sub-elements, and d is the greatest depth of \"special\"\n// arrays in the array\nint productSum(vector<any> array, int multiplier = 1) {\n  int sum = 0;\n  for (auto el : array) {\n    if (el.type() == typeid(vector<any>)) {\n      sum += productSum(any_cast<vector<any>>(el), multiplier + 1);\n    } else {\n      sum += any_cast<int>(el);\n    }\n  }\n  return sum * multiplier;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\n#include <any>\n#include <vector>\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<any> test = {\n        5, 2, vector<any>{7, -1}, 3, vector<any>{6, vector<any>{-13, 8}, 4}};\n      assert(productSum(test) == 12);\n    });\n  }\n};\n",
      "unitTests": "#include <any>\n#include <vector>\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<any> test = {\n        5, 2, vector<any>{7, -1}, 3, vector<any>{6, vector<any>{-13, 8}, 4}};\n      assert(productSum(test) == 12);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // Tip: You can use `el is IList<object>` to check whether an item is a list\n  // or an integer.\n  public static int ProductSum(List<object> array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(d) space - where n is the total number of elements in the\n  // array, including sub-elements, and d is the greatest depth of \"special\"\n  // arrays in the array\n  public static int ProductSum(List<object> array) {\n    return productSumHelper(array, 1);\n  }\n\n  public static int productSumHelper(List<object> array, int multiplier) {\n    int sum = 0;\n    foreach (object el in array) {\n      if (el is IList<object>) {\n        sum += productSumHelper((List<object>)el, multiplier + 1);\n      } else {\n        sum += (int)el;\n      }\n    }\n    return sum * multiplier;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<object> test = new List<object>() {\n      5,\n      2,\n      new List<object>() { 7, -1 },\n      3,\n      new List<object>() {\n        6,\n        new List<object>() { -13, 8 },\n        4,\n      },\n    };\n    Utils.AssertTrue(Program.ProductSum(test) == 12);\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<object> test = new List<object>() {\n      5,\n      2,\n      new List<object>() { 7, -1 },\n      3,\n      new List<object>() {\n        6,\n        new List<object>() { -13, 8 },\n        4,\n      },\n    };\n    Utils.AssertTrue(Program.ProductSum(test) == 12);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\ntype SpecialArray []interface{}\n\n// Tip: Each element of `array` can either be cast\n// to `SpecialArray` or `int`.\nfunc ProductSum(array []interface{}) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype SpecialArray []interface{}\n\n// O(n) time | O(d) space - where n is the total number of elements in the array,\n// including sub-elements, and d is the greatest depth of \"special\" arrays in the array\nfunc ProductSum(array SpecialArray) int {\n\treturn helper(array, 1)\n}\n\nfunc helper(array SpecialArray, multiplier int) int {\n\tsum := 0\n\tfor _, el := range array {\n\t\tif cast, ok := el.(SpecialArray); ok {\n\t\t\tsum += helper(cast, multiplier+1)\n\t\t} else if cast, ok := el.(int); ok {\n\t\t\tsum += cast\n\t\t}\n\t}\n\treturn sum * multiplier\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := SpecialArray{\n\t\t5, 2,\n\t\tSpecialArray{7, -1},\n\t\t3,\n\t\tSpecialArray{\n\t\t\t6,\n\t\t\tSpecialArray{\n\t\t\t\t-13, 8,\n\t\t\t},\n\t\t\t4,\n\t\t},\n\t}\n\toutput := ProductSum(input)\n\texpected := 12\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := SpecialArray{\n\t\t5, 2,\n\t\tSpecialArray{7, -1},\n\t\t3,\n\t\tSpecialArray{\n\t\t\t6,\n\t\t\tSpecialArray{\n\t\t\t\t-13, 8,\n\t\t\t},\n\t\t\t4,\n\t\t},\n\t}\n\toutput := ProductSum(input)\n\texpected := 12\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  // Tip: You can use `element instanceof ArrayList` to check whether an item\n  // is an array or an integer.\n  public static int productSum(List<Object> array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(d) space - where n is the total number of elements in the\n  // array, including sub-elements, and d is the greatest depth of \"special\"\n  // arrays in the array\n  public static int productSum(List<Object> array) {\n    return productSumHelper(array, 1);\n  }\n\n  public static int productSumHelper(List<Object> array, int multiplier) {\n    int sum = 0;\n    for (Object el : array) {\n      if (el instanceof ArrayList) {\n        @SuppressWarnings(\"unchecked\")\n        ArrayList<Object> ls = (ArrayList<Object>) el;\n        sum += productSumHelper(ls, multiplier + 1);\n      } else {\n        sum += (int) el;\n      }\n    }\n    return sum * multiplier;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Object> test = new ArrayList<Object>(Arrays.asList(\n      5,\n      2,\n      new ArrayList<Object>(Arrays.asList(7, -1)),\n      3,\n      new ArrayList<Object>(\n        Arrays.asList(6, new ArrayList<Object>(Arrays.asList(-13, 8)), 4)\n      )\n    ));\n    Utils.assertTrue(Program.productSum(test) == 12);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Object> test = new ArrayList<Object>(Arrays.asList(\n      5,\n      2,\n      new ArrayList<Object>(Arrays.asList(7, -1)),\n      3,\n      new ArrayList<Object>(\n        Arrays.asList(6, new ArrayList<Object>(Arrays.asList(-13, 8)), 4)\n      )\n    ));\n    Utils.assertTrue(Program.productSum(test) == 12);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// Tip: You can use the Array.isArray function to check whether an item\n// is a list or an integer.\nfunction productSum(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.productSum = productSum;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(d) space - where n is the total number of elements in the array,\n// including sub-elements, and d is the greatest depth of \"special\" arrays in the array\nfunction productSum(array, multiplier = 1) {\n  let sum = 0;\n  for (const element of array) {\n    if (Array.isArray(element)) {\n      sum += productSum(element, multiplier + 1);\n    } else {\n      sum += element;\n    }\n  }\n  return sum * multiplier;\n}\n\nexports.productSum = productSum;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const test = [5, 2, [7, -1], 3, [6, [-13, 8], 4]];\n  chai.expect(program.productSum(test)).to.deep.equal(12);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const test = [5, 2, [7, -1], 3, [6, [-13, 8], 4]];\n  chai.expect(program.productSum(test)).to.deep.equal(12);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun productSum(array: List<*>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(d) space - where n is the total number of elements in the array,\n// including sub-elements, and d is the greatest depth of \"special\" arrays in the array\nfun productSum(array: List<*>): Int {\n    return productSumHelper(array, 1)\n}\n\nfun productSumHelper(array: List<*>, multiplier: Int): Int {\n    var sum = 0\n    for (el in array) {\n        if (el is List<*>) {\n            sum += productSumHelper(el, multiplier + 1)\n        } else {\n            sum += el as Int\n        }\n    }\n    return sum * multiplier\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.productSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf<Any>(\n            5,\n            2,\n            listOf(7, -1),\n            3,\n            listOf(\n                6,\n                listOf(-13, 8),\n                4,\n            ),\n        )\n        val output = productSum(input)\n        assert(output == 12)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.productSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf<Any>(\n            5,\n            2,\n            listOf(7, -1),\n            3,\n            listOf(\n                6,\n                listOf(-13, 8),\n                4,\n            ),\n        )\n        val output = productSum(input)\n        assert(output == 12)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# Tip: You can use the type(element) function to check whether an item\n# is a list or an integer.\ndef productSum(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(d) space - where n is the total number of elements in the array,\n# including sub-elements, and d is the greatest depth of \"special\" arrays in the array\ndef productSum(array, multiplier=1):\n    sum = 0\n    for element in array:\n        if type(element) is list:\n            sum += productSum(element, multiplier + 1)\n        else:\n            sum += element\n    return sum * multiplier\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = [5, 2, [7, -1], 3, [6, [-13, 8], 4]]\n        self.assertEqual(program.productSum(test), 12)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = [5, 2, [7, -1], 3, [6, [-13, 8], 4]]\n        self.assertEqual(program.productSum(test), 12)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def productSum(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def productSum(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.productSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.productSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // Tip: You can cast each element with `as? [Any]` to check whether it is\n  // an array or an integer.\n  func productSum(_ array: [Any]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(d) space\n  func productSum(_ array: [Any], _ multiplier: Int = 1) -> Int {\n    var sum = 0\n\n    for element in array {\n      if let elementAsArray = element as? [Any] {\n        sum += productSum(elementAsArray, multiplier + 1)\n      } else if let elementAsInt = element as? Int {\n        sum += elementAsInt\n      }\n    }\n\n    return sum * multiplier\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let sixthTest: [Any] = [5, 2, [7, -1], 3, [6, [-13, 8], 4]]\n      try assertEqual(12, program.productSum(sixthTest))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let sixthTest: [Any] = [5, 2, [7, -1], 3, [6, [-13, 8], 4]]\n      try assertEqual(12, program.productSum(sixthTest))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "type SpecialArray = Array<number | SpecialArray>;\n\n// Tip: You can use the Array.isArray function to check whether an item\n// is a list or an integer.\nexport function productSum(array: SpecialArray) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ntype SpecialArray = Array<number | SpecialArray>;\n\n// O(n) time | O(d) space - where n is the total number of elements in the array,\n// including sub-elements, and d is the greatest depth of \"special\" arrays in the array\nexport function productSum(array: SpecialArray, multiplier = 1) {\n  let sum = 0;\n  for (const element of array) {\n    if (Array.isArray(element)) {\n      sum += productSum(element, multiplier + 1);\n    } else {\n      sum += element;\n    }\n  }\n  return sum * multiplier;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\ntype SpecialArray = Array<number | SpecialArray>;\n\nit('Test Case #1', function () {\n  const test: SpecialArray = [5, 2, [7, -1], 3, [6, [-13, 8], 4]];\n  chai.expect(program.productSum(test)).to.deep.equal(12);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\ntype SpecialArray = Array<number | SpecialArray>;\n\nit('Test Case #1', function () {\n  const test: SpecialArray = [5, 2, [7, -1], 3, [6, [-13, 8], 4]];\n  chai.expect(program.productSum(test)).to.deep.equal(12);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        5,
        2,
        [
          7,
          -1
        ],
        3,
        [
          6,
          [
            -13,
            8
          ],
          4
        ]
      ],
      "schema": {
        "items": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "array"
            }
          ]
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        5,
        2,
        [
          7,
          -1
        ],
        3,
        [
          6,
          [
            -13,
            8
          ],
          4
        ]
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        1,
        2,
        [
          3
        ],
        4,
        5
      ]
    },
    {
      "array": [
        [
          1,
          2
        ],
        3,
        [
          4,
          5
        ]
      ]
    },
    {
      "array": [
        [
          [
            [
              [
                5
              ]
            ]
          ]
        ]
      ]
    },
    {
      "array": [
        9,
        [
          2,
          -3,
          4
        ],
        1,
        [
          1,
          1,
          [
            1,
            1,
            1
          ]
        ],
        [
          [
            [
              [
                3,
                4,
                1
              ]
            ]
          ],
          8
        ],
        [
          1,
          2,
          3,
          4,
          5,
          [
            6,
            7
          ],
          -7
        ],
        [
          1,
          [
            2,
            3,
            [
              4,
              5
            ]
          ],
          [
            6,
            0,
            [
              7,
              0,
              -8
            ]
          ],
          -7
        ],
        [
          1,
          -3,
          2,
          [
            1,
            -3,
            2,
            [
              1,
              -3,
              2
            ],
            [
              1,
              -3,
              2,
              [
                1,
                -3,
                2
              ]
            ],
            [
              1,
              -3,
              2
            ]
          ]
        ],
        -3
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        5,
        2,
        [
          7,
          -1
        ],
        3,
        [
          6,
          [
            -13,
            8
          ],
          4
        ]
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        1,
        2,
        [
          3
        ],
        4,
        5
      ]
    },
    {
      "array": [
        [
          1,
          2
        ],
        3,
        [
          4,
          5
        ]
      ]
    },
    {
      "array": [
        [
          [
            [
              [
                5
              ]
            ]
          ]
        ]
      ]
    },
    {
      "array": [
        9,
        [
          2,
          -3,
          4
        ],
        1,
        [
          1,
          1,
          [
            1,
            1,
            1
          ]
        ],
        [
          [
            [
              [
                3,
                4,
                1
              ]
            ]
          ],
          8
        ],
        [
          1,
          2,
          3,
          4,
          5,
          [
            6,
            7
          ],
          -7
        ],
        [
          1,
          [
            2,
            3,
            [
              4,
              5
            ]
          ],
          [
            6,
            0,
            [
              7,
              0,
              -8
            ]
          ],
          -7
        ],
        [
          1,
          -3,
          2,
          [
            1,
            -3,
            2,
            [
              1,
              -3,
              2
            ],
            [
              1,
              -3,
              2,
              [
                1,
                -3,
                2
              ]
            ],
            [
              1,
              -3,
              2
            ]
          ]
        ],
        -3
      ]
    }
  ],
  "changelog": []
}