{
  "uid": "quick-sort",
  "testStrategy": "JSON",
  "name": "Quick Sort",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Sorting",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 19065,
    "failureCount": 5823
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "241820219",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2137
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns a sorted\n  version of that array. Use the Quick Sort algorithm to sort the array.\n</p>\n<p>\n  If you're unfamiliar with Quick Sort, we recommend watching the Conceptual\n  Overview section of this question's video explanation before starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [8, 5, 2, 9, 5, 6, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[2, 3, 5, 5, 6, 8, 9]\n</pre>\n</div>",
  "hints": [
    "<p>\nQuick Sort works by picking a \"pivot\" number from an array, positioning every other number in the array in sorted order with respect to the pivot (all smaller numbers to the pivot's left; all bigger numbers to the pivot's right), and then repeating the same two steps on both sides of the pivot until the entire array is sorted.\n</p>\n",
    "\n<p>\nPick a random number from the input array (the first number, for instance) and let that number be the pivot. Iterate through the rest of the array using two pointers, one starting at the left extremity of the array and progressively moving to the right, and the other one starting at the right extremity of the array and progressively moving to the left. As you iterate through the array, compare the left and right pointer numbers to the pivot. If the left number is greater than the pivot and the right number is less than the pivot, swap them; this will effectively sort these numbers with respect to the pivot at the end of the iteration. If the left number is ever less than or equal to the pivot, increment the left pointer; similarly, if the right number is ever greater than or equal to the pivot, decrement the right pointer. Do this until the pointers pass each other, at which point swapping the pivot with the right number should position the pivot in its final, sorted position, where every number to its left is smaller and every number to its right is greater.\n</p>\n",
    "\n<p>\nRepeat the process mentioned in Hint #2 on the respective subarrays located to the left and right of your pivot, and keep on repeating the process thereafter until the input array is fully sorted.\n</p>"
  ],
  "spaceTime": "Best: O(nlog(n)) time | O(log(n)) space - where n is the length of the input array\nAverage: O(nlog(n)) time | O(log(n)) space - where n is the length of the input array\nWorst: O(n^2) time | O(log(n)) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> quickSort(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid quickSortHelper(vector<int>& array, int startIdx, int endIdx);\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nvector<int> quickSort(vector<int> array) {\n  quickSortHelper(array, 0, array.size() - 1);\n  return array;\n}\n\nvoid quickSortHelper(vector<int>& array, int startIdx, int endIdx) {\n  if (startIdx >= endIdx) {\n    return;\n  }\n  int pivotIdx = startIdx;\n  int leftIdx = startIdx + 1;\n  int rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array.at(leftIdx) > array.at(pivotIdx) && array.at(rightIdx) < array.at(pivotIdx)) {\n      swap(array[leftIdx], array[rightIdx]);\n    }\n    if (array.at(leftIdx) <= array.at(pivotIdx)) {\n      leftIdx += 1;\n    }\n    if (array.at(rightIdx) >= array.at(pivotIdx)) {\n      rightIdx -= 1;\n    }\n  }\n  swap(array[pivotIdx], array[rightIdx]);\n  bool leftSubarrayIsSmaller =\n    rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1);\n    quickSortHelper(array, rightIdx + 1, endIdx);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx);\n    quickSortHelper(array, startIdx, rightIdx - 1);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected = {2, 3, 5, 5, 6, 8, 9};\n      assert(quickSort({8, 5, 2, 9, 5, 6, 3}) == expected);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected = {2, 3, 5, 5, 6, 8, 9};\n      assert(quickSort({8, 5, 2, 9, 5, 6, 3}) == expected);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] QuickSort(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // Best: O(nlog(n)) time | O(log(n)) space\n  // Average: O(nlog(n)) time | O(log(n)) space\n  // Worst: O(n^2) time | O(log(n)) space\n  public static int[] QuickSort(int[] array) {\n    QuickSort(array, 0, array.Length - 1);\n    return array;\n  }\n\n  public static void QuickSort(int[] array, int startIdx, int endIdx) {\n    if (startIdx >= endIdx) {\n      return;\n    }\n    int pivotIdx = startIdx;\n    int leftIdx = startIdx + 1;\n    int rightIdx = endIdx;\n    while (rightIdx >= leftIdx) {\n      if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n        swap(leftIdx, rightIdx, array);\n      }\n      if (array[leftIdx] <= array[pivotIdx]) {\n        leftIdx += 1;\n      }\n      if (array[rightIdx] >= array[pivotIdx]) {\n        rightIdx -= 1;\n      }\n    }\n    swap(pivotIdx, rightIdx, array);\n    bool leftSubarrayIsSmaller =\n      rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n    if (leftSubarrayIsSmaller) {\n      QuickSort(array, startIdx, rightIdx - 1);\n      QuickSort(array, rightIdx + 1, endIdx);\n    } else {\n      QuickSort(array, rightIdx + 1, endIdx);\n      QuickSort(array, startIdx, rightIdx - 1);\n    }\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 2, 3, 5, 5, 6, 8, 9 };\n    int[] input = { 8, 5, 2, 9, 5, 6, 3 };\n    Utils.AssertTrue(compare(Program.QuickSort(input), expected));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 2, 3, 5, 5, 6, 8, 9 };\n    int[] input = { 8, 5, 2, 9, 5, 6, 3 };\n    Utils.AssertTrue(compare(Program.QuickSort(input), expected));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc QuickSort(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nfunc QuickSort(array []int) []int {\n\treturn helper(array, 0, len(array)-1)\n}\n\nfunc helper(array []int, start, end int) []int {\n\tif start >= end {\n\t\treturn array\n\t}\n\n\tpivot := start\n\tleft := start + 1\n\tright := end\n\tfor right >= left {\n\t\tif array[left] > array[pivot] && array[right] < array[pivot] {\n\t\t\tarray[left], array[right] = array[right], array[left]\n\t\t}\n\t\tif array[left] <= array[pivot] {\n\t\t\tleft += 1\n\t\t}\n\t\tif array[right] >= array[pivot] {\n\t\t\tright -= 1\n\t\t}\n\t}\n\n\tarray[pivot], array[right] = array[right], array[pivot]\n\n\tif right-1-start < end-(right+1) {\n\t\thelper(array, start, right-1)\n\t\thelper(array, right+1, end)\n\t} else {\n\t\thelper(array, right+1, end)\n\t\thelper(array, start, right-1)\n\t}\n\treturn array\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{2, 3, 5, 5, 6, 8, 9}\n\toutput := QuickSort([]int{8, 5, 2, 9, 5, 6, 3})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{2, 3, 5, 5, 6, 8, 9}\n\toutput := QuickSort([]int{8, 5, 2, 9, 5, 6, 3})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] quickSort(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Best: O(nlog(n)) time | O(log(n)) space\n  // Average: O(nlog(n)) time | O(log(n)) space\n  // Worst: O(n^2) time | O(log(n)) space\n  public static int[] quickSort(int[] array) {\n    quickSort(array, 0, array.length - 1);\n    return array;\n  }\n\n  public static void quickSort(int[] array, int startIdx, int endIdx) {\n    if (startIdx >= endIdx) {\n      return;\n    }\n    int pivotIdx = startIdx;\n    int leftIdx = startIdx + 1;\n    int rightIdx = endIdx;\n    while (rightIdx >= leftIdx) {\n      if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n        swap(leftIdx, rightIdx, array);\n      }\n      if (array[leftIdx] <= array[pivotIdx]) {\n        leftIdx += 1;\n      }\n      if (array[rightIdx] >= array[pivotIdx]) {\n        rightIdx -= 1;\n      }\n    }\n    swap(pivotIdx, rightIdx, array);\n    boolean leftSubarrayIsSmaller =\n      rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n    if (leftSubarrayIsSmaller) {\n      quickSort(array, startIdx, rightIdx - 1);\n      quickSort(array, rightIdx + 1, endIdx);\n    } else {\n      quickSort(array, rightIdx + 1, endIdx);\n      quickSort(array, startIdx, rightIdx - 1);\n    }\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {2, 3, 5, 5, 6, 8, 9};\n    int[] input = {8, 5, 2, 9, 5, 6, 3};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {2, 3, 5, 5, 6, 8, 9};\n    int[] input = {8, 5, 2, 9, 5, 6, 3};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function quickSort(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.quickSort = quickSort;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nfunction quickSort(array) {\n  quickSortHelper(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(leftIdx, rightIdx, array);\n    }\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\n  }\n  swap(pivotIdx, rightIdx, array);\n  const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1);\n    quickSortHelper(array, rightIdx + 1, endIdx);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx);\n    quickSortHelper(array, startIdx, rightIdx - 1);\n  }\n}\n\nfunction swap(i, j, array) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexports.quickSort = quickSort;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.quickSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.quickSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun quickSort(array: MutableList<Int>): List<Int> {\n    // Write your code here.\n    return array\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nfun quickSort(array: MutableList<Int>): List<Int> {\n    quickSortHelper(array, 0, array.size - 1)\n    return array\n}\n\nfun quickSortHelper(array: MutableList<Int>, startIdx: Int, endIdx: Int) {\n    if (startIdx >= endIdx) return\n    val pivotIdx = startIdx\n    var leftIdx = startIdx + 1\n    var rightIdx = endIdx\n    while (rightIdx >= leftIdx) {\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n            swap(leftIdx, rightIdx, array)\n        }\n        if (array[leftIdx] <= array[pivotIdx]) leftIdx++\n        if (array[rightIdx] >= array[pivotIdx]) rightIdx--\n    }\n    swap(pivotIdx, rightIdx, array)\n    val leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)\n    if (leftSubarrayIsSmaller) {\n        quickSortHelper(array, startIdx, rightIdx - 1)\n        quickSortHelper(array, rightIdx + 1, endIdx)\n    } else {\n        quickSortHelper(array, rightIdx + 1, endIdx)\n        quickSortHelper(array, startIdx, rightIdx - 1)\n    }\n}\n\nfun swap(i: Int, j: Int, array: MutableList<Int>) {\n    val temp = array[j]\n    array[j] = array[i]\n    array[i] = temp\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.quickSort as quickSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = mutableListOf(2, 3, 5, 5, 6, 8, 9)\n        val input = mutableListOf(8, 5, 2, 9, 5, 6, 3)\n        assert(quickSort(input) == expected)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.quickSort as quickSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = mutableListOf(2, 3, 5, 5, 6, 8, 9)\n        val input = mutableListOf(8, 5, 2, 9, 5, 6, 3)\n        assert(quickSort(input) == expected)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def quickSort(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Best: O(nlog(n)) time | O(log(n)) space\n# Average: O(nlog(n)) time | O(log(n)) space\n# Worst: O(n^2) time | O(log(n)) space\ndef quickSort(array):\n    quickSortHelper(array, 0, len(array) - 1)\n    return array\n\n\ndef quickSortHelper(array, startIdx, endIdx):\n    if startIdx >= endIdx:\n        return\n    pivotIdx = startIdx\n    leftIdx = startIdx + 1\n    rightIdx = endIdx\n    while rightIdx >= leftIdx:\n        if array[leftIdx] > array[pivotIdx] and array[rightIdx] < array[pivotIdx]:\n            swap(leftIdx, rightIdx, array)\n        if array[leftIdx] <= array[pivotIdx]:\n            leftIdx += 1\n        if array[rightIdx] >= array[pivotIdx]:\n            rightIdx -= 1\n    swap(pivotIdx, rightIdx, array)\n    leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)\n    if leftSubarrayIsSmaller:\n        quickSortHelper(array, startIdx, rightIdx - 1)\n        quickSortHelper(array, rightIdx + 1, endIdx)\n    else:\n        quickSortHelper(array, rightIdx + 1, endIdx)\n        quickSortHelper(array, startIdx, rightIdx - 1)\n\n\ndef swap(i, j, array):\n    array[i], array[j] = array[j], array[i]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.quickSort([8, 5, 2, 9, 5, 6, 3]), [2, 3, 5, 5, 6, 8, 9])\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.quickSort([8, 5, 2, 9, 5, 6, 3]), [2, 3, 5, 5, 6, 8, 9])\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def quickSort(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def quickSort(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.quickSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.quickSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func quickSort(_ array: inout [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Best: O(nlog(n)) time | O(log(n)) space\n  // Average: O(nlog(n)) time | O(log(n)) space\n  // Worst: O(n^2) time | O(log(n)) space\n  func quickSort(_ array: inout [Int]) -> [Int] {\n    quickSortHelper(&array, 0, array.count - 1)\n    return array\n  }\n\n  func quickSortHelper(_ array: inout [Int], _ startIndex: Int, _ endIndex: Int) {\n    if startIndex >= endIndex {\n      return\n    }\n\n    let pivotIndex = startIndex\n    var leftPointer = startIndex + 1\n    var rightPointer = endIndex\n\n    while leftPointer <= rightPointer {\n      if array[leftPointer] > array[pivotIndex], array[rightPointer] < array[pivotIndex] {\n        swap(&array, leftPointer, rightPointer)\n      }\n\n      if array[leftPointer] <= array[pivotIndex] {\n        leftPointer += 1\n      }\n\n      if array[rightPointer] >= array[pivotIndex] {\n        rightPointer -= 1\n      }\n    }\n\n    swap(&array, pivotIndex, rightPointer)\n\n    let leftLength = rightPointer - 1 - startIndex\n    let rightLength = endIndex - rightPointer + 1\n\n    let leftSubArrayIsSmaller = leftLength < rightLength\n\n    if leftSubArrayIsSmaller {\n      quickSortHelper(&array, startIndex, rightPointer - 1)\n      quickSortHelper(&array, rightPointer + 1, endIndex)\n    } else {\n      quickSortHelper(&array, rightPointer + 1, endIndex)\n      quickSortHelper(&array, startIndex, rightPointer - 1)\n    }\n  }\n\n  func swap(_ array: inout [Int], _ leftPointer: Int, _ rightPointer: Int) {\n    let temp = array[leftPointer]\n\n    array[leftPointer] = array[rightPointer]\n    array[rightPointer] = temp\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var arrayToSort = [8, 5, 2, 9, 5, 6, 3]\n      try assertEqual([2, 3, 5, 5, 6, 8, 9], program.quickSort(&arrayToSort))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var arrayToSort = [8, 5, 2, 9, 5, 6, 3]\n      try assertEqual([2, 3, 5, 5, 6, 8, 9], program.quickSort(&arrayToSort))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function quickSort(array: number[]) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nexport function quickSort(array: number[]) {\n  quickSortHelper(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSortHelper(array: number[], startIdx: number, endIdx: number) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(leftIdx, rightIdx, array);\n    }\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\n  }\n  swap(pivotIdx, rightIdx, array);\n  const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1);\n    quickSortHelper(array, rightIdx + 1, endIdx);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx);\n    quickSortHelper(array, startIdx, rightIdx - 1);\n  }\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.quickSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.quickSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        -4,
        5,
        10,
        8,
        -10,
        -6,
        -4,
        -2,
        -5,
        3,
        5,
        -4,
        -5,
        -1,
        1,
        6,
        -7,
        -6,
        -7,
        8
      ]
    },
    {
      "array": [
        -7,
        2,
        3,
        8,
        -10,
        4,
        -6,
        -10,
        -2,
        -7,
        10,
        5,
        2,
        9,
        -9,
        -5,
        3,
        8
      ]
    },
    {
      "array": [
        8,
        -6,
        7,
        10,
        8,
        -1,
        6,
        2,
        4,
        -5,
        1,
        10,
        8,
        -10,
        -9,
        -10,
        8,
        9,
        -2,
        7,
        -2,
        4
      ]
    },
    {
      "array": [
        5,
        -2,
        2,
        -8,
        3,
        -10,
        -6,
        -1,
        2,
        -2,
        9,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        -2,
        -6,
        -10,
        10,
        4,
        -8,
        -1,
        -8,
        -4,
        7,
        -4,
        0,
        9,
        -9,
        0,
        -9,
        -9,
        8,
        1,
        -4,
        4,
        8,
        5,
        1,
        5,
        0,
        0,
        2,
        -10
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        0,
        -9,
        -3,
        -3,
        9,
        3,
        -4,
        -9,
        8,
        1,
        -3,
        -7,
        -4,
        -9,
        -1,
        -7,
        -2,
        -7,
        4
      ]
    },
    {
      "array": [
        427,
        787,
        222,
        996,
        -359,
        -614,
        246,
        230,
        107,
        -706,
        568,
        9,
        -246,
        12,
        -764,
        -212,
        -484,
        603,
        934,
        -848,
        -646,
        -991,
        661,
        -32,
        -348,
        -474,
        -439,
        -56,
        507,
        736,
        635,
        -171,
        -215,
        564,
        -710,
        710,
        565,
        892,
        970,
        -755,
        55,
        821,
        -3,
        -153,
        240,
        -160,
        -610,
        -583,
        -27,
        131
      ]
    },
    {
      "array": [
        991,
        -731,
        -882,
        100,
        280,
        -43,
        432,
        771,
        -581,
        180,
        -382,
        -998,
        847,
        80,
        -220,
        680,
        769,
        -75,
        -817,
        366,
        956,
        749,
        471,
        228,
        -435,
        -269,
        652,
        -331,
        -387,
        -657,
        -255,
        382,
        -216,
        -6,
        -163,
        -681,
        980,
        913,
        -169,
        972,
        -523,
        354,
        747,
        805,
        382,
        -827,
        -796,
        372,
        753,
        519,
        906
      ]
    },
    {
      "array": [
        384,
        -67,
        120,
        759,
        697,
        232,
        -7,
        -557,
        -772,
        -987,
        687,
        397,
        -763,
        -86,
        -491,
        947,
        921,
        421,
        825,
        -679,
        946,
        -562,
        -626,
        -898,
        204,
        776,
        -343,
        393,
        51,
        -796,
        -425,
        31,
        165,
        975,
        -720,
        878,
        -785,
        -367,
        -609,
        662,
        -79,
        -112,
        -313,
        -94,
        187,
        260,
        43,
        85,
        -746,
        612,
        67,
        -389,
        508,
        777,
        624,
        993,
        -581,
        34,
        444,
        -544,
        243,
        -995,
        432,
        -755,
        -978,
        515,
        -68,
        -559,
        489,
        732,
        -19,
        -489,
        737,
        924
      ]
    },
    {
      "array": [
        544,
        -578,
        556,
        713,
        -655,
        -359,
        -810,
        -731,
        194,
        -531,
        -685,
        689,
        -279,
        -738,
        886,
        -54,
        -320,
        -500,
        738,
        445,
        -401,
        993,
        -753,
        329,
        -396,
        -924,
        -975,
        376,
        748,
        -356,
        972,
        459,
        399,
        669,
        -488,
        568,
        -702,
        551,
        763,
        -90,
        -249,
        -45,
        452,
        -917,
        394,
        195,
        -877,
        153,
        153,
        788,
        844,
        867,
        266,
        -739,
        904,
        -154,
        -947,
        464,
        343,
        -312,
        150,
        -656,
        528,
        61,
        94,
        -581
      ]
    },
    {
      "array": [
        -19,
        759,
        168,
        306,
        270,
        -602,
        558,
        -821,
        -599,
        328,
        753,
        -50,
        -568,
        268,
        -92,
        381,
        -96,
        730,
        629,
        678,
        -837,
        351,
        896,
        63,
        -85,
        437,
        -453,
        -991,
        294,
        -384,
        -628,
        -529,
        518,
        613,
        -319,
        -519,
        -220,
        -67,
        834,
        619,
        802,
        207,
        946,
        -904,
        295,
        718,
        -740,
        -557,
        -560,
        80,
        296,
        -90,
        401,
        407,
        798,
        254,
        154,
        387,
        434,
        491,
        228,
        307,
        268,
        505,
        -415,
        -976,
        676,
        -917,
        937,
        -609,
        593,
        -36,
        881,
        607,
        121,
        -373,
        915,
        -885,
        879,
        391,
        -158,
        588,
        -641,
        -937,
        986,
        949,
        -321
      ]
    },
    {
      "array": [
        -823,
        164,
        48,
        -987,
        323,
        399,
        -293,
        183,
        -908,
        -376,
        14,
        980,
        965,
        842,
        422,
        829,
        59,
        724,
        -415,
        -733,
        356,
        -855,
        -155,
        52,
        328,
        -544,
        -371,
        -160,
        -942,
        -51,
        700,
        -363,
        -353,
        -359,
        238,
        892,
        -730,
        -575,
        892,
        490,
        490,
        995,
        572,
        888,
        -935,
        919,
        -191,
        646,
        -120,
        125,
        -817,
        341,
        -575,
        372,
        -874,
        243,
        610,
        -36,
        -685,
        -337,
        -13,
        295,
        800,
        -950,
        -949,
        -257,
        631,
        -542,
        201,
        -796,
        157,
        950,
        540,
        -846,
        -265,
        746,
        355,
        -578,
        -441,
        -254,
        -941,
        -738,
        -469,
        -167,
        -420,
        -126,
        -410,
        59
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        -4,
        5,
        10,
        8,
        -10,
        -6,
        -4,
        -2,
        -5,
        3,
        5,
        -4,
        -5,
        -1,
        1,
        6,
        -7,
        -6,
        -7,
        8
      ]
    },
    {
      "array": [
        -7,
        2,
        3,
        8,
        -10,
        4,
        -6,
        -10,
        -2,
        -7,
        10,
        5,
        2,
        9,
        -9,
        -5,
        3,
        8
      ]
    },
    {
      "array": [
        8,
        -6,
        7,
        10,
        8,
        -1,
        6,
        2,
        4,
        -5,
        1,
        10,
        8,
        -10,
        -9,
        -10,
        8,
        9,
        -2,
        7,
        -2,
        4
      ]
    },
    {
      "array": [
        5,
        -2,
        2,
        -8,
        3,
        -10,
        -6,
        -1,
        2,
        -2,
        9,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        -2,
        -6,
        -10,
        10,
        4,
        -8,
        -1,
        -8,
        -4,
        7,
        -4,
        0,
        9,
        -9,
        0,
        -9,
        -9,
        8,
        1,
        -4,
        4,
        8,
        5,
        1,
        5,
        0,
        0,
        2,
        -10
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        0,
        -9,
        -3,
        -3,
        9,
        3,
        -4,
        -9,
        8,
        1,
        -3,
        -7,
        -4,
        -9,
        -1,
        -7,
        -2,
        -7,
        4
      ]
    },
    {
      "array": [
        427,
        787,
        222,
        996,
        -359,
        -614,
        246,
        230,
        107,
        -706,
        568,
        9,
        -246,
        12,
        -764,
        -212,
        -484,
        603,
        934,
        -848,
        -646,
        -991,
        661,
        -32,
        -348,
        -474,
        -439,
        -56,
        507,
        736,
        635,
        -171,
        -215,
        564,
        -710,
        710,
        565,
        892,
        970,
        -755,
        55,
        821,
        -3,
        -153,
        240,
        -160,
        -610,
        -583,
        -27,
        131
      ]
    },
    {
      "array": [
        991,
        -731,
        -882,
        100,
        280,
        -43,
        432,
        771,
        -581,
        180,
        -382,
        -998,
        847,
        80,
        -220,
        680,
        769,
        -75,
        -817,
        366,
        956,
        749,
        471,
        228,
        -435,
        -269,
        652,
        -331,
        -387,
        -657,
        -255,
        382,
        -216,
        -6,
        -163,
        -681,
        980,
        913,
        -169,
        972,
        -523,
        354,
        747,
        805,
        382,
        -827,
        -796,
        372,
        753,
        519,
        906
      ]
    },
    {
      "array": [
        384,
        -67,
        120,
        759,
        697,
        232,
        -7,
        -557,
        -772,
        -987,
        687,
        397,
        -763,
        -86,
        -491,
        947,
        921,
        421,
        825,
        -679,
        946,
        -562,
        -626,
        -898,
        204,
        776,
        -343,
        393,
        51,
        -796,
        -425,
        31,
        165,
        975,
        -720,
        878,
        -785,
        -367,
        -609,
        662,
        -79,
        -112,
        -313,
        -94,
        187,
        260,
        43,
        85,
        -746,
        612,
        67,
        -389,
        508,
        777,
        624,
        993,
        -581,
        34,
        444,
        -544,
        243,
        -995,
        432,
        -755,
        -978,
        515,
        -68,
        -559,
        489,
        732,
        -19,
        -489,
        737,
        924
      ]
    },
    {
      "array": [
        544,
        -578,
        556,
        713,
        -655,
        -359,
        -810,
        -731,
        194,
        -531,
        -685,
        689,
        -279,
        -738,
        886,
        -54,
        -320,
        -500,
        738,
        445,
        -401,
        993,
        -753,
        329,
        -396,
        -924,
        -975,
        376,
        748,
        -356,
        972,
        459,
        399,
        669,
        -488,
        568,
        -702,
        551,
        763,
        -90,
        -249,
        -45,
        452,
        -917,
        394,
        195,
        -877,
        153,
        153,
        788,
        844,
        867,
        266,
        -739,
        904,
        -154,
        -947,
        464,
        343,
        -312,
        150,
        -656,
        528,
        61,
        94,
        -581
      ]
    },
    {
      "array": [
        -19,
        759,
        168,
        306,
        270,
        -602,
        558,
        -821,
        -599,
        328,
        753,
        -50,
        -568,
        268,
        -92,
        381,
        -96,
        730,
        629,
        678,
        -837,
        351,
        896,
        63,
        -85,
        437,
        -453,
        -991,
        294,
        -384,
        -628,
        -529,
        518,
        613,
        -319,
        -519,
        -220,
        -67,
        834,
        619,
        802,
        207,
        946,
        -904,
        295,
        718,
        -740,
        -557,
        -560,
        80,
        296,
        -90,
        401,
        407,
        798,
        254,
        154,
        387,
        434,
        491,
        228,
        307,
        268,
        505,
        -415,
        -976,
        676,
        -917,
        937,
        -609,
        593,
        -36,
        881,
        607,
        121,
        -373,
        915,
        -885,
        879,
        391,
        -158,
        588,
        -641,
        -937,
        986,
        949,
        -321
      ]
    },
    {
      "array": [
        -823,
        164,
        48,
        -987,
        323,
        399,
        -293,
        183,
        -908,
        -376,
        14,
        980,
        965,
        842,
        422,
        829,
        59,
        724,
        -415,
        -733,
        356,
        -855,
        -155,
        52,
        328,
        -544,
        -371,
        -160,
        -942,
        -51,
        700,
        -363,
        -353,
        -359,
        238,
        892,
        -730,
        -575,
        892,
        490,
        490,
        995,
        572,
        888,
        -935,
        919,
        -191,
        646,
        -120,
        125,
        -817,
        341,
        -575,
        372,
        -874,
        243,
        610,
        -36,
        -685,
        -337,
        -13,
        295,
        800,
        -950,
        -949,
        -257,
        631,
        -542,
        201,
        -796,
        157,
        950,
        540,
        -846,
        -265,
        746,
        355,
        -578,
        -441,
        -254,
        -941,
        -738,
        -469,
        -167,
        -420,
        -126,
        -410,
        59
      ]
    }
  ],
  "changelog": []
}