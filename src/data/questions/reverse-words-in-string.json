{
  "uid": "reverse-words-in-string",
  "testStrategy": "JSON",
  "name": "Reverse Words In String",
  "version": 0,
  "releaseDate": "2021-01-31T00:00:00Z",
  "category": "Strings",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 22906,
    "failureCount": 6613
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "503731346",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1751
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a string of words separated by one or more\n  whitespaces and returns a string that has these words in reverse order. For\n  example, given the string <span>\"tim is great\"</span>, your function should\n  return <span>\"great is tim\"</span>.\n</p>\n<p>\n  For this problem, a word can contain special characters, punctuation, and\n  numbers. The words in the string will be separated by one or more whitespaces,\n  and the reversed string must contain the same whitespaces as the original\n  string. For example, given the string\n  <span>\"whitespaces    4\"</span> you would be expected to return\n  <span>\"4    whitespaces\"</span>.\n</p>\n<p>\n  Note that you're <b><i>not</i></b> allowed to to use any built-in\n  <span>split</span> or <span>reverse</span> methods/functions. However, you\n  <b><i>are</i></b> allowed to use a built-in <span>join</span> method/function.\n</p>\n<p>Also note that the input string isn't guaranteed to always contain words.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"AlgoExpert is the best!\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"best! the is AlgoExpert\"\n</pre>\n</div>",
  "hints": [
    "<p>\n  There are at least two ways to solve this problem, and both require locating\n  the words in the string. How can you find all of the words in the string?\n</p>\n",
    "\n<p>\n  If you're able to locate all of the words in the string, the next step is to\n  figure out how many spaces are between them. If you can create a list that\n  contains all of the words in the string and all of the spaces between them,\n  then all you need to do is reverse the list and recreate the string using the\n  reversed list.\n</p>\n",
    "\n<p>\n  A potentially easier approach to this problem is to start by reversing the\n  entire string. Once the entire string has been reversed, the words will be in\n  the correct order, but each word will also be reversed. From here, all you\n  have to do is reverse all of the individual words in this new string. By doing\n  this, you'll restore each reversed word back to its original order, and\n  you'll have the desired output.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nstring reverseWordsInString(string str) {\n  // Write your code here.\n  return \"\";\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid reverseList(vector<string>& list);\n\n// O(n) time | O(n) space - where n is the length of the string\nstring reverseWordsInString(string str) {\n  vector<string> words;\n  int startOfWord = 0;\n  for (int idx = 0; idx < str.size(); idx++) {\n    char character = str[idx];\n\n    if (character == ' ') {\n      words.push_back(str.substr(startOfWord, idx - startOfWord));\n      startOfWord = idx;\n    } else if (str[startOfWord] == ' ') {\n      words.push_back(\" \");\n      startOfWord = idx;\n    }\n  }\n\n  words.push_back(str.substr(startOfWord));\n\n  reverseList(words);\n  string output;\n  for (auto word : words) {\n    output += word;\n  }\n  return output;\n}\n\nvoid reverseList(vector<string>& list) {\n  int start = 0;\n  int end = list.size() - 1;\n  while (start < end) {\n    string temp = list[start];\n    list[start] = list[end];\n    list[end] = temp;\n    start++;\n    end--;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid reverseListRange(vector<char>& list, int start, int end);\n\n// O(n) time | O(n) space - where n is the length of the string\nstring reverseWordsInString(string str) {\n  vector<char> characters;\n  for (auto character : str) {\n    characters.push_back(character);\n  }\n  reverseListRange(characters, 0, characters.size() - 1);\n\n  int startOfWord = 0;\n  while (startOfWord < characters.size()) {\n    int endOfWord = startOfWord;\n    while (endOfWord < characters.size() && characters[endOfWord] != ' ') {\n      endOfWord++;\n    }\n\n    reverseListRange(characters, startOfWord, endOfWord - 1);\n    startOfWord = endOfWord + 1;\n  }\n\n  string output;\n  for (auto character : characters) {\n    output += character;\n  }\n  return output;\n}\n\nvoid reverseListRange(vector<char>& list, int start, int end) {\n  while (start < end) {\n    char temp = list[start];\n    list[start] = list[end];\n    list[end] = temp;\n    start++;\n    end--;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string input = \"AlgoExpert is the best!\";\n      ;\n      string expected = \"best! the is AlgoExpert\";\n      auto actual = reverseWordsInString(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string input = \"AlgoExpert is the best!\";\n      ;\n      string expected = \"best! the is AlgoExpert\";\n      auto actual = reverseWordsInString(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public string ReverseWordsInString(string str) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the string\n  public string ReverseWordsInString(string str) {\n    List<string> words = new List<string>();\n    int startOfWord = 0;\n\n    for (int idx = 0; idx < str.Length; idx++) {\n      char character = str[idx];\n\n      if (character == ' ') {\n        words.Add(str.Substring(startOfWord, idx - startOfWord));\n        startOfWord = idx;\n      } else if (str[startOfWord] == ' ') {\n        words.Add(\" \");\n        startOfWord = idx;\n      }\n    }\n\n    words.Add(str.Substring(startOfWord));\n    words.Reverse();\n    return String.Join(\"\", words);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the string\n  public string ReverseWordsInString(string str) {\n    char[] characters = str.ToCharArray();\n    reverseListRange(characters, 0, characters.Length - 1);\n\n    int startOfWord = 0;\n    while (startOfWord < characters.Length) {\n      int endOfWord = startOfWord;\n      while (endOfWord < characters.Length && characters[endOfWord] != ' ') {\n        endOfWord += 1;\n      }\n\n      reverseListRange(characters, startOfWord, endOfWord - 1);\n      startOfWord = endOfWord + 1;\n    }\n\n    return new string(characters);\n  }\n\n  public char[] reverseListRange(char[] list, int start, int end) {\n    while (start < end) {\n      char temp = list[start];\n      list[start] = list[end];\n      list[end] = temp;\n      start += 1;\n      end -= 1;\n    }\n\n    return list;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"AlgoExpert is the best!\";\n    string expected = \"best! the is AlgoExpert\";\n    string actual = new Program().ReverseWordsInString(input);\n    Utils.AssertTrue(expected.Equals(actual));\n  }\n}",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"AlgoExpert is the best!\";\n    string expected = \"best! the is AlgoExpert\";\n    string actual = new Program().ReverseWordsInString(input);\n    Utils.AssertTrue(expected.Equals(actual));\n  }\n}"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ReverseWordsInString(str string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"strings\"\n)\n\n// O(n) time | O(n) space - where n is the length of the string\nfunc ReverseWordsInString(str string) string {\n\twords := make([]string, 0)\n\tstartOfWord := 0\n\tfor idx, character := range str {\n\t\tif character == ' ' {\n\t\t\twords = append(words, str[startOfWord:idx])\n\t\t\tstartOfWord = idx\n\t\t} else if str[startOfWord] == ' ' {\n\t\t\twords = append(words, \" \")\n\t\t\tstartOfWord = idx\n\t\t}\n\t}\n\n\twords = append(words, str[startOfWord:])\n\treverseList(words)\n\treturn strings.Join(words, \"\")\n}\n\nfunc reverseList(list []string) {\n\tstart := 0\n\tend := len(list) - 1\n\tfor start < end {\n\t\ttemp := list[start]\n\t\tlist[start] = list[end]\n\t\tlist[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\t}\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the string\nfunc ReverseWordsInString(str string) string {\n\tcharacters := make([]byte, 0)\n\tfor _, char := range []byte(str) {\n\t\tcharacters = append(characters, char)\n\t}\n\treverseListRange(characters, 0, len(characters)-1)\n\n\tstartOfWord := 0\n\tfor startOfWord < len(characters) {\n\t\tendOfWord := startOfWord\n\t\tfor endOfWord < len(characters) && characters[endOfWord] != ' ' {\n\t\t\tendOfWord += 1\n\t\t}\n\n\t\treverseListRange(characters, startOfWord, endOfWord-1)\n\t\tstartOfWord = endOfWord + 1\n\t}\n\n\treturn string(characters)\n}\n\nfunc reverseListRange(list []byte, rangeStart, rangeEnd int) {\n\tstart := rangeStart\n\tend := rangeEnd\n\tfor start < end {\n\t\ttemp := list[start]\n\t\tlist[start] = list[end]\n\t\tlist[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"AlgoExpert is the best!\"\n\texpected := \"best! the is AlgoExpert\"\n\tactual := ReverseWordsInString(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"AlgoExpert is the best!\"\n\texpected := \"best! the is AlgoExpert\"\n\tactual := ReverseWordsInString(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public String reverseWordsInString(String string) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the string\n  public String reverseWordsInString(String string) {\n    ArrayList<String> words = new ArrayList<String>();\n    int startOfWord = 0;\n\n    for (int idx = 0; idx < string.length(); idx++) {\n      char character = string.charAt(idx);\n\n      if (character == ' ') {\n        words.add(string.substring(startOfWord, idx));\n        startOfWord = idx;\n      } else if (string.charAt(startOfWord) == ' ') {\n        words.add(\" \");\n        startOfWord = idx;\n      }\n    }\n\n    words.add(string.substring(startOfWord));\n\n    Collections.reverse(words);\n    return String.join(\"\", words);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the string\n  public String reverseWordsInString(String string) {\n    char[] characters = string.toCharArray();\n    reverseListRange(characters, 0, characters.length - 1);\n\n    int startOfWord = 0;\n    while (startOfWord < characters.length) {\n      int endOfWord = startOfWord;\n      while (endOfWord < characters.length && characters[endOfWord] != ' ') {\n        endOfWord += 1;\n      }\n\n      reverseListRange(characters, startOfWord, endOfWord - 1);\n      startOfWord = endOfWord + 1;\n    }\n\n    return new String(characters);\n  }\n\n  public char[] reverseListRange(char[] list, int start, int end) {\n    while (start < end) {\n      char temp = list[start];\n      list[start] = list[end];\n      list[end] = temp;\n      start += 1;\n      end -= 1;\n    }\n\n    return list;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"AlgoExpert is the best!\";\n    String expected = \"best! the is AlgoExpert\";\n    String actual = new Program().reverseWordsInString(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"AlgoExpert is the best!\";\n    String expected = \"best! the is AlgoExpert\";\n    String actual = new Program().reverseWordsInString(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function reverseWordsInString(string) {\n  // Write your code here.\n  return '';\n}\n\n// Do not edit the line below.\nexports.reverseWordsInString = reverseWordsInString;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the string\nfunction reverseWordsInString(string) {\n  const words = [];\n  let startOfWord = 0;\n  for (let idx = 0; idx < string.length; idx++) {\n    const character = string[idx];\n\n    if (character === ' ') {\n      words.push(string.slice(startOfWord, idx));\n      startOfWord = idx;\n    } else if (string[startOfWord] === ' ') {\n      words.push(' ');\n      startOfWord = idx;\n    }\n  }\n\n  words.push(string.slice(startOfWord));\n\n  reverseList(words);\n  return words.join('');\n}\n\nfunction reverseList(list) {\n  let start = 0,\n    end = list.length - 1;\n  while (start < end) {\n    const temp = list[start];\n    list[start] = list[end];\n    list[end] = temp;\n    start++;\n    end--;\n  }\n}\n\n// Do not edit the line below.\nexports.reverseWordsInString = reverseWordsInString;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the string\nfunction reverseWordsInString(string) {\n  const characters = [];\n  for (const char of string) {\n    characters.push(char);\n  }\n  reverseListRange(characters, 0, characters.length - 1);\n\n  let startOfWord = 0;\n  while (startOfWord < characters.length) {\n    let endOfWord = startOfWord;\n    while (endOfWord < characters.length && characters[endOfWord] != ' ') {\n      endOfWord++;\n    }\n\n    reverseListRange(characters, startOfWord, endOfWord - 1);\n    startOfWord = endOfWord + 1;\n  }\n  return characters.join('');\n}\n\nfunction reverseListRange(list, start, end) {\n  while (start < end) {\n    const temp = list[start];\n    list[start] = list[end];\n    list[end] = temp;\n    start++;\n    end--;\n  }\n}\n\n// Do not edit the line below.\nexports.reverseWordsInString = reverseWordsInString;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = 'AlgoExpert is the best!';\n  const expected = 'best! the is AlgoExpert';\n  const actual = program.reverseWordsInString(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = 'AlgoExpert is the best!';\n  const expected = 'best! the is AlgoExpert';\n  const actual = program.reverseWordsInString(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun reverseWordsInString(string: String): String {\n    // Write your code here.\n    return string\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the string\nfun reverseWordsInString(string: String): String {\n    val words = mutableListOf<String>()\n    var startOfWord = 0\n    for (idx in 0 until string.length) {\n        val character = string[idx]\n\n        if (character == ' ') {\n            words.add(string.substring(startOfWord, idx))\n            startOfWord = idx\n        } else if (string[startOfWord] == ' ') {\n            words.add(\" \")\n            startOfWord = idx\n        }\n    }\n\n    words.add(string.substring(startOfWord))\n\n    reverseList(words)\n    return words.joinToString(\"\")\n}\n\nfun reverseList(list: MutableList<String>) {\n    var start = 0\n    var end = list.size - 1\n    while (start < end) {\n        val temp = list[start]\n        list[start] = list[end]\n        list[end] = temp\n        start += 1\n        end -= 1\n    }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the string\nfun reverseWordsInString(string: String): String {\n    val characters = mutableListOf<Char>()\n    for (char in string) {\n        characters.add(char)\n    }\n    reverseListRange(characters, 0, characters.size - 1)\n\n    var startOfWord = 0\n    while (startOfWord < characters.size) {\n        var endOfWord = startOfWord\n        while (endOfWord < characters.size && characters[endOfWord] != ' ') {\n            endOfWord += 1\n        }\n\n        reverseListRange(characters, startOfWord, endOfWord - 1)\n        startOfWord = endOfWord + 1\n    }\n\n    return characters.joinToString(\"\")\n}\n\nfun reverseListRange(list: MutableList<Char>, rangeStart: Int, rangeEnd: Int) {\n    var start = rangeStart\n    var end = rangeEnd\n    while (start < end) {\n        val temp = list[start]\n        list[start] = list[end]\n        list[end] = temp\n        start += 1\n        end -= 1\n    }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.reverseWordsInString\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"AlgoExpert is the best!\"\n        val expected = \"best! the is AlgoExpert\"\n        val output = reverseWordsInString(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.reverseWordsInString\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"AlgoExpert is the best!\"\n        val expected = \"best! the is AlgoExpert\"\n        val output = reverseWordsInString(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def reverseWordsInString(string):\n    # Write your code here.\n    return \"\"\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the string\ndef reverseWordsInString(string):\n    words = []\n    startOfWord = 0\n    for idx in range(len(string)):\n        character = string[idx]\n\n        if character == \" \":\n            words.append(string[startOfWord:idx])\n            startOfWord = idx\n        elif string[startOfWord] == \" \":\n            words.append(\" \")\n            startOfWord = idx\n\n    words.append(string[startOfWord:])\n\n    reverseList(words)\n    return \"\".join(words)\n\n\ndef reverseList(list):\n    start, end = 0, len(list) - 1\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the string\ndef reverseWordsInString(string):\n    characters = [char for char in string]\n    reverseListRange(characters, 0, len(characters) - 1)\n\n    startOfWord = 0\n    while startOfWord < len(characters):\n        endOfWord = startOfWord\n        while endOfWord < len(characters) and characters[endOfWord] != \" \":\n            endOfWord += 1\n\n        reverseListRange(characters, startOfWord, endOfWord - 1)\n        startOfWord = endOfWord + 1\n\n    return \"\".join(characters)\n\n\ndef reverseListRange(list, start, end):\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = \"AlgoExpert is the best!\"\n        expected = \"best! the is AlgoExpert\"\n        actual = program.reverseWordsInString(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = \"AlgoExpert is the best!\"\n        expected = \"best! the is AlgoExpert\"\n        actual = program.reverseWordsInString(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def reverseWordsInString(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def reverseWordsInString(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def reverseWordsInString(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.reverseWordsInString\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.reverseWordsInString\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func reverseWordsInString(_ string: String) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the string\n  func reverseWordsInString(_ string: String) -> String {\n    var words = [String]()\n    let indexedString = Array(string)\n    var startOfWord = 0\n    for (idx, character) in indexedString.enumerated() {\n      if character == \" \" {\n        words.append(String(indexedString[startOfWord ..< idx]))\n        startOfWord = idx\n      } else if indexedString[startOfWord] == \" \" {\n        words.append(\" \")\n        startOfWord = idx\n      }\n    }\n\n    words.append(String(indexedString[startOfWord...]))\n    reverseList(&words)\n    return words.joined(separator: \"\")\n  }\n\n  func reverseList(_ list: inout [String]) {\n    var start = 0\n    var end = list.count - 1\n    while start < end {\n      let temp = list[start]\n      list[start] = list[end]\n      list[end] = temp\n      start += 1\n      end -= 1\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the string\n  func reverseWordsInString(_ string: String) -> String {\n    var characters = Array(string)\n    reverseListRange(&characters, 0, characters.count - 1)\n\n    var startOfWord = 0\n    while startOfWord < characters.count {\n      var endOfWord = startOfWord\n      while endOfWord < characters.count, characters[endOfWord] != \" \" {\n        endOfWord += 1\n      }\n\n      reverseListRange(&characters, startOfWord, endOfWord - 1)\n      startOfWord = endOfWord + 1\n    }\n\n    return String(characters)\n  }\n\n  func reverseListRange(_ list: inout [Character], _ rangeStart: Int, _ rangeEnd: Int) {\n    var start = rangeStart\n    var end = rangeEnd\n    while start < end {\n      let temp = list[start]\n      list[start] = list[end]\n      list[end] = temp\n      start += 1\n      end -= 1\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = \"AlgoExpert is the best!\"\n      var expected = \"best! the is AlgoExpert\"\n      var actual = Program().reverseWordsInString(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = \"AlgoExpert is the best!\"\n      var expected = \"best! the is AlgoExpert\"\n      var actual = Program().reverseWordsInString(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function reverseWordsInString(string: string) {\n  // Write your code here.\n  return string;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the string\nexport function reverseWordsInString(string: string) {\n  const words: string[] = [];\n  let startOfWord = 0;\n  for (let idx = 0; idx < string.length; idx++) {\n    const character = string[idx];\n\n    if (character === ' ') {\n      words.push(string.slice(startOfWord, idx));\n      startOfWord = idx;\n    } else if (string[startOfWord] === ' ') {\n      words.push(' ');\n      startOfWord = idx;\n    }\n  }\n\n  words.push(string.slice(startOfWord));\n\n  reverseList(words);\n  return words.join('');\n}\n\nfunction reverseList(list: string[]) {\n  let start = 0,\n    end = list.length - 1;\n  while (start < end) {\n    const temp = list[start];\n    list[start] = list[end];\n    list[end] = temp;\n    start++;\n    end--;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the string\nexport function reverseWordsInString(string: string) {\n  const characters: string[] = [];\n  for (const char of string) {\n    characters.push(char);\n  }\n  reverseListRange(characters, 0, characters.length - 1);\n\n  let startOfWord = 0;\n  while (startOfWord < characters.length) {\n    let endOfWord = startOfWord;\n    while (endOfWord < characters.length && characters[endOfWord] != ' ') {\n      endOfWord++;\n    }\n\n    reverseListRange(characters, startOfWord, endOfWord - 1);\n    startOfWord = endOfWord + 1;\n  }\n  return characters.join('');\n}\n\nfunction reverseListRange(list: string[], start: number, end: number) {\n  while (start < end) {\n    const temp = list[start];\n    list[start] = list[end];\n    list[end] = temp;\n    start++;\n    end--;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = 'AlgoExpert is the best!';\n  const expected = 'best! the is AlgoExpert';\n  const actual = program.reverseWordsInString(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = 'AlgoExpert is the best!';\n  const expected = 'best! the is AlgoExpert';\n  const actual = program.reverseWordsInString(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "AlgoExpert is the best!",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "AlgoExpert is the best!"
    },
    {
      "string": "Reverse These Words"
    },
    {
      "string": "..H,, hello 678"
    },
    {
      "string": "this this words this this this words this"
    },
    {
      "string": "1 12 23 34 56"
    },
    {
      "string": "APPLE PEAR PLUM ORANGE"
    },
    {
      "string": "this-is-one-word"
    },
    {
      "string": "a"
    },
    {
      "string": "ab"
    },
    {
      "string": ""
    },
    {
      "string": "algoexpert is the best platform to use to prepare for coding interviews!"
    },
    {
      "string": "words, separated, by, commas"
    },
    {
      "string": "this      string     has a     lot of   whitespace"
    },
    {
      "string": "a ab a"
    },
    {
      "string": "test        "
    },
    {
      "string": " "
    }
  ],
  "jsonTests": [
    {
      "string": "AlgoExpert is the best!"
    },
    {
      "string": "Reverse These Words"
    },
    {
      "string": "..H,, hello 678"
    },
    {
      "string": "this this words this this this words this"
    },
    {
      "string": "1 12 23 34 56"
    },
    {
      "string": "APPLE PEAR PLUM ORANGE"
    },
    {
      "string": "this-is-one-word"
    },
    {
      "string": "a"
    },
    {
      "string": "ab"
    },
    {
      "string": ""
    },
    {
      "string": "algoexpert is the best platform to use to prepare for coding interviews!"
    },
    {
      "string": "words, separated, by, commas"
    },
    {
      "string": "this      string     has a     lot of   whitespace"
    },
    {
      "string": "a ab a"
    },
    {
      "string": "test        "
    },
    {
      "string": " "
    }
  ],
  "changelog": []
}