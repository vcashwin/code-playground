{
  "uid": "search-for-range",
  "testStrategy": "JSON",
  "name": "Search For Range",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Searching",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 11927,
    "failureCount": 3124
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "249360328",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1009
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a sorted array of integers as well as a target\n  integer. The function should use a variation of the Binary Search algorithm to\n  find a range of indices in between which the target number is contained in the\n  array and should return this range in the form of an array.\n</p>\n<p>\n  The first number in the output array should represent the first index at which\n  the target number is located, while the second number should represent the\n  last index at which the target number is located. The function should return\n  <span>[-1, -1]</span> if the integer isn't contained in the array.\n</p>\n<p>\n  If you're unfamiliar with Binary Search, we recommend watching the Conceptual\n  Overview section of the Binary Search question's video explanation before\n  starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73]\n<span class=\"CodeEditor-promptParameter\">target</span> = 45\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[4, 9]\n</pre>\n</div>",
  "hints": [
    "<p>\nThe Binary Search algorithm involves a left pointer and a right pointer and using those pointers to find the middle number in an array in an effort to find a target number. Unlike with normal Binary Search however, here you cannot simply find the middle number of the array, compare it to the target, and stop once you find it because you are looking for a range rather than a single number. Instead, realize that whenever you find the middle number in the array, the following two scenarios are possible: either the middle number is not equal to the target number, in which case you must proceed with normal Binary Search, or the middle number is equal to the target number, in which case you must figure out if this middle number is an extremity of the range or not.\n</p>\n",
    "\n<p>\nTry applying an altered version of Binary Search twice: once to find the left extremity of the range and once to find the right extremity of the range. How can you accomplish this? What are the time complexity implications of this approach?\n</p>\n",
    "\n<p>\nCan you implement this algorithm iteratively? Are there any advantages to doing so?\n</p>"
  ],
  "spaceTime": "O(log(n)) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> searchForRange(vector<int> array, int target) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<int> searchForRange(vector<int> array, int target);\nvoid alteredBinarySearch(\n  vector<int> array,\n  int target,\n  int left,\n  int right,\n  vector<int>* finalRange,\n  bool goLeft\n);\n\n// O(log(n)) time | O(log(n)) space\nvector<int> searchForRange(vector<int> array, int target) {\n  vector<int> finalRange{-1, -1};\n  alteredBinarySearch(array, target, 0, array.size() - 1, &finalRange, true);\n  alteredBinarySearch(array, target, 0, array.size() - 1, &finalRange, false);\n  return finalRange;\n}\n\nvoid alteredBinarySearch(\n  vector<int> array,\n  int target,\n  int left,\n  int right,\n  vector<int>* finalRange,\n  bool goLeft\n) {\n  if (left > right) {\n    return;\n  }\n  int mid = (left + right) / 2;\n  if (array[mid] < target) {\n    alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n  } else if (array[mid] > target) {\n    alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n  } else {\n    if (goLeft) {\n      if (mid == 0 || array[mid - 1] != target) {\n        finalRange->at(0) = mid;\n      } else {\n        alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n      }\n    } else {\n      if (mid == array.size() - 1 || array[mid + 1] != target) {\n        finalRange->at(1) = mid;\n      } else {\n        alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<int> searchForRange(vector<int> array, int target);\nvoid alteredBinarySearch(\n  vector<int> array,\n  int target,\n  int left,\n  int right,\n  vector<int>* finalRange,\n  bool goLeft\n);\n\n// O(log(n)) time | O(1) space\nvector<int> searchForRange(vector<int> array, int target) {\n  vector<int> finalRange{-1, -1};\n  alteredBinarySearch(array, target, 0, array.size() - 1, &finalRange, true);\n  alteredBinarySearch(array, target, 0, array.size() - 1, &finalRange, false);\n  return finalRange;\n}\n\nvoid alteredBinarySearch(\n  vector<int> array,\n  int target,\n  int left,\n  int right,\n  vector<int>* finalRange,\n  bool goLeft\n) {\n  while (left <= right) {\n    int mid = (left + right) / 2;\n    if (array[mid] < target) {\n      left = mid + 1;\n    } else if (array[mid] > target) {\n      right = mid - 1;\n    } else {\n      if (goLeft) {\n        if (mid == 0 || array[mid - 1] != target) {\n          finalRange->at(0) = mid;\n          return;\n        } else {\n          right = mid - 1;\n        }\n      } else {\n        if (mid == array.size() - 1 || array[mid + 1] != target) {\n          finalRange->at(1) = mid;\n          return;\n        } else {\n          left = mid + 1;\n        }\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{4, 9};\n      assert(\n        searchForRange(\n          {0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}, 45\n        ) == expected\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{4, 9};\n      assert(\n        searchForRange(\n          {0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}, 45\n        ) == expected\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] SearchForRange(int[] array, int target) {\n    // Write your code here.\n    return new int[] { -1, -1 };\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(log(n)) time | O(log(n)) space\n  public static int[] SearchForRange(int[] array, int target) {\n    int[] finalRange = { -1, -1 };\n    alteredBinarySearch(array, target, 0, array.Length - 1, finalRange, true);\n    alteredBinarySearch(array, target, 0, array.Length - 1, finalRange, false);\n    return finalRange;\n  }\n\n  public static void alteredBinarySearch(\n    int[] array, int target, int left, int right, int[] finalRange, bool goLeft\n  ) {\n    if (left > right) {\n      return;\n    }\n    int mid = (left + right) / 2;\n    if (array[mid] < target) {\n      alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n    } else if (array[mid] > target) {\n      alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n    } else {\n      if (goLeft) {\n        if (mid == 0 || array[mid - 1] != target) {\n          finalRange[0] = mid;\n        } else {\n          alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n        }\n      } else {\n        if (mid == array.Length - 1 || array[mid + 1] != target) {\n          finalRange[1] = mid;\n        } else {\n          alteredBinarySearch(\n            array, target, mid + 1, right, finalRange, goLeft\n          );\n        }\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(log(n)) time | O(1) space\n  public static int[] SearchForRange(int[] array, int target) {\n    int[] finalRange = { -1, -1 };\n    alteredBinarySearch(array, target, 0, array.Length - 1, finalRange, true);\n    alteredBinarySearch(array, target, 0, array.Length - 1, finalRange, false);\n    return finalRange;\n  }\n\n  public static void alteredBinarySearch(\n    int[] array, int target, int left, int right, int[] finalRange, bool goLeft\n  ) {\n    while (left <= right) {\n      int mid = (left + right) / 2;\n      if (array[mid] < target) {\n        left = mid + 1;\n      } else if (array[mid] > target) {\n        right = mid - 1;\n      } else {\n        if (goLeft) {\n          if (mid == 0 || array[mid - 1] != target) {\n            finalRange[0] = mid;\n            return;\n          } else {\n            right = mid - 1;\n          }\n        } else {\n          if (mid == array.Length - 1 || array[mid + 1] != target) {\n            finalRange[1] = mid;\n            return;\n          } else {\n            left = mid + 1;\n          }\n        }\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 4, 9 };\n    int[] output = Program.SearchForRange(\n      new int[] { 0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73 }, 45\n    );\n    Utils.AssertTrue(compare(output, expected));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 4, 9 };\n    int[] output = Program.SearchForRange(\n      new int[] { 0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73 }, 45\n    );\n    Utils.AssertTrue(compare(output, expected));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc SearchForRange(array []int, target int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(log(n)) time | O(log(n)) space\nfunc SearchForRange(array []int, target int) []int {\n\tfinalRange := []int{-1, -1}\n\talteredBinarySearch(array, target, 0, len(array)-1, finalRange, true)\n\talteredBinarySearch(array, target, 0, len(array)-1, finalRange, false)\n\treturn finalRange\n}\n\nfunc alteredBinarySearch(array []int, target, left, right int, finalRange []int, goLeft bool) {\n\tif left > right {\n\t\treturn\n\t}\n\tmid := (left + right) / 2\n\tif array[mid] < target {\n\t\talteredBinarySearch(array, target, mid+1, right, finalRange, goLeft)\n\t} else if array[mid] > target {\n\t\talteredBinarySearch(array, target, left, mid-1, finalRange, goLeft)\n\t} else {\n\t\tif goLeft {\n\t\t\tif mid == 0 || array[mid-1] != target {\n\t\t\t\tfinalRange[0] = mid\n\t\t\t} else {\n\t\t\t\talteredBinarySearch(array, target, left, mid-1, finalRange, goLeft)\n\t\t\t}\n\t\t} else {\n\t\t\tif mid == len(array)-1 || array[mid+1] != target {\n\t\t\t\tfinalRange[1] = mid\n\t\t\t} else {\n\t\t\t\talteredBinarySearch(array, target, mid+1, right, finalRange, goLeft)\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(log(n)) time | O(1) space\nfunc SearchForRange(array []int, target int) []int {\n\tfinalRange := []int{-1, -1}\n\talteredBinarySearch(array, target, 0, len(array)-1, finalRange, true)\n\talteredBinarySearch(array, target, 0, len(array)-1, finalRange, false)\n\treturn finalRange\n}\n\nfunc alteredBinarySearch(array []int, target, left, right int, finalRange []int, goLeft bool) {\n\tfor left <= right {\n\t\tmid := (left + right) / 2\n\t\tif array[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else if array[mid] > target {\n\t\t\tright = mid - 1\n\t\t} else {\n\t\t\tif goLeft {\n\t\t\t\tif mid == 0 || array[mid-1] != target {\n\t\t\t\t\tfinalRange[0] = mid\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\tright = mid - 1\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif mid == len(array)-1 || array[mid+1] != target {\n\t\t\t\t\tfinalRange[1] = mid\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{4, 9}\n\toutput := SearchForRange([]int{0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}, 45)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{4, 9}\n\toutput := SearchForRange([]int{0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}, 45)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] searchForRange(int[] array, int target) {\n    // Write your code here.\n    return new int[] {-1, -1};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(log(n)) space\n  public static int[] searchForRange(int[] array, int target) {\n    int[] finalRange = {-1, -1};\n    alteredBinarySearch(array, target, 0, array.length - 1, finalRange, true);\n    alteredBinarySearch(array, target, 0, array.length - 1, finalRange, false);\n    return finalRange;\n  }\n\n  public static void alteredBinarySearch(\n    int[] array,\n    int target,\n    int left,\n    int right,\n    int[] finalRange,\n    boolean goLeft\n  ) {\n    if (left > right) {\n      return;\n    }\n    int mid = (left + right) / 2;\n    if (array[mid] < target) {\n      alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n    } else if (array[mid] > target) {\n      alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n    } else {\n      if (goLeft) {\n        if (mid == 0 || array[mid - 1] != target) {\n          finalRange[0] = mid;\n        } else {\n          alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n        }\n      } else {\n        if (mid == array.length - 1 || array[mid + 1] != target) {\n          finalRange[1] = mid;\n        } else {\n          alteredBinarySearch(\n            array, target, mid + 1, right, finalRange, goLeft\n          );\n        }\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(1) space\n  public static int[] searchForRange(int[] array, int target) {\n    int[] finalRange = {-1, -1};\n    alteredBinarySearch(array, target, 0, array.length - 1, finalRange, true);\n    alteredBinarySearch(array, target, 0, array.length - 1, finalRange, false);\n    return finalRange;\n  }\n\n  public static void alteredBinarySearch(\n    int[] array,\n    int target,\n    int left,\n    int right,\n    int[] finalRange,\n    boolean goLeft\n  ) {\n    while (left <= right) {\n      int mid = (left + right) / 2;\n      if (array[mid] < target) {\n        left = mid + 1;\n      } else if (array[mid] > target) {\n        right = mid - 1;\n      } else {\n        if (goLeft) {\n          if (mid == 0 || array[mid - 1] != target) {\n            finalRange[0] = mid;\n            return;\n          } else {\n            right = mid - 1;\n          }\n        } else {\n          if (mid == array.length - 1 || array[mid + 1] != target) {\n            finalRange[1] = mid;\n            return;\n          } else {\n            left = mid + 1;\n          }\n        }\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {4, 9};\n    int[] output = Program.searchForRange(\n      new int[] {0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}, 45\n    );\n    Utils.assertTrue(compare(output, expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {4, 9};\n    int[] output = Program.searchForRange(\n      new int[] {0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73}, 45\n    );\n    Utils.assertTrue(compare(output, expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function searchForRange(array, target) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.searchForRange = searchForRange;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(log(n)) space\nfunction searchForRange(array, target) {\n  const finalRange = [-1, -1];\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, true);\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, false);\n  return finalRange;\n}\n\nfunction alteredBinarySearch(array, target, left, right, finalRange, goLeft) {\n  if (left > right) return;\n  const mid = Math.floor((left + right) / 2);\n  if (array[mid] < target) {\n    alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n  } else if (array[mid] > target) {\n    alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n  } else {\n    if (goLeft) {\n      if (mid === 0 || array[mid - 1] !== target) {\n        finalRange[0] = mid;\n      } else {\n        alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n      }\n    } else {\n      if (mid === array.length - 1 || array[mid + 1] !== target) {\n        finalRange[1] = mid;\n      } else {\n        alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n      }\n    }\n  }\n}\n\nexports.searchForRange = searchForRange;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(1) space\nfunction searchForRange(array, target) {\n  const finalRange = [-1, -1];\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, true);\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, false);\n  return finalRange;\n}\n\nfunction alteredBinarySearch(array, target, left, right, finalRange, goLeft) {\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (array[mid] < target) {\n      left = mid + 1;\n    } else if (array[mid] > target) {\n      right = mid - 1;\n    } else {\n      if (goLeft) {\n        if (mid === 0 || array[mid - 1] !== target) {\n          finalRange[0] = mid;\n          return;\n        } else {\n          right = mid - 1;\n        }\n      } else {\n        if (mid === array.length - 1 || array[mid + 1] !== target) {\n          finalRange[1] = mid;\n          return;\n        } else {\n          left = mid + 1;\n        }\n      }\n    }\n  }\n}\n\nexports.searchForRange = searchForRange;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45))\n    .to.deep.equal([4, 9]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45))\n    .to.deep.equal([4, 9]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun searchForRange(array: List<Int>, target: Int): List<Int> {\n    // Write your code here.\n    return listOf(-1, -1)\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(log(n)) time | O(log(n)) space\nfun searchForRange(array: List<Int>, target: Int): List<Int> {\n    val finalRange = mutableListOf(-1, -1)\n    alteredBinarySearch(array, target, 0, array.size - 1, finalRange, true)\n    alteredBinarySearch(array, target, 0, array.size - 1, finalRange, false)\n    return finalRange\n}\n\nfun alteredBinarySearch(array: List<Int>, target: Int, left: Int, right: Int, finalRange: MutableList<Int>, goLeft: Boolean) {\n    if (left > right) {\n        return\n    }\n    val mid = (left + right) / 2\n    if (array[mid] < target) {\n        alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft)\n    } else if (array[mid] > target) {\n        alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft)\n    } else {\n        if (goLeft) {\n            if (mid == 0 || array[mid - 1] != target) {\n                finalRange[0] = mid\n            } else {\n                alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft)\n            }\n        } else {\n            if (mid == array.size - 1 || array[mid + 1] != target) {\n                finalRange[1] = mid\n            } else {\n                alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft)\n            }\n        }\n    }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(log(n)) time | O(1) space\nfun searchForRange(array: List<Int>, target: Int): List<Int> {\n    val finalRange = mutableListOf(-1, -1)\n    alteredBinarySearch(array, target, 0, array.size - 1, finalRange, true)\n    alteredBinarySearch(array, target, 0, array.size - 1, finalRange, false)\n    return finalRange\n}\n\nfun alteredBinarySearch(array: List<Int>, target: Int, leftStart: Int, rightStart: Int, finalRange: MutableList<Int>, goLeft: Boolean) {\n    var left = leftStart\n    var right = rightStart\n    while (left <= right) {\n        val mid = (left + right) / 2\n        if (array[mid] < target) {\n            left = mid + 1\n        } else if (array[mid] > target) {\n            right = mid - 1\n        } else {\n            if (goLeft) {\n                if (mid == 0 || array[mid - 1] != target) {\n                    finalRange[0] = mid\n                    return\n                } else {\n                    right = mid - 1\n                }\n            } else {\n                if (mid == array.size - 1 || array[mid + 1] != target) {\n                    finalRange[1] = mid\n                    return\n                } else {\n                    left = mid + 1\n                }\n            }\n        }\n    }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.searchForRange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = listOf(4, 9)\n        val input = listOf(0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73)\n        val output = searchForRange(input, 45)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.searchForRange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = listOf(4, 9)\n        val input = listOf(0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73)\n        val output = searchForRange(input, 45)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def searchForRange(array, target):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(log(n)) time | O(log(n)) space\ndef searchForRange(array, target):\n    finalRange = [-1, -1]\n    alteredBinarySearch(array, target, 0, len(array) - 1, finalRange, True)\n    alteredBinarySearch(array, target, 0, len(array) - 1, finalRange, False)\n    return finalRange\n\n\ndef alteredBinarySearch(array, target, left, right, finalRange, goLeft):\n    if left > right:\n        return\n    mid = (left + right) // 2\n    if array[mid] < target:\n        alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft)\n    elif array[mid] > target:\n        alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft)\n    else:\n        if goLeft:\n            if mid == 0 or array[mid - 1] != target:\n                finalRange[0] = mid\n            else:\n                alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft)\n        else:\n            if mid == len(array) - 1 or array[mid + 1] != target:\n                finalRange[1] = mid\n            else:\n                alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft)\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(log(n)) time | O(1) space\ndef searchForRange(array, target):\n    finalRange = [-1, -1]\n    alteredBinarySearch(array, target, 0, len(array) - 1, finalRange, True)\n    alteredBinarySearch(array, target, 0, len(array) - 1, finalRange, False)\n    return finalRange\n\n\ndef alteredBinarySearch(array, target, left, right, finalRange, goLeft):\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] < target:\n            left = mid + 1\n        elif array[mid] > target:\n            right = mid - 1\n        else:\n            if goLeft:\n                if mid == 0 or array[mid - 1] != target:\n                    finalRange[0] = mid\n                    return\n                else:\n                    right = mid - 1\n            else:\n                if mid == len(array) - 1 or array[mid + 1] != target:\n                    finalRange[1] = mid\n                    return\n                else:\n                    left = mid + 1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45), [4, 9]\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45), [4, 9]\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def searchForRange(array, target)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def searchForRange(array, target)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def searchForRange(array, target)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.searchForRange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.searchForRange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func searchForRange(_ array: [Int], _ target: Int) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(log(n)) space\n  func searchForRange(_ array: [Int], _ target: Int) -> [Int] {\n    var finalRange = [-1, -1]\n\n    alteredBinarySearch(array, target, 0, array.count - 1, &finalRange, true)\n    alteredBinarySearch(array, target, 0, array.count - 1, &finalRange, false)\n    return finalRange\n  }\n\n  func alteredBinarySearch(_ array: [Int], _ target: Int, _ leftPointer: Int, _ rightPointer: Int, _ finalRange: inout [Int], _ goLeft: Bool) {\n    if leftPointer > rightPointer {\n      return\n    }\n\n    let middle = (leftPointer + rightPointer) / 2\n\n    if array[middle] > target {\n      alteredBinarySearch(array, target, leftPointer, middle - 1, &finalRange, goLeft)\n    } else if array[middle] < target {\n      alteredBinarySearch(array, target, middle + 1, rightPointer, &finalRange, goLeft)\n    } else {\n      if goLeft {\n        if middle == 0 || array[middle] != array[middle - 1] {\n          finalRange[0] = middle\n        } else {\n          alteredBinarySearch(array, target, leftPointer, middle - 1, &finalRange, goLeft)\n        }\n      } else {\n        if middle == array.count - 1 || array[middle] != array[middle + 1] {\n          finalRange[1] = middle\n        } else {\n          alteredBinarySearch(array, target, middle + 1, rightPointer, &finalRange, goLeft)\n        }\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(1) space\n  func searchForRange(_ array: [Int], _ target: Int) -> [Int] {\n    var finalRange = [-1, -1]\n\n    var leftPointer = 0\n    var rightPointer = array.count - 1\n\n    alteredBinarySearch(array, target, &leftPointer, &rightPointer, &finalRange, true)\n\n    leftPointer = 0\n    rightPointer = array.count - 1\n    alteredBinarySearch(array, target, &leftPointer, &rightPointer, &finalRange, false)\n    return finalRange\n  }\n\n  func alteredBinarySearch(_ array: [Int], _ target: Int, _ leftPointer: inout Int, _ rightPointer: inout Int, _ finalRange: inout [Int], _ goLeft: Bool) {\n    while leftPointer <= rightPointer {\n      let middle = (leftPointer + rightPointer) / 2\n\n      if array[middle] > target {\n        rightPointer = middle - 1\n      } else if array[middle] < target {\n        leftPointer = middle + 1\n      } else {\n        if goLeft {\n          if middle == 0 || array[middle] != array[middle - 1] {\n            finalRange[0] = middle\n            return\n          } else {\n            rightPointer = middle - 1\n          }\n        } else {\n          if middle == array.count - 1 || array[middle] != array[middle + 1] {\n            finalRange[1] = middle\n            return\n          } else {\n            leftPointer = middle + 1\n          }\n        }\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual([4, 9], program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual([4, 9], program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "type Range = [number, number];\n\nexport function searchForRange(array: number[], target: number): Range {\n  // Write your code here.\n  return [-1, -1];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ntype Range = [number, number];\n\n// O(log(n)) time | O(log(n)) space\nexport function searchForRange(array: number[], target: number) {\n  const finalRange: Range = [-1, -1];\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, true);\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, false);\n  return finalRange;\n}\n\nfunction alteredBinarySearch(\n  array: number[],\n  target: number,\n  left: number,\n  right: number,\n  finalRange: Range,\n  goLeft: boolean,\n) {\n  if (left > right) return;\n  const mid = Math.floor((left + right) / 2);\n  if (array[mid] < target) {\n    alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n  } else if (array[mid] > target) {\n    alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n  } else {\n    if (goLeft) {\n      if (mid === 0 || array[mid - 1] !== target) {\n        finalRange[0] = mid;\n      } else {\n        alteredBinarySearch(array, target, left, mid - 1, finalRange, goLeft);\n      }\n    } else {\n      if (mid === array.length - 1 || array[mid + 1] !== target) {\n        finalRange[1] = mid;\n      } else {\n        alteredBinarySearch(array, target, mid + 1, right, finalRange, goLeft);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ntype Range = [number, number];\n\n// O(log(n)) time | O(1) space\nexport function searchForRange(array: number[], target: number) {\n  const finalRange: Range = [-1, -1];\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, true);\n  alteredBinarySearch(array, target, 0, array.length - 1, finalRange, false);\n  return finalRange;\n}\n\nfunction alteredBinarySearch(\n  array: number[],\n  target: number,\n  left: number,\n  right: number,\n  finalRange: Range,\n  goLeft: boolean,\n) {\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (array[mid] < target) {\n      left = mid + 1;\n    } else if (array[mid] > target) {\n      right = mid - 1;\n    } else {\n      if (goLeft) {\n        if (mid === 0 || array[mid - 1] !== target) {\n          finalRange[0] = mid;\n          return;\n        } else {\n          right = mid - 1;\n        }\n      } else {\n        if (mid === array.length - 1 || array[mid + 1] !== target) {\n          finalRange[1] = mid;\n          return;\n        } else {\n          left = mid + 1;\n        }\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45))\n    .to.deep.equal([4, 9]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.searchForRange([0, 1, 21, 33, 45, 45, 45, 45, 45, 45, 61, 71, 73], 45))\n    .to.deep.equal([4, 9]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "target",
      "example": 45,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "target": 45
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 5
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 7
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 8
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 10
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 9
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "target": 47
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "target": -1
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45
      ],
      "target": 45
    }
  ],
  "jsonTests": [
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "target": 45
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 5
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 7
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 8
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 10
    },
    {
      "array": [
        5,
        7,
        7,
        8,
        8,
        10
      ],
      "target": 9
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "target": 47
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        61,
        71,
        73
      ],
      "target": -1
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45,
        45
      ],
      "target": 45
    }
  ],
  "changelog": []
}