{
  "uid": "sum-bsts",
  "testStrategy": "JSON",
  "name": "Sum BSTs",
  "version": 0,
  "releaseDate": "2023-10-15T00:00:00Z",
  "category": "Binary Search Trees",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 433,
    "failureCount": 90
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "848549977",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 1359
  },
  "prompt": "<div class=\"html\">\n  <p>\n    You're given a Binary Tree. As with any Binary Tree, this tree may contain\n    one or more Binary Search Trees (BSTs), and it may even be a BST itself.\n  </p>\n  <p>\n    Write a function that returns the sum of all the values of nodes in this\n    tree which are part of a BST containing at least 3 nodes.\n  </p>\n  <p>\n    Each <span>BinaryTree</span> node has an integer <span>value</span>, a\n    <span>left</span> child node, and a <span>right</span> child node. Children\n    nodes can either be <span>BinaryTree</span> nodes themselves or\n    <span>None</span> / <span>null</span>.\n  </p>\n  <p>\n    A BST is a special type of Binary Tree whose nodes all satisfy the BST\n    property. A node satisfies the BST property if its <span>value</span> is\n    strictly greater than the values of every node to its left; its\n    <span>value</span> is less than or equal to the values of every node to its\n    right; and its children nodes are either valid <span>BST</span> nodes\n    themselves or <span>None</span> / <span>null</span>.\n  </p>\n\n  <h3>Sample Input #1</h3>\n  <pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> =     8\n         /    \\\n       2       9\n     /   \\       \\\n   1     10       5    \n</pre>\n\n  <h3>Sample Output #1</h3>\n  <pre>\n13 <span class=\"CodeEditor-promptComment\">// 1, 2, and 10 form the only BST containing at least 3 nodes.\n</span>\n</pre>\n\n  <h3>Sample Input #2</h3>\n  <pre>\n  <span class=\"CodeEditor-promptParameter\">tree</span> =            20\n            /                \\ \n           7                 10\n         /   \\             /     \\\n        0     8           5      15\n            /   \\       /   \\   /   \\\n           7     9     2     5 13   22\n                     /           \\\n                    1             14\n</pre>\n\n  <h3>Sample Output #2</h3>\n<pre>\n118 <span class=\"CodeEditor-promptComment\">// The subtrees rooted at 7 and 10 are both BSTs, and their node values add up to 118.\n</span>\n</pre>\n\n  <h3>Sample Input #3</h3>\n  <pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> =            20\n          /                \\ \n         9                 10\n       /   \\             /     \\\n      0     8           6      15\n          /           /   \\   /   \\\n         7           2     5 17   22\n                   /           \\\n                  1             14\n</pre>\n\n  <h3>Sample Output #3</h3>\n  <pre>\n0 <span class=\"CodeEditor-promptComment\">// The subtrees rooted at 8 and 2 are both BSTs, but they only contain 2 nodes each.\n</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  You'll need to have each node in the tree pass information up to its parent node.\n  What information does each node need from its children nodes? And what algorithm\n  can be used to pass this information up?\n</p>\n",
    "\n<p>\n  To efficiently pass information up the tree, you'll want to use a postorder\n  traversal depth first search. This will allow you to see all of the children\n  of a node before processing that node.\n</p>\n",
    "\n<p>\n  For any given node, you'll need to determine if that node can be the root of\n  a BST. To do this, you'll need to know if both of its children are root nodes\n  of BSTs. You'll also need to know the maximum and minimum values of those\n  trees.\n</p>\n",
    "\n<p>\n  To ensure you only count BSTs with at least 3 nodes, try also passing information\n  up to the parent node on how many nodes are in the child's subtree.\n</p>"
  ],
  "spaceTime": "O(n) time | O(h) space - where n is the number of nodes in the tree and h is the height of the tree",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree *left = nullptr;\n  BinaryTree *right = nullptr;\n\n  BinaryTree(int value) : value(value) {}\n};\n\nint sumBsts(BinaryTree *tree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n\nusing namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) : value(value) {}\n};\n\nstruct TreeInfo {\n  bool isBst;\n  int maxValue;\n  int minValue;\n  int bstSum;\n  int bstSize;\n  int totalSumBstNodes;\n\n  TreeInfo(\n    bool isBst,\n    int maxValue,\n    int minValue,\n    int bstSum,\n    int bstSize,\n    int totalSumBstNodes\n  )\n      : isBst(isBst),\n        maxValue(maxValue),\n        minValue(minValue),\n        bstSum(bstSum),\n        bstSize(bstSize),\n        totalSumBstNodes(totalSumBstNodes) {}\n};\n\nTreeInfo getTreeInfo(BinaryTree* tree);\n\n// O(n) time | O(h) space - where n is the number of nodes in the\n// tree and h is the height of the tree\nint sumBsts(BinaryTree* tree) { return getTreeInfo(tree).totalSumBstNodes; }\n\nTreeInfo getTreeInfo(BinaryTree* tree) {\n  if (tree == nullptr) {\n    return TreeInfo(true, INT_MIN, INT_MAX, 0, 0, 0);\n  }\n\n  TreeInfo leftTreeInfo = getTreeInfo(tree->left);\n  TreeInfo rightTreeInfo = getTreeInfo(tree->right);\n\n  bool satisfiesBstProp = tree->value > leftTreeInfo.maxValue &&\n                          tree->value <= rightTreeInfo.minValue;\n  bool isBst = satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst;\n\n  int maxValue =\n    max(tree->value, max(leftTreeInfo.maxValue, rightTreeInfo.maxValue));\n  int minValue =\n    min(tree->value, min(leftTreeInfo.minValue, rightTreeInfo.minValue));\n\n  int bstSum = 0;\n  int bstSize = 0;\n\n  int totalSumBstNodes =\n    leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes;\n\n  if (isBst) {\n    bstSum = tree->value + leftTreeInfo.bstSum + rightTreeInfo.bstSum;\n    bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize;\n\n    if (bstSize >= 3) {\n      totalSumBstNodes = bstSum;\n    }\n  }\n\n  return TreeInfo(isBst, maxValue, minValue, bstSum, bstSize, totalSumBstNodes);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree* root = new BinaryTree(8);\n      root->left = new BinaryTree(2);\n      root->left->left = new BinaryTree(1);\n      root->left->right = new BinaryTree(10);\n      root->right = new BinaryTree(9);\n      root->right->right = new BinaryTree(5);\n      auto expected = 13;\n      auto actual = sumBsts(root);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree* root = new BinaryTree(8);\n      root->left = new BinaryTree(2);\n      root->left->left = new BinaryTree(1);\n      root->left->right = new BinaryTree(10);\n      root->right = new BinaryTree(9);\n      root->right->right = new BinaryTree(5);\n      auto expected = 13;\n      auto actual = sumBsts(root);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public int SumBsts(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the\n  // tree and h is the height of the tree\n  public int SumBsts(BinaryTree tree) {\n    return getTreeInfo(tree).totalSumBstNodes;\n  }\n\n  public static TreeInfo getTreeInfo(BinaryTree tree) {\n    if (tree == null) {\n      return new TreeInfo(true, Int32.MinValue, Int32.MaxValue, 0, 0, 0);\n    }\n\n    TreeInfo leftTreeInfo = getTreeInfo(tree.left);\n    TreeInfo rightTreeInfo = getTreeInfo(tree.right);\n\n    bool satisfiesBstProp = tree.value > leftTreeInfo.maxValue &&\n                            tree.value <= rightTreeInfo.minValue;\n    bool isBst = satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst;\n\n    int maxValue = Math.Max(\n      tree.value, Math.Max(leftTreeInfo.maxValue, rightTreeInfo.maxValue)\n    );\n    int minValue = Math.Min(\n      tree.value, Math.Min(leftTreeInfo.minValue, rightTreeInfo.minValue)\n    );\n\n    int bstSum = 0;\n    int bstSize = 0;\n\n    int totalSumBstNodes =\n      leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes;\n\n    if (isBst) {\n      bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum;\n      bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize;\n\n      if (bstSize >= 3) {\n        totalSumBstNodes = bstSum;\n      }\n    }\n\n    return new TreeInfo(\n      isBst, maxValue, minValue, bstSum, bstSize, totalSumBstNodes\n    );\n  }\n\n  public class TreeInfo {\n    public bool isBst;\n    public int maxValue;\n    public int minValue;\n    public int bstSum;\n    public int bstSize;\n    public int totalSumBstNodes;\n\n    public TreeInfo(\n      bool isBst,\n      int maxValue,\n      int minValue,\n      int bstSum,\n      int bstSize,\n      int totalSumBstNodes\n    ) {\n      this.isBst = isBst;\n      this.maxValue = maxValue;\n      this.minValue = minValue;\n      this.bstSum = bstSum;\n      this.bstSize = bstSize;\n      this.totalSumBstNodes = totalSumBstNodes;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(8);\n    root.left = new Program.BinaryTree(2);\n    root.left.left = new Program.BinaryTree(1);\n    root.left.right = new Program.BinaryTree(10);\n    root.right = new Program.BinaryTree(9);\n    root.right.right = new Program.BinaryTree(5);\n    int expected = 13;\n    int actual = new Program().SumBsts(root);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(8);\n    root.left = new Program.BinaryTree(2);\n    root.left.left = new Program.BinaryTree(1);\n    root.left.right = new Program.BinaryTree(10);\n    root.right = new Program.BinaryTree(9);\n    root.right.right = new Program.BinaryTree(5);\n    int expected = 13;\n    int actual = new Program().SumBsts(root);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\nfunc SumBsts(tree *BinaryTree) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the\n// tree and h is the height of the tree\nfunc SumBsts(tree *BinaryTree) int {\n\treturn getTreeInfo(tree).TotalSumBstNodes\n}\n\ntype TreeInfo struct {\n\tIsBst            bool\n\tMaxValue         int\n\tMinValue         int\n\tBstSum           int\n\tBstSize          int\n\tTotalSumBstNodes int\n}\n\nfunc getTreeInfo(tree *BinaryTree) TreeInfo {\n\tif tree == nil {\n\t\treturn TreeInfo{\n\t\t\tIsBst:            true,\n\t\t\tMaxValue:         math.MinInt64,\n\t\t\tMinValue:         math.MaxInt64,\n\t\t\tBstSum:           0,\n\t\t\tBstSize:          0,\n\t\t\tTotalSumBstNodes: 0,\n\t\t}\n\t}\n\n\tleftTreeInfo := getTreeInfo(tree.Left)\n\trightTreeInfo := getTreeInfo(tree.Right)\n\n\tsatisfiesBstProp := tree.Value > leftTreeInfo.MaxValue && tree.Value <= rightTreeInfo.MinValue\n\tisBst := satisfiesBstProp && leftTreeInfo.IsBst && rightTreeInfo.IsBst\n\n\tmaxValue := int(math.Max(float64(tree.Value), math.Max(float64(leftTreeInfo.MaxValue), float64(rightTreeInfo.MaxValue))))\n\tminValue := int(math.Min(float64(tree.Value), math.Min(float64(leftTreeInfo.MinValue), float64(rightTreeInfo.MinValue))))\n\n\tvar bstSum, bstSize int\n\n\ttotalSumBstNodes := leftTreeInfo.TotalSumBstNodes + rightTreeInfo.TotalSumBstNodes\n\n\tif isBst {\n\t\tbstSum = tree.Value + leftTreeInfo.BstSum + rightTreeInfo.BstSum\n\t\tbstSize = 1 + leftTreeInfo.BstSize + rightTreeInfo.BstSize\n\n\t\tif bstSize >= 3 {\n\t\t\ttotalSumBstNodes = bstSum\n\t\t}\n\t}\n\n\treturn TreeInfo{\n\t\tIsBst:            isBst,\n\t\tMaxValue:         maxValue,\n\t\tMinValue:         minValue,\n\t\tBstSum:           bstSum,\n\t\tBstSize:          bstSize,\n\t\tTotalSumBstNodes: totalSumBstNodes,\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := &BinaryTree{Value: 8}\n\troot.Left = &BinaryTree{Value: 2}\n\troot.Left.Left = &BinaryTree{Value: 1}\n\troot.Left.Right = &BinaryTree{Value: 10}\n\troot.Right = &BinaryTree{Value: 9}\n\troot.Right.Right = &BinaryTree{Value: 5}\n\texpected := 13\n\tactual := SumBsts(root)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := &BinaryTree{Value: 8}\n\troot.Left = &BinaryTree{Value: 2}\n\troot.Left.Left = &BinaryTree{Value: 1}\n\troot.Left.Right = &BinaryTree{Value: 10}\n\troot.Right = &BinaryTree{Value: 9}\n\troot.Right.Right = &BinaryTree{Value: 5}\n\texpected := 13\n\tactual := SumBsts(root)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public int sumBsts(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the\n  // tree and h is the height of the tree\n  public int sumBsts(BinaryTree tree) {\n    return getTreeInfo(tree).totalSumBstNodes;\n  }\n\n  public static TreeInfo getTreeInfo(BinaryTree tree) {\n    if (tree == null) {\n      return new TreeInfo(true, Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 0, 0);\n    }\n\n    TreeInfo leftTreeInfo = getTreeInfo(tree.left);\n    TreeInfo rightTreeInfo = getTreeInfo(tree.right);\n\n    boolean satisfiesBstProp = tree.value > leftTreeInfo.maxValue\n      && tree.value <= rightTreeInfo.minValue;\n    boolean isBst =\n      satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst;\n\n    int maxValue = Math.max(\n      tree.value, Math.max(leftTreeInfo.maxValue, rightTreeInfo.maxValue)\n    );\n    int minValue = Math.min(\n      tree.value, Math.min(leftTreeInfo.minValue, rightTreeInfo.minValue)\n    );\n\n    int bstSum = 0;\n    int bstSize = 0;\n\n    int totalSumBstNodes =\n      leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes;\n\n    if (isBst) {\n      bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum;\n      bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize;\n\n      if (bstSize >= 3) {\n        totalSumBstNodes = bstSum;\n      }\n    }\n\n    return new TreeInfo(\n      isBst, maxValue, minValue, bstSum, bstSize, totalSumBstNodes\n    );\n  }\n\n  static class TreeInfo {\n    boolean isBst;\n    int maxValue;\n    int minValue;\n    int bstSum;\n    int bstSize;\n    int totalSumBstNodes;\n\n    public TreeInfo(\n      boolean isBst,\n      int maxValue,\n      int minValue,\n      int bstSum,\n      int bstSize,\n      int totalSumBstNodes\n    ) {\n      this.isBst = isBst;\n      this.maxValue = maxValue;\n      this.minValue = minValue;\n      this.bstSum = bstSum;\n      this.bstSize = bstSize;\n      this.totalSumBstNodes = totalSumBstNodes;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(8);\n    root.left = new Program.BinaryTree(2);\n    root.left.left = new Program.BinaryTree(1);\n    root.left.right = new Program.BinaryTree(10);\n    root.right = new Program.BinaryTree(9);\n    root.right.right = new Program.BinaryTree(5);\n    int expected = 13;\n    int actual = new Program().sumBsts(root);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(8);\n    root.left = new Program.BinaryTree(2);\n    root.left.left = new Program.BinaryTree(1);\n    root.left.right = new Program.BinaryTree(10);\n    root.right = new Program.BinaryTree(9);\n    root.right.right = new Program.BinaryTree(5);\n    int expected = 13;\n    int actual = new Program().sumBsts(root);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction sumBsts(tree) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.sumBsts = sumBsts;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the\n// tree and h is the height of the tree\nfunction sumBsts(tree) {\n  return getTreeInfo(tree).totalSumBstNodes;\n}\n\nfunction getTreeInfo(tree) {\n  if (tree === null) {\n    return {\n      isBst: true,\n      maxValue: -Infinity,\n      minValue: Infinity,\n      bstSum: 0,\n      bstSize: 0,\n      totalSumBstNodes: 0,\n    };\n  }\n\n  const leftTreeInfo = getTreeInfo(tree.left);\n  const rightTreeInfo = getTreeInfo(tree.right);\n\n  const satisfiesBstProp =\n    tree.value > leftTreeInfo.maxValue && tree.value <= rightTreeInfo.minValue;\n  const isBst = satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst;\n\n  const maxValue = Math.max(tree.value, Math.max(leftTreeInfo.maxValue, rightTreeInfo.maxValue));\n  const minValue = Math.min(tree.value, Math.min(leftTreeInfo.minValue, rightTreeInfo.minValue));\n\n  let bstSum = 0;\n  let bstSize = 0;\n\n  let totalSumBstNodes = leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes;\n\n  if (isBst) {\n    bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum;\n    bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize;\n\n    if (bstSize >= 3) totalSumBstNodes = bstSum;\n  }\n\n  return {\n    isBst,\n    maxValue,\n    minValue,\n    bstSum,\n    bstSize,\n    totalSumBstNodes,\n  };\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.sumBsts = sumBsts;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const root = new program.BinaryTree(8);\n  root.left = new program.BinaryTree(2);\n  root.left.left = new program.BinaryTree(1);\n  root.left.right = new program.BinaryTree(10);\n  root.right = new program.BinaryTree(9);\n  root.right.right = new program.BinaryTree(5);\n  const expected = 13;\n  const actual = program.sumBsts(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const root = new program.BinaryTree(8);\n  root.left = new program.BinaryTree(2);\n  root.left.left = new program.BinaryTree(1);\n  root.left.right = new program.BinaryTree(10);\n  root.right = new program.BinaryTree(9);\n  root.right.right = new program.BinaryTree(5);\n  const expected = 13;\n  const actual = program.sumBsts(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\nfun sumBsts(tree: BinaryTree): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\nimport kotlin.math.min\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\ndata class TreeInfo(\n    val isBst: Boolean,\n    val maxValue: Int,\n    val minValue: Int,\n    val bstSum: Int,\n    val bstSize: Int,\n    val totalSumBstNodes: Int,\n)\n\n// O(n) time | O(h) space - where n is the number of nodes in the\n// tree and h is the height of the tree\nfun sumBsts(tree: BinaryTree): Int {\n    return getTreeInfo(tree).totalSumBstNodes\n}\n\nfun getTreeInfo(tree: BinaryTree?): TreeInfo {\n    if (tree == null) {\n        return TreeInfo(\n            true,\n            Int.MIN_VALUE,\n            Int.MAX_VALUE,\n            0,\n            0,\n            0,\n        )\n    }\n\n    val leftTreeInfo = getTreeInfo(tree.left)\n    val rightTreeInfo = getTreeInfo(tree.right)\n\n    val satisfiesBstProp = tree.value > leftTreeInfo.maxValue && tree.value <= rightTreeInfo.minValue\n    val isBst = satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst\n\n    val maxValue = max(tree.value, max(leftTreeInfo.maxValue, rightTreeInfo.maxValue))\n    val minValue = min(tree.value, min(leftTreeInfo.minValue, rightTreeInfo.minValue))\n\n    var bstSum = 0\n    var bstSize = 0\n\n    var totalSumBstNodes = leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes\n\n    if (isBst) {\n        bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum\n        bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize\n\n        if (bstSize >= 3) totalSumBstNodes = bstSum\n    }\n\n    return TreeInfo(\n        isBst,\n        maxValue,\n        minValue,\n        bstSum,\n        bstSize,\n        totalSumBstNodes,\n    )\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.BinaryTree\nimport com.algoexpert.program.sumBsts\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val root = BinaryTree(8)\n        root.left = BinaryTree(2)\n        root.left!!.left = BinaryTree(1)\n        root.left!!.right = BinaryTree(10)\n        root.right = BinaryTree(9)\n        root.right!!.right = BinaryTree(5)\n        val expected = 13\n        val output = sumBsts(root)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.BinaryTree\nimport com.algoexpert.program.sumBsts\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val root = BinaryTree(8)\n        root.left = BinaryTree(2)\n        root.left!!.left = BinaryTree(1)\n        root.left!!.right = BinaryTree(10)\n        root.right = BinaryTree(9)\n        root.right!!.right = BinaryTree(5)\n        val expected = 13\n        val output = sumBsts(root)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef sumBsts(tree):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\n# O(n) time | O(h) space - where n is the number of nodes in the\n# tree and h is the height of the tree\ndef sumBsts(tree):\n    return getTreeInfo(tree).totalSumBstNodes\n\n\ndef getTreeInfo(tree):\n    if tree is None:\n        return TreeInfo(\n            True,\n            float(\"-inf\"),\n            float(\"inf\"),\n            0,\n            0,\n            0,\n        )\n\n    leftTreeInfo = getTreeInfo(tree.left)\n    rightTreeInfo = getTreeInfo(tree.right)\n\n    satisfiesBstProp = tree.value > leftTreeInfo.maxValue and tree.value <= rightTreeInfo.minValue\n    isBst = satisfiesBstProp and leftTreeInfo.isBst and rightTreeInfo.isBst\n\n    maxValue = max(tree.value, max(leftTreeInfo.maxValue, rightTreeInfo.maxValue))\n    minValue = min(tree.value, min(leftTreeInfo.minValue, rightTreeInfo.minValue))\n\n    bstSum = 0\n    bstSize = 0\n\n    totalSumBstNodes = leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes\n\n    if isBst:\n        bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum\n        bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize\n\n        if bstSize >= 3:\n            totalSumBstNodes = bstSum\n\n    return TreeInfo(\n        isBst,\n        maxValue,\n        minValue,\n        bstSum,\n        bstSize,\n        totalSumBstNodes,\n    )\n\n\nclass TreeInfo:\n    def __init__(self, isBst, maxValue, minValue, bstSum, bstSize, totalSumBstNodes):\n        self.isBst = isBst\n        self.maxValue = maxValue\n        self.minValue = minValue\n        self.bstSum = bstSum\n        self.bstSize = bstSize\n        self.totalSumBstNodes = totalSumBstNodes\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = program.BinaryTree(8)\n        root.left = program.BinaryTree(2)\n        root.left.left = program.BinaryTree(1)\n        root.left.right = program.BinaryTree(10)\n        root.right = program.BinaryTree(9)\n        root.right.right = program.BinaryTree(5)\n        expected = 13\n        actual = program.sumBsts(root)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = program.BinaryTree(8)\n        root.left = program.BinaryTree(2)\n        root.left.left = program.BinaryTree(1)\n        root.left.right = program.BinaryTree(10)\n        root.right = program.BinaryTree(9)\n        root.right.right = program.BinaryTree(5)\n        expected = 13\n        actual = program.sumBsts(root)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "# This is an input struct. Do not edit.\nclass BinaryTree\n    attr_accessor :value\n    attr_accessor :left\n    attr_accessor :right\n\n    def initialize(value)\n        @value = value\n        @left = nil\n        @right = nil\n    end\nend\n\n\nclass Program\n    def sumBsts(tree)\n        # Write your code here.\n        return -1\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n    attr_accessor :value\n    attr_accessor :left\n    attr_accessor :right\n\n    def initialize(value)\n        @value = value\n        @left = nil\n        @right = nil\n    end\nend\n\n\nclass Program\n    def sumBsts(tree)\n        # Write your code here.\n        return -1\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.sumBsts\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.sumBsts\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func sumBsts(_ tree: BinaryTree) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  struct TreeInfo {\n    var isBst: Bool\n    var maxValue: Int\n    var minValue: Int\n    var bstSum: Int\n    var bstSize: Int\n    var totalSumBstNodes: Int\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the\n  // tree and h is the height of the tree\n  func sumBsts(_ tree: BinaryTree?) -> Int {\n    return getTreeInfo(tree: tree).totalSumBstNodes\n  }\n\n  func getTreeInfo(tree: BinaryTree?) -> TreeInfo {\n    guard let tree = tree else {\n      return TreeInfo(isBst: true, maxValue: Int.min, minValue: Int.max, bstSum: 0, bstSize: 0, totalSumBstNodes: 0)\n    }\n\n    let leftTreeInfo = getTreeInfo(tree: tree.left)\n    let rightTreeInfo = getTreeInfo(tree: tree.right)\n\n    let satisfiesBstProp = tree.value > leftTreeInfo.maxValue && tree.value <= rightTreeInfo.minValue\n    let isBst = satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst\n\n    let maxValue = max(tree.value, max(leftTreeInfo.maxValue, rightTreeInfo.maxValue))\n    let minValue = min(tree.value, min(leftTreeInfo.minValue, rightTreeInfo.minValue))\n\n    var bstSum = 0\n    var bstSize = 0\n\n    var totalSumBstNodes = leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes\n\n    if isBst {\n      bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum\n      bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize\n\n      if bstSize >= 3 {\n        totalSumBstNodes = bstSum\n      }\n    }\n\n    return TreeInfo(isBst: isBst, maxValue: maxValue, minValue: minValue, bstSum: bstSum, bstSize: bstSize, totalSumBstNodes: totalSumBstNodes)\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var root = Program.BinaryTree(value: 8)\n      root.left = Program.BinaryTree(value: 2)\n      root.left!.left = Program.BinaryTree(value: 1)\n      root.left!.right = Program.BinaryTree(value: 10)\n      root.right = Program.BinaryTree(value: 9)\n      root.right!.right = Program.BinaryTree(value: 5)\n      var expected = 13\n      var actual = Program().sumBsts(root)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var root = Program.BinaryTree(value: 8)\n      root.left = Program.BinaryTree(value: 2)\n      root.left!.left = Program.BinaryTree(value: 1)\n      root.left!.right = Program.BinaryTree(value: 10)\n      root.right = Program.BinaryTree(value: 9)\n      root.right!.right = Program.BinaryTree(value: 5)\n      var expected = 13\n      var actual = Program().sumBsts(root)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function sumBsts(tree: BinaryTree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\ninterface TreeInfo {\n  isBst: boolean;\n  maxValue: number;\n  minValue: number;\n  bstSum: number;\n  bstSize: number;\n  totalSumBstNodes: number;\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the\n// tree and h is the height of the tree\nexport function sumBsts(tree: BinaryTree) {\n  return getTreeInfo(tree).totalSumBstNodes;\n}\n\nfunction getTreeInfo(tree: BinaryTree | null): TreeInfo {\n  if (tree === null) {\n    return {\n      isBst: true,\n      maxValue: -Infinity,\n      minValue: Infinity,\n      bstSum: 0,\n      bstSize: 0,\n      totalSumBstNodes: 0,\n    };\n  }\n\n  const leftTreeInfo = getTreeInfo(tree.left);\n  const rightTreeInfo = getTreeInfo(tree.right);\n\n  const satisfiesBstProp =\n    tree.value > leftTreeInfo.maxValue && tree.value <= rightTreeInfo.minValue;\n  const isBst = satisfiesBstProp && leftTreeInfo.isBst && rightTreeInfo.isBst;\n\n  const maxValue = Math.max(tree.value, Math.max(leftTreeInfo.maxValue, rightTreeInfo.maxValue));\n  const minValue = Math.min(tree.value, Math.min(leftTreeInfo.minValue, rightTreeInfo.minValue));\n\n  let bstSum = 0;\n  let bstSize = 0;\n\n  let totalSumBstNodes = leftTreeInfo.totalSumBstNodes + rightTreeInfo.totalSumBstNodes;\n\n  if (isBst) {\n    bstSum = tree.value + leftTreeInfo.bstSum + rightTreeInfo.bstSum;\n    bstSize = 1 + leftTreeInfo.bstSize + rightTreeInfo.bstSize;\n\n    if (bstSize >= 3) totalSumBstNodes = bstSum;\n  }\n\n  return {\n    isBst,\n    maxValue,\n    minValue,\n    bstSum,\n    bstSize,\n    totalSumBstNodes,\n  };\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const root = new program.BinaryTree(8);\n  root.left = new program.BinaryTree(2);\n  root.left.left = new program.BinaryTree(1);\n  root.left.right = new program.BinaryTree(10);\n  root.right = new program.BinaryTree(9);\n  root.right.right = new program.BinaryTree(5);\n  const expected = 13;\n  const actual = program.sumBsts(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const root = new program.BinaryTree(8);\n  root.left = new program.BinaryTree(2);\n  root.left.left = new program.BinaryTree(1);\n  root.left.right = new program.BinaryTree(10);\n  root.right = new program.BinaryTree(9);\n  root.right.right = new program.BinaryTree(5);\n  const expected = 13;\n  const actual = program.sumBsts(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "tree",
      "example": {
        "nodes": [
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "2"
      },
      "schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": "3",
            "right": "1",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": null,
            "value": 10
          },
          {
            "id": "5",
            "left": "1",
            "right": null,
            "value": 5
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "5",
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": "10",
            "value": 5
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "5",
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": "10",
            "value": 5
          },
          {
            "id": "10",
            "left": null,
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "7",
            "right": "10",
            "value": 20
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "7",
            "left": "3",
            "right": "8",
            "value": 7
          },
          {
            "id": "8",
            "left": "7-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "20"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "8",
            "left": "2",
            "right": null,
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "-5",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          }
        ],
        "root": "8"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "1-1",
            "right": null,
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "1-1",
            "left": "-1",
            "right": null,
            "value": 1
          },
          {
            "id": "-1",
            "left": "-5",
            "right": "20",
            "value": -1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "1-1",
            "right": null,
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "1-1",
            "left": "-1",
            "right": null,
            "value": 1
          },
          {
            "id": "-1",
            "left": "-5",
            "right": "-4",
            "value": -1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "-4",
            "left": null,
            "right": null,
            "value": -4
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "15",
            "right": null,
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "15",
            "left": "18",
            "right": null,
            "value": 15
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "-2",
            "right": "30",
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "-2",
            "left": "18",
            "right": null,
            "value": -2
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": null,
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "-2",
            "right": "30",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "-2",
            "left": "18",
            "right": null,
            "value": -2
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "7",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "-2",
            "right": "30",
            "value": 2
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "-2",
            "left": "18",
            "right": null,
            "value": -2
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "8",
            "left": "2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "10",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "8"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "8",
            "left": "2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "-5",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "9",
            "left": null,
            "right": "12",
            "value": 9
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          }
        ],
        "root": "8"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "23",
            "value": 10
          },
          {
            "id": "23",
            "left": "13",
            "right": "22",
            "value": 23
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "23",
            "value": 10
          },
          {
            "id": "23",
            "left": "13",
            "right": "22",
            "value": 23
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7",
            "right": "-5",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "23",
            "value": 10
          },
          {
            "id": "23",
            "left": "19",
            "right": "22",
            "value": 23
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "19",
            "left": null,
            "right": "14",
            "value": 19
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-3",
            "right": null,
            "value": -8
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "0",
            "left": "-7",
            "right": "-5",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "99",
            "right": null,
            "value": 6
          },
          {
            "id": "99",
            "left": null,
            "right": null,
            "value": 99
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "1",
            "right": null,
            "value": 100
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": "1",
            "right": null,
            "value": -100
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "1",
            "value": -100
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "-98-2",
            "value": -97
          },
          {
            "id": "-98-2",
            "left": "-7",
            "right": "10",
            "value": -98
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "12",
            "value": 13
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "12",
            "value": 13
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "12",
            "value": 13
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": "1-5",
            "right": null,
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "7",
            "right": "10",
            "value": 20
          },
          {
            "id": "7",
            "left": "0",
            "right": "8",
            "value": 7
          },
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "8",
            "left": "7-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          }
        ],
        "root": "20"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "9",
            "right": "10",
            "value": 20
          },
          {
            "id": "9",
            "left": "0",
            "right": "8",
            "value": 9
          },
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "8",
            "left": "7-2",
            "right": null,
            "value": 8
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "10",
            "left": "6",
            "right": "15",
            "value": 10
          },
          {
            "id": "6",
            "left": "2",
            "right": "5",
            "value": 6
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "15",
            "left": "17",
            "right": "22",
            "value": 15
          },
          {
            "id": "17",
            "left": null,
            "right": "14",
            "value": 17
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          }
        ],
        "root": "20"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "7",
            "right": "10",
            "value": 20
          },
          {
            "id": "7",
            "left": "2",
            "right": "8",
            "value": 7
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "8",
            "left": "7-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "5",
            "left": "2-2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "15",
            "left": "13",
            "right": "8-2",
            "value": 15
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "8-2",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "20"
      }
    }
  ],
  "jsonTests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": "3",
            "right": "1",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": null,
            "value": 10
          },
          {
            "id": "5",
            "left": "1",
            "right": null,
            "value": 5
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "5",
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": "10",
            "value": 5
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "5",
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": "10",
            "value": 5
          },
          {
            "id": "10",
            "left": null,
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "7",
            "right": "10",
            "value": 20
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "7",
            "left": "3",
            "right": "8",
            "value": 7
          },
          {
            "id": "8",
            "left": "7-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "20"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "8",
            "left": "2",
            "right": null,
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "-5",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          }
        ],
        "root": "8"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "1-1",
            "right": null,
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "1-1",
            "left": "-1",
            "right": null,
            "value": 1
          },
          {
            "id": "-1",
            "left": "-5",
            "right": "20",
            "value": -1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "1-1",
            "right": null,
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "1-1",
            "left": "-1",
            "right": null,
            "value": 1
          },
          {
            "id": "-1",
            "left": "-5",
            "right": "-4",
            "value": -1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "-4",
            "left": null,
            "right": null,
            "value": -4
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "15",
            "right": null,
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "15",
            "left": "18",
            "right": null,
            "value": 15
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "-2",
            "right": "30",
            "value": 2
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "-2",
            "left": "18",
            "right": null,
            "value": -2
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": null,
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "-2",
            "right": "30",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "-2",
            "left": "18",
            "right": null,
            "value": -2
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "3",
            "left": "8",
            "right": "2",
            "value": 3
          },
          {
            "id": "8",
            "left": "2-2",
            "right": "7",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "4",
            "value": 2
          },
          {
            "id": "2-2",
            "left": "-2",
            "right": "30",
            "value": 2
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "-2",
            "left": "18",
            "right": null,
            "value": -2
          },
          {
            "id": "18",
            "left": "16",
            "right": "20",
            "value": 18
          },
          {
            "id": "16",
            "left": null,
            "right": null,
            "value": 16
          },
          {
            "id": "20",
            "left": null,
            "right": null,
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          }
        ],
        "root": "3"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "8",
            "left": "2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "10",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "8"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "8",
            "left": "2",
            "right": "9",
            "value": 8
          },
          {
            "id": "2",
            "left": "1",
            "right": "-5",
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "9",
            "left": null,
            "right": "12",
            "value": 9
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          }
        ],
        "root": "8"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "23",
            "value": 10
          },
          {
            "id": "23",
            "left": "13",
            "right": "22",
            "value": 23
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "23",
            "value": 10
          },
          {
            "id": "23",
            "left": "13",
            "right": "22",
            "value": 23
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7",
            "right": "-5",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "1-2",
            "right": null,
            "value": 6
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "3",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "23",
            "value": 10
          },
          {
            "id": "23",
            "left": "19",
            "right": "22",
            "value": 23
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "19",
            "left": null,
            "right": "14",
            "value": 19
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "3",
            "left": "-8",
            "right": "0",
            "value": 3
          },
          {
            "id": "-8",
            "left": "-3",
            "right": null,
            "value": -8
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "0",
            "left": "-7",
            "right": "-5",
            "value": 0
          },
          {
            "id": "-7",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "5",
            "left": "6",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "99",
            "right": null,
            "value": 6
          },
          {
            "id": "99",
            "left": null,
            "right": null,
            "value": 99
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "1",
            "right": null,
            "value": 100
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": "1",
            "right": null,
            "value": -100
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "1",
            "value": -100
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "-98-2",
            "value": -97
          },
          {
            "id": "-98-2",
            "left": "-7",
            "right": "10",
            "value": -98
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "12",
            "value": 13
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "12",
            "value": 13
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-100",
            "left": null,
            "right": "-99",
            "value": -100
          },
          {
            "id": "-99",
            "left": null,
            "right": "-98",
            "value": -99
          },
          {
            "id": "-98",
            "left": null,
            "right": "-97",
            "value": -98
          },
          {
            "id": "-97",
            "left": null,
            "right": "1",
            "value": -97
          },
          {
            "id": "1",
            "left": "-7",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "12",
            "value": 13
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "-7",
            "left": "-8",
            "right": "0",
            "value": -7
          },
          {
            "id": "-8",
            "left": "-9",
            "right": null,
            "value": -8
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "0",
            "left": "-7-2",
            "right": "0-2",
            "value": 0
          },
          {
            "id": "-7-2",
            "left": null,
            "right": null,
            "value": -7
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1-2",
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": "1-5",
            "right": null,
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "-100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "7",
            "right": "10",
            "value": 20
          },
          {
            "id": "7",
            "left": "0",
            "right": "8",
            "value": 7
          },
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "8",
            "left": "7-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          }
        ],
        "root": "20"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "9",
            "right": "10",
            "value": 20
          },
          {
            "id": "9",
            "left": "0",
            "right": "8",
            "value": 9
          },
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "8",
            "left": "7-2",
            "right": null,
            "value": 8
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "10",
            "left": "6",
            "right": "15",
            "value": 10
          },
          {
            "id": "6",
            "left": "2",
            "right": "5",
            "value": 6
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "15",
            "left": "17",
            "right": "22",
            "value": 15
          },
          {
            "id": "17",
            "left": null,
            "right": "14",
            "value": 17
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          }
        ],
        "root": "20"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "20",
            "left": "7",
            "right": "10",
            "value": 20
          },
          {
            "id": "7",
            "left": "2",
            "right": "8",
            "value": 7
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "8",
            "left": "7-2",
            "right": "9",
            "value": 8
          },
          {
            "id": "7-2",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "5",
            "left": "2-2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "15",
            "left": "13",
            "right": "8-2",
            "value": 15
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "8-2",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "20"
      }
    }
  ],
  "changelog": []
}