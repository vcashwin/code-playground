{
  "uid": "task-assignment",
  "testStrategy": "JSON",
  "name": "Task Assignment",
  "version": 0,
  "releaseDate": "2021-01-19T00:00:00Z",
  "category": "Greedy Algorithms",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 16451,
    "failureCount": 3856
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "494571080",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 825
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given an integer <span>k</span> representing a number of workers and an\n  array of positive integers representing durations of tasks that must be\n  completed by the workers. Specifically, each worker must complete two unique\n  tasks and can only work on one task at a time. The number of tasks will always\n  be equal to <span>2k</span> such that each worker always has exactly two tasks\n  to complete. All tasks are independent of one another and can be completed in\n  any order. Workers will complete their assigned tasks in parallel, and the\n  time taken to complete all tasks will be equal to the time taken to complete\n  the longest pair of tasks (see the sample output for an explanation).\n</p>\n<p>\n  Write a function that returns the optimal assignment of tasks to each worker\n  such that the tasks are completed as fast as possible. Your function should\n  return a list of pairs, where each pair stores the indices of the tasks that\n  should be completed by one worker. The pairs should be in the following\n  format: <span>[task1, task2]</span>, where the order of <span>task1</span> and\n  <span>task2</span> doesn't matter. Your function can return the pairs in any\n  order. If multiple optimal assignments exist, any correct answer will be\n  accepted.\n</p>\n<p>\n  Note: you'll always be given at least one worker (i.e., <span>k</span> will\n  always be greater than <b>0</b>).\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">k</span> = 3\n<span class=\"CodeEditor-promptParameter\">tasks</span> = [1, 3, 5, 3, 1, 4]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[\n  [0, 2], <span class=\"CodeEditor-promptComment\">// tasks[0] = 1, tasks[2] = 5 | 1 + 5 = 6</span>\n  [4, 5], <span class=\"CodeEditor-promptComment\">// tasks[4] = 1, tasks[5] = 4 | 1 + 4 = 5</span>\n  [1, 3], <span class=\"CodeEditor-promptComment\">// tasks[1] = 3, tasks[3] = 3 | 3 + 3 = 6</span>\n] <span class=\"CodeEditor-promptComment\">// The fastest time to complete all tasks is 6.</span>\n\n<span class=\"CodeEditor-promptComment\">// Note: there are multiple correct answers for this sample input.</span>\n<span class=\"CodeEditor-promptComment\">// The following is an example of another correct answer:</span>\n<span class=\"CodeEditor-promptComment\">// [</span>\n<span class=\"CodeEditor-promptComment\">//   [2, 4],</span>\n<span class=\"CodeEditor-promptComment\">//   [0, 5],</span>\n<span class=\"CodeEditor-promptComment\">//   [1, 3]</span>\n<span class=\"CodeEditor-promptComment\">// [</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nStart by considering which pairs of tasks will lead to the <b>longest</b> possible time to complete all tasks. \n</p>\n",
    "\n<p>\nThe amount of time it'll take to complete all tasks will be dictated by the pair of tasks that has the longest total duration. This means that you'll want to avoid pairing long tasks together.\n</p>\n",
    "\n<p>\nSince the pair of tasks with the longest total duration is the time it takes for us to finish all tasks, we want to minimize this pair's duration. To do this, we can simply pair the shortest-duration task with the longest-duration task and repeat the process with all other tasks.\n</p>\n",
    "\n<p>\nStart by sorting the tasks array in ascending order. Then, pair the shortest-duration task with the longest-duration task, and add that pair to some output array. Repeat this process until you've paired all tasks. This will lead to an optimal pairing, because your pair of tasks with the longest duration will have the shortest duration that it can possibly have.\n</p>"
  ],
  "spaceTime": "O(nlog(n)) time | O(n) space - where n is the number of tasks",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> taskAssignment(int k, vector<int> tasks) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nunordered_map<int, vector<int>> getTaskDurationsToIndices(vector<int> tasks);\n\n// O(nlog(n)) time | O(n) space - where n is the number of tasks\nvector<vector<int>> taskAssignment(int k, vector<int> tasks) {\n  vector<vector<int>> pairedTasks;\n  auto taskDurationToIndices = getTaskDurationsToIndices(tasks);\n\n  vector<int> sortedTasks(tasks);\n  sort(sortedTasks.begin(), sortedTasks.end());\n\n  for (int idx = 0; idx < k; idx++) {\n    auto task1Duration = sortedTasks[idx];\n    auto indicesWithTask1Duration = &taskDurationToIndices[task1Duration];\n    auto task1Index = indicesWithTask1Duration->back();\n    indicesWithTask1Duration->pop_back();\n\n    auto task2SortedIndex = tasks.size() - 1 - idx;\n    auto task2Duration = sortedTasks[task2SortedIndex];\n    auto indicesWithTask2Duration = &taskDurationToIndices[task2Duration];\n    auto task2Index = indicesWithTask2Duration->back();\n    indicesWithTask2Duration->pop_back();\n\n    pairedTasks.push_back(vector<int>{task1Index, task2Index});\n  }\n\n  return pairedTasks;\n}\n\nunordered_map<int, vector<int>> getTaskDurationsToIndices(vector<int> tasks) {\n  unordered_map<int, vector<int>> taskDurationToIndices;\n\n  for (int idx = 0; idx < tasks.size(); idx++) {\n    auto taskDuration = tasks[idx];\n    if (taskDurationToIndices.find(taskDuration) != taskDurationToIndices.end()) {\n      taskDurationToIndices[taskDuration].push_back(idx);\n    } else {\n      taskDurationToIndices[taskDuration] = vector<int>{idx};\n    }\n  }\n\n  return taskDurationToIndices;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      int k = 3;\n      vector<int> tasks = {1, 3, 5, 3, 1, 4};\n      vector<vector<int>> expected = {{4, 2}, {0, 5}, {3, 1}};\n      auto actual = taskAssignment(k, tasks);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      int k = 3;\n      vector<int> tasks = {1, 3, 5, 3, 1, 4};\n      vector<vector<int>> expected = {{4, 2}, {0, 5}, {3, 1}};\n      auto actual = taskAssignment(k, tasks);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<List<int> > TaskAssignment(int k, List<int> tasks) {\n    // Write your code here.\n    return new List<List<int> >();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class Program {\n  // O(nlog(n)) time | O(n) space - where n is the number of tasks\n  public List<List<int> > TaskAssignment(int k, List<int> tasks) {\n    List<List<int> > pairedTasks = new List<List<int> >();\n    Dictionary<int, List<int> > taskDurationsToIndices =\n      getTaskDurationsToIndices(tasks);\n\n    List<int> sortedTasks = tasks;\n    sortedTasks.Sort();\n\n    for (int idx = 0; idx < k; idx++) {\n      int task1Duration = sortedTasks[idx];\n      List<int> indicesWithTask1Duration =\n        taskDurationsToIndices[task1Duration];\n      int task1Index =\n        indicesWithTask1Duration[indicesWithTask1Duration.Count - 1];\n      indicesWithTask1Duration.RemoveAt(indicesWithTask1Duration.Count - 1);\n\n      int task2SortedIndex = tasks.Count - 1 - idx;\n      int task2Duration = sortedTasks[task2SortedIndex];\n      List<int> indicesWithTask2Duration =\n        taskDurationsToIndices[task2Duration];\n      int task2Index =\n        indicesWithTask2Duration[indicesWithTask2Duration.Count - 1];\n      indicesWithTask2Duration.RemoveAt(indicesWithTask2Duration.Count - 1);\n\n      List<int> pairedTask = new List<int>();\n      pairedTask.Add(task1Index);\n      pairedTask.Add(task2Index);\n      pairedTasks.Add(pairedTask);\n    }\n\n    return pairedTasks;\n  }\n\n  public Dictionary<int, List<int> > getTaskDurationsToIndices(List<int> tasks\n  ) {\n    Dictionary<int, List<int> > taskDurationsToIndices =\n      new Dictionary<int, List<int> >();\n\n    for (int idx = 0; idx < tasks.Count; idx++) {\n      int taskDuration = tasks[idx];\n      if (taskDurationsToIndices.ContainsKey(taskDuration)) {\n        taskDurationsToIndices[taskDuration].Add(idx);\n      } else {\n        List<int> temp = new List<int>();\n        temp.Add(idx);\n        taskDurationsToIndices[taskDuration] = temp;\n      }\n    }\n\n    return taskDurationsToIndices;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var k = 3;\n    var tasks = new List<int> { 1, 3, 5, 3, 1, 4 };\n    var expected = new List<List<int> >();\n    List<int> subarr = new List<int> { 4, 2 };\n    List<int> subarr2 = new List<int> { 0, 5 };\n    List<int> subarr3 = new List<int> { 3, 1 };\n    expected.Add(subarr);\n    expected.Add(subarr2);\n    expected.Add(subarr3);\n    var actual = new Program().TaskAssignment(k, tasks);\n    for (var i = 0; i < expected.Count; i++) {\n      Utils.AssertTrue(Enumerable.SequenceEqual(expected[i], actual[i]));\n    }\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var k = 3;\n    var tasks = new List<int> { 1, 3, 5, 3, 1, 4 };\n    var expected = new List<List<int> >();\n    List<int> subarr = new List<int> { 4, 2 };\n    List<int> subarr2 = new List<int> { 0, 5 };\n    List<int> subarr3 = new List<int> { 3, 1 };\n    expected.Add(subarr);\n    expected.Add(subarr2);\n    expected.Add(subarr3);\n    var actual = new Program().TaskAssignment(k, tasks);\n    for (var i = 0; i < expected.Count; i++) {\n      Utils.AssertTrue(Enumerable.SequenceEqual(expected[i], actual[i]));\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc TaskAssignment(k int, tasks []int) [][]int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"sort\"\n)\n\n// O(nlog(n)) time | O(n) space - where n is the number of tasks\nfunc TaskAssignment(k int, tasks []int) [][]int {\n\tpairedTasks := make([][]int, 0)\n\ttaskDurationsToIndices := getTaskDurationsToIndices(tasks)\n\n\tsort.Slice(tasks, func(i, j int) bool {\n\t\treturn tasks[i] < tasks[j]\n\t})\n\n\tvar task1Index, task2Index int\n\tfor idx := 0; idx < k; idx++ {\n\t\ttask1Duration := tasks[idx]\n\t\tindicesWithTask1Duration := taskDurationsToIndices[task1Duration]\n\t\ttask1Index, taskDurationsToIndices[task1Duration] =\n\t\t\tindicesWithTask1Duration[len(indicesWithTask1Duration)-1],\n\t\t\tindicesWithTask1Duration[:len(indicesWithTask1Duration)-1]\n\n\t\ttask2SortedIndex := len(tasks) - 1 - idx\n\t\ttask2Duration := tasks[task2SortedIndex]\n\t\tindicesWithTask2Duration := taskDurationsToIndices[task2Duration]\n\t\ttask2Index, taskDurationsToIndices[task2Duration] =\n\t\t\tindicesWithTask2Duration[len(indicesWithTask2Duration)-1],\n\t\t\tindicesWithTask2Duration[:len(indicesWithTask2Duration)-1]\n\n\t\tpairedTasks = append(pairedTasks, []int{task1Index, task2Index})\n\t}\n\treturn pairedTasks\n}\n\nfunc getTaskDurationsToIndices(tasks []int) map[int][]int {\n\ttaskDurationsToIndices := map[int][]int{}\n\n\tfor idx := range tasks {\n\t\ttaskDuration := tasks[idx]\n\t\ttaskDurationsToIndices[taskDuration] = append(taskDurationsToIndices[taskDuration], idx)\n\t}\n\n\treturn taskDurationsToIndices\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tk := 3\n\ttasks := []int{1, 3, 5, 3, 1, 4}\n\texpected := [][]int{{4, 2}, {0, 5}, {3, 1}}\n\tactual := TaskAssignment(k, tasks)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tk := 3\n\ttasks := []int{1, 3, 5, 3, 1, 4}\n\texpected := [][]int{{4, 2}, {0, 5}, {3, 1}}\n\tactual := TaskAssignment(k, tasks)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<ArrayList<Integer>> taskAssignment(\n    int k, ArrayList<Integer> tasks\n  ) {\n    // Write your code here.\n    return new ArrayList<ArrayList<Integer>>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlog(n)) time | O(n) space - where n is the number of tasks\n  public ArrayList<ArrayList<Integer>> taskAssignment(\n    int k, ArrayList<Integer> tasks\n  ) {\n    ArrayList<ArrayList<Integer>> pairedTasks =\n      new ArrayList<ArrayList<Integer>>();\n    HashMap<Integer, ArrayList<Integer>> taskDurationsToIndices =\n      getTaskDurationsToIndices(tasks);\n\n    ArrayList<Integer> sortedTasks = tasks;\n    Collections.sort(sortedTasks);\n\n    for (int idx = 0; idx < k; idx++) {\n      int task1Duration = sortedTasks.get(idx);\n      ArrayList<Integer> indicesWithTask1Duration =\n        taskDurationsToIndices.get(task1Duration);\n      int task1Index =\n        indicesWithTask1Duration.remove(indicesWithTask1Duration.size() - 1);\n\n      int task2SortedIndex = tasks.size() - 1 - idx;\n      int task2Duration = sortedTasks.get(task2SortedIndex);\n      ArrayList<Integer> indicesWithTask2Duration =\n        taskDurationsToIndices.get(task2Duration);\n      int task2Index =\n        indicesWithTask2Duration.remove(indicesWithTask2Duration.size() - 1);\n\n      ArrayList<Integer> pairedTask = new ArrayList<Integer>();\n      pairedTask.add(task1Index);\n      pairedTask.add(task2Index);\n      pairedTasks.add(pairedTask);\n    }\n\n    return pairedTasks;\n  }\n\n  public HashMap<Integer, ArrayList<Integer>> getTaskDurationsToIndices(\n    ArrayList<Integer> tasks\n  ) {\n    HashMap<Integer, ArrayList<Integer>> taskDurationsToIndices =\n      new HashMap<Integer, ArrayList<Integer>>();\n\n    for (int idx = 0; idx < tasks.size(); idx++) {\n      int taskDuration = tasks.get(idx);\n      if (taskDurationsToIndices.containsKey(taskDuration)) {\n        taskDurationsToIndices.get(taskDuration).add(idx);\n      } else {\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n        temp.add(idx);\n        taskDurationsToIndices.put(taskDuration, temp);\n      }\n    }\n\n    return taskDurationsToIndices;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var k = 3;\n    var tasks = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 3, 1, 4));\n    var expected = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> subarr = new ArrayList<Integer>(Arrays.asList(4, 2));\n    ArrayList<Integer> subarr2 = new ArrayList<Integer>(Arrays.asList(0, 5));\n    ArrayList<Integer> subarr3 = new ArrayList<Integer>(Arrays.asList(3, 1));\n    expected.add(subarr);\n    expected.add(subarr2);\n    expected.add(subarr3);\n    var actual = new Program().taskAssignment(k, tasks);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var k = 3;\n    var tasks = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 3, 1, 4));\n    var expected = new ArrayList<ArrayList<Integer>>();\n    ArrayList<Integer> subarr = new ArrayList<Integer>(Arrays.asList(4, 2));\n    ArrayList<Integer> subarr2 = new ArrayList<Integer>(Arrays.asList(0, 5));\n    ArrayList<Integer> subarr3 = new ArrayList<Integer>(Arrays.asList(3, 1));\n    expected.add(subarr);\n    expected.add(subarr2);\n    expected.add(subarr3);\n    var actual = new Program().taskAssignment(k, tasks);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function taskAssignment(k, tasks) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.taskAssignment = taskAssignment;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(n) space - where n is the number of tasks\nfunction taskAssignment(k, tasks) {\n  const pairedTasks = [];\n  const taskDurationToIndices = getTaskDurationToIndices(tasks);\n\n  const sortedTasks = [...tasks].sort((a, b) => a - b);\n  for (let idx = 0; idx < k; idx++) {\n    const task1Duration = sortedTasks[idx];\n    const indicesWithTask1Duration = taskDurationToIndices[task1Duration];\n    const task1Index = indicesWithTask1Duration.pop();\n\n    const task2SortedIndex = tasks.length - 1 - idx;\n    const task2Duration = sortedTasks[task2SortedIndex];\n    const indicesWithTask2Duration = taskDurationToIndices[task2Duration];\n    const task2Index = indicesWithTask2Duration.pop();\n\n    pairedTasks.push([task1Index, task2Index]);\n  }\n\n  return pairedTasks;\n}\n\nfunction getTaskDurationToIndices(tasks) {\n  const taskDurationToIndices = {};\n\n  for (let idx = 0; idx < tasks.length; idx++) {\n    const taskDuration = tasks[idx];\n    if (taskDuration in taskDurationToIndices) {\n      taskDurationToIndices[taskDuration].push(idx);\n    } else {\n      taskDurationToIndices[taskDuration] = [idx];\n    }\n  }\n\n  return taskDurationToIndices;\n}\n\n// Do not edit the line below.\nexports.taskAssignment = taskAssignment;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const k = 3;\n  const tasks = [1, 3, 5, 3, 1, 4];\n  const expected = [\n    [4, 2],\n    [0, 5],\n    [3, 1],\n  ];\n  const actual = program.taskAssignment(k, tasks);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const k = 3;\n  const tasks = [1, 3, 5, 3, 1, 4];\n  const expected = [\n    [4, 2],\n    [0, 5],\n    [3, 1],\n  ];\n  const actual = program.taskAssignment(k, tasks);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun taskAssignment(k: Int, tasks: List<Int>): List<List<Int>> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nlog(n)) time | O(n) space - where n is the number of tasks\nfun taskAssignment(k: Int, tasks: List<Int>): List<List<Int>> {\n    val pairedTasks = mutableListOf<List<Int>>()\n    val taskDurationsToIndices = getTaskDurationsToIndices(tasks)\n\n    val sortedTasks = tasks.sorted()\n    for (idx in 0 until k) {\n        val task1Duration = sortedTasks[idx]\n        val indicesWithTask1Duration = taskDurationsToIndices[task1Duration]!!\n        val task1Index = indicesWithTask1Duration.removeAt(indicesWithTask1Duration.size - 1)\n\n        val task2SortedIndex = tasks.size - 1 - idx\n        val task2Duration = sortedTasks[task2SortedIndex]\n        val indicesWithTask2Duration = taskDurationsToIndices[task2Duration]!!\n        val task2Index = indicesWithTask2Duration.removeAt(indicesWithTask2Duration.size - 1)\n\n        pairedTasks.add(listOf(task1Index, task2Index))\n    }\n\n    return pairedTasks\n}\n\nfun getTaskDurationsToIndices(tasks: List<Int>): MutableMap<Int, MutableList<Int>> {\n    val taskDurationsToIndices = mutableMapOf<Int, MutableList<Int>>()\n\n    for (idx in 0 until tasks.size) {\n        val taskDuration = tasks[idx]\n        if (taskDuration in taskDurationsToIndices) {\n            taskDurationsToIndices[taskDuration]!!.add(idx)\n        } else {\n            taskDurationsToIndices[taskDuration] = mutableListOf(idx)\n        }\n    }\n\n    return taskDurationsToIndices\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.taskAssignment\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val k = 3\n        val tasks = listOf(1, 3, 5, 3, 1, 4)\n        val expected = listOf(\n            listOf(4, 2),\n            listOf(0, 5),\n            listOf(3, 1),\n        )\n        val output = taskAssignment(k, tasks)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.taskAssignment\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val k = 3\n        val tasks = listOf(1, 3, 5, 3, 1, 4)\n        val expected = listOf(\n            listOf(4, 2),\n            listOf(0, 5),\n            listOf(3, 1),\n        )\n        val output = taskAssignment(k, tasks)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def taskAssignment(k, tasks):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlog(n)) time | O(n) space - where n is the number of tasks\ndef taskAssignment(k, tasks):\n    pairedTasks = []\n    taskDurationsToIndices = getTaskDurationsToIndices(tasks)\n\n    sortedTasks = sorted(tasks)\n    for idx in range(k):\n        task1Duration = sortedTasks[idx]\n        indicesWithTask1Duration = taskDurationsToIndices[task1Duration]\n        task1Index = indicesWithTask1Duration.pop()\n\n        task2SortedIndex = len(tasks) - 1 - idx\n        task2Duration = sortedTasks[task2SortedIndex]\n        indicesWithTask2Duration = taskDurationsToIndices[task2Duration]\n        task2Index = indicesWithTask2Duration.pop()\n\n        pairedTasks.append([task1Index, task2Index])\n\n    return pairedTasks\n\n\ndef getTaskDurationsToIndices(tasks):\n    taskDurationsToIndices = {}\n\n    for idx, taskDuration in enumerate(tasks):\n        if taskDuration in taskDurationsToIndices:\n            taskDurationsToIndices[taskDuration].append(idx)\n        else:\n            taskDurationsToIndices[taskDuration] = [idx]\n\n    return taskDurationsToIndices\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        k = 3\n        tasks = [1, 3, 5, 3, 1, 4]\n        expected = [[4, 2], [0, 5], [3, 1]]\n        actual = program.taskAssignment(k, tasks)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        k = 3\n        tasks = [1, 3, 5, 3, 1, 4]\n        expected = [[4, 2], [0, 5], [3, 1]]\n        actual = program.taskAssignment(k, tasks)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def taskAssignment(k, tasks)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def taskAssignment(k, tasks)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.taskAssignment\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.taskAssignment\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func taskAssignment(_ k: Int, _ tasks: [Int]) -> [[Int]] {\n    // Write your code here.\n    return [[Int]]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlog(n)) time | O(n) space - where n is the number of tasks\n  func taskAssignment(_ k: Int, _ tasks: [Int]) -> [[Int]] {\n    var pairedTasks = [[Int]]()\n    var taskDurationsToIndices = getTaskDurationsToIndices(tasks)\n\n    let sortedTasks = tasks.sorted()\n\n    for idx in 0 ..< k {\n      let task1Duration = sortedTasks[idx]\n      var indicesWithTask1Duration = taskDurationsToIndices[task1Duration]!\n      let task1Index = indicesWithTask1Duration.popLast()!\n      taskDurationsToIndices[task1Duration] = indicesWithTask1Duration\n\n      let task2SortedIndex = tasks.count - 1 - idx\n      let task2Duration = sortedTasks[task2SortedIndex]\n      var indicesWithTask2Duration = taskDurationsToIndices[task2Duration]!\n      let task2Index = indicesWithTask2Duration.popLast()!\n      taskDurationsToIndices[task2Duration] = indicesWithTask2Duration\n\n      pairedTasks.append([task1Index, task2Index])\n    }\n    return pairedTasks\n  }\n\n  func getTaskDurationsToIndices(_ tasks: [Int]) -> [Int: [Int]] {\n    var taskDurationsToIndices = [Int: [Int]]()\n\n    for idx in 0 ..< tasks.count {\n      let taskDuration = tasks[idx]\n      if taskDurationsToIndices[taskDuration] == nil {\n        taskDurationsToIndices[taskDuration] = [Int]()\n      }\n      taskDurationsToIndices[taskDuration]!.append(idx)\n    }\n    return taskDurationsToIndices\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var k = 3\n      var tasks = [1, 3, 5, 3, 1, 4]\n      var expected = [[4, 2], [0, 5], [3, 1]]\n      var actual = Program().taskAssignment(k, tasks)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var k = 3\n      var tasks = [1, 3, 5, 3, 1, 4]\n      var expected = [[4, 2], [0, 5], [3, 1]]\n      var actual = Program().taskAssignment(k, tasks)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function taskAssignment(k: number, tasks: number[]) {\n  // Write your code here.\n  return [[tasks[0], tasks[1]]];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(n) space - where n is the number of tasks\nexport function taskAssignment(k: number, tasks: number[]) {\n  const pairedTasks: [number, number][] = [];\n  const taskDurationToIndices = getTaskDurationToIndices(tasks);\n\n  const sortedTasks = [...tasks].sort((a, b) => a - b);\n  for (let idx = 0; idx < k; idx++) {\n    const task1Duration = sortedTasks[idx];\n    const indicesWithTask1Duration = taskDurationToIndices[task1Duration];\n    const task1Index = indicesWithTask1Duration.pop()!;\n\n    const task2SortedIndex = tasks.length - 1 - idx;\n    const task2Duration = sortedTasks[task2SortedIndex];\n    const indicesWithTask2Duration = taskDurationToIndices[task2Duration];\n    const task2Index = indicesWithTask2Duration.pop()!;\n\n    pairedTasks.push([task1Index, task2Index]);\n  }\n\n  return pairedTasks;\n}\n\nfunction getTaskDurationToIndices(tasks: number[]) {\n  const taskDurationToIndices: {[task: number]: number[]} = {};\n\n  for (let idx = 0; idx < tasks.length; idx++) {\n    const taskDuration = tasks[idx];\n    if (taskDuration in taskDurationToIndices) {\n      taskDurationToIndices[taskDuration].push(idx);\n    } else {\n      taskDurationToIndices[taskDuration] = [idx];\n    }\n  }\n\n  return taskDurationToIndices;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const k = 3;\n  const tasks = [1, 3, 5, 3, 1, 4];\n  const expected = [\n    [4, 2],\n    [0, 5],\n    [3, 1],\n  ];\n  const actual = program.taskAssignment(k, tasks);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const k = 3;\n  const tasks = [1, 3, 5, 3, 1, 4];\n  const expected = [\n    [4, 2],\n    [0, 5],\n    [3, 1],\n  ];\n  const actual = program.taskAssignment(k, tasks);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "k",
      "example": 3,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    },
    {
      "name": "tasks",
      "example": [
        1,
        3,
        5,
        3,
        1,
        4
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "minItems": 2,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "k": 3,
      "tasks": [
        1,
        3,
        5,
        3,
        1,
        4
      ]
    },
    {
      "k": 4,
      "tasks": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ]
    },
    {
      "k": 5,
      "tasks": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "k": 1,
      "tasks": [
        3,
        5
      ]
    },
    {
      "k": 7,
      "tasks": [
        2,
        1,
        3,
        4,
        5,
        13,
        12,
        9,
        11,
        10,
        6,
        7,
        14,
        8
      ]
    },
    {
      "k": 5,
      "tasks": [
        3,
        7,
        5,
        4,
        4,
        3,
        6,
        8,
        3,
        3
      ]
    },
    {
      "k": 10,
      "tasks": [
        5,
        6,
        2,
        3,
        15,
        15,
        16,
        19,
        2,
        10,
        10,
        3,
        3,
        32,
        12,
        1,
        23,
        32,
        9,
        2
      ]
    },
    {
      "k": 4,
      "tasks": [
        1,
        2,
        2,
        1,
        3,
        4,
        4,
        4
      ]
    },
    {
      "k": 3,
      "tasks": [
        87,
        65,
        43,
        32,
        31,
        320
      ]
    },
    {
      "k": 2,
      "tasks": [
        3,
        4,
        5,
        3
      ]
    },
    {
      "k": 3,
      "tasks": [
        5,
        2,
        1,
        6,
        4,
        4
      ]
    },
    {
      "k": 2,
      "tasks": [
        1,
        8,
        9,
        10
      ]
    }
  ],
  "jsonTests": [
    {
      "k": 3,
      "tasks": [
        1,
        3,
        5,
        3,
        1,
        4
      ]
    },
    {
      "k": 4,
      "tasks": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ]
    },
    {
      "k": 5,
      "tasks": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "k": 1,
      "tasks": [
        3,
        5
      ]
    },
    {
      "k": 7,
      "tasks": [
        2,
        1,
        3,
        4,
        5,
        13,
        12,
        9,
        11,
        10,
        6,
        7,
        14,
        8
      ]
    },
    {
      "k": 5,
      "tasks": [
        3,
        7,
        5,
        4,
        4,
        3,
        6,
        8,
        3,
        3
      ]
    },
    {
      "k": 10,
      "tasks": [
        5,
        6,
        2,
        3,
        15,
        15,
        16,
        19,
        2,
        10,
        10,
        3,
        3,
        32,
        12,
        1,
        23,
        32,
        9,
        2
      ]
    },
    {
      "k": 4,
      "tasks": [
        1,
        2,
        2,
        1,
        3,
        4,
        4,
        4
      ]
    },
    {
      "k": 3,
      "tasks": [
        87,
        65,
        43,
        32,
        31,
        320
      ]
    },
    {
      "k": 2,
      "tasks": [
        3,
        4,
        5,
        3
      ]
    },
    {
      "k": 3,
      "tasks": [
        5,
        2,
        1,
        6,
        4,
        4
      ]
    },
    {
      "k": 2,
      "tasks": [
        1,
        8,
        9,
        10
      ]
    }
  ],
  "changelog": []
}