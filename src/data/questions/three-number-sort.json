{
  "uid": "three-number-sort",
  "testStrategy": "JSON",
  "name": "Three Number Sort",
  "version": 0,
  "releaseDate": "2020-11-16T00:00:00Z",
  "category": "Sorting",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 20781,
    "failureCount": 6113
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "479372084",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1612
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given an array of integers and another array of three distinct\n  integers. The first array is guaranteed to only contain integers that are in\n  the second array, and the second array represents a desired order for the\n  integers in the first array. For example, a second array of\n  <span>[x, y, z]</span> represents a desired order of\n  <span>[x, x, ..., x, y, y, ..., y, z, z, ..., z]</span> in the first array.\n</p>\n<p>\n  Write a function that sorts the first array according to the desired order in\n  the second array.\n</p>\n<p>\n  The function should perform this in place (i.e., it should mutate the input\n  array), and it shouldn't use any auxiliary space (i.e., it should run with\n  constant space: <span>O(1)</span> space).\n</p>\n<p>\n  Note that the desired order won't necessarily be ascending or descending and\n  that the first array won't necessarily contain all three integers found in the\n  second array—it might only contain one or two.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 0, 0, -1, -1, 0, 1, 1]\n<span class=\"CodeEditor-promptParameter\">order</span> = [0, 1, -1]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[0, 0, 0, 1, 1, 1, -1, -1]\n</pre>\n</div>",
  "hints": [
    "<p>\nWhat advantage does knowing the three values contained in the array give you, and how can you use that to solve this problem in linear time?\n</p>\n",
    "\n<p>\nTry counting how many times each of the three values appears in the input array. Once you have these counts, you can repopulate the input array as need be.\n</p>\n",
    "\n<p>\nPutting aside the first two hints, try conceptually splitting the original array into three subarrays and moving elements of each unique value into the correct subarray. You'll need to keep track of the respective starting indices of these subarrays.\n</p>\n",
    "\n<p>\nGoing off of Hint #3, you can solve this problem either with two passes through the input array or with a single pass. If you do two passes through the array, you'll specifically be positioning the first ordered element during the first pass and the third ordered element during the second pass. You'll be swapping elements from the left side of the array whenever you encounter the first element, and you'll be swapping elements from the right side of the array whenever you encounter the third element. You'll have to keep track of where you last placed a first element or a third element. With a single pass through the array, you'll have to implement both of these strategies and a little more all at once.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> threeNumberSort(vector<int> array, vector<int> order) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <numeric>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the array\nvector<int> threeNumberSort(vector<int> array, vector<int> order) {\n  vector<int> valueCounts = {0, 0, 0};\n\n  for (int element : array) {\n    vector<int>::iterator it = find(order.begin(), order.end(), element);\n    int orderIdx = distance(order.begin(), it);\n    valueCounts[orderIdx] += 1;\n  }\n\n  for (int i = 0; i < 3; i++) {\n    int value = order[i];\n    int count = valueCounts[i];\n\n    int numElementsBefore =\n      accumulate(valueCounts.begin(), valueCounts.begin() + i, 0);\n    for (int n = 0; n < count; n++) {\n      int currentIdx = numElementsBefore + n;\n      array[currentIdx] = value;\n    }\n  }\n\n  return array;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the array\nvector<int> threeNumberSort(vector<int> array, vector<int> order) {\n  int firstValue = order[0];\n  int thirdValue = order[2];\n\n  int firstIdx = 0;\n  for (int i = 0; i < array.size(); i++) {\n    if (array[i] == firstValue) {\n      swap(array[firstIdx], array[i]);\n      firstIdx += 1;\n    }\n  }\n\n  int thirdIdx = array.size() - 1;\n  for (int i = array.size() - 1; i >= 0; i--) {\n    if (array[i] == thirdValue) {\n      swap(array[thirdIdx], array[i]);\n      thirdIdx -= 1;\n    }\n  }\n\n  return array;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the array\nvector<int> threeNumberSort(vector<int> array, vector<int> order) {\n  int firstValue = order[0];\n  int secondValue = order[1];\n\n  int firstIdx = 0;\n  int secondIdx = 0;\n  int thirdIdx = array.size() - 1;\n\n  while (secondIdx <= thirdIdx) {\n    int value = array[secondIdx];\n\n    if (value == firstValue) {\n      swap(array[firstIdx], array[secondIdx]);\n      firstIdx += 1;\n      secondIdx += 1;\n    } else if (value == secondValue) {\n      secondIdx += 1;\n    } else {\n      swap(array[secondIdx], array[thirdIdx]);\n      thirdIdx -= 1;\n    }\n  }\n\n  return array;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> array = {1, 0, 0, -1, -1, 0, 1, 1};\n      vector<int> order = {0, 1, -1};\n      vector<int> expected = {0, 0, 0, 1, 1, 1, -1, -1};\n      vector<int> actual = threeNumberSort(array, order);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> array = {1, 0, 0, -1, -1, 0, 1, 1};\n      vector<int> order = {0, 1, -1};\n      vector<int> expected = {0, 0, 0, 1, 1, 1, -1, -1};\n      vector<int> actual = threeNumberSort(array, order);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int[] ThreeNumberSort(int[] array, int[] order) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public int[] ThreeNumberSort(int[] array, int[] order) {\n    int[] valueCounts = new int[] { 0, 0, 0 };\n\n    foreach (var element in array) {\n      int orderIdx = getIndex(order, element);\n      valueCounts[orderIdx] += 1;\n    }\n\n    for (int i = 0; i < 3; i++) {\n      int value = order[i];\n      int count = valueCounts[i];\n\n      int numElementsBefore = getSum(valueCounts, i);\n      for (int n = 0; n < count; n++) {\n        int currentIdx = numElementsBefore + n;\n        array[currentIdx] = value;\n      }\n    }\n\n    return array;\n  }\n\n  public int getIndex(int[] array, int element) {\n    for (int i = 0; i < array.Length; i++) {\n      if (array[i] == element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  public int getSum(int[] array, int end) {\n    int sum = 0;\n    for (int i = 0; i < end; i++) sum += array[i];\n    return sum;\n  }\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public int[] ThreeNumberSort(int[] array, int[] order) {\n    int firstValue = order[0];\n    int thirdValue = order[2];\n\n    int firstIdx = 0;\n    for (int idx = 0; idx < array.Length; idx++) {\n      if (array[idx] == firstValue) {\n        swap(firstIdx, idx, array);\n        firstIdx += 1;\n      }\n    }\n\n    int thirdIdx = array.Length - 1;\n    for (int idx = array.Length - 1; idx >= 0; idx--) {\n      if (array[idx] == thirdValue) {\n        swap(thirdIdx, idx, array);\n        thirdIdx -= 1;\n      }\n    }\n\n    return array;\n  }\n\n  public void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public int[] ThreeNumberSort(int[] array, int[] order) {\n    int firstValue = order[0];\n    int secondValue = order[1];\n\n    // Keep track of the indices where the values are stored\n    int firstIdx = 0;\n    int secondIdx = 0;\n    int thirdIdx = array.Length - 1;\n\n    while (secondIdx <= thirdIdx) {\n      int value = array[secondIdx];\n\n      if (value == firstValue) {\n        swap(firstIdx, secondIdx, array);\n        firstIdx += 1;\n        secondIdx += 1;\n      } else if (value == secondValue) {\n        secondIdx += 1;\n      } else {\n        swap(secondIdx, thirdIdx, array);\n        thirdIdx -= 1;\n      }\n    }\n\n    return array;\n  }\n\n  public void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var array = new int[] { 1, 0, 0, -1, -1, 0, 1, 1 };\n    var order = new int[] { 0, 1, -1 };\n    var expected = new int[] { 0, 0, 0, 1, 1, 1, -1, -1 };\n    var actual = new Program().ThreeNumberSort(array, order);\n    Utils.AssertTrue(expected.Length == actual.Length);\n    for (int i = 0; i < expected.Length; i++) {\n      Utils.AssertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var array = new int[] { 1, 0, 0, -1, -1, 0, 1, 1 };\n    var order = new int[] { 0, 1, -1 };\n    var expected = new int[] { 0, 0, 0, 1, 1, 1, -1, -1 };\n    var actual = new Program().ThreeNumberSort(array, order);\n    Utils.AssertTrue(expected.Length == actual.Length);\n    for (int i = 0; i < expected.Length; i++) {\n      Utils.AssertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ThreeNumberSort(array []int, order []int) []int {\n\t// Write your code here.\n\treturn array\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc ThreeNumberSort(array []int, order []int) []int {\n\tvalueCounts := []int{0, 0, 0}\n\n\tfor _, element := range array {\n\t\torderIdx := indexOf(order, element)\n\t\tvalueCounts[orderIdx] += 1\n\t}\n\n\tfor i := 0; i < 3; i++ {\n\t\tvalue := order[i]\n\t\tcount := valueCounts[i]\n\n\t\tnumElementsBefore := sumSublist(valueCounts, i)\n\t\tfor n := 0; n < count; n++ {\n\t\t\tcurrentIdx := numElementsBefore + n\n\t\t\tarray[currentIdx] = value\n\t\t}\n\t}\n\treturn array\n}\n\nfunc indexOf(order []int, element int) int {\n\tfor i, item := range order {\n\t\tif item == element {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\nfunc sumSublist(list []int, endIndex int) int {\n\tsum := 0\n\tfor i, value := range list {\n\t\tif i >= endIndex {\n\t\t\treturn sum\n\t\t}\n\t\tsum += value\n\t}\n\treturn sum\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc ThreeNumberSort(array []int, order []int) []int {\n\tfirstValue, thirdValue := order[0], order[2]\n\n\tfirstIdx := 0\n\tfor idx := range array {\n\t\tif array[idx] == firstValue {\n\t\t\tarray[firstIdx], array[idx] = array[idx], array[firstIdx]\n\t\t\tfirstIdx += 1\n\t\t}\n\t}\n\n\tthirdIdx := len(array) - 1\n\tfor idx := len(array) - 1; idx >= 0; idx-- {\n\t\tif array[idx] == thirdValue {\n\t\t\tarray[thirdIdx], array[idx] = array[idx], array[thirdIdx]\n\t\t\tthirdIdx -= 1\n\t\t}\n\t}\n\n\treturn array\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc ThreeNumberSort(array []int, order []int) []int {\n\tfirstValue, secondValue := order[0], order[1]\n\n\tfirstIdx, secondIdx, thirdIdx := 0, 0, len(array)-1\n\n\tfor secondIdx <= thirdIdx {\n\t\tvalue := array[secondIdx]\n\n\t\tif value == firstValue {\n\t\t\tarray[firstIdx], array[secondIdx] = array[secondIdx], array[firstIdx]\n\t\t\tfirstIdx += 1\n\t\t\tsecondIdx += 1\n\t\t} else if value == secondValue {\n\t\t\tsecondIdx += 1\n\t\t} else {\n\t\t\tarray[secondIdx], array[thirdIdx] = array[thirdIdx], array[secondIdx]\n\t\t\tthirdIdx -= 1\n\t\t}\n\t}\n\treturn array\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{1, 0, 0, -1, -1, 0, 1, 1}\n\torder := []int{0, 1, -1}\n\texpected := []int{0, 0, 0, 1, 1, 1, -1, -1}\n\tactual := ThreeNumberSort(array, order)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{1, 0, 0, -1, -1, 0, 1, 1}\n\torder := []int{0, 1, -1}\n\texpected := []int{0, 0, 0, 1, 1, 1, -1, -1}\n\tactual := ThreeNumberSort(array, order)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int[] threeNumberSort(int[] array, int[] order) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public int[] threeNumberSort(int[] array, int[] order) {\n    int[] valueCounts = new int[] {0, 0, 0};\n\n    for (int element : array) {\n      int orderIdx = getIndex(order, element);\n      valueCounts[orderIdx] += 1;\n    }\n\n    for (int i = 0; i < 3; i++) {\n      int value = order[i];\n      int count = valueCounts[i];\n\n      int numElementsBefore = getSum(valueCounts, i);\n      for (int n = 0; n < count; n++) {\n        int currentIdx = numElementsBefore + n;\n        array[currentIdx] = value;\n      }\n    }\n\n    return array;\n  }\n\n  public int getIndex(int[] array, int element) {\n    for (int i = 0; i < array.length; i++) {\n      if (array[i] == element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  public int getSum(int[] array, int end) {\n    int sum = 0;\n    for (int i = 0; i < end; i++) sum += array[i];\n    return sum;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public int[] threeNumberSort(int[] array, int[] order) {\n    int firstValue = order[0];\n    int thirdValue = order[2];\n\n    int firstIdx = 0;\n    for (int idx = 0; idx < array.length; idx++) {\n      if (array[idx] == firstValue) {\n        swap(firstIdx, idx, array);\n        firstIdx += 1;\n      }\n    }\n\n    int thirdIdx = array.length - 1;\n    for (int idx = array.length - 1; idx >= 0; idx--) {\n      if (array[idx] == thirdValue) {\n        swap(thirdIdx, idx, array);\n        thirdIdx -= 1;\n      }\n    }\n\n    return array;\n  }\n\n  public void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public int[] threeNumberSort(int[] array, int[] order) {\n    int firstValue = order[0];\n    int secondValue = order[1];\n\n    // Keep track of the indices where the values are stored\n    int firstIdx = 0;\n    int secondIdx = 0;\n    int thirdIdx = array.length - 1;\n\n    while (secondIdx <= thirdIdx) {\n      int value = array[secondIdx];\n\n      if (value == firstValue) {\n        swap(firstIdx, secondIdx, array);\n        firstIdx += 1;\n        secondIdx += 1;\n      } else if (value == secondValue) {\n        secondIdx += 1;\n      } else {\n        swap(secondIdx, thirdIdx, array);\n        thirdIdx -= 1;\n      }\n    }\n\n    return array;\n  }\n\n  public void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var array = new int[] {1, 0, 0, -1, -1, 0, 1, 1};\n    var order = new int[] {0, 1, -1};\n    var expected = new int[] {0, 0, 0, 1, 1, 1, -1, -1};\n    var actual = new Program().threeNumberSort(array, order);\n    Utils.assertTrue(expected.length == actual.length);\n    for (int i = 0; i < expected.length; i++) {\n      Utils.assertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var array = new int[] {1, 0, 0, -1, -1, 0, 1, 1};\n    var order = new int[] {0, 1, -1};\n    var expected = new int[] {0, 0, 0, 1, 1, 1, -1, -1};\n    var actual = new Program().threeNumberSort(array, order);\n    Utils.assertTrue(expected.length == actual.length);\n    for (int i = 0; i < expected.length; i++) {\n      Utils.assertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function threeNumberSort(array, order) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.threeNumberSort = threeNumberSort;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction threeNumberSort(array, order) {\n  const valueCounts = [0, 0, 0];\n\n  for (const element of array) {\n    const orderIdx = order.indexOf(element);\n    valueCounts[orderIdx]++;\n  }\n\n  for (let idx = 0; idx < 3; idx++) {\n    const value = order[idx];\n    const count = valueCounts[idx];\n\n    const numElementsBefore = valueCounts.slice(0, idx).reduce((a, b) => a + b, 0);\n    for (let n = 0; n < count; n++) {\n      const currentIdx = numElementsBefore + n;\n      array[currentIdx] = value;\n    }\n  }\n\n  return array;\n}\n\n// Do not edit the line below.\nexports.threeNumberSort = threeNumberSort;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction threeNumberSort(array, order) {\n  const firstValue = order[0];\n  const thirdValue = order[2];\n\n  let firstIdx = 0;\n  for (let idx = 0; idx < array.length; idx++) {\n    if (array[idx] === firstValue) {\n      swap(firstIdx, idx, array);\n      firstIdx++;\n    }\n  }\n\n  let thirdIdx = array.length - 1;\n  for (let idx = array.length - 1; idx > -1; idx--) {\n    if (array[idx] === thirdValue) {\n      swap(thirdIdx, idx, array);\n      thirdIdx--;\n    }\n  }\n\n  return array;\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\n// Do not edit the line below.\nexports.threeNumberSort = threeNumberSort;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction threeNumberSort(array, order) {\n  const firstValue = order[0];\n  const secondValue = order[1];\n\n  // Keep track of the indices where the values are stored\n  let firstIdx = 0;\n  let secondIdx = 0;\n  let thirdIdx = array.length - 1;\n\n  while (secondIdx <= thirdIdx) {\n    const value = array[secondIdx];\n\n    if (value === firstValue) {\n      swap(firstIdx, secondIdx, array);\n      firstIdx++;\n      secondIdx++;\n    } else if (value === secondValue) {\n      secondIdx++;\n    } else {\n      swap(secondIdx, thirdIdx, array);\n      thirdIdx -= 1;\n    }\n  }\n\n  return array;\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\n// Do not edit the line below.\nexports.threeNumberSort = threeNumberSort;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [1, 0, 0, -1, -1, 0, 1, 1];\n  const order = [0, 1, -1];\n  const expected = [0, 0, 0, 1, 1, 1, -1, -1];\n  const actual = program.threeNumberSort(array, order);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [1, 0, 0, -1, -1, 0, 1, 1];\n  const order = [0, 1, -1];\n  const expected = [0, 0, 0, 1, 1, 1, -1, -1];\n  const actual = program.threeNumberSort(array, order);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun threeNumberSort(array: MutableList<Int>, order: List<Int>): List<Int> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the array\nfun threeNumberSort(array: MutableList<Int>, order: List<Int>): List<Int> {\n    val valueCounts = mutableListOf(0, 0, 0)\n\n    for (element in array) {\n        val orderIdx = order.indexOf(element)\n        valueCounts[orderIdx] += 1\n    }\n\n    for (i in 0 until 3) {\n        val value = order[i]\n        val count = valueCounts[i]\n\n        val numElementsBefore = valueCounts.subList(0, i).sum()\n        for (n in 0 until count) {\n            val currentIdx = numElementsBefore + n\n            array[currentIdx] = value\n        }\n    }\n\n    return array\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the array\nfun threeNumberSort(array: MutableList<Int>, order: List<Int>): List<Int> {\n    val firstValue = order[0]\n    val thirdValue = order[2]\n\n    var firstIdx = 0\n    for (idx in 0 until array.size) {\n        if (array[idx] == firstValue) {\n            swap(firstIdx, idx, array)\n            firstIdx += 1\n        }\n    }\n\n    var thirdIdx = array.size - 1\n    for (idx in array.size - 1 downTo 0) {\n        if (array[idx] == thirdValue) {\n            swap(thirdIdx, idx, array)\n            thirdIdx -= 1\n        }\n    }\n\n    return array\n}\n\nfun swap(i: Int, j: Int, array: MutableList<Int>) {\n    val temp = array[j]\n    array[j] = array[i]\n    array[i] = temp\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the array\nfun threeNumberSort(array: MutableList<Int>, order: List<Int>): List<Int> {\n    val firstValue = order[0]\n    val secondValue = order[1]\n\n    // Keep track of the indices where the values are stored\n    var firstIdx = 0\n    var secondIdx = 0\n    var thirdIdx = array.size - 1\n\n    while (secondIdx <= thirdIdx) {\n        val value = array[secondIdx]\n\n        if (value == firstValue) {\n            swap(firstIdx, secondIdx, array)\n            firstIdx += 1\n            secondIdx += 1\n        } else if (value == secondValue) {\n            secondIdx += 1\n        } else {\n            swap(secondIdx, thirdIdx, array)\n            thirdIdx -= 1\n        }\n    }\n\n    return array\n}\n\nfun swap(i: Int, j: Int, array: MutableList<Int>) {\n    val temp = array[j]\n    array[j] = array[i]\n    array[i] = temp\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.threeNumberSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = mutableListOf(1, 0, 0, -1, -1, 0, 1, 1)\n        val order = mutableListOf(0, 1, -1)\n        val expected = mutableListOf(0, 0, 0, 1, 1, 1, -1, -1)\n        val output = threeNumberSort(array, order)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.threeNumberSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = mutableListOf(1, 0, 0, -1, -1, 0, 1, 1)\n        val order = mutableListOf(0, 1, -1)\n        val expected = mutableListOf(0, 0, 0, 1, 1, 1, -1, -1)\n        val output = threeNumberSort(array, order)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def threeNumberSort(array, order):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef threeNumberSort(array, order):\n    valueCounts = [0, 0, 0]\n\n    for element in array:\n        orderIdx = order.index(element)\n        valueCounts[orderIdx] += 1\n\n    for i in range(3):\n        value = order[i]\n        count = valueCounts[i]\n\n        numElementsBefore = sum(valueCounts[:i])\n        for n in range(count):\n            currentIdx = numElementsBefore + n\n            array[currentIdx] = value\n\n    return array\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef threeNumberSort(array, order):\n    firstValue = order[0]\n    thirdValue = order[2]\n\n    firstIdx = 0\n    for idx in range(len(array)):\n        if array[idx] == firstValue:\n            array[firstIdx], array[idx] = array[idx], array[firstIdx]\n            firstIdx += 1\n\n    thirdIdx = len(array) - 1\n    for idx in range(len(array) - 1, -1, -1):\n        if array[idx] == thirdValue:\n            array[thirdIdx], array[idx] = array[idx], array[thirdIdx]\n            thirdIdx -= 1\n\n    return array\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef threeNumberSort(array, order):\n    firstValue = order[0]\n    secondValue = order[1]\n\n    # Keep track of the indices where the values are stored\n    firstIdx, secondIdx, thirdIdx = 0, 0, len(array) - 1\n\n    while secondIdx <= thirdIdx:\n        value = array[secondIdx]\n\n        if value == firstValue:\n            array[secondIdx], array[firstIdx] = array[firstIdx], array[secondIdx]\n            firstIdx += 1\n            secondIdx += 1\n        elif value == secondValue:\n            secondIdx += 1\n        else:\n            array[secondIdx], array[thirdIdx] = array[thirdIdx], array[secondIdx]\n            thirdIdx -= 1\n\n    return array\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [1, 0, 0, -1, -1, 0, 1, 1]\n        order = [0, 1, -1]\n        expected = [0, 0, 0, 1, 1, 1, -1, -1]\n        actual = program.threeNumberSort(array, order)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [1, 0, 0, -1, -1, 0, 1, 1]\n        order = [0, 1, -1]\n        expected = [0, 0, 0, 1, 1, 1, -1, -1]\n        actual = program.threeNumberSort(array, order)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def threeNumberSort(array, order)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def threeNumberSort(array, order)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def threeNumberSort(array, order)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def threeNumberSort(array, order)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.threeNumberSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.threeNumberSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func threeNumberSort(_ array: inout [Int], _ order: [Int]) -> [Int] {\n    // Write your code here.\n    return array\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func threeNumberSort(_ array: inout [Int], _ order: [Int]) -> [Int] {\n    var valueCounts = [0, 0, 0]\n\n    for element in array {\n      let orderIdx = order.firstIndex(of: element)\n      valueCounts[orderIdx!] += 1\n    }\n\n    for i in 0 ..< 3 {\n      let value = order[i]\n      let count = valueCounts[i]\n\n      let numElementsBefore = valueCounts[0 ..< i].reduce(0, +)\n      for n in 0 ..< count {\n        let currentIdx = numElementsBefore + n\n        array[currentIdx] = value\n      }\n    }\n    return array\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func threeNumberSort(_ array: inout [Int], _ order: [Int]) -> [Int] {\n    var (firstValue, thirdValue) = (order[0], order[2])\n\n    var firstIdx = 0\n    for idx in 0 ..< array.count {\n      if array[idx] == firstValue {\n        (array[firstIdx], array[idx]) = (array[idx], array[firstIdx])\n        firstIdx += 1\n      }\n    }\n\n    var thirdIdx = array.count - 1\n    for idx in stride(from: array.count - 1, through: 0, by: -1) {\n      if array[idx] == thirdValue {\n        (array[thirdIdx], array[idx]) = (array[idx], array[thirdIdx])\n        thirdIdx -= 1\n      }\n    }\n    return array\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func threeNumberSort(_ array: inout [Int], _ order: [Int]) -> [Int] {\n    var (firstValue, secondValue) = (order[0], order[1])\n\n    var (firstIdx, secondIdx, thirdIdx) = (0, 0, array.count - 1)\n\n    while secondIdx <= thirdIdx {\n      let value = array[secondIdx]\n\n      if value == firstValue {\n        (array[firstIdx], array[secondIdx]) = (array[secondIdx], array[firstIdx])\n        firstIdx += 1\n        secondIdx += 1\n      } else if value == secondValue {\n        secondIdx += 1\n      } else {\n        (array[secondIdx], array[thirdIdx]) = (array[thirdIdx], array[secondIdx])\n        thirdIdx -= 1\n      }\n    }\n    return array\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [1, 0, 0, -1, -1, 0, 1, 1]\n      var order = [0, 1, -1]\n      var expected = [0, 0, 0, 1, 1, 1, -1, -1]\n      var actual = Program().threeNumberSort(&array, order)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [1, 0, 0, -1, -1, 0, 1, 1]\n      var order = [0, 1, -1]\n      var expected = [0, 0, 0, 1, 1, 1, -1, -1]\n      var actual = Program().threeNumberSort(&array, order)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function threeNumberSort(array: number[], order: number[]) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function threeNumberSort(array: number[], order: number[]) {\n  const valueCounts = [0, 0, 0];\n\n  for (const element of array) {\n    const orderIdx = order.indexOf(element);\n    valueCounts[orderIdx]++;\n  }\n\n  for (let idx = 0; idx < 3; idx++) {\n    const value = order[idx];\n    const count = valueCounts[idx];\n\n    const numElementsBefore = valueCounts.slice(0, idx).reduce((a, b) => a + b, 0);\n    for (let n = 0; n < count; n++) {\n      const currentIdx = numElementsBefore + n;\n      array[currentIdx] = value;\n    }\n  }\n\n  return array;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function threeNumberSort(array: number[], order: number[]) {\n  const firstValue = order[0];\n  const thirdValue = order[2];\n\n  let firstIdx = 0;\n  for (let idx = 0; idx < array.length; idx++) {\n    if (array[idx] === firstValue) {\n      swap(firstIdx, idx, array);\n      firstIdx++;\n    }\n  }\n\n  let thirdIdx = array.length - 1;\n  for (let idx = array.length - 1; idx > -1; idx--) {\n    if (array[idx] === thirdValue) {\n      swap(thirdIdx, idx, array);\n      thirdIdx--;\n    }\n  }\n\n  return array;\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function threeNumberSort(array: number[], order: number[]) {\n  const firstValue = order[0];\n  const secondValue = order[1];\n\n  // Keep track of the indices where the values are stored\n  let firstIdx = 0;\n  let secondIdx = 0;\n  let thirdIdx = array.length - 1;\n\n  while (secondIdx <= thirdIdx) {\n    const value = array[secondIdx];\n\n    if (value === firstValue) {\n      swap(firstIdx, secondIdx, array);\n      firstIdx++;\n      secondIdx++;\n    } else if (value === secondValue) {\n      secondIdx++;\n    } else {\n      swap(secondIdx, thirdIdx, array);\n      thirdIdx -= 1;\n    }\n  }\n\n  return array;\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [1, 0, 0, -1, -1, 0, 1, 1];\n  const order = [0, 1, -1];\n  const expected = [0, 0, 0, 1, 1, 1, -1, -1];\n  const actual = program.threeNumberSort(array, order);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [1, 0, 0, -1, -1, 0, 1, 1];\n  const order = [0, 1, -1];\n  const expected = [0, 0, 0, 1, 1, 1, -1, -1];\n  const actual = program.threeNumberSort(array, order);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        0,
        0,
        -1,
        -1,
        0,
        1,
        1
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "order",
      "example": [
        0,
        1,
        -1
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "maxItems": 3,
        "minItems": 3,
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        0,
        0,
        -1,
        -1,
        0,
        1,
        1
      ],
      "order": [
        0,
        1,
        -1
      ]
    },
    {
      "array": [
        7,
        8,
        9,
        7,
        8,
        9,
        9,
        9,
        9,
        9,
        9,
        9
      ],
      "order": [
        8,
        7,
        9
      ]
    },
    {
      "array": [],
      "order": [
        0,
        7,
        9
      ]
    },
    {
      "array": [
        -2,
        -3,
        -3,
        -3,
        -3,
        -3,
        -2,
        -2,
        -3
      ],
      "order": [
        -2,
        -3,
        0
      ]
    },
    {
      "array": [
        0,
        10,
        10,
        10,
        10,
        10,
        25,
        25,
        25,
        25,
        25
      ],
      "order": [
        25,
        10,
        0
      ]
    },
    {
      "array": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "order": [
        4,
        5,
        6
      ]
    },
    {
      "array": [
        1,
        3,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        4,
        1,
        1,
        1,
        4,
        4,
        1,
        3,
        1,
        4,
        4
      ],
      "order": [
        1,
        4,
        3
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ],
      "order": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        1,
        2
      ],
      "order": [
        1,
        2,
        0
      ]
    },
    {
      "array": [
        7,
        7,
        7,
        11,
        11,
        7,
        11,
        7
      ],
      "order": [
        11,
        7,
        9
      ]
    },
    {
      "array": [
        9,
        9,
        9,
        7,
        9,
        7,
        9,
        9,
        7,
        9
      ],
      "order": [
        11,
        7,
        9
      ]
    },
    {
      "array": [
        9,
        9,
        9,
        7,
        9,
        7,
        9,
        9,
        7,
        9
      ],
      "order": [
        7,
        11,
        9
      ]
    },
    {
      "array": [
        1
      ],
      "order": [
        0,
        1,
        2
      ]
    },
    {
      "array": [
        0,
        1
      ],
      "order": [
        1,
        2,
        0
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        0,
        0,
        -1,
        -1,
        0,
        1,
        1
      ],
      "order": [
        0,
        1,
        -1
      ]
    },
    {
      "array": [
        7,
        8,
        9,
        7,
        8,
        9,
        9,
        9,
        9,
        9,
        9,
        9
      ],
      "order": [
        8,
        7,
        9
      ]
    },
    {
      "array": [],
      "order": [
        0,
        7,
        9
      ]
    },
    {
      "array": [
        -2,
        -3,
        -3,
        -3,
        -3,
        -3,
        -2,
        -2,
        -3
      ],
      "order": [
        -2,
        -3,
        0
      ]
    },
    {
      "array": [
        0,
        10,
        10,
        10,
        10,
        10,
        25,
        25,
        25,
        25,
        25
      ],
      "order": [
        25,
        10,
        0
      ]
    },
    {
      "array": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "order": [
        4,
        5,
        6
      ]
    },
    {
      "array": [
        1,
        3,
        4,
        4,
        4,
        4,
        3,
        3,
        3,
        4,
        1,
        1,
        1,
        4,
        4,
        1,
        3,
        1,
        4,
        4
      ],
      "order": [
        1,
        4,
        3
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ],
      "order": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        1,
        2
      ],
      "order": [
        1,
        2,
        0
      ]
    },
    {
      "array": [
        7,
        7,
        7,
        11,
        11,
        7,
        11,
        7
      ],
      "order": [
        11,
        7,
        9
      ]
    },
    {
      "array": [
        9,
        9,
        9,
        7,
        9,
        7,
        9,
        9,
        7,
        9
      ],
      "order": [
        11,
        7,
        9
      ]
    },
    {
      "array": [
        9,
        9,
        9,
        7,
        9,
        7,
        9,
        9,
        7,
        9
      ],
      "order": [
        7,
        11,
        9
      ]
    },
    {
      "array": [
        1
      ],
      "order": [
        0,
        1,
        2
      ]
    },
    {
      "array": [
        0,
        1
      ],
      "order": [
        1,
        2,
        0
      ]
    }
  ],
  "changelog": []
}