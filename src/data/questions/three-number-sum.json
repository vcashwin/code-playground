{
  "uid": "three-number-sum",
  "testStrategy": "JSON",
  "name": "Three Number Sum",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 82585,
    "failureCount": 33160
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225941849",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1295
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of distinct integers and an\n  integer representing a target sum. The function should find all triplets in\n  the array that sum up to the target sum and return a two-dimensional array of\n  all these triplets. The numbers in each triplet should be ordered in ascending\n  order, and the triplets themselves should be ordered in ascending order with\n  respect to the numbers they hold.\n</p>\n<p>\n  If no three numbers sum up to the target sum, the function should return an\n  empty array.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [12, 3, 1, 2, -6, 5, -8, 6]\n<span class=\"CodeEditor-promptParameter\">targetSum</span> = 0\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]]\n</pre>\n</div>",
  "hints": [
    "<p>\nUsing three for loops to calculate the sums of all possible triplets in the array would generate an algorithm that runs in O(n^3) time, where n is the length of the input array. Can you come up with something faster using only two for loops?\n</p>\n",
    "\n<p>\nTry sorting the array and traversing it once. At each number, place a left pointer on the number immediately to the right of your current number and a right pointer on the final number in the array. Check if the current number, the left number, and the right number sum up to the target sum. How can you proceed from there, remembering the fact that you sorted the array?\n</p>\n",
    "\n<p>\nSince the array is now sorted (see Hint #2), you know that moving the left pointer mentioned in Hint #2 one place to the right will lead to a greater left number and thus a greater sum. Similarly, you know that moving the right pointer one place to the left will lead to a smaller right number and thus a smaller sum. This means that, depending on the size of each triplet's (current number, left number, right number) sum relative to the target sum, you should either move the left pointer, the right pointer, or both to obtain a potentially valid triplet.\n</p>"
  ],
  "spaceTime": "O(n^2) time | O(n) space - where n is the length of the input array",
  "notes": "<div class=\"html\">\n<p class=\"CodeEditor-notesQuestion\">\n  The first step in the solution is to sort the input array. Why is the\n  <i>O(nlog(n))</i> runtime of the sorting step not reflected in the overall\n  time complexity of the algorithm?\n</p>\n<p>\n  The nested loops in the solution run in <i>O(n^2)</i> time; this dwarfs the\n  <i>O(nlog(n))</i> runtime of the sorting step and allows us to remove it from\n  the final time complexity of the algorithm.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> threeNumberSum(vector<int> array, int targetSum) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n^2) time | O(n) space\nvector<vector<int>> threeNumberSum(vector<int> array, int targetSum) {\n  sort(array.begin(), array.end());\n  vector<vector<int>> triplets;\n  for (int i = 0; i < array.size() - 2; i++) {\n    int left = i + 1;\n    int right = array.size() - 1;\n    while (left < right) {\n      int currentSum = array[i] + array[left] + array[right];\n      if (currentSum == targetSum) {\n        triplets.push_back({array[i], array[left], array[right]});\n        left++;\n        right--;\n      } else if (currentSum < targetSum) {\n        left++;\n      } else if (currentSum > targetSum) {\n        right--;\n      }\n    }\n  }\n  return triplets;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> expected{{-8, 2, 6}, {-8, 3, 5}, {-6, 1, 5}};\n      assert(threeNumberSum({12, 3, 1, 2, -6, 5, -8, 6}, 0) == expected);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> expected{{-8, 2, 6}, {-8, 3, 5}, {-6, 1, 5}};\n      assert(threeNumberSum({12, 3, 1, 2, -6, 5, -8, 6}, 0) == expected);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<int[]> ThreeNumberSum(int[] array, int targetSum) {\n    // Write your code here.\n    return new List<int[]>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^2) time | O(n) space\n  public static List<int[]> ThreeNumberSum(int[] array, int targetSum) {\n    Array.Sort(array);\n    List<int[]> triplets = new List<int[]>();\n    for (int i = 0; i < array.Length - 2; i++) {\n      int left = i + 1;\n      int right = array.Length - 1;\n      while (left < right) {\n        int currentSum = array[i] + array[left] + array[right];\n        if (currentSum == targetSum) {\n          int[] newTriplet = { array[i], array[left], array[right] };\n          triplets.Add(newTriplet);\n          left++;\n          right--;\n        } else if (currentSum < targetSum) {\n          left++;\n        } else if (currentSum > targetSum) {\n          right--;\n        }\n      }\n    }\n    return triplets;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  private bool compare(List<int[]> triplets1, List<int[]> triplets2) {\n    if (triplets1.Count != triplets2.Count) return false;\n    for (int i = 0; i < triplets1.Count; i++) {\n      if (!Enumerable.SequenceEqual(triplets1[i], triplets2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  [Test]\n  public void TestCase1() {\n    List<int[]> expected = new List<int[]>();\n    expected.Add(new int[] { -8, 2, 6 });\n    expected.Add(new int[] { -8, 3, 5 });\n    expected.Add(new int[] { -6, 1, 5 });\n    List<int[]> output =\n      Program.ThreeNumberSum(new int[] { 12, 3, 1, 2, -6, 5, -8, 6 }, 0);\n    Utils.AssertTrue(this.compare(output, expected));\n  }\n}\n",
      "unitTests": "using System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  private bool compare(List<int[]> triplets1, List<int[]> triplets2) {\n    if (triplets1.Count != triplets2.Count) return false;\n    for (int i = 0; i < triplets1.Count; i++) {\n      if (!Enumerable.SequenceEqual(triplets1[i], triplets2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  [Test]\n  public void TestCase1() {\n    List<int[]> expected = new List<int[]>();\n    expected.Add(new int[] { -8, 2, 6 });\n    expected.Add(new int[] { -8, 3, 5 });\n    expected.Add(new int[] { -6, 1, 5 });\n    List<int[]> output =\n      Program.ThreeNumberSum(new int[] { 12, 3, 1, 2, -6, 5, -8, 6 }, 0);\n    Utils.AssertTrue(this.compare(output, expected));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ThreeNumberSum(array []int, target int) [][]int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"sort\"\n\n// O(n^2) time | O(n) space\nfunc ThreeNumberSum(array []int, target int) [][]int {\n\tsort.Ints(array)\n\ttriplets := [][]int{}\n\tfor i := 0; i < len(array)-2; i++ {\n\t\tleft, right := i+1, len(array)-1\n\t\tfor left < right {\n\t\t\tcurrentSum := array[i] + array[left] + array[right]\n\t\t\tif currentSum == target {\n\t\t\t\ttriplets = append(triplets, []int{array[i], array[left], array[right]})\n\t\t\t\tleft += 1\n\t\t\t\tright -= 1\n\t\t\t} else if currentSum < target {\n\t\t\t\tleft += 1\n\t\t\t} else if currentSum > target {\n\t\t\t\tright -= 1\n\t\t\t}\n\t\t}\n\t}\n\treturn triplets\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := [][]int{{-8, 2, 6}, {-8, 3, 5}, {-6, 1, 5}}\n\toutput := ThreeNumberSum([]int{12, 3, 1, 2, -6, 5, -8, 6}, 0)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := [][]int{{-8, 2, 6}, {-8, 3, 5}, {-6, 1, 5}}\n\toutput := ThreeNumberSum([]int{12, 3, 1, 2, -6, 5, -8, 6}, 0)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<Integer[]> threeNumberSum(int[] array, int targetSum) {\n    // Write your code here.\n    return new ArrayList<Integer[]>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static List<Integer[]> threeNumberSum(int[] array, int targetSum) {\n    Arrays.sort(array);\n    List<Integer[]> triplets = new ArrayList<Integer[]>();\n    for (int i = 0; i < array.length - 2; i++) {\n      int left = i + 1;\n      int right = array.length - 1;\n      while (left < right) {\n        int currentSum = array[i] + array[left] + array[right];\n        if (currentSum == targetSum) {\n          Integer[] newTriplet = {array[i], array[left], array[right]};\n          triplets.add(newTriplet);\n          left++;\n          right--;\n        } else if (currentSum < targetSum) {\n          left++;\n        } else if (currentSum > targetSum) {\n          right--;\n        }\n      }\n    }\n    return triplets;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  private boolean compare(\n    List<Integer[]> triplets1, List<Integer[]> triplets2\n  ) {\n    if (triplets1.size() != triplets2.size()) return false;\n    for (int i = 0; i < triplets1.size(); i++) {\n      if (!Arrays.equals(triplets1.get(i), triplets2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Test\n  public void TestCase1() {\n    List<Integer[]> expected = new ArrayList<Integer[]>();\n    expected.add(new Integer[] {-8, 2, 6});\n    expected.add(new Integer[] {-8, 3, 5});\n    expected.add(new Integer[] {-6, 1, 5});\n    List<Integer[]> output =\n      Program.threeNumberSum(new int[] {12, 3, 1, 2, -6, 5, -8, 6}, 0);\n    Utils.assertTrue(this.compare(output, expected));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  private boolean compare(\n    List<Integer[]> triplets1, List<Integer[]> triplets2\n  ) {\n    if (triplets1.size() != triplets2.size()) return false;\n    for (int i = 0; i < triplets1.size(); i++) {\n      if (!Arrays.equals(triplets1.get(i), triplets2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Test\n  public void TestCase1() {\n    List<Integer[]> expected = new ArrayList<Integer[]>();\n    expected.add(new Integer[] {-8, 2, 6});\n    expected.add(new Integer[] {-8, 3, 5});\n    expected.add(new Integer[] {-6, 1, 5});\n    List<Integer[]> output =\n      Program.threeNumberSum(new int[] {12, 3, 1, 2, -6, 5, -8, 6}, 0);\n    Utils.assertTrue(this.compare(output, expected));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function threeNumberSum(array, targetSum) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.threeNumberSum = threeNumberSum;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction threeNumberSum(array, targetSum) {\n  array.sort((a, b) => a - b);\n  const triplets = [];\n  for (let i = 0; i < array.length - 2; i++) {\n    let left = i + 1;\n    let right = array.length - 1;\n    while (left < right) {\n      const currentSum = array[i] + array[left] + array[right];\n      if (currentSum === targetSum) {\n        triplets.push([array[i], array[left], array[right]]);\n        left++;\n        right--;\n      } else if (currentSum < targetSum) {\n        left++;\n      } else if (currentSum > targetSum) {\n        right--;\n      }\n    }\n  }\n  return triplets;\n}\n\nexports.threeNumberSum = threeNumberSum;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.threeNumberSum([12, 3, 1, 2, -6, 5, -8, 6], 0)).to.deep.equal([\n    [-8, 2, 6],\n    [-8, 3, 5],\n    [-6, 1, 5],\n  ]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.threeNumberSum([12, 3, 1, 2, -6, 5, -8, 6], 0)).to.deep.equal([\n    [-8, 2, 6],\n    [-8, 3, 5],\n    [-6, 1, 5],\n  ]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun threeNumberSum(array: MutableList<Int>, targetSum: Int): List<List<Int>> {\n    // Write your code here\n    return listOf<List<Int>>()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space\nfun threeNumberSum(array: MutableList<Int>, targetSum: Int): List<List<Int>> {\n    array.sort()\n    val triplets = mutableListOf<MutableList<Int>>()\n    for (i in 0 until array.size - 2) {\n        var left = i + 1\n        var right = array.size - 1\n        while (left < right) {\n            val currentSum = array[i] + array[left] + array[right]\n            if (currentSum == targetSum) {\n                triplets.add(mutableListOf(array[i], array[left], array[right]))\n                left++\n                right--\n            } else if (currentSum < targetSum) {\n                left++\n            } else if (currentSum > targetSum) {\n                right--\n            }\n        }\n    }\n    return triplets\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.threeNumberSum as threeNumberSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = threeNumberSum(mutableListOf<Int>(12, 3, 1, 2, -6, 5, -8, 6), 0)\n        val expected = listOf<List<Int>>(\n            listOf<Int>(-8, 2, 6),\n            listOf<Int>(-8, 3, 5),\n            listOf<Int>(-6, 1, 5),\n        )\n        assert(expected.equals(output))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.threeNumberSum as threeNumberSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = threeNumberSum(mutableListOf<Int>(12, 3, 1, 2, -6, 5, -8, 6), 0)\n        val expected = listOf<List<Int>>(\n            listOf<Int>(-8, 2, 6),\n            listOf<Int>(-8, 3, 5),\n            listOf<Int>(-6, 1, 5),\n        )\n        assert(expected.equals(output))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def threeNumberSum(array, targetSum):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef threeNumberSum(array, targetSum):\n    array.sort()\n    triplets = []\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            currentSum = array[i] + array[left] + array[right]\n            if currentSum == targetSum:\n                triplets.append([array[i], array[left], array[right]])\n                left += 1\n                right -= 1\n            elif currentSum < targetSum:\n                left += 1\n            elif currentSum > targetSum:\n                right -= 1\n    return triplets\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.threeNumberSum([12, 3, 1, 2, -6, 5, -8, 6], 0),\n            [[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]],\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.threeNumberSum([12, 3, 1, 2, -6, 5, -8, 6], 0),\n            [[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]],\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def threeNumberSum(array, targetSum)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def threeNumberSum(array, targetSum)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.threeNumberSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.threeNumberSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func threeNumberSum(array: inout [Int], targetSum: Int) -> [[Int]] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space\n  func threeNumberSum(array: inout [Int], targetSum: Int) -> [[Int]] {\n    array.sort()\n\n    var triplets: [[Int]] = []\n\n    for i in 0 ..< array.count - 2 {\n      var left = i + 1\n      var right = array.count - 1\n\n      while left < right {\n        let currentSum = array[i] + array[left] + array[right]\n\n        if currentSum == targetSum {\n          triplets.append([array[i], array[left], array[right]])\n\n          left = left + 1\n          right = right - 1\n        } else if currentSum < targetSum {\n          left = left + 1\n        } else if currentSum > targetSum {\n          right = right - 1\n        }\n      }\n    }\n    return triplets\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [12, 3, 1, 2, -6, 5, -8, 6]\n      let threeNumberSumResult = program.threeNumberSum(array: &array, targetSum: 0)\n      try assertEqual([[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]], threeNumberSumResult)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [12, 3, 1, 2, -6, 5, -8, 6]\n      let threeNumberSumResult = program.threeNumberSum(array: &array, targetSum: 0)\n      try assertEqual([[-8, 2, 6], [-8, 3, 5], [-6, 1, 5]], threeNumberSumResult)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "type Triplet = [number, number, number];\n\nexport function threeNumberSum(array: number[], targetSum: number): Triplet[] {\n  // Write your code here.\n  return [[-1, -1, -1]];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ntype Triplet = [number, number, number];\n\n// O(n^2) time | O(n) space\nexport function threeNumberSum(array: number[], targetSum: number) {\n  array.sort((a, b) => a - b);\n  const triplets: Triplet[] = [];\n  for (let i = 0; i < array.length - 2; i++) {\n    let left = i + 1;\n    let right = array.length - 1;\n    while (left < right) {\n      const currentSum = array[i] + array[left] + array[right];\n      if (currentSum === targetSum) {\n        triplets.push([array[i], array[left], array[right]]);\n        left++;\n        right--;\n      } else if (currentSum < targetSum) {\n        left++;\n      } else if (currentSum > targetSum) {\n        right--;\n      }\n    }\n  }\n  return triplets;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.threeNumberSum([12, 3, 1, 2, -6, 5, -8, 6], 0)).to.deep.equal([\n    [-8, 2, 6],\n    [-8, 3, 5],\n    [-6, 1, 5],\n  ]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.threeNumberSum([12, 3, 1, 2, -6, 5, -8, 6], 0)).to.deep.equal([\n    [-8, 2, 6],\n    [-8, 3, 5],\n    [-6, 1, 5],\n  ]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        12,
        3,
        1,
        2,
        -6,
        5,
        -8,
        6
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array",
        "uniqueItems": true
      }
    },
    {
      "name": "targetSum",
      "example": 0,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        -8,
        6
      ],
      "targetSum": 0
    },
    {
      "array": [
        1,
        2,
        3
      ],
      "targetSum": 6
    },
    {
      "array": [
        1,
        2,
        3
      ],
      "targetSum": 7
    },
    {
      "array": [
        8,
        10,
        -2,
        49,
        14
      ],
      "targetSum": 57
    },
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        0,
        -8,
        -1
      ],
      "targetSum": 0
    },
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        0,
        -8,
        -1,
        6
      ],
      "targetSum": 0
    },
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        0,
        -8,
        -1,
        6,
        -5
      ],
      "targetSum": 0
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 18
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 32
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 33
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 5
    }
  ],
  "jsonTests": [
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        -8,
        6
      ],
      "targetSum": 0
    },
    {
      "array": [
        1,
        2,
        3
      ],
      "targetSum": 6
    },
    {
      "array": [
        1,
        2,
        3
      ],
      "targetSum": 7
    },
    {
      "array": [
        8,
        10,
        -2,
        49,
        14
      ],
      "targetSum": 57
    },
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        0,
        -8,
        -1
      ],
      "targetSum": 0
    },
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        0,
        -8,
        -1,
        6
      ],
      "targetSum": 0
    },
    {
      "array": [
        12,
        3,
        1,
        2,
        -6,
        5,
        0,
        -8,
        -1,
        6,
        -5
      ],
      "targetSum": 0
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 18
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 32
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 33
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 5
    }
  ],
  "changelog": []
}