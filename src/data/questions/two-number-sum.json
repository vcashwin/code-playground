{
  "uid": "two-number-sum",
  "testStrategy": "JSON",
  "name": "Two Number Sum",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Arrays",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 178535,
    "failureCount": 139267
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "229483089",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1159
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of distinct integers and an\n  integer representing a target sum. If any two numbers in the input array sum\n  up to the target sum, the function should return them in an array, in any\n  order. If no two numbers sum up to the target sum, the function should return\n  an empty array.\n</p>\n<p>\n  Note that the target sum has to be obtained by summing two different integers\n  in the array; you can't add a single integer to itself in order to obtain the\n  target sum.\n</p>\n<p>\n  You can assume that there will be at most one pair of numbers summing up to\n  the target sum.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [3, 5, -4, 8, 11, 1, -1, 6]\n<span class=\"CodeEditor-promptParameter\">targetSum</span> = 10\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[-1, 11] <span class=\"CodeEditor-promptComment\">// the numbers could be in reverse order</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry using two for loops to sum all possible pairs of numbers in the input array. What are the time and space implications of this approach?\n</p>\n",
    "\n<p>\nRealize that for every number X in the input array, you are essentially trying to find a corresponding number Y such that X + Y = targetSum. With two variables in this equation known to you, it shouldn't be hard to solve for Y.\n</p>\n",
    "\n<p>\nTry storing every number in a hash table, solving the equation mentioned in Hint #2 for every number, and checking if the Y that you find is stored in the hash table. What are the time and space implications of this approach?\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> twoNumberSum(vector<int> array, int targetSum) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n^2) time | O(1) space\nvector<int> twoNumberSum(vector<int> array, int targetSum) {\n  for (int i = 0; i < array.size() - 1; i++) {\n    int firstNum = array[i];\n    for (int j = i + 1; j < array.size(); j++) {\n      int secondNum = array[j];\n      if (firstNum + secondNum == targetSum) {\n        return vector<int>{firstNum, secondNum};\n      }\n    }\n  }\n  return {};\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_set>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space\nvector<int> twoNumberSum(vector<int> array, int targetSum) {\n  unordered_set<int> nums;\n  for (int num : array) {\n    int potentialMatch = targetSum - num;\n    if (nums.find(potentialMatch) != nums.end()) {\n      return vector<int>{potentialMatch, num};\n    } else {\n      nums.insert(num);\n    }\n  }\n  return {};\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(nlog(n)) | O(1) space\nvector<int> twoNumberSum(vector<int> array, int targetSum) {\n  sort(array.begin(), array.end());\n  int left = 0;\n  int right = array.size() - 1;\n  while (left < right) {\n    int currentSum = array[left] + array[right];\n    if (currentSum == targetSum) {\n      return {array[left], array[right]};\n    } else if (currentSum < targetSum) {\n      left++;\n    } else if (currentSum > targetSum) {\n      right--;\n    }\n  }\n  return {};\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing namespace std;\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> output = twoNumberSum({3, 5, -4, 8, 11, 1, -1, 6}, 10);\n      assert(output.size() == 2);\n      assert(count(output.begin(), output.end(), -1));\n      assert(count(output.begin(), output.end(), 11));\n    });\n  }\n};\n",
      "unitTests": "using namespace std;\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> output = twoNumberSum({3, 5, -4, 8, 11, 1, -1, 6}, 10);\n      assert(output.size() == 2);\n      assert(count(output.begin(), output.end(), -1));\n      assert(count(output.begin(), output.end(), 11));\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] TwoNumberSum(int[] array, int targetSum) {\n    // Write your code here.\n    return new int[0];\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n^2) time | O(1) space\n  public static int[] TwoNumberSum(int[] array, int targetSum) {\n    for (int i = 0; i < array.Length - 1; i++) {\n      int firstNum = array[i];\n      for (int j = i + 1; j < array.Length; j++) {\n        int secondNum = array[j];\n        if (firstNum + secondNum == targetSum) {\n          return new int[] { firstNum, secondNum };\n        }\n      }\n    }\n    return new int[0];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(n) space\n  public static int[] TwoNumberSum(int[] array, int targetSum) {\n    HashSet<int> nums = new HashSet<int>();\n    foreach (int num in array) {\n      int potentialMatch = targetSum - num;\n      if (nums.Contains(potentialMatch)) {\n        return new int[] { potentialMatch, num };\n      } else {\n        nums.Add(num);\n      }\n    }\n    return new int[0];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nlog(n)) | O(1) space\n  public static int[] TwoNumberSum(int[] array, int targetSum) {\n    Array.Sort(array);\n    int left = 0;\n    int right = array.Length - 1;\n    while (left < right) {\n      int currentSum = array[left] + array[right];\n      if (currentSum == targetSum) {\n        return new int[] { array[left], array[right] };\n      } else if (currentSum < targetSum) {\n        left++;\n      } else if (currentSum > targetSum) {\n        right--;\n      }\n    }\n    return new int[0];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] output =\n      Program.TwoNumberSum(new int[] { 3, 5, -4, 8, 11, 1, -1, 6 }, 10);\n    Utils.AssertTrue(output.Length == 2);\n    Utils.AssertTrue(Array.Exists(output, e => e == -1));\n    Utils.AssertTrue(Array.Exists(output, e => e == 11));\n  }\n}\n",
      "unitTests": "using System;\nusing System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] output =\n      Program.TwoNumberSum(new int[] { 3, 5, -4, 8, 11, 1, -1, 6 }, 10);\n    Utils.AssertTrue(output.Length == 2);\n    Utils.AssertTrue(Array.Exists(output, e => e == -1));\n    Utils.AssertTrue(Array.Exists(output, e => e == 11));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc TwoNumberSum(array []int, target int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(1) space\nfunc TwoNumberSum(array []int, target int) []int {\n\tfor i := 0; i < len(array)-1; i++ {\n\t\tfirstNum := array[i]\n\t\tfor j := i + 1; j < len(array); j++ {\n\t\t\tsecondNum := array[j]\n\t\t\tif firstNum+secondNum == target {\n\t\t\t\treturn []int{firstNum, secondNum}\n\t\t\t}\n\t\t}\n\t}\n\treturn []int{}\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space\nfunc TwoNumberSum(array []int, target int) []int {\n\tnums := map[int]bool{}\n\tfor _, num := range array {\n\t\tpotentialMatch := target - num\n\t\tif _, found := nums[potentialMatch]; found {\n\t\t\treturn []int{potentialMatch, num}\n\t\t}\n\t\tnums[num] = true\n\t}\n\treturn []int{}\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"sort\"\n\n// O(nlog(n)) time | O(1) space\nfunc TwoNumberSum(array []int, target int) []int {\n\tsort.Ints(array)\n\tleft, right := 0, len(array)-1\n\tfor left < right {\n\t\tcurrentSum := array[left] + array[right]\n\t\tif currentSum == target {\n\t\t\treturn []int{array[left], array[right]}\n\t\t} else if currentSum < target {\n\t\t\tleft += 1\n\t\t} else {\n\t\t\tright -= 1\n\t\t}\n\t}\n\treturn []int{}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{-1, 11}\n\toutput := TwoNumberSum([]int{3, 5, -4, 8, 11, 1, -1, 6}, 10)\n\trequire.ElementsMatch(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{-1, 11}\n\toutput := TwoNumberSum([]int{3, 5, -4, 8, 11, 1, -1, 6}, 10)\n\trequire.ElementsMatch(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] twoNumberSum(int[] array, int targetSum) {\n    // Write your code here.\n    return new int[0];\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space\n  public static int[] twoNumberSum(int[] array, int targetSum) {\n    for (int i = 0; i < array.length - 1; i++) {\n      int firstNum = array[i];\n      for (int j = i + 1; j < array.length; j++) {\n        int secondNum = array[j];\n        if (firstNum + secondNum == targetSum) {\n          return new int[] {firstNum, secondNum};\n        }\n      }\n    }\n    return new int[0];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space\n  public static int[] twoNumberSum(int[] array, int targetSum) {\n    Set<Integer> nums = new HashSet<>();\n    for (int num : array) {\n      int potentialMatch = targetSum - num;\n      if (nums.contains(potentialMatch)) {\n        return new int[] {potentialMatch, num};\n      } else {\n        nums.add(num);\n      }\n    }\n    return new int[0];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.Arrays;\n\nclass Program {\n  // O(nlog(n)) | O(1) space\n  public static int[] twoNumberSum(int[] array, int targetSum) {\n    Arrays.sort(array);\n    int left = 0;\n    int right = array.length - 1;\n    while (left < right) {\n      int currentSum = array[left] + array[right];\n      if (currentSum == targetSum) {\n        return new int[] {array[left], array[right]};\n      } else if (currentSum < targetSum) {\n        left++;\n      } else if (currentSum > targetSum) {\n        right--;\n      }\n    }\n    return new int[0];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] output =\n      Program.twoNumberSum(new int[] {3, 5, -4, 8, 11, 1, -1, 6}, 10);\n    Utils.assertTrue(output.length == 2);\n    Utils.assertTrue(contains(output, -1));\n    Utils.assertTrue(contains(output, 11));\n  }\n\n  public boolean contains(int[] output, int val) {\n    for (var el : output) {\n      if (el == val) return true;\n    }\n    return false;\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] output =\n      Program.twoNumberSum(new int[] {3, 5, -4, 8, 11, 1, -1, 6}, 10);\n    Utils.assertTrue(output.length == 2);\n    Utils.assertTrue(contains(output, -1));\n    Utils.assertTrue(contains(output, 11));\n  }\n\n  public boolean contains(int[] output, int val) {\n    for (var el : output) {\n      if (el == val) return true;\n    }\n    return false;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function twoNumberSum(array, targetSum) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.twoNumberSum = twoNumberSum;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space\nfunction twoNumberSum(array, targetSum) {\n  for (let i = 0; i < array.length - 1; i++) {\n    const firstNum = array[i];\n    for (let j = i + 1; j < array.length; j++) {\n      const secondNum = array[j];\n      if (firstNum + secondNum === targetSum) {\n        return [firstNum, secondNum];\n      }\n    }\n  }\n  return [];\n}\n\nexports.twoNumberSum = twoNumberSum;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nfunction twoNumberSum(array, targetSum) {\n  const nums = {};\n  for (const num of array) {\n    const potentialMatch = targetSum - num;\n    if (potentialMatch in nums) {\n      return [potentialMatch, num];\n    } else {\n      nums[num] = true;\n    }\n  }\n  return [];\n}\n\nexports.twoNumberSum = twoNumberSum;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) | O(1) space\nfunction twoNumberSum(array, targetSum) {\n  array.sort((a, b) => a - b);\n  let left = 0;\n  let right = array.length - 1;\n  while (left < right) {\n    const currentSum = array[left] + array[right];\n    if (currentSum === targetSum) {\n      return [array[left], array[right]];\n    } else if (currentSum < targetSum) {\n      left++;\n    } else if (currentSum > targetSum) {\n      right--;\n    }\n  }\n  return [];\n}\n\nexports.twoNumberSum = twoNumberSum;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10);\n  chai.expect(output.length === 2).to.deep.equal(true);\n  chai.expect(output.includes(11)).to.deep.equal(true);\n  chai.expect(output.includes(-1)).to.deep.equal(true);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10);\n  chai.expect(output.length === 2).to.deep.equal(true);\n  chai.expect(output.includes(11)).to.deep.equal(true);\n  chai.expect(output.includes(-1)).to.deep.equal(true);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun twoNumberSum(array: MutableList<Int>, targetSum: Int): List<Int> {\n    // Write your code here.\n    return listOf<Int>()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(1) space\nfun twoNumberSum(array: MutableList<Int>, targetSum: Int): List<Int> {\n    for (i in 0 until array.size - 1) {\n        val firstNum = array[i]\n        for (j in i + 1 until array.size) {\n            val secondNum = array[j]\n            if (firstNum + secondNum == targetSum) {\n                return listOf<Int>(firstNum, secondNum)\n            }\n        }\n    }\n    return listOf<Int>()\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space\nfun twoNumberSum(array: MutableList<Int>, targetSum: Int): List<Int> {\n    val nums = mutableMapOf<Int, Boolean>()\n    for (num in array) {\n        val potentialMatch = targetSum - num\n        if (nums.containsKey(potentialMatch)) {\n            return listOf<Int>(potentialMatch, num)\n        } else {\n            nums[num] = true\n        }\n    }\n    return listOf<Int>()\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nlog(n)) | O(1) space\nfun twoNumberSum(array: MutableList<Int>, targetSum: Int): List<Int> {\n    array.sort()\n    var left = 0\n    var right = array.size - 1\n    while (left < right) {\n        val currentSum = array[left] + array[right]\n        if (currentSum == targetSum) {\n            return listOf<Int>(array[left], array[right])\n        } else if (currentSum < targetSum) {\n            left++\n        } else if (currentSum > targetSum) {\n            right--\n        }\n    }\n    return listOf<Int>()\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.twoNumberSum as twoNumberSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = twoNumberSum(mutableListOf<Int>(3, 5, -4, 8, 11, 1, -1, 6), 10)\n        assert(output.size == 2)\n        assert(output.contains(11))\n        assert(output.contains(-1))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.twoNumberSum as twoNumberSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = twoNumberSum(mutableListOf<Int>(3, 5, -4, 8, 11, 1, -1, 6), 10)\n        assert(output.size == 2)\n        assert(output.contains(11))\n        assert(output.contains(-1))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def twoNumberSum(array, targetSum):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(1) space\ndef twoNumberSum(array, targetSum):\n    for i in range(len(array) - 1):\n        firstNum = array[i]\n        for j in range(i + 1, len(array)):\n            secondNum = array[j]\n            if firstNum + secondNum == targetSum:\n                return [firstNum, secondNum]\n    return []\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space\ndef twoNumberSum(array, targetSum):\n    nums = {}\n    for num in array:\n        potentialMatch = targetSum - num\n        if potentialMatch in nums:\n            return [potentialMatch, num]\n        else:\n            nums[num] = True\n    return []\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlog(n)) | O(1) space\ndef twoNumberSum(array, targetSum):\n    array.sort()\n    left = 0\n    right = len(array) - 1\n    while left < right:\n        currentSum = array[left] + array[right]\n        if currentSum == targetSum:\n            return [array[left], array[right]]\n        elif currentSum < targetSum:\n            left += 1\n        elif currentSum > targetSum:\n            right -= 1\n    return []\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10)\n        self.assertTrue(len(output) == 2)\n        self.assertTrue(11 in output)\n        self.assertTrue(-1 in output)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10)\n        self.assertTrue(len(output) == 2)\n        self.assertTrue(11 in output)\n        self.assertTrue(-1 in output)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def twoNumberSum(array, targetSum)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def twoNumberSum(array, targetSum)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def twoNumberSum(array, targetSum)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def twoNumberSum(array, targetSum)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.twoNumberSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.twoNumberSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func twoNumberSum(_ array: inout [Int], _ targetSum: Int) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space\n  func twoNumberSum(_ array: inout [Int], _ targetSum: Int) -> [Int] {\n    for i in 0 ..< array.count - 1 {\n      let firstNumber = array[i]\n\n      for j in i + 1 ..< array.count {\n        let secondNumber = array[j]\n\n        if firstNumber + secondNumber == targetSum {\n          return [firstNumber, secondNumber]\n        }\n      }\n    }\n\n    return []\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func twoNumberSum(_ array: inout [Int], _ targetSum: Int) -> [Int] {\n    var numbersHashMap = [Int: Bool]()\n\n    for number in array {\n      let potentialMatch = targetSum - number\n\n      if let exists = numbersHashMap[potentialMatch], exists {\n        return [potentialMatch, number]\n      } else {\n        numbersHashMap[number] = true\n      }\n    }\n\n    return []\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlog(n)) time | O(1) space\n  func twoNumberSum(_ array: inout [Int], _ targetSum: Int) -> [Int] {\n    array.sort()\n\n    var leftPointer = 0\n    var rightPointer = array.count - 1\n\n    while leftPointer < rightPointer {\n      let leftMost = array[leftPointer]\n      let rightMost = array[rightPointer]\n\n      let currentSum = leftMost + rightMost\n\n      if currentSum == targetSum {\n        return [leftMost, rightMost]\n      } else if currentSum < targetSum {\n        leftPointer = leftPointer + 1\n      } else if currentSum > targetSum {\n        rightPointer = rightPointer - 1\n      }\n    }\n\n    return []\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [3, 5, -4, 8, 11, 1, -1, 6]\n      var actual = program.twoNumberSum(&array, 10)\n      try assert(actual.count == 2)\n      try assert(actual.contains(-1))\n      try assert(actual.contains(11))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var array = [3, 5, -4, 8, 11, 1, -1, 6]\n      var actual = program.twoNumberSum(&array, 10)\n      try assert(actual.count == 2)\n      try assert(actual.contains(-1))\n      try assert(actual.contains(11))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function twoNumberSum(array: number[], targetSum: number) {\n  // Write your code here.\n  return [-1, -1];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space\nexport function twoNumberSum(array: number[], targetSum: number) {\n  for (let i = 0; i < array.length - 1; i++) {\n    const firstNum = array[i];\n    for (let j = i + 1; j < array.length; j++) {\n      const secondNum = array[j];\n      if (firstNum + secondNum === targetSum) {\n        return [firstNum, secondNum];\n      }\n    }\n  }\n  return [];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nexport function twoNumberSum(array: number[], targetSum: number) {\n  const nums: {[key: number]: boolean} = {};\n  for (const num of array) {\n    const potentialMatch = targetSum - num;\n    if (potentialMatch in nums) {\n      return [potentialMatch, num];\n    } else {\n      nums[num] = true;\n    }\n  }\n  return [];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) | O(1) space\nexport function twoNumberSum(array: number[], targetSum: number) {\n  array.sort((a, b) => a - b);\n  let left = 0;\n  let right = array.length - 1;\n  while (left < right) {\n    const currentSum = array[left] + array[right];\n    if (currentSum === targetSum) {\n      return [array[left], array[right]];\n    } else if (currentSum < targetSum) {\n      left++;\n    } else if (currentSum > targetSum) {\n      right--;\n    }\n  }\n  return [];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10);\n  chai.expect(output.length === 2).to.deep.equal(true);\n  chai.expect(output.includes(11)).to.deep.equal(true);\n  chai.expect(output.includes(-1)).to.deep.equal(true);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10);\n  chai.expect(output.length === 2).to.deep.equal(true);\n  chai.expect(output.includes(11)).to.deep.equal(true);\n  chai.expect(output.includes(-1)).to.deep.equal(true);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        3,
        5,
        -4,
        8,
        11,
        1,
        -1,
        6
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array",
        "uniqueItems": true
      }
    },
    {
      "name": "targetSum",
      "example": 10,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        3,
        5,
        -4,
        8,
        11,
        1,
        -1,
        6
      ],
      "targetSum": 10
    },
    {
      "array": [
        4,
        6
      ],
      "targetSum": 10
    },
    {
      "array": [
        4,
        6,
        1
      ],
      "targetSum": 5
    },
    {
      "array": [
        4,
        6,
        1,
        -3
      ],
      "targetSum": 3
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "targetSum": 17
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 18
    },
    {
      "array": [
        -7,
        -5,
        -3,
        -1,
        0,
        1,
        3,
        5,
        7
      ],
      "targetSum": -5
    },
    {
      "array": [
        -21,
        301,
        12,
        4,
        65,
        56,
        210,
        356,
        9,
        -47
      ],
      "targetSum": 163
    },
    {
      "array": [
        -21,
        301,
        12,
        4,
        65,
        56,
        210,
        356,
        9,
        -47
      ],
      "targetSum": 164
    },
    {
      "array": [
        3,
        5,
        -4,
        8,
        11,
        1,
        -1,
        6
      ],
      "targetSum": 15
    },
    {
      "array": [
        14
      ],
      "targetSum": 15
    },
    {
      "array": [
        15
      ],
      "targetSum": 15
    }
  ],
  "jsonTests": [
    {
      "array": [
        3,
        5,
        -4,
        8,
        11,
        1,
        -1,
        6
      ],
      "targetSum": 10
    },
    {
      "array": [
        4,
        6
      ],
      "targetSum": 10
    },
    {
      "array": [
        4,
        6,
        1
      ],
      "targetSum": 5
    },
    {
      "array": [
        4,
        6,
        1,
        -3
      ],
      "targetSum": 3
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "targetSum": 17
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        15
      ],
      "targetSum": 18
    },
    {
      "array": [
        -7,
        -5,
        -3,
        -1,
        0,
        1,
        3,
        5,
        7
      ],
      "targetSum": -5
    },
    {
      "array": [
        -21,
        301,
        12,
        4,
        65,
        56,
        210,
        356,
        9,
        -47
      ],
      "targetSum": 163
    },
    {
      "array": [
        -21,
        301,
        12,
        4,
        65,
        56,
        210,
        356,
        9,
        -47
      ],
      "targetSum": 164
    },
    {
      "array": [
        3,
        5,
        -4,
        8,
        11,
        1,
        -1,
        6
      ],
      "targetSum": 15
    },
    {
      "array": [
        14
      ],
      "targetSum": 15
    },
    {
      "array": [
        15
      ],
      "targetSum": 15
    }
  ],
  "changelog": []
}