{
  "uid": "underscorify-substring",
  "testStrategy": "JSON",
  "name": "Underscorify Substring",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Strings",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 7871,
    "failureCount": 3110
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "226841994",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2434
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in two strings: a main string and a potential\n  substring of the main string. The function should return a version of the main\n  string with every instance of the substring in it wrapped between underscores.\n</p>\n<p>\n  If two or more instances of the substring in the main string overlap each\n  other or sit side by side, the underscores relevant to these substrings should\n  only appear on the far left of the leftmost substring and on the far right of\n  the rightmost substring. If the main string doesn't contain the other string\n  at all, the function should return the main string intact.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"testthis is a testtest to see if testestest it works\"\n<span class=\"CodeEditor-promptParameter\">substring</span> = \"test\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"_test_this is a _testtest_ to see if _testestest_ it works\"\n</pre>\n</div>",
  "hints": [
    "<p>\nThe first thing you need to do to solve this question is to get the locations of all instances of the substring in the main string. Try traversing the main string one character at a time and calling whatever substring-matching function is built into the language you're working in. Store a 2D array of locations, where each subarray holds the starting and ending indices of a specific instance of the substring in the main string.\n</p>\n",
    "\n<p>\nThe second thing you need to do is to \"collapse\" the 2D array mentioned in Hint #1. In essence, you need to merge the locations of substrings that overlap each other or sit next to each other. Traverse the 2D array mentioned in Hint #1 and build a new 2D array that holds these \"collapsed\" locations.\n</p>\n",
    "\n<p>\nFinally, you need to create a new string with underscores added in the correct positions. Construct this new string by traversing the main string and the 2D array mentioned in Hint #2 at the same time. You might have to keep track of when you are \"in between\" underscores in order to correctly traverse the 2D array.\n</p>"
  ],
  "spaceTime": "Average case: O(n + m) | O(n) space - where n is the length of the main string and m is the length of the substring",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nstring underscorifySubstring(string str, string subStr) {\n  // Write your code here.\n  return \"\";\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <numeric>\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> getLocations(string str, string subStr);\nvector<vector<int>> collapse(vector<vector<int>> locations);\nstring underscorify(string str, vector<vector<int>> locations);\n\n// Average case: O(n + m) | O(n) space - where n is the length\n// of the main string and m is the length of the substring\nstring underscorifySubstring(string str, string subStr) {\n  vector<vector<int>> locations = collapse(getLocations(str, subStr));\n  return underscorify(str, locations);\n}\n\nvector<vector<int>> getLocations(string str, string subStr) {\n  vector<vector<int>> locations{};\n  int startIdx = 0;\n  while (startIdx < str.length()) {\n    int nextIdx = str.find(subStr, startIdx);\n    if (nextIdx != string::npos) {\n      locations.push_back(vector<int>{nextIdx, int(nextIdx + subStr.length())});\n      startIdx = nextIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return locations;\n}\n\nvector<vector<int>> collapse(vector<vector<int>> locations) {\n  if (locations.empty()) {\n    return locations;\n  }\n  vector<vector<int>> newLocations{locations[0]};\n  vector<int>* previous = &newLocations[0];\n  for (int i = 1; i < locations.size(); i++) {\n    vector<int>* current = &locations[i];\n    if (current->at(0) <= previous->at(1)) {\n      previous->at(1) = current->at(1);\n    } else {\n      newLocations.push_back(*current);\n      previous = &newLocations[newLocations.size() - 1];\n    }\n  }\n  return newLocations;\n}\n\nstring underscorify(string str, vector<vector<int>> locations) {\n  int locationsIdx = 0;\n  int stringIdx = 0;\n  bool inBetweenUnderscores = false;\n  vector<string> finalChars{};\n  int i = 0;\n  while (stringIdx < str.length() && locationsIdx < locations.size()) {\n    if (stringIdx == locations[locationsIdx][i]) {\n      finalChars.push_back(\"_\");\n      inBetweenUnderscores = !inBetweenUnderscores;\n      if (!inBetweenUnderscores) {\n        locationsIdx++;\n      }\n      i = i == 1 ? 0 : 1;\n    }\n    string s(1, str[stringIdx]);\n    finalChars.push_back(s);\n    stringIdx++;\n  }\n  if (locationsIdx < locations.size()) {\n    finalChars.push_back(\"_\");\n  } else if (stringIdx < str.length()) {\n    finalChars.push_back(str.substr(stringIdx));\n  }\n  return accumulate(finalChars.begin(), finalChars.end(), string());\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        underscorifySubstring(\n          \"testthis is a \"\n          \"testtest to see if \"\n          \"testestest it works\",\n          \"test\"\n        ) ==\n        \"_test_this is a \"\n        \"_testtest_ to see if \"\n        \"_testestest_ it works\"\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        underscorifySubstring(\n          \"testthis is a \"\n          \"testtest to see if \"\n          \"testestest it works\",\n          \"test\"\n        ) ==\n        \"_test_this is a \"\n        \"_testtest_ to see if \"\n        \"_testestest_ it works\"\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static string UnderscorifySubstring(string str, string substring) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // Average case: O(n + m) | O(n) space - where n is the length\n  // of the main string and m is the length of the substring\n  public static string UnderscorifySubstring(string str, string substring) {\n    List<int[]> locations = collapse(getLocations(str, substring));\n    return underscorify(str, locations);\n  }\n\n  public static List<int[]> getLocations(string str, string substring) {\n    List<int[]> locations = new List<int[]>();\n    int startIdx = 0;\n    while (startIdx < str.Length) {\n      int nextIdx = str.IndexOf(substring, startIdx);\n      if (nextIdx != -1) {\n        locations.Add(new int[] { nextIdx, nextIdx + substring.Length });\n        startIdx = nextIdx + 1;\n      } else {\n        break;\n      }\n    }\n    return locations;\n  }\n\n  public static List<int[]> collapse(List<int[]> locations) {\n    if (locations.Count == 0) {\n      return locations;\n    }\n    List<int[]> newLocations = new List<int[]>();\n    newLocations.Add(locations[0]);\n    int[] previous = newLocations[0];\n    for (int i = 1; i < locations.Count; i++) {\n      int[] current = locations[i];\n      if (current[0] <= previous[1]) {\n        previous[1] = current[1];\n      } else {\n        newLocations.Add(current);\n        previous = current;\n      }\n    }\n    return newLocations;\n  }\n\n  public static string underscorify(string str, List<int[]> locations) {\n    int locationsIdx = 0;\n    int stringIdx = 0;\n    bool inBetweenUnderscores = false;\n    List<string> finalChars = new List<string>();\n    int i = 0;\n    while (stringIdx < str.Length && locationsIdx < locations.Count) {\n      if (stringIdx == locations[locationsIdx][i]) {\n        finalChars.Add(\"_\");\n        inBetweenUnderscores = !inBetweenUnderscores;\n        if (!inBetweenUnderscores) {\n          locationsIdx++;\n        }\n        i = i == 1 ? 0 : 1;\n      }\n      finalChars.Add(str[stringIdx].ToString());\n      stringIdx += 1;\n    }\n    if (locationsIdx < locations.Count) {\n      finalChars.Add(\"_\");\n    } else if (stringIdx < str.Length) {\n      finalChars.Add(str.Substring(stringIdx));\n    }\n    return String.Join(\"\", finalChars);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string expected =\n      \"_test_this is a _testtest_ to see if _testestest_ it works\";\n    string output = Program.UnderscorifySubstring(\n      \"testthis is a testtest to see if testestest it works\", \"test\"\n    );\n    Utils.AssertTrue(expected.Equals(output));\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string expected =\n      \"_test_this is a _testtest_ to see if _testestest_ it works\";\n    string output = Program.UnderscorifySubstring(\n      \"testthis is a testtest to see if testestest it works\", \"test\"\n    );\n    Utils.AssertTrue(expected.Equals(output));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc UnderscorifySubstring(str string, substring string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"strings\"\n\ntype intervals []*interval\ntype interval struct {\n\tleft  int\n\tright int\n}\n\n// Average case: O(n + m) | O(n) space - where n is the length\n// of the main string and m is the length of the substring\nfunc UnderscorifySubstring(str string, substring string) string {\n\tlocations := getLocations(str, substring)\n\tlocations = locations.collapse()\n\treturn underscorify(str, locations)\n}\n\nfunc getLocations(str, substring string) intervals {\n\tresult := intervals{}\n\tfor start := 0; start < len(str); {\n\t\tnextIndex := strings.Index(str[start:], substring)\n\t\tif nextIndex == -1 {\n\t\t\tbreak\n\t\t}\n\t\tnextIndex += start\n\t\tresult = append(result, &interval{nextIndex, nextIndex + len(substring)})\n\t\tstart = nextIndex + 1\n\t}\n\treturn result\n}\n\nfunc (array intervals) collapse() intervals {\n\t// If the array is empty, nothing to do\n\tif len(array) == 0 {\n\t\treturn array\n\t}\n\n\tresult := intervals{array[0]}\n\tprevious := array[0]\n\tfor i := 1; i < len(array); i++ {\n\t\tcurrent := array[i]\n\t\tif current.left <= previous.right {\n\t\t\t// Collapse the two intervals\n\t\t\tprevious.right = current.right\n\t\t} else {\n\t\t\tresult = append(result, current)\n\t\t\tprevious = current\n\t\t}\n\t}\n\treturn result\n}\n\nfunc underscorify(str string, locations intervals) string {\n\tif len(locations) == 0 {\n\t\treturn str\n\t}\n\n\t// We know the resulting string will have an additional 2*len(intervals)\n\t// characters\n\tresult := make([]rune, len(str)+2*len(locations))\n\tresultIndex := 0\n\tlocationIndex := 0\n\tfor i, r := range str {\n\t\tlocation := locations[locationIndex]\n\t\tif i == location.left {\n\t\t\tresult[resultIndex] = '_'\n\t\t\tresultIndex += 1\n\t\t} else if i == location.right {\n\t\t\tresult[resultIndex] = '_'\n\t\t\tresultIndex += 1\n\t\t\tif locationIndex+1 < len(locations) {\n\t\t\t\tlocationIndex += 1\n\t\t\t}\n\t\t}\n\t\tresult[resultIndex] = r\n\t\tresultIndex += 1\n\t}\n\n\tif locations[locationIndex].right == len(str) {\n\t\tresult[len(result)-1] = '_'\n\t}\n\treturn string(result)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"_test_this is a _testtest_ to see if _testestest_ it works\"\n\toutput := UnderscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"_test_this is a _testtest_ to see if _testestest_ it works\"\n\toutput := UnderscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static String underscorifySubstring(String str, String substring) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // Average case: O(n + m) | O(n) space - where n is the length\n  // of the main string and m is the length of the substring\n  public static String underscorifySubstring(String str, String substring) {\n    List<Integer[]> locations = collapse(getLocations(str, substring));\n    return underscorify(str, locations);\n  }\n\n  public static List<Integer[]> getLocations(String str, String substring) {\n    List<Integer[]> locations = new ArrayList<Integer[]>();\n    int startIdx = 0;\n    while (startIdx < str.length()) {\n      int nextIdx = str.indexOf(substring, startIdx);\n      if (nextIdx != -1) {\n        locations.add(new Integer[] {nextIdx, nextIdx + substring.length()});\n        startIdx = nextIdx + 1;\n      } else {\n        break;\n      }\n    }\n    return locations;\n  }\n\n  public static List<Integer[]> collapse(List<Integer[]> locations) {\n    if (locations.size() == 0) {\n      return locations;\n    }\n    List<Integer[]> newLocations = new ArrayList<Integer[]>();\n    newLocations.add(locations.get(0));\n    Integer[] previous = newLocations.get(0);\n    for (int i = 1; i < locations.size(); i++) {\n      Integer[] current = locations.get(i);\n      if (current[0] <= previous[1]) {\n        previous[1] = current[1];\n      } else {\n        newLocations.add(current);\n        previous = current;\n      }\n    }\n    return newLocations;\n  }\n\n  public static String underscorify(String str, List<Integer[]> locations) {\n    int locationsIdx = 0;\n    int stringIdx = 0;\n    boolean inBetweenUnderscores = false;\n    List<String> finalChars = new ArrayList<String>();\n    int i = 0;\n    while (stringIdx < str.length() && locationsIdx < locations.size()) {\n      if (stringIdx == locations.get(locationsIdx)[i]) {\n        finalChars.add(\"_\");\n        inBetweenUnderscores = !inBetweenUnderscores;\n        if (!inBetweenUnderscores) {\n          locationsIdx++;\n        }\n        i = i == 1 ? 0 : 1;\n      }\n      finalChars.add(String.valueOf(str.charAt(stringIdx)));\n      stringIdx += 1;\n    }\n    if (locationsIdx < locations.size()) {\n      finalChars.add(\"_\");\n    } else if (stringIdx < str.length()) {\n      finalChars.add(str.substring(stringIdx));\n    }\n    return String.join(\"\", finalChars);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String expected =\n      \"_test_this is a _testtest_ to see if _testestest_ it works\";\n    String output = Program.underscorifySubstring(\n      \"testthis is a testtest to see if testestest it works\", \"test\"\n    );\n    Utils.assertTrue(expected.equals(output));\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String expected =\n      \"_test_this is a _testtest_ to see if _testestest_ it works\";\n    String output = Program.underscorifySubstring(\n      \"testthis is a testtest to see if testestest it works\", \"test\"\n    );\n    Utils.assertTrue(expected.equals(output));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function underscorifySubstring(string, substring) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.underscorifySubstring = underscorifySubstring;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Average case: O(n + m) | O(n) space - where n is the length\n// of the main string and m is the length of the substring\nfunction underscorifySubstring(string, substring) {\n  const locations = collapse(getLocations(string, substring));\n  return underscorify(string, locations);\n}\n\nfunction getLocations(string, substring) {\n  const locations = [];\n  let startIdx = 0;\n  while (startIdx < string.length) {\n    const nextIdx = string.indexOf(substring, startIdx);\n    if (nextIdx !== -1) {\n      locations.push([nextIdx, nextIdx + substring.length]);\n      startIdx = nextIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return locations;\n}\n\nfunction collapse(locations) {\n  if (!locations.length) return locations;\n  const newLocations = [locations[0]];\n  let previous = newLocations[0];\n  for (let i = 1; i < locations.length; i++) {\n    const current = locations[i];\n    if (current[0] <= previous[1]) {\n      previous[1] = current[1];\n    } else {\n      newLocations.push(current);\n      previous = current;\n    }\n  }\n  return newLocations;\n}\n\nfunction underscorify(string, locations) {\n  let locationsIdx = 0;\n  let stringIdx = 0;\n  let inBetweenUnderscores = false;\n  const finalChars = [];\n  let i = 0;\n  while (stringIdx < string.length && locationsIdx < locations.length) {\n    if (stringIdx === locations[locationsIdx][i]) {\n      finalChars.push('_');\n      inBetweenUnderscores = !inBetweenUnderscores;\n      if (!inBetweenUnderscores) locationsIdx++;\n      i = i === 1 ? 0 : 1;\n    }\n    finalChars.push(string[stringIdx]);\n    stringIdx++;\n  }\n  if (locationsIdx < locations.length) {\n    finalChars.push('_');\n  } else if (stringIdx < string.length) {\n    finalChars.push(string.slice(stringIdx));\n  }\n  return finalChars.join('');\n}\n\nexports.underscorifySubstring = underscorifySubstring;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'),\n    )\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'),\n    )\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun underscorifySubstring(string: String, substring: String): String {\n    // Write your code here.\n    return \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Average case: O(n + m) | O(n) space - where n is the length\n// of the main string and m is the length of the substring\nfun underscorifySubstring(string: String, substring: String): String {\n    val locations = collapse(getLocations(string, substring))\n    return underscorify(string, locations)\n}\n\nfun getLocations(string: String, substring: String): MutableList<MutableList<Int>> {\n    val locations = mutableListOf<MutableList<Int>>()\n    var startIdx = 0\n    while (startIdx < string.length) {\n        val nextIdx = string.indexOf(substring, startIdx)\n        if (nextIdx != -1) {\n            locations.add(mutableListOf(nextIdx, nextIdx + substring.length))\n            startIdx = nextIdx + 1\n        } else {\n            break\n        }\n    }\n    return locations\n}\n\nfun collapse(locations: MutableList<MutableList<Int>>): MutableList<MutableList<Int>> {\n    if (locations.size == 0) return locations\n    val newLocations = mutableListOf(locations[0])\n    var previous = newLocations[0]\n    for (i in 1 until locations.size) {\n        val current = locations[i]\n        if (current[0] <= previous[1]) {\n            previous[1] = current[1]\n        } else {\n            newLocations.add(current)\n            previous = current\n        }\n    }\n    return newLocations\n}\n\nfun underscorify(string: String, locations: MutableList<MutableList<Int>>): String {\n    var locationsIdx = 0\n    var stringIdx = 0\n    var inBetweenUnderscores = false\n    val finalChars = mutableListOf<String>()\n    var i = 0\n    while (stringIdx < string.length && locationsIdx < locations.size) {\n        if (stringIdx == locations[locationsIdx][i]) {\n            finalChars.add(\"_\")\n            inBetweenUnderscores = !inBetweenUnderscores\n            if (!inBetweenUnderscores) locationsIdx++\n            i = if (i == 1) 0 else 1\n        }\n        finalChars.add(string[stringIdx].toString())\n        stringIdx++\n    }\n    if (locationsIdx < locations.size) {\n        finalChars.add(\"_\")\n    } else if (stringIdx < string.length) {\n        finalChars.add(string.substring(stringIdx))\n    }\n    return finalChars.joinToString(\"\")\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.underscorifySubstring as underscorifySubstring\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(\n            underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\") == \"_test_this is a _testtest_ to see if _testestest_ it works\",\n        )\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.underscorifySubstring as underscorifySubstring\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(\n            underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\") == \"_test_this is a _testtest_ to see if _testestest_ it works\",\n        )\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def underscorifySubstring(string, substring):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Average case: O(n + m) | O(n) space - where n is the length\n# of the main string and m is the length of the substring\ndef underscorifySubstring(string, substring):\n    locations = collapse(getLocations(string, substring))\n    return underscorify(string, locations)\n\n\ndef getLocations(string, substring):\n    locations = []\n    startIdx = 0\n    while startIdx < len(string):\n        nextIdx = string.find(substring, startIdx)\n        if nextIdx != -1:\n            locations.append([nextIdx, nextIdx + len(substring)])\n            startIdx = nextIdx + 1\n        else:\n            break\n    return locations\n\n\ndef collapse(locations):\n    if not len(locations):\n        return locations\n    newLocations = [locations[0]]\n    previous = newLocations[0]\n    for i in range(1, len(locations)):\n        current = locations[i]\n        if current[0] <= previous[1]:\n            previous[1] = current[1]\n        else:\n            newLocations.append(current)\n            previous = current\n    return newLocations\n\n\ndef underscorify(string, locations):\n    locationsIdx = 0\n    stringIdx = 0\n    inBetweenUnderscores = False\n    finalChars = []\n    i = 0\n    while stringIdx < len(string) and locationsIdx < len(locations):\n        if stringIdx == locations[locationsIdx][i]:\n            finalChars.append(\"_\")\n            inBetweenUnderscores = not inBetweenUnderscores\n            if not inBetweenUnderscores:\n                locationsIdx += 1\n            i = 0 if i == 1 else 1\n        finalChars.append(string[stringIdx])\n        stringIdx += 1\n    if locationsIdx < len(locations):\n        finalChars.append(\"_\")\n    elif stringIdx < len(string):\n        finalChars.append(string[stringIdx:])\n    return \"\".join(finalChars)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.underscorifySubstring(\n                \"testthis is a testtest to see if testestest it works\", \"test\"\n            ),\n            \"_test_this is a _testtest_ to see if _testestest_ it works\",\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.underscorifySubstring(\n                \"testthis is a testtest to see if testestest it works\", \"test\"\n            ),\n            \"_test_this is a _testtest_ to see if _testestest_ it works\",\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def underscorifySubstring(string, substring)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def underscorifySubstring(string, substring)\n    # Write your code here.\n    return \"\"\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.underscorifySubstring\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.underscorifySubstring\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func underscorifySubstring(_ string: String, _ substring: String) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Average case: O(n + m) | O(n) space - where n is the length\n  // of the main string and m is the length of the substring\n  func underscorifySubstring(_ string: String, _ substring: String) -> String {\n    let locations = getLocations(string, substring)\n    let collapsedLocations = collapse(locations)\n\n    return underscorify(string, collapsedLocations)\n  }\n\n  func getLocations(_ string: String, _ substring: String) -> [[String.Index]] {\n    var locations = [[String.Index]]()\n\n    var start = 0\n    var startIndex = string.index(string.startIndex, offsetBy: start)\n\n    while start < string.count {\n      if let rangeOfSubstring = string.range(of: substring, options: [], range: startIndex ..< string.endIndex, locale: nil) {\n        locations.append([rangeOfSubstring.lowerBound, rangeOfSubstring.upperBound])\n\n        let startPos = string.distance(from: string.startIndex, to: rangeOfSubstring.lowerBound)\n        start = startPos + 1\n        startIndex = string.index(string.startIndex, offsetBy: start)\n      } else {\n        break\n      }\n    }\n\n    return locations\n  }\n\n  func collapse(_ locations: [[String.Index]]) -> [[String.Index]] {\n    if locations.count == 0 {\n      return locations\n    }\n\n    var newLocations = [locations[0]]\n    var previousLocationIndex = 0\n    for i in 1 ..< locations.count {\n      let currentLocation = locations[i]\n\n      if currentLocation[0] <= newLocations[previousLocationIndex][1] {\n        newLocations[previousLocationIndex][1] = currentLocation[1]\n      } else {\n        newLocations.append(currentLocation)\n        previousLocationIndex += 1\n      }\n    }\n\n    return newLocations\n  }\n\n  func underscorify(_ string: String, _ locations: [[String.Index]]) -> String {\n    var subIndex = 0\n    var stringIndex = 0\n    var locationIndex = 0\n    var isInBetweenUnderscres = false\n    var currentIndex = string.index(string.startIndex, offsetBy: stringIndex)\n\n    var finalCharacters = [Character]()\n\n    while stringIndex < string.count, locationIndex < locations.count {\n      currentIndex = string.index(string.startIndex, offsetBy: stringIndex)\n\n      if currentIndex == locations[locationIndex][subIndex] {\n        finalCharacters.append(\"_\")\n\n        isInBetweenUnderscres = !isInBetweenUnderscres\n\n        if !isInBetweenUnderscres {\n          locationIndex += 1\n        }\n\n        if subIndex == 0 {\n          subIndex = 1\n        } else {\n          subIndex = 0\n        }\n      }\n\n      finalCharacters.append(string[currentIndex])\n      stringIndex += 1\n    }\n\n    if locationIndex < locations.count {\n      finalCharacters.append(\"_\")\n    } else if stringIndex < string.count {\n      currentIndex = string.index(string.startIndex, offsetBy: stringIndex)\n      let restOfCharacters = Array(string[currentIndex ..< string.endIndex])\n      finalCharacters.append(contentsOf: restOfCharacters)\n    }\n\n    let result = finalCharacters.compactMap { String($0) }.joined()\n    return result\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"_test_this is a _testtest_ to see if _testestest_ it works\", program.underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\"))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"_test_this is a _testtest_ to see if _testestest_ it works\", program.underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\"))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function underscorifySubstring(string: string, substring: string) {\n  // Write your code here.\n  return '';\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Average case: O(n + m) | O(n) space - where n is the length\n// of the main string and m is the length of the substring\nexport function underscorifySubstring(string: string, substring: string) {\n  const locations = collapse(getLocations(string, substring));\n  return underscorify(string, locations);\n}\n\nfunction getLocations(string: string, substring: string) {\n  const locations: number[][] = [];\n  let startIdx = 0;\n  while (startIdx < string.length) {\n    const nextIdx = string.indexOf(substring, startIdx);\n    if (nextIdx !== -1) {\n      locations.push([nextIdx, nextIdx + substring.length]);\n      startIdx = nextIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return locations;\n}\n\nfunction collapse(locations: number[][]) {\n  if (!locations.length) return locations;\n  const newLocations = [locations[0]];\n  let previous = newLocations[0];\n  for (let i = 1; i < locations.length; i++) {\n    const current = locations[i];\n    if (current[0] <= previous[1]) {\n      previous[1] = current[1];\n    } else {\n      newLocations.push(current);\n      previous = current;\n    }\n  }\n  return newLocations;\n}\n\nfunction underscorify(string: string, locations: number[][]) {\n  let locationsIdx = 0;\n  let stringIdx = 0;\n  let inBetweenUnderscores = false;\n  const finalChars = [];\n  let i = 0;\n  while (stringIdx < string.length && locationsIdx < locations.length) {\n    if (stringIdx === locations[locationsIdx][i]) {\n      finalChars.push('_');\n      inBetweenUnderscores = !inBetweenUnderscores;\n      if (!inBetweenUnderscores) locationsIdx++;\n      i = i === 1 ? 0 : 1;\n    }\n    finalChars.push(string[stringIdx]);\n    stringIdx++;\n  }\n  if (locationsIdx < locations.length) {\n    finalChars.push('_');\n  } else if (stringIdx < string.length) {\n    finalChars.push(string.slice(stringIdx));\n  }\n  return finalChars.join('');\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'),\n    )\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'),\n    )\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "testthis is a testtest to see if testestest it works",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "substring",
      "example": "test",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "testthis is a testtest to see if testestest it works",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "test this is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "testthis is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "testthis is a testest to see if testestes it works",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works and test",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works and test",
      "substring": "bfjawkfja"
    },
    {
      "string": "ttttttttttttttbtttttctatawtatttttastvb",
      "substring": "ttt"
    },
    {
      "string": "tzttztttz",
      "substring": "ttt"
    },
    {
      "string": "abababababababababababababaababaaabbababaa",
      "substring": "a"
    },
    {
      "string": "abcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      "substring": "abc"
    }
  ],
  "jsonTests": [
    {
      "string": "testthis is a testtest to see if testestest it works",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "test this is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "testthis is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "testthis is a testest to see if testestes it works",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works and test",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works and test",
      "substring": "bfjawkfja"
    },
    {
      "string": "ttttttttttttttbtttttctatawtatttttastvb",
      "substring": "ttt"
    },
    {
      "string": "tzttztttz",
      "substring": "ttt"
    },
    {
      "string": "abababababababababababababaababaaabbababaa",
      "substring": "a"
    },
    {
      "string": "abcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      "substring": "abc"
    }
  ],
  "changelog": []
}