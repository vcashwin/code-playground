{
  "uid": "valid-starting-city",
  "testStrategy": "JSON",
  "name": "Valid Starting City",
  "version": 0,
  "releaseDate": "2021-01-31T00:00:00Z",
  "category": "Greedy Algorithms",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 14295,
    "failureCount": 4035
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "503310331",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1817
  },
  "prompt": "<div class=\"html\">\n<p>\n  Imagine you have a set of cities that are laid out in a circle, connected by a\n  circular road that runs clockwise. Each city has a gas station that provides\n  gallons of fuel, and each city is some distance away from the next city.\n</p>\n<p>\n  You have a car that can drive some number of miles per gallon of fuel, and\n  your goal is to pick a starting city such that you can fill up your car with\n  that city's fuel, drive to the next city, refill up your car with that city's\n  fuel, drive to the next city, and so on and so forth until you return back to\n  the starting city with 0 or more gallons of fuel left.\n</p>\n<p>\n  This city is called a valid starting city, and it's guaranteed that there will\n  always be exactly one valid starting city.\n</p>\n<p>\n  For the actual problem, you'll be given an array of distances such that city\n  <span>i</span> is <span>distances[i]</span> away from city <span>i + 1</span>.\n  Since the cities are connected via a circular road, the last city is connected\n  to the first city. In other words, the last distance in the\n  <span>distances</span> array is equal to the distance from the last city to\n  the first city. You'll also be given an array of fuel available at each city,\n  where <span>fuel[i]</span> is equal to the fuel available at city\n  <span>i</span>. The total amount of fuel available (from all cities combined)\n  is exactly enough to travel to all cities. Your fuel tank always starts out\n  empty, and you're given a positive integer value for the number of miles that\n  your car can travel per gallon of fuel (miles per gallon, or MPG). You can\n  assume that you will always be given at least two cities.\n</p>\n<p>Write a function that returns the index of the valid starting city.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">distances</span> = [5, 25, 15, 10, 15]\n<span class=\"CodeEditor-promptParameter\">fuel</span> = [1, 2, 1, 0, 3]\n<span class=\"CodeEditor-promptParameter\">mpg</span> = 10\n</pre>\n<h3>Sample Output</h3>\n<pre>\n4\n</pre>\n</div>",
  "hints": [
    "<p>\n  Try the brute-force approach to this problem by treating each city as the\n  starting city and simulating traveling from it to all other cities.\n</p>\n",
    "\n<p>\n  Start at each city, and see if you can return back to the city in question\n  without running out of gas. If you find a city that you can return to after\n  starting at it without running out of gas, then it must be the valid starting\n  city, because there is always exactly one valid starting city.\n</p>\n",
    "\n<p>\n  You can solve this problem in <span>O(n)</span> time. Try to use the fact that\n  the amount of gas is exactly enough to travel around the road once to help\n  you.\n</p>\n",
    "\n<p>\n  Using the fact stated in Hint #3 and the knowledge that there is always\n  exactly one valid starting city, you can solve this problem in a single pass\n  of all cities. Keep track of how much gas you have as you enter a city (before\n  you fill up at that city); you'll enter the first city with 0 gas. The city\n  that you enter with the least amount of gas in your tank must be the valid\n  starting city. This is because you'll never have less gas at another city than\n  you do when you enter this city, no matter what city you start at. This means\n  that that this is the valid starting city. See the Conceptual Overview section\n  of this question's video explanation for a more in-depth explanation.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the number of cities",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint validStartingCity(vector<int> distances, vector<int> fuel, int mpg) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n^2) time | O(1) space - where n is the number of cities\nint validStartingCity(vector<int> distances, vector<int> fuel, int mpg) {\n  int numberOfCities = distances.size();\n\n  for (int startCityIdx = 0; startCityIdx < numberOfCities; startCityIdx++) {\n    int milesRemaining = 0;\n\n    for (int currentCityIdx = startCityIdx;\n         currentCityIdx < startCityIdx + numberOfCities;\n         currentCityIdx++) {\n      if (milesRemaining < 0) continue;\n\n      int currentCityIdxRotated = currentCityIdx % numberOfCities;\n\n      int fuelFromCurrentCity = fuel[currentCityIdxRotated];\n      int distanceToNextCity = distances[currentCityIdxRotated];\n      milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity;\n    }\n\n    if (milesRemaining >= 0) return startCityIdx;\n  }\n\n  // This line should never be reached if the inputs are correct.\n  return -1;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the number of cities\nint validStartingCity(vector<int> distances, vector<int> fuel, int mpg) {\n  int numberOfCities = distances.size();\n  int milesRemaining = 0;\n\n  int indexOfStartingCityCandidate = 0;\n  int milesRemainingAtStartingCityCandidate = 0;\n\n  for (int cityIdx = 1; cityIdx < numberOfCities; cityIdx++) {\n    int distanceFromPreviousCity = distances[cityIdx - 1];\n    int fuelFromPreviousCity = fuel[cityIdx - 1];\n    milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity;\n\n    if (milesRemaining < milesRemainingAtStartingCityCandidate) {\n      milesRemainingAtStartingCityCandidate = milesRemaining;\n      indexOfStartingCityCandidate = cityIdx;\n    }\n  }\n\n  return indexOfStartingCityCandidate;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> distances = {5, 25, 15, 10, 1};\n      vector<int> fuel = {1, 2, 1, 0, 3};\n      int mpg = 10;\n      int expected = 4;\n      auto actual = validStartingCity(distances, fuel, mpg);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> distances = {5, 25, 15, 10, 1};\n      vector<int> fuel = {1, 2, 1, 0, 3};\n      int mpg = 10;\n      int expected = 4;\n      auto actual = validStartingCity(distances, fuel, mpg);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int ValidStartingCity(int[] distances, int[] fuel, int mpg) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n^2) time | O(1) space - where n is the number of cities\n  public int ValidStartingCity(int[] distances, int[] fuel, int mpg) {\n    int numberOfCities = distances.Length;\n\n    for (int startCityIdx = 0; startCityIdx < numberOfCities; startCityIdx++) {\n      int milesRemaining = 0;\n\n      for (int currentCityIdx = startCityIdx;\n           currentCityIdx < startCityIdx + numberOfCities;\n           currentCityIdx++) {\n        if (milesRemaining < 0) {\n          continue;\n        }\n\n        int currentCityIdxRotated = currentCityIdx % numberOfCities;\n\n        int fuelFromCurrentCity = fuel[currentCityIdxRotated];\n        int distanceToNextCity = distances[currentCityIdxRotated];\n        milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity;\n      }\n\n      if (milesRemaining >= 0) {\n        return startCityIdx;\n      }\n    }\n\n    // This line should never be reached if the inputs are correct.\n    return -1;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the number of cities\n  public int ValidStartingCity(int[] distances, int[] fuel, int mpg) {\n    int numberOfCities = distances.Length;\n    int milesRemaining = 0;\n\n    int indexOfStartingCityCandidate = 0;\n    int milesRemainingAtStartingCityCandidate = 0;\n\n    for (int cityIdx = 1; cityIdx < numberOfCities; cityIdx++) {\n      int distanceFromPreviousCity = distances[cityIdx - 1];\n      int fuelFromPreviousCity = fuel[cityIdx - 1];\n      milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity;\n\n      if (milesRemaining < milesRemainingAtStartingCityCandidate) {\n        milesRemainingAtStartingCityCandidate = milesRemaining;\n        indexOfStartingCityCandidate = cityIdx;\n      }\n    }\n\n    return indexOfStartingCityCandidate;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] distances = new int[] { 5, 25, 15, 10, 15 };\n    int[] fuel = new int[] { 1, 2, 1, 0, 3 };\n    int mpg = 10;\n    int expected = 4;\n    var actual = new Program().ValidStartingCity(distances, fuel, mpg);\n    Utils.AssertTrue(expected == actual);\n  }\n}",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] distances = new int[] { 5, 25, 15, 10, 15 };\n    int[] fuel = new int[] { 1, 2, 1, 0, 3 };\n    int mpg = 10;\n    int expected = 4;\n    var actual = new Program().ValidStartingCity(distances, fuel, mpg);\n    Utils.AssertTrue(expected == actual);\n  }\n}"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ValidStartingCity(distances []int, fuel []int, mpg int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(1) space - where n is the number of cities\nfunc ValidStartingCity(distances []int, fuel []int, mpg int) int {\n\tnumberOfCities := len(distances)\n\n\tfor startCityIdx := 0; startCityIdx < numberOfCities; startCityIdx++ {\n\t\tmilesRemaining := 0\n\n\t\tfor currentCityIdx := startCityIdx; currentCityIdx < startCityIdx+numberOfCities; currentCityIdx++ {\n\t\t\tif milesRemaining < 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tcurrentCityIdx := currentCityIdx % numberOfCities\n\n\t\t\tfuelFromCurrentCity := fuel[currentCityIdx]\n\t\t\tdistanceToNextCity := distances[currentCityIdx]\n\t\t\tmilesRemaining += fuelFromCurrentCity*mpg - distanceToNextCity\n\t\t}\n\n\t\tif milesRemaining >= 0 {\n\t\t\treturn startCityIdx\n\t\t}\n\t}\n\n\t// This line should never be reached if the inputs are correct.\n\treturn -1\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the number of cities\nfunc ValidStartingCity(distances []int, fuel []int, mpg int) int {\n\tnumberOfCities := len(distances)\n\tmilesRemaining := 0\n\n\tindexOfStartingCityCandidate := 0\n\tmilesRemainingAtStartingCityCandidate := 0\n\n\tfor cityIdx := 1; cityIdx < numberOfCities; cityIdx++ {\n\t\tdistanceFromPreviousCity := distances[cityIdx-1]\n\t\tfuelFromPreviousCity := fuel[cityIdx-1]\n\t\tmilesRemaining += fuelFromPreviousCity*mpg - distanceFromPreviousCity\n\n\t\tif milesRemaining < milesRemainingAtStartingCityCandidate {\n\t\t\tmilesRemainingAtStartingCityCandidate = milesRemaining\n\t\t\tindexOfStartingCityCandidate = cityIdx\n\t\t}\n\t}\n\n\treturn indexOfStartingCityCandidate\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tdistances := []int{5, 25, 15, 10, 15}\n\tfuel := []int{1, 2, 1, 0, 3}\n\tmpg := 10\n\texpected := 4\n\tactual := ValidStartingCity(distances, fuel, mpg)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tdistances := []int{5, 25, 15, 10, 15}\n\tfuel := []int{1, 2, 1, 0, 3}\n\tmpg := 10\n\texpected := 4\n\tactual := ValidStartingCity(distances, fuel, mpg)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int validStartingCity(int[] distances, int[] fuel, int mpg) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(1) space - where n is the number of cities\n  public int validStartingCity(int[] distances, int[] fuel, int mpg) {\n    int numberOfCities = distances.length;\n\n    for (int startCityIdx = 0; startCityIdx < numberOfCities; startCityIdx++) {\n      int milesRemaining = 0;\n\n      for (int currentCityIdx = startCityIdx;\n           currentCityIdx < startCityIdx + numberOfCities;\n           currentCityIdx++) {\n        if (milesRemaining < 0) {\n          continue;\n        }\n\n        int currentCityIdxRotated = currentCityIdx % numberOfCities;\n\n        int fuelFromCurrentCity = fuel[currentCityIdxRotated];\n        int distanceToNextCity = distances[currentCityIdxRotated];\n        milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity;\n      }\n\n      if (milesRemaining >= 0) {\n        return startCityIdx;\n      }\n    }\n\n    // This line should never be reached if the inputs are correct.\n    return -1;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the number of cities\n  public int validStartingCity(int[] distances, int[] fuel, int mpg) {\n    int numberOfCities = distances.length;\n    int milesRemaining = 0;\n\n    int indexOfStartingCityCandidate = 0;\n    int milesRemainingAtStartingCityCandidate = 0;\n\n    for (int cityIdx = 1; cityIdx < numberOfCities; cityIdx++) {\n      int distanceFromPreviousCity = distances[cityIdx - 1];\n      int fuelFromPreviousCity = fuel[cityIdx - 1];\n      milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity;\n\n      if (milesRemaining < milesRemainingAtStartingCityCandidate) {\n        milesRemainingAtStartingCityCandidate = milesRemaining;\n        indexOfStartingCityCandidate = cityIdx;\n      }\n    }\n\n    return indexOfStartingCityCandidate;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] distances = new int[] {5, 25, 15, 10, 15};\n    int[] fuel = new int[] {1, 2, 1, 0, 3};\n    int mpg = 10;\n    int expected = 4;\n    var actual = new Program().validStartingCity(distances, fuel, mpg);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] distances = new int[] {5, 25, 15, 10, 15};\n    int[] fuel = new int[] {1, 2, 1, 0, 3};\n    int mpg = 10;\n    int expected = 4;\n    var actual = new Program().validStartingCity(distances, fuel, mpg);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function validStartingCity(distances, fuel, mpg) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the line below.\nexports.validStartingCity = validStartingCity;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space - where n is the number of cities\nfunction validStartingCity(distances, fuel, mpg) {\n  const numberOfCities = distances.length;\n\n  for (let startCityIdx = 0; startCityIdx < numberOfCities; startCityIdx++) {\n    let milesRemaining = 0;\n\n    for (\n      let currentCityIdx = startCityIdx;\n      currentCityIdx < startCityIdx + numberOfCities;\n      currentCityIdx++\n    ) {\n      if (milesRemaining < 0) continue;\n\n      const currentCityIdxRotated = currentCityIdx % numberOfCities;\n\n      const fuelFromCurrentCity = fuel[currentCityIdxRotated];\n      const distanceToNextCity = distances[currentCityIdxRotated];\n      milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity;\n    }\n\n    if (milesRemaining >= 0) return startCityIdx;\n  }\n\n  // This line should never be reached if the inputs are correct.\n  return -1;\n}\n\n// Do not edit the line below.\nexports.validStartingCity = validStartingCity;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the number of cities\nfunction validStartingCity(distances, fuel, mpg) {\n  const numberOfCities = distances.length;\n  let milesRemaining = 0;\n\n  let indexOfStartingCityCandidate = 0;\n  let milesRemainingAtStartingCityCandidate = 0;\n\n  for (let cityIdx = 1; cityIdx < numberOfCities; cityIdx++) {\n    const distanceFromPreviousCity = distances[cityIdx - 1];\n    const fuelFromPreviousCity = fuel[cityIdx - 1];\n    milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity;\n\n    if (milesRemaining < milesRemainingAtStartingCityCandidate) {\n      milesRemainingAtStartingCityCandidate = milesRemaining;\n      indexOfStartingCityCandidate = cityIdx;\n    }\n  }\n\n  return indexOfStartingCityCandidate;\n}\n\n// Do not edit the line below.\nexports.validStartingCity = validStartingCity;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const distances = [5, 25, 15, 10, 15];\n  const fuel = [1, 2, 1, 0, 3];\n  const mpg = 10;\n  const expected = 4;\n  const actual = program.validStartingCity(distances, fuel, mpg);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const distances = [5, 25, 15, 10, 15];\n  const fuel = [1, 2, 1, 0, 3];\n  const mpg = 10;\n  const expected = 4;\n  const actual = program.validStartingCity(distances, fuel, mpg);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun validStartingCity(distances: List<Int>, fuel: List<Int>, mpg: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(1) space - where n is the number of cities\nfun validStartingCity(distances: List<Int>, fuel: List<Int>, mpg: Int): Int {\n    val numberOfCities = distances.size\n\n    for (startCityIdx in 0 until numberOfCities) {\n        var milesRemaining = 0\n\n        for (currentCityIdx in startCityIdx until startCityIdx + numberOfCities) {\n            if (milesRemaining < 0) continue\n\n            val currentCityIdx = currentCityIdx % numberOfCities\n\n            val fuelFromCurrentCity = fuel[currentCityIdx]\n            val distanceToNextCity = distances[currentCityIdx]\n            milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity\n        }\n\n        if (milesRemaining >= 0) return startCityIdx\n    }\n\n    // This line should never be reached if the inputs are correct.\n    return -1\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the number of cities\nfun validStartingCity(distances: List<Int>, fuel: List<Int>, mpg: Int): Int {\n    val numberOfCities = distances.size\n    var milesRemaining = 0\n\n    var indexOfStartingCityCandidate = 0\n    var milesRemainingAtStartingCityCandidate = 0\n\n    for (cityIdx in 1 until numberOfCities) {\n        val distanceFromPreviousCity = distances[cityIdx - 1]\n        val fuelFromPreviousCity = fuel[cityIdx - 1]\n        milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity\n\n        if (milesRemaining < milesRemainingAtStartingCityCandidate) {\n            milesRemainingAtStartingCityCandidate = milesRemaining\n            indexOfStartingCityCandidate = cityIdx\n        }\n    }\n\n    return indexOfStartingCityCandidate\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.validStartingCity\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val distances = listOf(5, 25, 15, 10, 15)\n        val fuel = listOf(1, 2, 1, 0, 3)\n        val mpg = 10\n        val expected = 4\n        val output = validStartingCity(distances, fuel, mpg)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.validStartingCity\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val distances = listOf(5, 25, 15, 10, 15)\n        val fuel = listOf(1, 2, 1, 0, 3)\n        val mpg = 10\n        val expected = 4\n        val output = validStartingCity(distances, fuel, mpg)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def validStartingCity(distances, fuel, mpg):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(1) space - where n is the number of cities\ndef validStartingCity(distances, fuel, mpg):\n    numberOfCities = len(distances)\n\n    for startCityIdx in range(numberOfCities):\n        milesRemaining = 0\n\n        for currentCityIdx in range(startCityIdx, startCityIdx + numberOfCities):\n            if milesRemaining < 0:\n                continue\n\n            currentCityIdx = currentCityIdx % numberOfCities\n\n            fuelFromCurrentCity = fuel[currentCityIdx]\n            distanceToNextCity = distances[currentCityIdx]\n            milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity\n\n        if milesRemaining >= 0:\n            return startCityIdx\n\n    # This line should never be reached if the inputs are correct.\n    return -1\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the number of cities\ndef validStartingCity(distances, fuel, mpg):\n    numberOfCities = len(distances)\n    milesRemaining = 0\n\n    indexOfStartingCityCandidate = 0\n    milesRemainingAtStartingCityCandidate = 0\n\n    for cityIdx in range(1, numberOfCities):\n        distanceFromPreviousCity = distances[cityIdx - 1]\n        fuelFromPreviousCity = fuel[cityIdx - 1]\n        milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity\n\n        if milesRemaining < milesRemainingAtStartingCityCandidate:\n            milesRemainingAtStartingCityCandidate = milesRemaining\n            indexOfStartingCityCandidate = cityIdx\n\n    return indexOfStartingCityCandidate\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        distances = [5, 25, 15, 10, 15]\n        fuel = [1, 2, 1, 0, 3]\n        mpg = 10\n        expected = 4\n        actual = program.validStartingCity(distances, fuel, mpg)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        distances = [5, 25, 15, 10, 15]\n        fuel = [1, 2, 1, 0, 3]\n        mpg = 10\n        expected = 4\n        actual = program.validStartingCity(distances, fuel, mpg)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def validStartingCity(distances, fuel, mpg)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def validStartingCity(distances, fuel, mpg)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def validStartingCity(distances, fuel, mpg)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.validStartingCity\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.validStartingCity\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func validStartingCity(_ distances: [Int], _ fuel: [Int], _ mpg: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space - where n is the number of cities\n  func validStartingCity(_ distances: [Int], _ fuel: [Int], _ mpg: Int) -> Int {\n    let numberOfCities = distances.count\n\n    for startCityIdx in stride(from: 0, to: numberOfCities, by: 1) {\n      var milesRemaining = 0\n\n      for currentCityIdx in stride(from: startCityIdx, to: startCityIdx + numberOfCities, by: 1) {\n        if milesRemaining < 0 {\n          continue\n        }\n\n        let currentCityIdx = currentCityIdx % numberOfCities\n\n        let fuelFromCurrentCity = fuel[currentCityIdx]\n        let distanceToNextCity = distances[currentCityIdx]\n        milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity\n      }\n\n      if milesRemaining >= 0 {\n        return startCityIdx\n      }\n    }\n\n    // This line should never be reached if the inputs are correct.\n    return -1\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the number of cities\n  func validStartingCity(_ distances: [Int], _ fuel: [Int], _ mpg: Int) -> Int {\n    let numberOfCities = distances.count\n\n    var milesRemaining = 0\n\n    var indexOfStartingCityCandidate = 0\n    var milesRemainingAtStartingCityCandidate = 0\n\n    for cityIdx in stride(from: 1, to: numberOfCities, by: 1) {\n      let distanceFromPreviousCity = distances[cityIdx - 1]\n      let fuelFromPreviousCity = fuel[cityIdx - 1]\n      milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity\n\n      if milesRemaining < milesRemainingAtStartingCityCandidate {\n        milesRemainingAtStartingCityCandidate = milesRemaining\n        indexOfStartingCityCandidate = cityIdx\n      }\n    }\n\n    return indexOfStartingCityCandidate\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var distances = [5, 25, 15, 10, 15]\n      var fuel = [1, 2, 1, 0, 3]\n      var mpg = 10\n      var expected = 4\n      var actual = Program().validStartingCity(distances, fuel, mpg)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var distances = [5, 25, 15, 10, 15]\n      var fuel = [1, 2, 1, 0, 3]\n      var mpg = 10\n      var expected = 4\n      var actual = Program().validStartingCity(distances, fuel, mpg)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function validStartingCity(distances: number[], fuel: number[], mpg: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space - where n is the number of cities\nexport function validStartingCity(distances: number[], fuel: number[], mpg: number) {\n  const numberOfCities = distances.length;\n\n  for (let startCityIdx = 0; startCityIdx < numberOfCities; startCityIdx++) {\n    let milesRemaining = 0;\n\n    for (\n      let currentCityIdx = startCityIdx;\n      currentCityIdx < startCityIdx + numberOfCities;\n      currentCityIdx++\n    ) {\n      if (milesRemaining < 0) continue;\n\n      const currentCityIdxRotated = currentCityIdx % numberOfCities;\n\n      const fuelFromCurrentCity = fuel[currentCityIdxRotated];\n      const distanceToNextCity = distances[currentCityIdxRotated];\n      milesRemaining += fuelFromCurrentCity * mpg - distanceToNextCity;\n    }\n\n    if (milesRemaining >= 0) return startCityIdx;\n  }\n\n  // This line should never be reached if the inputs are correct.\n  return -1;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the number of cities\nexport function validStartingCity(distances: number[], fuel: number[], mpg: number) {\n  const numberOfCities = distances.length;\n  let milesRemaining = 0;\n\n  let indexOfStartingCityCandidate = 0;\n  let milesRemainingAtStartingCityCandidate = 0;\n\n  for (let cityIdx = 1; cityIdx < numberOfCities; cityIdx++) {\n    const distanceFromPreviousCity = distances[cityIdx - 1];\n    const fuelFromPreviousCity = fuel[cityIdx - 1];\n    milesRemaining += fuelFromPreviousCity * mpg - distanceFromPreviousCity;\n\n    if (milesRemaining < milesRemainingAtStartingCityCandidate) {\n      milesRemainingAtStartingCityCandidate = milesRemaining;\n      indexOfStartingCityCandidate = cityIdx;\n    }\n  }\n\n  return indexOfStartingCityCandidate;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const distances = [5, 25, 15, 10, 15];\n  const fuel = [1, 2, 1, 0, 3];\n  const mpg = 10;\n  const expected = 4;\n  const actual = program.validStartingCity(distances, fuel, mpg);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const distances = [5, 25, 15, 10, 15];\n  const fuel = [1, 2, 1, 0, 3];\n  const mpg = 10;\n  const expected = 4;\n  const actual = program.validStartingCity(distances, fuel, mpg);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "distances",
      "example": [
        5,
        25,
        15,
        10,
        15
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "minItems": 2,
        "type": "array"
      }
    },
    {
      "name": "fuel",
      "example": [
        1,
        2,
        1,
        0,
        3
      ],
      "schema": {
        "items": {
          "minimum": 0,
          "type": "integer"
        },
        "minItems": 2,
        "type": "array"
      }
    },
    {
      "name": "mpg",
      "example": 10,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "distances": [
        5,
        25,
        15,
        10,
        15
      ],
      "fuel": [
        1,
        2,
        1,
        0,
        3
      ],
      "mpg": 10
    },
    {
      "distances": [
        10,
        20,
        10,
        15,
        5,
        15,
        25
      ],
      "fuel": [
        0,
        2,
        1,
        0,
        0,
        1,
        1
      ],
      "mpg": 20
    },
    {
      "distances": [
        30,
        25,
        5,
        100,
        40
      ],
      "fuel": [
        3,
        2,
        1,
        0,
        4
      ],
      "mpg": 20
    },
    {
      "distances": [
        1,
        3,
        10,
        6,
        7,
        7,
        2,
        4
      ],
      "fuel": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "mpg": 5
    },
    {
      "distances": [
        5,
        2,
        3
      ],
      "fuel": [
        1,
        0,
        1
      ],
      "mpg": 5
    },
    {
      "distances": [
        4,
        6
      ],
      "fuel": [
        1,
        9
      ],
      "mpg": 1
    },
    {
      "distances": [
        30,
        40,
        10,
        10,
        17,
        13,
        50,
        30,
        10,
        40
      ],
      "fuel": [
        1,
        2,
        0,
        1,
        1,
        0,
        3,
        1,
        0,
        1
      ],
      "mpg": 25
    },
    {
      "distances": [
        30,
        40,
        10,
        10,
        17,
        13,
        50,
        30,
        10,
        40
      ],
      "fuel": [
        10,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "mpg": 25
    },
    {
      "distances": [
        15,
        20,
        25,
        30,
        35,
        5
      ],
      "fuel": [
        0,
        3,
        0,
        0,
        1,
        1
      ],
      "mpg": 26
    },
    {
      "distances": [
        10,
        10,
        10,
        10
      ],
      "fuel": [
        1,
        2,
        3,
        4
      ],
      "mpg": 4
    }
  ],
  "jsonTests": [
    {
      "distances": [
        5,
        25,
        15,
        10,
        15
      ],
      "fuel": [
        1,
        2,
        1,
        0,
        3
      ],
      "mpg": 10
    },
    {
      "distances": [
        10,
        20,
        10,
        15,
        5,
        15,
        25
      ],
      "fuel": [
        0,
        2,
        1,
        0,
        0,
        1,
        1
      ],
      "mpg": 20
    },
    {
      "distances": [
        30,
        25,
        5,
        100,
        40
      ],
      "fuel": [
        3,
        2,
        1,
        0,
        4
      ],
      "mpg": 20
    },
    {
      "distances": [
        1,
        3,
        10,
        6,
        7,
        7,
        2,
        4
      ],
      "fuel": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "mpg": 5
    },
    {
      "distances": [
        5,
        2,
        3
      ],
      "fuel": [
        1,
        0,
        1
      ],
      "mpg": 5
    },
    {
      "distances": [
        4,
        6
      ],
      "fuel": [
        1,
        9
      ],
      "mpg": 1
    },
    {
      "distances": [
        30,
        40,
        10,
        10,
        17,
        13,
        50,
        30,
        10,
        40
      ],
      "fuel": [
        1,
        2,
        0,
        1,
        1,
        0,
        3,
        1,
        0,
        1
      ],
      "mpg": 25
    },
    {
      "distances": [
        30,
        40,
        10,
        10,
        17,
        13,
        50,
        30,
        10,
        40
      ],
      "fuel": [
        10,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "mpg": 25
    },
    {
      "distances": [
        15,
        20,
        25,
        30,
        35,
        5
      ],
      "fuel": [
        0,
        3,
        0,
        0,
        1,
        1
      ],
      "mpg": 26
    },
    {
      "distances": [
        10,
        10,
        10,
        10
      ],
      "fuel": [
        1,
        2,
        3,
        4
      ],
      "mpg": 4
    }
  ],
  "changelog": []
}