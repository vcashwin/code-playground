{
  "uid": "array-of-products",
  "testStrategy": "JSON",
  "name": "Array Of Products",
  "version": 0,
  "releaseDate": "2020-11-16T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 49732,
    "failureCount": 15324
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "557765813",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1540
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of integers and returns an\n  array of the same length, where each element in the output array is equal to\n  the product of every other number in the input array.\n</p>\n<p>\n  In other words, the value at <span>output[i]</span> is equal to the product of\n  every number in the input array other than <span>input[i]</span>.\n</p>\n<p>Note that you're expected to solve this problem without using division.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [5, 1, 4, 2]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[8, 40, 10, 20]\n<span class=\"CodeEditor-promptComment\">// 8 is equal to 1 x 4 x 2</span>\n<span class=\"CodeEditor-promptComment\">// 40 is equal to 5 x 4 x 2</span>\n<span class=\"CodeEditor-promptComment\">// 10 is equal to 5 x 1 x 2</span>\n<span class=\"CodeEditor-promptComment\">// 20 is equal to 5 x 1 x 4</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nThink about the most naive approach to solving this problem. How can we do exactly what the problem wants us to do without focusing at all on time and space complexity?\n</p>\n",
    "\n<p>\nUnderstand how output[i] is being calculated. How can we calculate the product of every element other than the one at the current index? Can we do this with just one loop through the input array, or do we have to do multiple loops?\n</p>\n",
    "\n<p>\nFor each index in the input array, try calculating the product of every element to the left and the product of every element to the right. You can do this with two loops through the array: one from left to right and one from right to left. How can these products help us?\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\n\nusing namespace std;\n\nvector<int> arrayOfProducts(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\n\nusing namespace std;\n\n// O(n^2) time | O(n) space - where n is the length of the input array\nvector<int> arrayOfProducts(vector<int> array) {\n  vector<int> products(array.size());\n\n  for (int i = 0; i < array.size(); i++) {\n    int runningProduct = 1;\n    for (int j = 0; j < array.size(); j++) {\n      if (i != j) {\n        runningProduct *= array[j];\n      }\n    }\n    products[i] = runningProduct;\n  }\n  return products;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\n\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the number of elements in the input array\nvector<int> arrayOfProducts(vector<int> array) {\n  vector<int> products(array.size(), 1);\n  vector<int> leftProducts(array.size(), 1);\n  vector<int> rightProducts(array.size(), 1);\n\n  int leftRunningProduct = 1;\n  for (int i = 0; i < array.size(); i++) {\n    leftProducts[i] = leftRunningProduct;\n    leftRunningProduct *= array[i];\n  }\n\n  int rightRunningProduct = 1;\n  for (int i = array.size() - 1; i >= 0; i--) {\n    rightProducts[i] = rightRunningProduct;\n    rightRunningProduct *= array[i];\n  }\n\n  for (int i = 0; i < array.size(); i++) {\n    products[i] = leftProducts[i] * rightProducts[i];\n  }\n\n  return products;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\n\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the number of elements in the input array\nvector<int> arrayOfProducts(vector<int> array) {\n  vector<int> products(array.size(), 1);\n\n  int leftRunningProduct = 1;\n  for (int i = 0; i < array.size(); i++) {\n    products[i] = leftRunningProduct;\n    leftRunningProduct *= array[i];\n  }\n\n  int rightRunningProduct = 1;\n  for (int i = array.size() - 1; i >= 0; i--) {\n    products[i] *= rightRunningProduct;\n    rightRunningProduct *= array[i];\n  }\n\n  return products;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {5, 1, 4, 2};\n      vector<int> expected = {8, 40, 10, 20};\n      vector<int> actual = arrayOfProducts(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {5, 1, 4, 2};\n      vector<int> expected = {8, 40, 10, 20};\n      vector<int> actual = arrayOfProducts(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int[] ArrayOfProducts(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n^2) time | O(n) space - where n is the length of the input array\n  public int[] ArrayOfProducts(int[] array) {\n    int[] products = new int[array.Length];\n\n    for (int i = 0; i < array.Length; i++) {\n      int runningProduct = 1;\n      for (int j = 0; j < array.Length; j++) {\n        if (i != j) {\n          runningProduct *= array[j];\n        }\n        products[i] = runningProduct;\n      }\n    }\n\n    return products;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] ArrayOfProducts(int[] array) {\n    int[] products = new int[array.Length];\n    int[] leftProducts = new int[array.Length];\n    int[] rightProducts = new int[array.Length];\n\n    int leftRunningProduct = 1;\n    for (int i = 0; i < array.Length; i++) {\n      leftProducts[i] = leftRunningProduct;\n      leftRunningProduct *= array[i];\n    }\n\n    int rightRunningProduct = 1;\n    for (int i = array.Length - 1; i >= 0; i--) {\n      rightProducts[i] = rightRunningProduct;\n      rightRunningProduct *= array[i];\n    }\n\n    for (int i = 0; i < array.Length; i++) {\n      products[i] = leftProducts[i] * rightProducts[i];\n    }\n\n    return products;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] ArrayOfProducts(int[] array) {\n    int[] products = new int[array.Length];\n\n    int leftRunningProduct = 1;\n    for (int i = 0; i < array.Length; i++) {\n      products[i] = leftRunningProduct;\n      leftRunningProduct *= array[i];\n    }\n\n    int rightRunningProduct = 1;\n    for (int i = array.Length - 1; i >= 0; i--) {\n      products[i] *= rightRunningProduct;\n      rightRunningProduct *= array[i];\n    }\n\n    return products;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 5, 1, 4, 2 };\n    var expected = new int[] { 8, 40, 10, 20 };\n    int[] actual = new Program().ArrayOfProducts(input);\n    Utils.AssertTrue(expected.Length == actual.Length);\n    for (int i = 0; i < actual.Length; i++) {\n      Utils.AssertTrue(actual[i] == expected[i]);\n    }\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 5, 1, 4, 2 };\n    var expected = new int[] { 8, 40, 10, 20 };\n    int[] actual = new Program().ArrayOfProducts(input);\n    Utils.AssertTrue(expected.Length == actual.Length);\n    for (int i = 0; i < actual.Length; i++) {\n      Utils.AssertTrue(actual[i] == expected[i]);\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ArrayOfProducts(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(n) space - where n is the number of elements in the input array\nfunc ArrayOfProducts(array []int) []int {\n\tproducts := make([]int, len(array))\n\n\tfor i := range array {\n\t\trunningProduct := 1\n\t\tfor j := range array {\n\t\t\tif i != j {\n\t\t\t\trunningProduct *= array[j]\n\t\t\t}\n\t\t}\n\t\tproducts[i] = runningProduct\n\t}\n\treturn products\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the number of elements in the input array\nfunc ArrayOfProducts(array []int) []int {\n\tproducts := make([]int, len(array))\n\tleftProducts := make([]int, len(array))\n\trightProducts := make([]int, len(array))\n\tfor i := range array {\n\t\tproducts[i] = 1\n\t\tleftProducts[i] = 1\n\t\trightProducts[i] = 1\n\t}\n\n\tleftRunningProduct := 1\n\tfor i := range array {\n\t\tleftProducts[i] = leftRunningProduct\n\t\tleftRunningProduct *= array[i]\n\t}\n\n\trightRunningProduct := 1\n\tfor i := len(array) - 1; i >= 0; i-- {\n\t\trightProducts[i] = rightRunningProduct\n\t\trightRunningProduct *= array[i]\n\t}\n\n\tfor i := range array {\n\t\tproducts[i] = leftProducts[i] * rightProducts[i]\n\t}\n\treturn products\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the number of elements in the input array\nfunc ArrayOfProducts(array []int) []int {\n\tproducts := make([]int, len(array))\n\tfor i := range array {\n\t\tproducts[i] = 1\n\t}\n\n\tleftRunningProduct := 1\n\tfor i := range array {\n\t\tproducts[i] = leftRunningProduct\n\t\tleftRunningProduct *= array[i]\n\t}\n\n\trightRunningProduct := 1\n\tfor i := len(array) - 1; i >= 0; i-- {\n\t\tproducts[i] *= rightRunningProduct\n\t\trightRunningProduct *= array[i]\n\t}\n\treturn products\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{5, 1, 4, 2}\n\texpected := []int{8, 40, 10, 20}\n\tactual := ArrayOfProducts(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{5, 1, 4, 2}\n\texpected := []int{8, 40, 10, 20}\n\tactual := ArrayOfProducts(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int[] arrayOfProducts(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space - where n is the length of the input array\n  public int[] arrayOfProducts(int[] array) {\n    int[] products = new int[array.length];\n\n    for (int i = 0; i < array.length; i++) {\n      int runningProduct = 1;\n      for (int j = 0; j < array.length; j++) {\n        if (i != j) {\n          runningProduct *= array[j];\n        }\n        products[i] = runningProduct;\n      }\n    }\n\n    return products;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] arrayOfProducts(int[] array) {\n    int[] products = new int[array.length];\n    int[] leftProducts = new int[array.length];\n    int[] rightProducts = new int[array.length];\n\n    int leftRunningProduct = 1;\n    for (int i = 0; i < array.length; i++) {\n      leftProducts[i] = leftRunningProduct;\n      leftRunningProduct *= array[i];\n    }\n\n    int rightRunningProduct = 1;\n    for (int i = array.length - 1; i >= 0; i--) {\n      rightProducts[i] = rightRunningProduct;\n      rightRunningProduct *= array[i];\n    }\n\n    for (int i = 0; i < array.length; i++) {\n      products[i] = leftProducts[i] * rightProducts[i];\n    }\n\n    return products;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] arrayOfProducts(int[] array) {\n    int[] products = new int[array.length];\n\n    int leftRunningProduct = 1;\n    for (int i = 0; i < array.length; i++) {\n      products[i] = leftRunningProduct;\n      leftRunningProduct *= array[i];\n    }\n\n    int rightRunningProduct = 1;\n    for (int i = array.length - 1; i >= 0; i--) {\n      products[i] *= rightRunningProduct;\n      rightRunningProduct *= array[i];\n    }\n\n    return products;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {5, 1, 4, 2};\n    var expected = new int[] {8, 40, 10, 20};\n    int[] actual = new Program().arrayOfProducts(input);\n    Utils.assertTrue(expected.length == actual.length);\n    for (int i = 0; i < actual.length; i++) {\n      Utils.assertTrue(actual[i] == expected[i]);\n    }\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {5, 1, 4, 2};\n    var expected = new int[] {8, 40, 10, 20};\n    int[] actual = new Program().arrayOfProducts(input);\n    Utils.assertTrue(expected.length == actual.length);\n    for (int i = 0; i < actual.length; i++) {\n      Utils.assertTrue(actual[i] == expected[i]);\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function arrayOfProducts(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.arrayOfProducts = arrayOfProducts;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space - where n is the length of the input array\nfunction arrayOfProducts(array) {\n  const products = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let runningProduct = 1;\n    for (let j = 0; j < array.length; j++) {\n      if (i !== j) {\n        runningProduct *= array[j];\n      }\n      products[i] = runningProduct;\n    }\n  }\n\n  return products;\n}\n\nexports.arrayOfProducts = arrayOfProducts;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction arrayOfProducts(array) {\n  const products = new Array(array.length).fill(1);\n  const leftProducts = new Array(array.length).fill(1);\n  const rightProducts = new Array(array.length).fill(1);\n\n  let leftRunningProduct = 1;\n  for (let i = 0; i < array.length; i++) {\n    leftProducts[i] = leftRunningProduct;\n    leftRunningProduct *= array[i];\n  }\n\n  let rightRunningProduct = 1;\n  for (let i = array.length - 1; i > -1; i--) {\n    rightProducts[i] = rightRunningProduct;\n    rightRunningProduct *= array[i];\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    products[i] = leftProducts[i] * rightProducts[i];\n  }\n\n  return products;\n}\n\nexports.arrayOfProducts = arrayOfProducts;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction arrayOfProducts(array) {\n  const products = new Array(array.length).fill(1);\n\n  let leftRunningProduct = 1;\n  for (let i = 0; i < array.length; i++) {\n    products[i] = leftRunningProduct;\n    leftRunningProduct *= array[i];\n  }\n\n  let rightRunningProduct = 1;\n  for (let i = array.length - 1; i > -1; i--) {\n    products[i] *= rightRunningProduct;\n    rightRunningProduct *= array[i];\n  }\n\n  return products;\n}\n\nexports.arrayOfProducts = arrayOfProducts;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [5, 1, 4, 2];\n  const expected = [8, 40, 10, 20];\n  const actual = program.arrayOfProducts(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [5, 1, 4, 2];\n  const expected = [8, 40, 10, 20];\n  const actual = program.arrayOfProducts(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun arrayOfProducts(array: List<Int>): List<Int> {\n    // Write your code here.\n    return array\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space - where n is the number of elements in the input array\nfun arrayOfProducts(array: List<Int>): List<Int> {\n    val products = MutableList(array.size) { 1 }\n\n    for (i in 0 until array.size) {\n        var runningProduct = 1\n        for (j in 0 until array.size) {\n            if (i != j) runningProduct *= array[j]\n        }\n        products[i] = runningProduct\n    }\n\n    return products\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the number of elements in the input array\nfun arrayOfProducts(array: List<Int>): List<Int> {\n    val products = MutableList(array.size) { 1 }\n    val leftProducts = MutableList(array.size) { 1 }\n    val rightProducts = MutableList(array.size) { 1 }\n\n    var leftRunningProduct = 1\n    for (i in 0 until array.size) {\n        leftProducts[i] = leftRunningProduct\n        leftRunningProduct *= array[i]\n    }\n\n    var rightRunningProduct = 1\n    for (i in array.size - 1 downTo 0) {\n        rightProducts[i] = rightRunningProduct\n        rightRunningProduct *= array[i]\n    }\n\n    for (i in 0 until array.size) {\n        products[i] = leftProducts[i] * rightProducts[i]\n    }\n\n    return products\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the number of elements in the input array\nfun arrayOfProducts(array: List<Int>): List<Int> {\n    val products = MutableList(array.size) { 1 }\n\n    var leftRunningProduct = 1\n    for (i in 0 until array.size) {\n        products[i] = leftRunningProduct\n        leftRunningProduct *= array[i]\n    }\n\n    var rightRunningProduct = 1\n    for (i in array.size - 1 downTo 0) {\n        products[i] *= rightRunningProduct\n        rightRunningProduct *= array[i]\n    }\n\n    return products\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.arrayOfProducts\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(5, 1, 4, 2)\n        val expected = listOf(8, 40, 10, 20)\n        val output = arrayOfProducts(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.arrayOfProducts\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(5, 1, 4, 2)\n        val expected = listOf(8, 40, 10, 20)\n        val output = arrayOfProducts(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def arrayOfProducts(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space - where n is the length of the input array\ndef arrayOfProducts(array):\n    products = [1 for _ in range(len(array))]\n\n    for i in range(len(array)):\n        runningProduct = 1\n        for j in range(len(array)):\n            if i != j:\n                runningProduct *= array[j]\n        products[i] = runningProduct\n\n    return products\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef arrayOfProducts(array):\n    products = [1 for _ in range(len(array))]\n    leftProducts = [1 for _ in range(len(array))]\n    rightProducts = [1 for _ in range(len(array))]\n\n    leftRunningProduct = 1\n    for i in range(len(array)):\n        leftProducts[i] = leftRunningProduct\n        leftRunningProduct *= array[i]\n\n    rightRunningProduct = 1\n    for i in reversed(range(len(array))):\n        rightProducts[i] = rightRunningProduct\n        rightRunningProduct *= array[i]\n\n    for i in range(len(array)):\n        products[i] = leftProducts[i] * rightProducts[i]\n\n    return products\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef arrayOfProducts(array):\n    products = [1 for _ in range(len(array))]\n\n    leftRunningProduct = 1\n    for i in range(len(array)):\n        products[i] = leftRunningProduct\n        leftRunningProduct *= array[i]\n\n    rightRunningProduct = 1\n    for i in reversed(range(len(array))):\n        products[i] *= rightRunningProduct\n        rightRunningProduct *= array[i]\n\n    return products\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [5, 1, 4, 2]\n        expected = [8, 40, 10, 20]\n        actual = program.arrayOfProducts(array)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [5, 1, 4, 2]\n        expected = [8, 40, 10, 20]\n        actual = program.arrayOfProducts(array)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def arrayOfProducts(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def arrayOfProducts(array)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def arrayOfProducts(array)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def arrayOfProducts(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.arrayOfProducts\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.arrayOfProducts\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func arrayOfProducts(_ array: [Int]) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space - where n is the number of elements in the input array\n  func arrayOfProducts(_ array: [Int]) -> [Int] {\n    var products = [Int](repeating: 0, count: array.count)\n\n    for i in 0 ..< array.count {\n      var runningProduct = 1\n      for j in 0 ..< array.count {\n        if i != j {\n          runningProduct *= array[j]\n        }\n      }\n      products[i] = runningProduct\n    }\n    return products\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the number of elements in the input array\n  func arrayOfProducts(_ array: [Int]) -> [Int] {\n    var products = [Int](repeating: 1, count: array.count)\n    var leftProducts = [Int](repeating: 1, count: array.count)\n    var rightProducts = [Int](repeating: 1, count: array.count)\n\n    var leftRunningProduct = 1\n    for i in 0 ..< array.count {\n      leftProducts[i] = leftRunningProduct\n      leftRunningProduct *= array[i]\n    }\n\n    var rightRunningProduct = 1\n    for i in stride(from: array.count - 1, through: 0, by: -1) {\n      rightProducts[i] = rightRunningProduct\n      rightRunningProduct *= array[i]\n    }\n\n    for i in 0 ..< array.count {\n      products[i] = leftProducts[i] * rightProducts[i]\n    }\n    return products\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the number of elements in the input array\n  func arrayOfProducts(_ array: [Int]) -> [Int] {\n    var products = [Int](repeating: 1, count: array.count)\n\n    var leftRunningProduct = 1\n    for i in 0 ..< array.count {\n      products[i] = leftRunningProduct\n      leftRunningProduct *= array[i]\n    }\n\n    var rightRunningProduct = 1\n    for i in stride(from: array.count - 1, through: 0, by: -1) {\n      products[i] *= rightRunningProduct\n      rightRunningProduct *= array[i]\n    }\n    return products\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [5, 1, 4, 2]\n      var expected = [8, 40, 10, 20]\n      var actual = Program().arrayOfProducts(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [5, 1, 4, 2]\n      var expected = [8, 40, 10, 20]\n      var actual = Program().arrayOfProducts(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function arrayOfProducts(array: number[]) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space - where n is the length of the input array\nexport function arrayOfProducts(array: number[]) {\n  const products: number[] = [];\n\n  for (let i = 0; i < array.length; i++) {\n    let runningProduct = 1;\n    for (let j = 0; j < array.length; j++) {\n      if (i !== j) {\n        runningProduct *= array[j];\n      }\n      products[i] = runningProduct;\n    }\n  }\n\n  return products;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function arrayOfProducts(array: number[]) {\n  const products: number[] = new Array(array.length).fill(1);\n  const leftProducts: number[] = new Array(array.length).fill(1);\n  const rightProducts: number[] = new Array(array.length).fill(1);\n\n  let leftRunningProduct = 1;\n  for (let i = 0; i < array.length; i++) {\n    leftProducts[i] = leftRunningProduct;\n    leftRunningProduct *= array[i];\n  }\n\n  let rightRunningProduct = 1;\n  for (let i = array.length - 1; i > -1; i--) {\n    rightProducts[i] = rightRunningProduct;\n    rightRunningProduct *= array[i];\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    products[i] = leftProducts[i] * rightProducts[i];\n  }\n\n  return products;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function arrayOfProducts(array: number[]) {\n  const products: number[] = new Array(array.length).fill(1);\n\n  let leftRunningProduct = 1;\n  for (let i = 0; i < array.length; i++) {\n    products[i] = leftRunningProduct;\n    leftRunningProduct *= array[i];\n  }\n\n  let rightRunningProduct = 1;\n  for (let i = array.length - 1; i > -1; i--) {\n    products[i] *= rightRunningProduct;\n    rightRunningProduct *= array[i];\n  }\n\n  return products;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [5, 1, 4, 2];\n  const expected = [8, 40, 10, 20];\n  const actual = program.arrayOfProducts(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [5, 1, 4, 2];\n  const expected = [8, 40, 10, 20];\n  const actual = program.arrayOfProducts(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        5,
        1,
        4,
        2
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        5,
        1,
        4,
        2
      ]
    },
    {
      "array": [
        1,
        8,
        6,
        2,
        4
      ]
    },
    {
      "array": [
        -5,
        2,
        -4,
        14,
        -6
      ]
    },
    {
      "array": [
        9,
        3,
        2,
        1,
        9,
        5,
        3,
        2
      ]
    },
    {
      "array": [
        4,
        4
      ]
    },
    {
      "array": [
        0,
        0,
        0,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1,
        -1
      ]
    },
    {
      "array": [
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        5,
        1,
        4,
        2
      ]
    },
    {
      "array": [
        1,
        8,
        6,
        2,
        4
      ]
    },
    {
      "array": [
        -5,
        2,
        -4,
        14,
        -6
      ]
    },
    {
      "array": [
        9,
        3,
        2,
        1,
        9,
        5,
        3,
        2
      ]
    },
    {
      "array": [
        4,
        4
      ]
    },
    {
      "array": [
        0,
        0,
        0,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1,
        -1
      ]
    },
    {
      "array": [
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    }
  ],
  "changelog": []
}