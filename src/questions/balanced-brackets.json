{
  "uid": "balanced-brackets",
  "testStrategy": "JSON",
  "name": "Balanced Brackets",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Stacks",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 32163,
    "failureCount": 11141
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "227727657",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 921
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a string made up of brackets (<span>(</span>,\n  <span>[</span>, <span>{</span>, <span>)</span>, <span>]</span>, and\n  <span>}</span>) and other optional characters. The function should return a\n  boolean representing whether the string is balanced with regards to brackets.\n</p>\n<p>\n  A string is said to be balanced if it has as many opening brackets of a\n  certain type as it has closing brackets of that type and if no bracket is\n  unmatched. Note that an opening bracket can't match a corresponding closing\n  bracket that comes before it, and similarly, a closing bracket can't match a\n  corresponding opening bracket that comes after it. Also, brackets can't\n  overlap each other as in\n  <span>[(])</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"([])(){}(())()()\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue <span class=\"CodeEditor-promptComment\">// it's balanced</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nIf you iterate through the input string one character at a time, there are two scenarios in which the string will be unbalanced: either you run into a closing bracket with no prior matching opening bracket or you get to the end of the string with some opening brackets that haven't been matched. Can you use an auxiliary data structure to keep track of all the brackets and efficiently check if you run into a unbalanced scenario at every iteration?\n</p>\n",
    "\n<p>\nConsider using a stack to store opening brackets as you traverse the string. The Last-In-First-Out property of the stack should allow you to match any closing brackets that you run into against the most recent opening bracket, if one exists, in which case you can simply pop it out of the stack. How can you check that there are no unmatched opening bracket once you've finished traversing through the string?\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool balancedBrackets(string str) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <stack>\n#include <unordered_map>\n\nusing namespace std;\n\n// O(n) time | O(n) space\nbool balancedBrackets(string str) {\n  string openingBrackets = \"([{\";\n  string closingBrackets = \")]}\";\n  unordered_map<char, char> matchingBrackets{\n    {')', '('}, {']', '['}, {'}', '{'}};\n  stack<char> stack;\n  for (char character : str) {\n    if (openingBrackets.find(character) != string::npos) {\n      stack.push(character);\n    } else if (closingBrackets.find(character) != string::npos) {\n      if (stack.size() == 0) {\n        return false;\n      }\n      if (stack.top() == matchingBrackets[character]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.size() == 0;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(balancedBrackets(\"([])(){}(())()()\") == true);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(balancedBrackets(\"([])(){}(())()()\") == true);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static bool BalancedBrackets(string str) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(n) space\n  public static bool BalancedBrackets(string str) {\n    string openingBrackets = \"([{\";\n    string closingBrackets = \")]}\";\n    Dictionary<char, char> matchingBrackets = new Dictionary<char, char>();\n    matchingBrackets.Add(')', '(');\n    matchingBrackets.Add(']', '[');\n    matchingBrackets.Add('}', '{');\n    List<char> stack = new List<char>();\n    for (int i = 0; i < str.Length; i++) {\n      char letter = str[i];\n      if (openingBrackets.IndexOf(letter) != -1) {\n        stack.Add(letter);\n      } else if (closingBrackets.IndexOf(letter) != -1) {\n        if (stack.Count == 0) {\n          return false;\n        }\n        if (stack[stack.Count - 1] == matchingBrackets[letter]) {\n          stack.RemoveAt(stack.Count - 1);\n        } else {\n          return false;\n        }\n      }\n    }\n    return stack.Count == 0;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"([])(){}(())()()\";\n    Utils.AssertTrue(Program.BalancedBrackets(input));\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"([])(){}(())()()\";\n    Utils.AssertTrue(Program.BalancedBrackets(input));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc BalancedBrackets(s string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nvar opening = map[rune]bool{\n\t'(': true,\n\t'[': true,\n\t'{': true,\n}\n\nvar closing = map[rune]bool{\n\t')': true,\n\t']': true,\n\t'}': true,\n}\n\nvar matching = map[rune]rune{\n\t')': '(',\n\t']': '[',\n\t'}': '{',\n}\n\n// O(n) time | O(n) space\nfunc BalancedBrackets(s string) bool {\n\tstack := []rune{}\n\tfor _, char := range s {\n\t\tif _, found := opening[char]; found {\n\t\t\tstack = append(stack, char)\n\t\t\tcontinue\n\t\t}\n\t\tif _, found := closing[char]; found {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif stack[len(stack)-1] == matching[char] {\n\t\t\t\tstack = stack[0 : len(stack)-1]\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"([])(){}(())()()\")\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"([])(){}(())()()\")\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static boolean balancedBrackets(String str) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space\n  public static boolean balancedBrackets(String str) {\n    String openingBrackets = \"([{\";\n    String closingBrackets = \")]}\";\n    Map<Character, Character> matchingBrackets =\n      new HashMap<Character, Character>();\n    matchingBrackets.put(')', '(');\n    matchingBrackets.put(']', '[');\n    matchingBrackets.put('}', '{');\n    List<Character> stack = new ArrayList<Character>();\n    for (int i = 0; i < str.length(); i++) {\n      char letter = str.charAt(i);\n      if (openingBrackets.indexOf(letter) != -1) {\n        stack.add(letter);\n      } else if (closingBrackets.indexOf(letter) != -1) {\n        if (stack.size() == 0) {\n          return false;\n        }\n        if (stack.get(stack.size() - 1) == matchingBrackets.get(letter)) {\n          stack.remove(stack.size() - 1);\n        } else {\n          return false;\n        }\n      }\n    }\n    return stack.size() == 0;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"([])(){}(())()()\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"([])(){}(())()()\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function balancedBrackets(string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.balancedBrackets = balancedBrackets;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nfunction balancedBrackets(string) {\n  const openingBrackets = '([{';\n  const closingBrackets = ')]}';\n  const matchingBrackets = {')': '(', ']': '[', '}': '{'};\n  const stack = [];\n  for (const char of string) {\n    if (openingBrackets.includes(char)) {\n      stack.push(char);\n    } else if (closingBrackets.includes(char)) {\n      if (stack.length == 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === matchingBrackets[char]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\nexports.balancedBrackets = balancedBrackets;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun balancedBrackets(str: String): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport java.util.Stack\n\n// O(n) time | O(n) space\nfun balancedBrackets(string: String): Boolean {\n    val openingBrackets = \"([{\"\n    val closingBrackets = \")]}\"\n    val matchingBrackets = mapOf(')' to '(', ']' to '[', '}' to '{')\n    val stack = Stack<Char>()\n    for (char in string) {\n        if (openingBrackets.contains(char)) {\n            stack.add(char)\n        } else if (closingBrackets.contains(char)) {\n            if (stack.size == 0) {\n                return false\n            }\n            if (stack.peek() == matchingBrackets[char]) {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.size == 0\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.balancedBrackets\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"([])(){}(())()()\"\n        assert(balancedBrackets(input))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.balancedBrackets\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"([])(){}(())()()\"\n        assert(balancedBrackets(input))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def balancedBrackets(string):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space\ndef balancedBrackets(string):\n    openingBrackets = \"([{\"\n    closingBrackets = \")]}\"\n    matchingBrackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for char in string:\n        if char in openingBrackets:\n            stack.append(char)\n        elif char in closingBrackets:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == matchingBrackets[char]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.balancedBrackets(\"([])(){}(())()()\"), True)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.balancedBrackets(\"([])(){}(())()()\"), True)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def balancedBrackets(string)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def balancedBrackets(string)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.balancedBrackets\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.balancedBrackets\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func balancedBrackets(string: String) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func balancedBrackets(string: String) -> Bool {\n    let openingBrackets = \"([{\"\n    let closingBrackets = \")]}\"\n    let matchingBrackets: [Character: Character] = [\")\": \"(\", \"]\": \"[\", \"}\": \"{\"]\n\n    var stack = [Character]()\n\n    for character in string {\n      if openingBrackets.contains(character) {\n        stack.append(character)\n      } else if closingBrackets.contains(character) {\n        if stack.count == 0 {\n          return false\n        } else {\n          if let lastCharacter = stack.last, lastCharacter == matchingBrackets[character] {\n            stack.popLast()\n          } else {\n            return false\n          }\n        }\n      }\n    }\n\n    return stack.count == 0\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"([])(){}(())()()\"))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"([])(){}(())()()\"))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function balancedBrackets(string: string) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space\nexport function balancedBrackets(string: string) {\n  const openingBrackets = '([{';\n  const closingBrackets = ')]}';\n  const matchingBrackets: {[key: string]: string} = {')': '(', ']': '[', '}': '{'};\n  const stack: string[] = [];\n  for (const char of string) {\n    if (openingBrackets.includes(char)) {\n      stack.push(char);\n    } else if (closingBrackets.includes(char)) {\n      if (stack.length == 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === matchingBrackets[char]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "([])(){}(())()()",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "([])(){}(())()()"
    },
    {
      "string": "()[]{}{"
    },
    {
      "string": "(((((({{{{{[[[[[([)])]]]]]}}}}}))))))"
    },
    {
      "string": "()()[{()})]"
    },
    {
      "string": "(()())((()()()))"
    },
    {
      "string": "{}()"
    },
    {
      "string": "()([])"
    },
    {
      "string": "((){{{{[]}}}})"
    },
    {
      "string": "((({})()))"
    },
    {
      "string": "(([]()()){})"
    },
    {
      "string": "(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())"
    },
    {
      "string": "{[[[[({(}))]]]]}"
    },
    {
      "string": "[((([])([]){}){}){}([])[]((())"
    },
    {
      "string": ")[]}"
    },
    {
      "string": "(a)"
    },
    {
      "string": "(a("
    },
    {
      "string": "(141[])(){waga}((51afaw))()hh()"
    },
    {
      "string": "aafwgaga()[]a{}{gggg"
    },
    {
      "string": "(((((({{{{{safaf[[[[[([)]safsafsa)]]]]]}}}gawga}}))))))"
    },
    {
      "string": "()(agawg)[{()gawggaw})]"
    },
    {
      "string": "(()agwg())((()agwga()())gawgwgag)"
    },
    {
      "string": "{}gawgw()"
    },
    {
      "string": "(agwgg)([ghhheah%&@Q])"
    }
  ],
  "jsonTests": [
    {
      "string": "([])(){}(())()()"
    },
    {
      "string": "()[]{}{"
    },
    {
      "string": "(((((({{{{{[[[[[([)])]]]]]}}}}}))))))"
    },
    {
      "string": "()()[{()})]"
    },
    {
      "string": "(()())((()()()))"
    },
    {
      "string": "{}()"
    },
    {
      "string": "()([])"
    },
    {
      "string": "((){{{{[]}}}})"
    },
    {
      "string": "((({})()))"
    },
    {
      "string": "(([]()()){})"
    },
    {
      "string": "(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())"
    },
    {
      "string": "{[[[[({(}))]]]]}"
    },
    {
      "string": "[((([])([]){}){}){}([])[]((())"
    },
    {
      "string": ")[]}"
    },
    {
      "string": "(a)"
    },
    {
      "string": "(a("
    },
    {
      "string": "(141[])(){waga}((51afaw))()hh()"
    },
    {
      "string": "aafwgaga()[]a{}{gggg"
    },
    {
      "string": "(((((({{{{{safaf[[[[[([)]safsafsa)]]]]]}}}gawga}}))))))"
    },
    {
      "string": "()(agawg)[{()gawggaw})]"
    },
    {
      "string": "(()agwg())((()agwga()())gawgwgag)"
    },
    {
      "string": "{}gawgw()"
    },
    {
      "string": "(agwgg)([ghhheah%&@Q])"
    }
  ],
  "changelog": []
}