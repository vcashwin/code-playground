{
  "uid": "best-digits",
  "testStrategy": "JSON",
  "name": "Best Digits",
  "version": 0,
  "releaseDate": "2023-04-08T00:00:00Z",
  "category": "Stacks",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 2717,
    "failureCount": 382
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "783072796",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 707
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes a positive integer represented as a string\n  <span>number</span> and an integer <span>numDigits</span>.\n  Remove <span>numDigits</span> from the string so that the number represented\n  by the string is as large as possible afterwards.\n</p>\n<p>\n  Note that the order of the remaining digits cannot be changed. You can assume\n  <span>numDigits</span> will always be less than the length of <span>number</span>\n  and greater than or equal to 0.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">number</span> = \"462839\"\n<span class=\"CodeEditor-promptParameter\">numDigits</span> = 2\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"6839\" <span class=\"CodeEditor-promptComment\">// remove digits 4 and 2</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nIf we want the number to be as large as possible then which digits would we want to remove? Consider the importance\nof place values. For example if we're given <span>number = \"191\"</span> and <span>numDigits = 1</span> then which 1\nwould we remove?\n</p>\n",
    "\n<p>\nIt's most important that the largest place values have the highest value digits. If you traverse the string from left to\nright then you will be traversing the place values in order of importance. If you still have digits to remove then you\nneed to remove smaller digits in higher place values. The question then becomes how can you know what comes later on in\nthe string? If you want to solve this problem in linear time what data structure might help you in this situation?\n</p>\n",
    "\n<p>\nUse a stack to push digits onto while traversing the string from left to right. That way top of the stack will always\nhave the digit in the last highest place value. Compare the top of the stack to the current digit and if the current\ndigit is greater than the top of the stack, then pop from the stack. Utilizing a stack allows you to replace small\ndigits with largest digits that come later in the string because you can pop off of the stack in order of importance.\n\nYou will need to build a string to return from the final stack.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nstring bestDigits(string number, int numDigits) {\n  // Write your code here.\n  return \"\";\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <stack>\n\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input string\nstring bestDigits(string number, int numDigits) {\n  stack<char> stack;\n\n  for (auto character : number) {\n    while (numDigits > 0 && !stack.empty() && character > stack.top()) {\n      numDigits--;\n      stack.pop();\n    }\n    stack.push(character);\n  }\n\n  while (numDigits > 0) {\n    numDigits--;\n    stack.pop();\n  }\n\n  // build final string from stack\n  string bestDigitString = \"\";\n  while (!stack.empty()) {\n    bestDigitString += stack.top();\n    stack.pop();\n  }\n\n  reverse(bestDigitString.begin(), bestDigitString.end());\n\n  return bestDigitString;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string number = \"462839\";\n      int numDigits = 2;\n      string expected = \"6839\";\n      auto actual = bestDigits(number, numDigits);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string number = \"462839\";\n      int numDigits = 2;\n      string expected = \"6839\";\n      auto actual = bestDigits(number, numDigits);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public string BestDigits(string number, int numDigits) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System.Text;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input string\n  public string BestDigits(string number, int numDigits) {\n    Stack<char> stack = new Stack<char>();\n\n    for (int idx = 0; idx < number.Length; idx++) {\n      char character = number[idx];\n      while (numDigits > 0 && stack.Count > 0 && character > stack.Peek()) {\n        numDigits--;\n        stack.Pop();\n      }\n      stack.Push(character);\n    }\n\n    while (numDigits > 0) {\n      numDigits--;\n      stack.Pop();\n    }\n\n    // build final string from stack\n    StringBuilder bestDigitString = new StringBuilder();\n    while (stack.Count > 0) {\n      bestDigitString.Append(stack.Pop());\n    }\n\n    var charArray = bestDigitString.ToString().ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string number = \"462839\";\n    int numDigits = 2;\n    string expected = \"6839\";\n    var actual = new Program().BestDigits(number, numDigits);\n    Utils.AssertTrue(expected.Equals(actual));\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string number = \"462839\";\n    int numDigits = 2;\n    string expected = \"6839\";\n    var actual = new Program().BestDigits(number, numDigits);\n    Utils.AssertTrue(expected.Equals(actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc BestDigits(number string, numDigits int) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the input string\nfunc BestDigits(number string, numDigits int) string {\n\tstack := make([]rune, 0)\n\n\tfor _, digit := range number {\n\t\tfor numDigits > 0 && len(stack) > 0 && digit > stack[len(stack)-1] {\n\t\t\tnumDigits -= 1\n\t\t\tstack = stack[:len(stack)-1]\n\t\t}\n\n\t\tstack = append(stack, digit)\n\t}\n\n\tfor numDigits > 0 {\n\t\tnumDigits -= 1\n\t\tstack = stack[:len(stack)-1]\n\t}\n\n\treturn string(stack)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tnumber := \"462839\"\n\tnumDigits := 2\n\texpected := \"6839\"\n\tactual := BestDigits(number, numDigits)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tnumber := \"462839\"\n\tnumDigits := 2\n\texpected := \"6839\"\n\tactual := BestDigits(number, numDigits)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public String bestDigits(String number, int numDigits) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input string\n  public String bestDigits(String number, int numDigits) {\n    Stack<Character> stack = new Stack<Character>();\n\n    for (int idx = 0; idx < number.length(); idx++) {\n      char character = number.charAt(idx);\n      while (numDigits > 0 && !stack.isEmpty() && character > stack.peek()) {\n        numDigits--;\n        stack.pop();\n      }\n      stack.push(character);\n    }\n\n    while (numDigits > 0) {\n      numDigits--;\n      stack.pop();\n    }\n\n    // build final string from stack\n    StringBuilder bestDigitString = new StringBuilder();\n    while (!stack.isEmpty()) {\n      bestDigitString.append(stack.pop());\n    }\n\n    bestDigitString.reverse();\n\n    return bestDigitString.toString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String number = \"462839\";\n    int numDigits = 2;\n    String expected = \"6839\";\n    var actual = new Program().bestDigits(number, numDigits);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String number = \"462839\";\n    int numDigits = 2;\n    String expected = \"6839\";\n    var actual = new Program().bestDigits(number, numDigits);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function bestDigits(number, numDigits) {\n  // Write your code here.\n  return '';\n}\n\n// Do not edit the line below.\nexports.bestDigits = bestDigits;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input string\nfunction bestDigits(number, numDigits) {\n  const stack = [];\n\n  for (const digit of number) {\n    while (numDigits > 0 && stack.length > 0 && digit > stack[stack.length - 1]) {\n      numDigits--;\n      stack.pop();\n    }\n\n    stack.push(digit);\n  }\n\n  while (numDigits > 0) {\n    numDigits--;\n    stack.pop();\n  }\n\n  return stack.join('');\n}\n\n// Do not edit the line below.\nexports.bestDigits = bestDigits;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const number = '462839';\n  const numDigits = 2;\n  const expected = '6839';\n  const actual = program.bestDigits(number, numDigits);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const number = '462839';\n  const numDigits = 2;\n  const expected = '6839';\n  const actual = program.bestDigits(number, numDigits);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun bestDigits(number: String, numDigits: Int): String {\n    // Write your code here.\n    return \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport java.util.Stack\n\n// O(n) time | O(n) space - where n is the length of the input string\nfun bestDigits(number: String, numDigits: Int): String {\n    val stack = Stack<Char>()\n    var numDigitsRemaining = numDigits\n\n    for (digit in number) {\n        while (numDigitsRemaining > 0 && stack.size > 0 && digit > stack[stack.size - 1]) {\n            numDigitsRemaining--\n            stack.pop()\n        }\n\n        stack.push(digit)\n    }\n\n    while (numDigitsRemaining > 0) {\n        numDigitsRemaining--\n        stack.pop()\n    }\n\n    return stack.joinToString(\"\")\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.bestDigits\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val number = \"462839\"\n        val numDigits = 2\n        val expected = \"6839\"\n        val output = bestDigits(number, numDigits)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.bestDigits\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val number = \"462839\"\n        val numDigits = 2\n        val expected = \"6839\"\n        val output = bestDigits(number, numDigits)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def bestDigits(number, numDigits):\n    # Write your code here.\n    return \"\"\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input string\ndef bestDigits(number, numDigits):\n    stack = []\n\n    for digit in number:\n        while numDigits > 0 and len(stack) > 0 and digit > stack[len(stack) - 1]:\n            numDigits -= 1\n            stack.pop()\n\n        stack.append(digit)\n\n    while numDigits > 0:\n        numDigits -= 1\n        stack.pop()\n\n    return \"\".join(stack)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        number = \"462839\"\n        numDigits = 2\n        expected = \"6839\"\n        actual = program.bestDigits(number, numDigits)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        number = \"462839\"\n        numDigits = 2\n        expected = \"6839\"\n        actual = program.bestDigits(number, numDigits)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "\nclass Program\n    def bestDigits(number, numDigits)\n        # Write your code here.\n        return \"\"\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n\nclass Program\n    def bestDigits(number, numDigits)\n        # Write your code here.\n        return \"\"\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = ...\n        # expected = ...\n        # assert_equal(expected, output)\n    end\nend\n\n",
      "unitTests": "class TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = ...\n        # expected = ...\n        # assert_equal(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n\n  func bestDigits(_ number: String, _ numDigits: Int) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n\n  func bestDigits(_ number: String, _ numDigits: Int) -> String {\n    var numDigits = numDigits\n    var stack = [Character]()\n\n    for digit in number {\n      while numDigits > 0 && stack.count > 0 && digit > stack[stack.count - 1] {\n        numDigits -= 1\n        stack.removeLast()\n      }\n\n      stack.append(digit)\n    }\n\n    while numDigits > 0 {\n      numDigits -= 1\n      stack.removeLast()\n    }\n\n    return String(stack)\n  }\n}\n\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var number = \"462839\";\n      var numDigits = 2;\n      var expected = \"6839\"\n      var actual = Program().bestDigits(number, numDigits)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var number = \"462839\";\n      var numDigits = 2;\n      var expected = \"6839\"\n      var actual = Program().bestDigits(number, numDigits)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function bestDigits(number: string, numDigits: number) {\n  // Write your code here.\n  return '';\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input string\nexport function bestDigits(number: string, numDigits: number) {\n  const stack: string[] = [];\n\n  for (const digit of number) {\n    while (numDigits > 0 && stack.length > 0 && digit > stack[stack.length - 1]) {\n      numDigits--;\n      stack.pop();\n    }\n\n    stack.push(digit);\n  }\n\n  while (numDigits > 0) {\n    numDigits--;\n    stack.pop();\n  }\n\n  return stack.join('');\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const number = '462839';\n  const numDigits = 2;\n  const expected = '6839';\n  const actual = program.bestDigits(number, numDigits);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const number = '462839';\n  const numDigits = 2;\n  const expected = '6839';\n  const actual = program.bestDigits(number, numDigits);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "numDigits",
      "example": 2,
      "schema": {
        "minimum": 0,
        "type": "integer"
      }
    },
    {
      "name": "number",
      "example": "462839",
      "schema": {
        "minLength": 1,
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "numDigits": 2,
      "number": "462839"
    },
    {
      "numDigits": 4,
      "number": "129847563"
    },
    {
      "numDigits": 1,
      "number": "19"
    },
    {
      "numDigits": 1,
      "number": "22"
    },
    {
      "numDigits": 1,
      "number": "23"
    },
    {
      "numDigits": 1,
      "number": "123"
    },
    {
      "numDigits": 1,
      "number": "321"
    },
    {
      "numDigits": 2,
      "number": "123"
    },
    {
      "numDigits": 2,
      "number": "321"
    },
    {
      "numDigits": 10,
      "number": "11111111119999999999"
    },
    {
      "numDigits": 9,
      "number": "10000000002"
    },
    {
      "numDigits": 10,
      "number": "10000000002"
    },
    {
      "numDigits": 5,
      "number": "1020304050"
    },
    {
      "numDigits": 4,
      "number": "100300200004"
    },
    {
      "numDigits": 9,
      "number": "9999999999"
    },
    {
      "numDigits": 3,
      "number": "111221"
    },
    {
      "numDigits": 0,
      "number": "12345"
    },
    {
      "numDigits": 0,
      "number": "54321"
    }
  ],
  "jsonTests": [
    {
      "numDigits": 2,
      "number": "462839"
    },
    {
      "numDigits": 4,
      "number": "129847563"
    },
    {
      "numDigits": 1,
      "number": "19"
    },
    {
      "numDigits": 1,
      "number": "22"
    },
    {
      "numDigits": 1,
      "number": "23"
    },
    {
      "numDigits": 1,
      "number": "123"
    },
    {
      "numDigits": 1,
      "number": "321"
    },
    {
      "numDigits": 2,
      "number": "123"
    },
    {
      "numDigits": 2,
      "number": "321"
    },
    {
      "numDigits": 10,
      "number": "11111111119999999999"
    },
    {
      "numDigits": 9,
      "number": "10000000002"
    },
    {
      "numDigits": 10,
      "number": "10000000002"
    },
    {
      "numDigits": 5,
      "number": "1020304050"
    },
    {
      "numDigits": 4,
      "number": "100300200004"
    },
    {
      "numDigits": 9,
      "number": "9999999999"
    },
    {
      "numDigits": 3,
      "number": "111221"
    },
    {
      "numDigits": 0,
      "number": "12345"
    },
    {
      "numDigits": 0,
      "number": "54321"
    }
  ],
  "changelog": []
}