{
  "uid": "best-seat",
  "testStrategy": "JSON",
  "name": "Best Seat",
  "version": 0,
  "releaseDate": "2023-04-08T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 6455,
    "failureCount": 1099
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "784187267",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 660
  },
  "prompt": "<div class=\"html\">\n<p>\n  You walk into a theatre you're about to see a show in. The usher within the\n  theatre walks you to your row and mentions you're allowed to sit anywhere\n  within the given row. Naturally you'd like to sit in the seat that gives you\n  the most space. You also would prefer this space to be evenly distributed on\n  either side of you (e.g. if there are three empty seats in a row, you would\n  prefer to sit in the middle of those three seats).\n</p>\n<p>\n  Given the theatre row represented as an integer array, return\n  the seat index of where you should sit. Ones represent occupied seats and zeroes\n  represent empty seats.\n</p>\n<p>\n  You may assume that someone is always sitting in the\n  first and last seat of the row. Whenever there are two equally good seats,\n  you should sit in the seat with the lower index. If there is no seat to sit\n  in, return -1. The given array will always have a length of at least one\n  and contain only ones and zeroes.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">seats</span> = [1, 0, 1, 0, 0, 0, 1]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n4\n</pre>\n</div>",
  "hints": [
    "<p>\n  Try thinking about this problem in real life. How would you determine what\n  seat has the most space?\n</p>\n",
    "\n<p>\n  The best seat will always be within the longest contiguous subarray of all\n  zeros.\n</p>\n",
    "\n<p>Once you find the longest contiguous subarray of empty seats, how can\nyou choose where to sit within that subarray?</p>\n",
    "\n<p>How can you find the midpoint between two people?</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the number of seats",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint bestSeat(vector<int> seats) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the number of seats\nint bestSeat(vector<int> seats) {\n  int bestSeat = -1;\n  int maxSpace = 0;\n\n  int left = 0;\n  while (left < seats.size()) {\n    int right = left + 1;\n    while (right < seats.size() && seats[right] == 0) {\n      right++;\n    }\n\n    int availableSpace = right - left - 1;\n    if (availableSpace > maxSpace) {\n      bestSeat = (left + right) / 2;\n      maxSpace = availableSpace;\n    }\n    left = right;\n  }\n\n  return bestSeat;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {1, 0, 1, 0, 0, 0, 1};\n      auto expected = 4;\n      auto actual = bestSeat(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {1, 0, 1, 0, 0, 0, 1};\n      auto expected = 4;\n      auto actual = bestSeat(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int BestSeat(int[] seats) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the number of seats\n  public int BestSeat(int[] seats) {\n    int bestSeat = -1;\n    int maxSpace = 0;\n\n    int left = 0;\n    while (left < seats.Length) {\n      int right = left + 1;\n      while (right < seats.Length && seats[right] == 0) {\n        right++;\n      }\n\n      int availableSpace = right - left - 1;\n      if (availableSpace > maxSpace) {\n        bestSeat = (left + right) / 2;\n        maxSpace = availableSpace;\n      }\n      left = right;\n    }\n\n    return bestSeat;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 1, 0, 1, 0, 0, 0, 1 };\n    var expected = 4;\n    var actual = new Program().BestSeat(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 1, 0, 1, 0, 0, 0, 1 };\n    var expected = 4;\n    var actual = new Program().BestSeat(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc BestSeat(seats []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the number of seats\nfunc BestSeat(seats []int) int {\n\tbestSeat := -1\n\tmaxSpace := 0\n\n\tleft := 0\n\tfor left < len(seats) {\n\t\tright := left + 1\n\t\tfor right < len(seats) && seats[right] == 0 {\n\t\t\tright += 1\n\t\t}\n\n\t\tavailableSpace := right - left - 1\n\t\tif availableSpace > maxSpace {\n\t\t\tbestSeat = (left + right) / 2\n\t\t\tmaxSpace = availableSpace\n\t\t}\n\t\tleft = right\n\t}\n\treturn bestSeat\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{1, 0, 1, 0, 0, 0, 1}\n\texpected := 4\n\tactual := BestSeat(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{1, 0, 1, 0, 0, 0, 1}\n\texpected := 4\n\tactual := BestSeat(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int bestSeat(int[] seats) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the number of seats\n  public int bestSeat(int[] seats) {\n    int bestSeat = -1;\n    int maxSpace = 0;\n\n    int left = 0;\n    while (left < seats.length) {\n      int right = left + 1;\n      while (right < seats.length && seats[right] == 0) {\n        right++;\n      }\n\n      int availableSpace = right - left - 1;\n      if (availableSpace > maxSpace) {\n        bestSeat = (left + right) / 2;\n        maxSpace = availableSpace;\n      }\n      left = right;\n    }\n\n    return bestSeat;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {1, 0, 1, 0, 0, 0, 1};\n    var expected = 4;\n    var actual = new Program().bestSeat(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {1, 0, 1, 0, 0, 0, 1};\n    var expected = 4;\n    var actual = new Program().bestSeat(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function bestSeat(seats) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the line below.\nexports.bestSeat = bestSeat;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the number of seats\nfunction bestSeat(seats) {\n  let bestSeat = -1;\n  let maxSpace = 0;\n\n  let left = 0;\n  while (left < seats.length) {\n    let right = left + 1;\n    while (right < seats.length && seats[right] === 0) {\n      right += 1;\n    }\n\n    const availableSpace = right - left - 1;\n    if (availableSpace > maxSpace) {\n      bestSeat = Math.floor((left + right) / 2);\n      maxSpace = availableSpace;\n    }\n    left = right;\n  }\n\n  return bestSeat;\n}\n\n// Do not edit the line below.\nexports.bestSeat = bestSeat;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [1, 0, 1, 0, 0, 0, 1];\n  const expected = 4;\n  const actual = program.bestSeat(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [1, 0, 1, 0, 0, 0, 1];\n  const expected = 4;\n  const actual = program.bestSeat(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun bestSeat(seats: MutableList<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the number of seats\nfun bestSeat(seats: MutableList<Int>): Int {\n    var bestSeat = -1\n    var maxSpace = 0\n\n    var left = 0\n    while (left < seats.size) {\n        var right = left + 1\n        while (right < seats.size && seats[right] == 0) {\n            right += 1\n        }\n\n        val availableSpace = right - left - 1\n        if (availableSpace > maxSpace) {\n            bestSeat = (left + right) / 2\n            maxSpace = availableSpace\n        }\n        left = right\n    }\n\n    return bestSeat\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.bestSeat\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(1, 0, 1, 0, 0, 0, 1)\n        val expected = 4\n        val output = bestSeat(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.bestSeat\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(1, 0, 1, 0, 0, 0, 1)\n        val expected = 4\n        val output = bestSeat(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def bestSeat(seats):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the number of seats\ndef bestSeat(seats):\n    bestSeat = -1\n    maxSpace = 0\n\n    left = 0\n    while left < len(seats):\n        right = left + 1\n        while right < len(seats) and seats[right] == 0:\n            right += 1\n\n        availableSpace = right - left - 1\n        if availableSpace > maxSpace:\n            bestSeat = (left + right) // 2\n            maxSpace = availableSpace\n        left = right\n\n    return bestSeat\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [1, 0, 1, 0, 0, 0, 1]\n        expected = 4\n        actual = program.bestSeat(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [1, 0, 1, 0, 0, 0, 1]\n        expected = 4\n        actual = program.bestSeat(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def bestSeat(seats)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def bestSeat(seats)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.bestSeat\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.bestSeat\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func bestSeat(_ seats: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the number of seats\n  func bestSeat(_ seats: [Int]) -> Int {\n    var bestSeat = -1\n    var maxSpace = 0\n\n    var left = 0\n    while left < seats.count {\n      var right = left + 1\n      while right < seats.count && seats[right] == 0 {\n        right += 1\n      }\n\n      let availableSpace = right - left - 1\n      if availableSpace > maxSpace {\n        bestSeat = (left + right) / 2\n        maxSpace = availableSpace\n      }\n      left = right\n    }\n    return bestSeat\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [1, 0, 1, 0, 0, 0, 1]\n      var expected = 4\n      var actual = Program().bestSeat(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [1, 0, 1, 0, 0, 0, 1]\n      var expected = 4\n      var actual = Program().bestSeat(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function bestSeat(seats: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the number of seats\nexport function bestSeat(seats: number[]) {\n  let bestSeat = -1;\n  let maxSpace = 0;\n\n  let left = 0;\n  while (left < seats.length) {\n    let right = left + 1;\n    while (right < seats.length && seats[right] === 0) {\n      right += 1;\n    }\n\n    const availableSpace = right - left - 1;\n    if (availableSpace > maxSpace) {\n      bestSeat = Math.floor((left + right) / 2);\n      maxSpace = availableSpace;\n    }\n    left = right;\n  }\n\n  return bestSeat;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [1, 0, 1, 0, 0, 0, 1];\n  const expected = 4;\n  const actual = program.bestSeat(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [1, 0, 1, 0, 0, 0, 1];\n  const expected = 4;\n  const actual = program.bestSeat(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "seats",
      "example": [
        1
      ],
      "schema": {
        "items": {
          "maximum": 1,
          "minimum": 0,
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "seats": [
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        1,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        1,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        1,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        1,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        1
      ]
    }
  ],
  "jsonTests": [
    {
      "seats": [
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        1,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        1,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        1,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        0,
        1
      ]
    },
    {
      "seats": [
        1,
        1,
        1,
        0,
        1,
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        1
      ]
    }
  ],
  "changelog": []
}