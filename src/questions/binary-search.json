{
  "uid": "binary-search",
  "testStrategy": "JSON",
  "name": "Binary Search",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Searching",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 73157,
    "failureCount": 24614
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "226676043",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1209
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a sorted array of integers as well as a target\n  integer. The function should use the Binary Search algorithm to determine if\n  the target integer is contained in the array and should return its index if it\n  is, otherwise <span>-1</span>.\n</p>\n<p>\n  If you're unfamiliar with Binary Search, we recommend watching the Conceptual\n  Overview section of this question's video explanation before starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [0, 1, 21, 33, 45, 45, 61, 71, 72, 73]\n<span class=\"CodeEditor-promptParameter\">target</span> = 33\n</pre>\n<h3>Sample Output</h3>\n<pre>\n3\n</pre>\n</div>",
  "hints": [
    "<p>\nThe Binary Search algorithm works by finding the number in the middle of the input array and comparing it to the target number. Given that the array is sorted, if this middle number is smaller than the target number, then the entire left part of the array is no longer worth exploring since the target number can no longer be in it; similarly, if the middle number is greater than the target number, then the entire right part of the array is no longer worth exploring. Applying this logic recursively eliminates half of the array until the number is found or until the array runs out of numbers.\n</p>\n",
    "\n<p>\nWrite a helper function that takes in two additional arguments: a left pointer and a right pointer representing the indices at the extremities of the array (or subarray) that you are applying Binary Search on. The first time this helper function is called, the left pointer should be zero and the right pointer should be the final index of the input array. To find the index of the middle number mentioned in Hint #1, simply round down the number obtained from: (left + right) / 2. Apply this logic recursively until you find the target number or until the left pointer becomes greater than the right pointer.\n</p>\n",
    "\n<p>\nCan you implement this algorithm iteratively? Are there any advantages to doing so?\n</p>"
  ],
  "spaceTime": "O(log(n)) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint binarySearch(vector<int> array, int target) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint binarySearch(vector<int> array, int target);\nint binarySearchHelper(vector<int> array, int target, int left, int right);\n\n// O(log(n)) time | O(log(n)) space\nint binarySearch(vector<int> array, int target) {\n  return binarySearchHelper(array, target, 0, array.size() - 1);\n}\n\nint binarySearchHelper(vector<int> array, int target, int left, int right) {\n  if (left > right) {\n    return -1;\n  }\n  int middle = (left + right) / 2;\n  int potentialMatch = array[middle];\n  if (target == potentialMatch) {\n    return middle;\n  } else if (target < potentialMatch) {\n    return binarySearchHelper(array, target, left, middle - 1);\n  } else {\n    return binarySearchHelper(array, target, middle + 1, right);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint binarySearch(vector<int> array, int target);\nint binarySearchHelper(vector<int> array, int target, int left, int right);\n\n// O(log(n)) time | O(1) space\nint binarySearch(vector<int> array, int target) {\n  return binarySearchHelper(array, target, 0, array.size() - 1);\n}\n\nint binarySearchHelper(vector<int> array, int target, int left, int right) {\n  while (left <= right) {\n    int middle = (left + right) / 2;\n    int potentialMatch = array[middle];\n    if (target == potentialMatch) {\n      return middle;\n    } else if (target < potentialMatch) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(binarySearch({0, 1, 21, 33, 45, 45, 61, 71, 72, 73}, 33) == 3);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(binarySearch({0, 1, 21, 33, 45, 45, 61, 71, 72, 73}, 33) == 3);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int BinarySearch(int[] array, int target) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(log(n)) time | O(log(n)) space\n  public static int BinarySearch(int[] array, int target) {\n    return BinarySearch(array, target, 0, array.Length - 1);\n  }\n\n  public static int BinarySearch(int[] array, int target, int left, int right) {\n    if (left > right) {\n      return -1;\n    }\n    int middle = (left + right) / 2;\n    int potentialMatch = array[middle];\n    if (target == potentialMatch) {\n      return middle;\n    } else if (target < potentialMatch) {\n      return BinarySearch(array, target, left, middle - 1);\n    } else {\n      return BinarySearch(array, target, middle + 1, right);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(log(n)) time | O(1) space\n  public static int BinarySearch(int[] array, int target) {\n    return BinarySearch(array, target, 0, array.Length - 1);\n  }\n\n  public static int BinarySearch(int[] array, int target, int left, int right) {\n    while (left <= right) {\n      int middle = (left + right) / 2;\n      int potentialMatch = array[middle];\n      if (target == potentialMatch) {\n        return middle;\n      } else if (target < potentialMatch) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    }\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.BinarySearch(\n        new int[] { 0, 1, 21, 33, 45, 45, 61, 71, 72, 73 }, 33\n      ) == 3\n    );\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.BinarySearch(\n        new int[] { 0, 1, 21, 33, 45, 45, 61, 71, 72, 73 }, 33\n      ) == 3\n    );\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc BinarySearch(array []int, target int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(log(n)) time | O(log(n)) space\nfunc BinarySearch(array []int, target int) int {\n\treturn helper(array, target, 0, len(array)-1)\n}\n\nfunc helper(array []int, target, left, right int) int {\n\tif left > right {\n\t\treturn -1\n\t}\n\tmiddle := (left + right) / 2\n\tpotentialMatch := array[middle]\n\tif target == potentialMatch {\n\t\treturn middle\n\t} else if target < potentialMatch {\n\t\treturn helper(array, target, left, middle-1)\n\t}\n\treturn helper(array, target, middle+1, right)\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(log(n)) time | O(1) space\nfunc BinarySearch(array []int, target int) int {\n\treturn helper(array, target, 0, len(array)-1)\n}\n\nfunc helper(array []int, target, left, right int) int {\n\tfor left <= right {\n\t\tmiddle := (left + right) / 2\n\t\tpotentialMatch := array[middle]\n\t\tif target == potentialMatch {\n\t\t\treturn middle\n\t\t} else if target < potentialMatch {\n\t\t\tright = middle - 1\n\t\t} else {\n\t\t\tleft = middle + 1\n\t\t}\n\t}\n\treturn -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 3\n\toutput := BinarySearch([]int{0, 1, 21, 33, 45, 45, 61, 71, 72, 73}, 33)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 3\n\toutput := BinarySearch([]int{0, 1, 21, 33, 45, 45, 61, 71, 72, 73}, 33)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int binarySearch(int[] array, int target) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(log(n)) space\n  public static int binarySearch(int[] array, int target) {\n    return binarySearch(array, target, 0, array.length - 1);\n  }\n\n  public static int binarySearch(int[] array, int target, int left, int right) {\n    if (left > right) {\n      return -1;\n    }\n    int middle = (left + right) / 2;\n    int potentialMatch = array[middle];\n    if (target == potentialMatch) {\n      return middle;\n    } else if (target < potentialMatch) {\n      return binarySearch(array, target, left, middle - 1);\n    } else {\n      return binarySearch(array, target, middle + 1, right);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(1) space\n  public static int binarySearch(int[] array, int target) {\n    return binarySearch(array, target, 0, array.length - 1);\n  }\n\n  public static int binarySearch(int[] array, int target, int left, int right) {\n    while (left <= right) {\n      int middle = (left + right) / 2;\n      int potentialMatch = array[middle];\n      if (target == potentialMatch) {\n        return middle;\n      } else if (target < potentialMatch) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    }\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.binarySearch(new int[] {0, 1, 21, 33, 45, 45, 61, 71, 72, 73}, 33)\n      == 3\n    );\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.binarySearch(new int[] {0, 1, 21, 33, 45, 45, 61, 71, 72, 73}, 33)\n      == 3\n    );\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function binarySearch(array, target) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.binarySearch = binarySearch;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(log(n)) space\nfunction binarySearch(array, target) {\n  return binarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction binarySearchHelper(array, target, left, right) {\n  if (left > right) return -1;\n  const middle = Math.floor((left + right) / 2);\n  const potentialMatch = array[middle];\n  if (target === potentialMatch) {\n    return middle;\n  } else if (target < potentialMatch) {\n    return binarySearchHelper(array, target, left, middle - 1);\n  } else {\n    return binarySearchHelper(array, target, middle + 1, right);\n  }\n}\n\nexports.binarySearch = binarySearch;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(1) space\nfunction binarySearch(array, target) {\n  return binarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction binarySearchHelper(array, target, left, right) {\n  while (left <= right) {\n    const middle = Math.floor((left + right) / 2);\n    const potentialMatch = array[middle];\n    if (target === potentialMatch) {\n      return middle;\n    } else if (target < potentialMatch) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n  return -1;\n}\n\nexports.binarySearch = binarySearch;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.binarySearch([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33)).to.deep.equal(3);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.binarySearch([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33)).to.deep.equal(3);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun binarySearch(array: List<Int>, target: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(log(n)) time | O(log(n)) space\nfun binarySearch(array: List<Int>, target: Int): Int {\n    return binarySearch(array, target, 0, array.size - 1)\n}\n\nfun binarySearch(array: List<Int>, target: Int, left: Int, right: Int): Int {\n    if (left > right) {\n        return -1\n    }\n    val middle = (left + right) / 2\n    val potentialMatch = array[middle]\n    if (target == potentialMatch) {\n        return middle\n    } else if (target < potentialMatch) {\n        return binarySearch(array, target, left, middle - 1)\n    } else {\n        return binarySearch(array, target, middle + 1, right)\n    }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(log(n)) time | O(1) space\nfun binarySearch(array: List<Int>, target: Int): Int {\n    return binarySearch(array, target, 0, array.size - 1)\n}\n\nfun binarySearch(array: List<Int>, target: Int, leftIdx: Int, rightIdx: Int): Int {\n    var left = leftIdx\n    var right = rightIdx\n    while (left <= right) {\n        val middle = (left + right) / 2\n        val potentialMatch = array[middle]\n        if (target == potentialMatch) {\n            return middle\n        } else if (target < potentialMatch) {\n            right = middle - 1\n        } else {\n            left = middle + 1\n        }\n    }\n    return -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.binarySearch\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf(0, 1, 21, 33, 45, 45, 61, 71, 72, 73)\n        val target = 33\n        val expected = 3\n        val output = binarySearch(array, target)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.binarySearch\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf(0, 1, 21, 33, 45, 45, 61, 71, 72, 73)\n        val target = 33\n        val expected = 3\n        val output = binarySearch(array, target)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def binarySearch(array, target):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(log(n)) time | O(log(n)) space\ndef binarySearch(array, target):\n    return binarySearchHelper(array, target, 0, len(array) - 1)\n\n\ndef binarySearchHelper(array, target, left, right):\n    if left > right:\n        return -1\n    middle = (left + right) // 2\n    potentialMatch = array[middle]\n    if target == potentialMatch:\n        return middle\n    elif target < potentialMatch:\n        return binarySearchHelper(array, target, left, middle - 1)\n    else:\n        return binarySearchHelper(array, target, middle + 1, right)\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(log(n)) time | O(1) space\ndef binarySearch(array, target):\n    return binarySearchHelper(array, target, 0, len(array) - 1)\n\n\ndef binarySearchHelper(array, target, left, right):\n    while left <= right:\n        middle = (left + right) // 2\n        potentialMatch = array[middle]\n        if target == potentialMatch:\n            return middle\n        elif target < potentialMatch:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return -1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.binarySearch([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33), 3)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.binarySearch([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33), 3)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def binarySearch(array, target)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def binarySearch(array, target)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def binarySearch(array, target)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.binarySearch\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.binarySearch\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func binarySearch(array: [Int], target: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(Log(n)) time | O(Log(n)) space\n  func binarySearch(array: [Int], target: Int) -> Int {\n    return binarySearchHelper(array: array, target: target, leftPointer: 0, rightPointer: array.count - 1)\n  }\n\n  func binarySearchHelper(array: [Int], target: Int, leftPointer: Int, rightPointer: Int) -> Int {\n    if leftPointer > rightPointer {\n      return -1\n    }\n    let middle = (leftPointer + rightPointer) / 2\n    let potentialMatch = array[middle]\n    if target == potentialMatch {\n      return middle\n    } else if target < potentialMatch {\n      return binarySearchHelper(array: array, target: target, leftPointer: leftPointer, rightPointer: middle - 1)\n    } else {\n      return binarySearchHelper(array: array, target: target, leftPointer: middle + 1, rightPointer: rightPointer)\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(Log(n)) time | O(1) space\n  func binarySearch(array: [Int], target: Int) -> Int {\n    var leftPointer = 0\n    var rightPointer = array.count - 1\n    return binarySearchHelper(array: array, target: target, leftPointer: &leftPointer, rightPointer: &rightPointer)\n  }\n\n  func binarySearchHelper(array: [Int], target: Int, leftPointer: inout Int, rightPointer: inout Int) -> Int {\n    while leftPointer <= rightPointer {\n      let middle = (leftPointer + rightPointer) / 2\n      let potentialMatch = array[middle]\n      if target == potentialMatch {\n        return middle\n      } else if target < potentialMatch {\n        rightPointer = middle - 1\n      } else {\n        leftPointer = middle + 1\n      }\n    }\n\n    return -1\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(3, program.binarySearch(array: [0, 1, 21, 33, 45, 45, 61, 71, 72, 73], target: 33))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(3, program.binarySearch(array: [0, 1, 21, 33, 45, 45, 61, 71, 72, 73], target: 33))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function binarySearch(array: number[], target: number): number {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(log(n)) space\nexport function binarySearch(array: number[], target: number) {\n  return binarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction binarySearchHelper(array: number[], target: number, left: number, right: number): number {\n  if (left > right) return -1;\n  const middle = Math.floor((left + right) / 2);\n  const potentialMatch = array[middle];\n  if (target === potentialMatch) {\n    return middle;\n  } else if (target < potentialMatch) {\n    return binarySearchHelper(array, target, left, middle - 1);\n  } else {\n    return binarySearchHelper(array, target, middle + 1, right);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(1) space\nexport function binarySearch(array: number[], target: number) {\n  return binarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction binarySearchHelper(array: number[], target: number, left: number, right: number) {\n  while (left <= right) {\n    const middle = Math.floor((left + right) / 2);\n    const potentialMatch = array[middle];\n    if (target === potentialMatch) {\n      return middle;\n    } else if (target < potentialMatch) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.binarySearch([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33)).to.deep.equal(3);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.binarySearch([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33)).to.deep.equal(3);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "target",
      "example": 33,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 33
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 111
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 5
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 35
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 0
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 1
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 21
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 45
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 61
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 71
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 72
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 73
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 70
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73,
        355
      ],
      "target": 355
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73,
        355
      ],
      "target": 354
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 120
    },
    {
      "array": [
        5,
        23,
        111
      ],
      "target": 3
    }
  ],
  "jsonTests": [
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 33
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 111
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 5
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 35
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 0
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 1
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 21
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 45
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 61
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 71
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 72
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 73
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 70
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73,
        355
      ],
      "target": 355
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        45,
        45,
        61,
        71,
        72,
        73,
        355
      ],
      "target": 354
    },
    {
      "array": [
        1,
        5,
        23,
        111
      ],
      "target": 120
    },
    {
      "array": [
        5,
        23,
        111
      ],
      "target": 3
    }
  ],
  "changelog": []
}