{
  "uid": "bubble-sort",
  "testStrategy": "JSON",
  "name": "Bubble Sort",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Sorting",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 65651,
    "failureCount": 17216
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "226647003",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 801
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns a sorted\n  version of that array. Use the Bubble Sort algorithm to sort the array.\n</p>\n<p>\n  If you're unfamiliar with Bubble Sort, we recommend watching the Conceptual\n  Overview section of this question's video explanation before starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [8, 5, 2, 9, 5, 6, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[2, 3, 5, 5, 6, 8, 9]\n</pre>\n</div>",
  "hints": [
    "<p>\nTraverse the input array, swapping any two numbers that are out of order and keeping track of any swaps that you make. Once you arrive at the end of the array, check if you have made any swaps; if not, the array is sorted and you are done; otherwise, repeat the steps laid out in this hint until the array is sorted.\n</p>"
  ],
  "spaceTime": "Best: O(n) time | O(1) space - where n is the length of the input array\nAverage: O(n^2) time | O(1) space - where n is the length of the input array\nWorst: O(n^2) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> bubbleSort(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<int> bubbleSort(vector<int> array);\n\n// Best: O(n) time | O(1) space\n// Average: O(n^2) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nvector<int> bubbleSort(vector<int> array) {\n  if (array.empty()) {\n    return {};\n  }\n  bool isSorted = false;\n  int counter = 0;\n  while (!isSorted) {\n    isSorted = true;\n    for (int i = 0; i < array.size() - 1 - counter; i++) {\n      if (array[i] > array[i + 1]) {\n        swap(array[i], array[i + 1]);\n        isSorted = false;\n      }\n    }\n    counter++;\n  }\n  return array;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected = {2, 3, 5, 5, 6, 8, 9};\n      assert(bubbleSort({8, 5, 2, 9, 5, 6, 3}) == expected);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected = {2, 3, 5, 5, 6, 8, 9};\n      assert(bubbleSort({8, 5, 2, 9, 5, 6, 3}) == expected);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] BubbleSort(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // Best: O(n) time | O(1) space\n  // Average: O(n^2) time | O(1) space\n  // Worst: O(n^2) time | O(1) space\n  public static int[] BubbleSort(int[] array) {\n    if (array.Length == 0) {\n      return new int[] {};\n    }\n    bool isSorted = false;\n    int counter = 0;\n    while (!isSorted) {\n      isSorted = true;\n      for (int i = 0; i < array.Length - 1 - counter; i++) {\n        if (array[i] > array[i + 1]) {\n          swap(i, i + 1, array);\n          isSorted = false;\n        }\n      }\n      counter++;\n    }\n    return array;\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 2, 3, 5, 5, 6, 8, 9 };\n    int[] input = { 8, 5, 2, 9, 5, 6, 3 };\n    Utils.AssertTrue(compare(Program.BubbleSort(input), expected));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 2, 3, 5, 5, 6, 8, 9 };\n    int[] input = { 8, 5, 2, 9, 5, 6, 3 };\n    Utils.AssertTrue(compare(Program.BubbleSort(input), expected));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc BubbleSort(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// Best: O(n) time | O(1) space\n// Average: O(n^2) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nfunc BubbleSort(array []int) []int {\n\tisSorted := false\n\tcounter := 0\n\tfor !isSorted {\n\t\tisSorted = true\n\t\tfor i := 0; i < len(array)-1-counter; i++ {\n\t\t\tif array[i] > array[i+1] {\n\t\t\t\tswap(array, i, i+1)\n\t\t\t\tisSorted = false\n\t\t\t}\n\t\t}\n\t\tcounter++\n\t}\n\treturn array\n}\n\nfunc swap(array []int, i, j int) {\n\tarray[i], array[j] = array[j], array[i]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{2, 3, 5, 5, 6, 8, 9}\n\toutput := BubbleSort([]int{8, 5, 2, 9, 5, 6, 3})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{2, 3, 5, 5, 6, 8, 9}\n\toutput := BubbleSort([]int{8, 5, 2, 9, 5, 6, 3})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] bubbleSort(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Best: O(n) time | O(1) space\n  // Average: O(n^2) time | O(1) space\n  // Worst: O(n^2) time | O(1) space\n  public static int[] bubbleSort(int[] array) {\n    if (array.length == 0) {\n      return new int[] {};\n    }\n    boolean isSorted = false;\n    int counter = 0;\n    while (!isSorted) {\n      isSorted = true;\n      for (int i = 0; i < array.length - 1 - counter; i++) {\n        if (array[i] > array[i + 1]) {\n          swap(i, i + 1, array);\n          isSorted = false;\n        }\n      }\n      counter++;\n    }\n    return array;\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {2, 3, 5, 5, 6, 8, 9};\n    int[] input = {8, 5, 2, 9, 5, 6, 3};\n    Utils.assertTrue(compare(Program.bubbleSort(input), expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {2, 3, 5, 5, 6, 8, 9};\n    int[] input = {8, 5, 2, 9, 5, 6, 3};\n    Utils.assertTrue(compare(Program.bubbleSort(input), expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function bubbleSort(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.bubbleSort = bubbleSort;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Best: O(n) time | O(1) space\n// Average: O(n^2) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nfunction bubbleSort(array) {\n  let isSorted = false;\n  let counter = 0;\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      if (array[i] > array[i + 1]) {\n        swap(i, i + 1, array);\n        isSorted = false;\n      }\n    }\n    counter++;\n  }\n  return array;\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexports.bubbleSort = bubbleSort;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.bubbleSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.bubbleSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun bubbleSort(array: MutableList<Int>): List<Int> {\n    // Write your code here.\n    return array\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Best: O(n) time | O(1) space\n// Average: O(n^2) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nfun bubbleSort(array: MutableList<Int>): List<Int> {\n    if (array.size == 0) return array\n    var isSorted = false\n    var counter = 0\n    while (!isSorted) {\n        isSorted = true\n        for (i in 0 until array.size - 1 - counter) {\n            if (array[i] > array[i + 1]) {\n                swap(i, i + 1, array)\n                isSorted = false\n            }\n        }\n        counter++\n    }\n\n    return array\n}\n\nfun swap(i: Int, j: Int, array: MutableList<Int>) {\n    val temp = array[j]\n    array[j] = array[i]\n    array[i] = temp\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.bubbleSort as bubbleSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = mutableListOf(2, 3, 5, 5, 6, 8, 9)\n        val input = mutableListOf(8, 5, 2, 9, 5, 6, 3)\n        assert(bubbleSort(input) == expected)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.bubbleSort as bubbleSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = mutableListOf(2, 3, 5, 5, 6, 8, 9)\n        val input = mutableListOf(8, 5, 2, 9, 5, 6, 3)\n        assert(bubbleSort(input) == expected)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def bubbleSort(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Best: O(n) time | O(1) space\n# Average: O(n^2) time | O(1) space\n# Worst: O(n^2) time | O(1) space\ndef bubbleSort(array):\n    isSorted = False\n    counter = 0\n    while not isSorted:\n        isSorted = True\n        for i in range(len(array) - 1 - counter):\n            if array[i] > array[i + 1]:\n                swap(i, i + 1, array)\n                isSorted = False\n        counter += 1\n    return array\n\n\ndef swap(i, j, array):\n    array[i], array[j] = array[j], array[i]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.bubbleSort([8, 5, 2, 9, 5, 6, 3]), [2, 3, 5, 5, 6, 8, 9])\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.bubbleSort([8, 5, 2, 9, 5, 6, 3]), [2, 3, 5, 5, 6, 8, 9])\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def bubbleSort(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def bubbleSort(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.bubbleSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.bubbleSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func bubbleSort(array: inout [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Best: O(n) time | O(1) space\n  // Average: O(n^2) time | O(1) space\n  // Worst: O(n^2) time | O(1) space\n  func bubbleSort(array: inout [Int]) -> [Int] {\n    var isSorted = false\n    var counter = 0\n\n    while !isSorted {\n      isSorted = true\n      for i in 0 ..< array.count - 1 - counter {\n        if array[i] > array[i + 1] {\n          swapHelper(i, i + 1, &array)\n          isSorted = false\n        }\n      }\n\n      counter = counter + 1\n    }\n    return array\n  }\n\n  func swapHelper(_ firstIndex: Int, _ secondIndex: Int, _ array: inout [Int]) {\n    let temp = array[secondIndex]\n    array[secondIndex] = array[firstIndex]\n    array[firstIndex] = temp\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var arrayToSort = [8, 5, 2, 9, 5, 6, 3]\n      try assertEqual([2, 3, 5, 5, 6, 8, 9], program.bubbleSort(array: &arrayToSort))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var arrayToSort = [8, 5, 2, 9, 5, 6, 3]\n      try assertEqual([2, 3, 5, 5, 6, 8, 9], program.bubbleSort(array: &arrayToSort))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function bubbleSort(array: number[]) {\n  // Write your code here.\n  return array;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Best: O(n) time | O(1) space\n// Average: O(n^2) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nexport function bubbleSort(array: number[]) {\n  let isSorted = false;\n  let counter = 0;\n  while (!isSorted) {\n    isSorted = true;\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      if (array[i] > array[i + 1]) {\n        swap(i, i + 1, array);\n        isSorted = false;\n      }\n    }\n    counter++;\n  }\n  return array;\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.bubbleSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.bubbleSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        -4,
        5,
        10,
        8,
        -10,
        -6,
        -4,
        -2,
        -5,
        3,
        5,
        -4,
        -5,
        -1,
        1,
        6,
        -7,
        -6,
        -7,
        8
      ]
    },
    {
      "array": [
        -7,
        2,
        3,
        8,
        -10,
        4,
        -6,
        -10,
        -2,
        -7,
        10,
        5,
        2,
        9,
        -9,
        -5,
        3,
        8
      ]
    },
    {
      "array": [
        8,
        -6,
        7,
        10,
        8,
        -1,
        6,
        2,
        4,
        -5,
        1,
        10,
        8,
        -10,
        -9,
        -10,
        8,
        9,
        -2,
        7,
        -2,
        4
      ]
    },
    {
      "array": [
        5,
        -2,
        2,
        -8,
        3,
        -10,
        -6,
        -1,
        2,
        -2,
        9,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        -2,
        -6,
        -10,
        10,
        4,
        -8,
        -1,
        -8,
        -4,
        7,
        -4,
        0,
        9,
        -9,
        0,
        -9,
        -9,
        8,
        1,
        -4,
        4,
        8,
        5,
        1,
        5,
        0,
        0,
        2,
        -10
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        0,
        -9,
        -3,
        -3,
        9,
        3,
        -4,
        -9,
        8,
        1,
        -3,
        -7,
        -4,
        -9,
        -1,
        -7,
        -2,
        -7,
        4
      ]
    },
    {
      "array": [
        427,
        787,
        222,
        996,
        -359,
        -614,
        246,
        230,
        107,
        -706,
        568,
        9,
        -246,
        12,
        -764,
        -212,
        -484,
        603,
        934,
        -848,
        -646,
        -991,
        661,
        -32,
        -348,
        -474,
        -439,
        -56,
        507,
        736,
        635,
        -171,
        -215,
        564,
        -710,
        710,
        565,
        892,
        970,
        -755,
        55,
        821,
        -3,
        -153,
        240,
        -160,
        -610,
        -583,
        -27,
        131
      ]
    },
    {
      "array": [
        991,
        -731,
        -882,
        100,
        280,
        -43,
        432,
        771,
        -581,
        180,
        -382,
        -998,
        847,
        80,
        -220,
        680,
        769,
        -75,
        -817,
        366,
        956,
        749,
        471,
        228,
        -435,
        -269,
        652,
        -331,
        -387,
        -657,
        -255,
        382,
        -216,
        -6,
        -163,
        -681,
        980,
        913,
        -169,
        972,
        -523,
        354,
        747,
        805,
        382,
        -827,
        -796,
        372,
        753,
        519,
        906
      ]
    },
    {
      "array": [
        384,
        -67,
        120,
        759,
        697,
        232,
        -7,
        -557,
        -772,
        -987,
        687,
        397,
        -763,
        -86,
        -491,
        947,
        921,
        421,
        825,
        -679,
        946,
        -562,
        -626,
        -898,
        204,
        776,
        -343,
        393,
        51,
        -796,
        -425,
        31,
        165,
        975,
        -720,
        878,
        -785,
        -367,
        -609,
        662,
        -79,
        -112,
        -313,
        -94,
        187,
        260,
        43,
        85,
        -746,
        612,
        67,
        -389,
        508,
        777,
        624,
        993,
        -581,
        34,
        444,
        -544,
        243,
        -995,
        432,
        -755,
        -978,
        515,
        -68,
        -559,
        489,
        732,
        -19,
        -489,
        737,
        924
      ]
    },
    {
      "array": [
        544,
        -578,
        556,
        713,
        -655,
        -359,
        -810,
        -731,
        194,
        -531,
        -685,
        689,
        -279,
        -738,
        886,
        -54,
        -320,
        -500,
        738,
        445,
        -401,
        993,
        -753,
        329,
        -396,
        -924,
        -975,
        376,
        748,
        -356,
        972,
        459,
        399,
        669,
        -488,
        568,
        -702,
        551,
        763,
        -90,
        -249,
        -45,
        452,
        -917,
        394,
        195,
        -877,
        153,
        153,
        788,
        844,
        867,
        266,
        -739,
        904,
        -154,
        -947,
        464,
        343,
        -312,
        150,
        -656,
        528,
        61,
        94,
        -581
      ]
    },
    {
      "array": [
        -19,
        759,
        168,
        306,
        270,
        -602,
        558,
        -821,
        -599,
        328,
        753,
        -50,
        -568,
        268,
        -92,
        381,
        -96,
        730,
        629,
        678,
        -837,
        351,
        896,
        63,
        -85,
        437,
        -453,
        -991,
        294,
        -384,
        -628,
        -529,
        518,
        613,
        -319,
        -519,
        -220,
        -67,
        834,
        619,
        802,
        207,
        946,
        -904,
        295,
        718,
        -740,
        -557,
        -560,
        80,
        296,
        -90,
        401,
        407,
        798,
        254,
        154,
        387,
        434,
        491,
        228,
        307,
        268,
        505,
        -415,
        -976,
        676,
        -917,
        937,
        -609,
        593,
        -36,
        881,
        607,
        121,
        -373,
        915,
        -885,
        879,
        391,
        -158,
        588,
        -641,
        -937,
        986,
        949,
        -321
      ]
    },
    {
      "array": [
        -823,
        164,
        48,
        -987,
        323,
        399,
        -293,
        183,
        -908,
        -376,
        14,
        980,
        965,
        842,
        422,
        829,
        59,
        724,
        -415,
        -733,
        356,
        -855,
        -155,
        52,
        328,
        -544,
        -371,
        -160,
        -942,
        -51,
        700,
        -363,
        -353,
        -359,
        238,
        892,
        -730,
        -575,
        892,
        490,
        490,
        995,
        572,
        888,
        -935,
        919,
        -191,
        646,
        -120,
        125,
        -817,
        341,
        -575,
        372,
        -874,
        243,
        610,
        -36,
        -685,
        -337,
        -13,
        295,
        800,
        -950,
        -949,
        -257,
        631,
        -542,
        201,
        -796,
        157,
        950,
        540,
        -846,
        -265,
        746,
        355,
        -578,
        -441,
        -254,
        -941,
        -738,
        -469,
        -167,
        -420,
        -126,
        -410,
        59
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        -4,
        5,
        10,
        8,
        -10,
        -6,
        -4,
        -2,
        -5,
        3,
        5,
        -4,
        -5,
        -1,
        1,
        6,
        -7,
        -6,
        -7,
        8
      ]
    },
    {
      "array": [
        -7,
        2,
        3,
        8,
        -10,
        4,
        -6,
        -10,
        -2,
        -7,
        10,
        5,
        2,
        9,
        -9,
        -5,
        3,
        8
      ]
    },
    {
      "array": [
        8,
        -6,
        7,
        10,
        8,
        -1,
        6,
        2,
        4,
        -5,
        1,
        10,
        8,
        -10,
        -9,
        -10,
        8,
        9,
        -2,
        7,
        -2,
        4
      ]
    },
    {
      "array": [
        5,
        -2,
        2,
        -8,
        3,
        -10,
        -6,
        -1,
        2,
        -2,
        9,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        -2,
        -6,
        -10,
        10,
        4,
        -8,
        -1,
        -8,
        -4,
        7,
        -4,
        0,
        9,
        -9,
        0,
        -9,
        -9,
        8,
        1,
        -4,
        4,
        8,
        5,
        1,
        5,
        0,
        0,
        2,
        -10
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        0,
        -9,
        -3,
        -3,
        9,
        3,
        -4,
        -9,
        8,
        1,
        -3,
        -7,
        -4,
        -9,
        -1,
        -7,
        -2,
        -7,
        4
      ]
    },
    {
      "array": [
        427,
        787,
        222,
        996,
        -359,
        -614,
        246,
        230,
        107,
        -706,
        568,
        9,
        -246,
        12,
        -764,
        -212,
        -484,
        603,
        934,
        -848,
        -646,
        -991,
        661,
        -32,
        -348,
        -474,
        -439,
        -56,
        507,
        736,
        635,
        -171,
        -215,
        564,
        -710,
        710,
        565,
        892,
        970,
        -755,
        55,
        821,
        -3,
        -153,
        240,
        -160,
        -610,
        -583,
        -27,
        131
      ]
    },
    {
      "array": [
        991,
        -731,
        -882,
        100,
        280,
        -43,
        432,
        771,
        -581,
        180,
        -382,
        -998,
        847,
        80,
        -220,
        680,
        769,
        -75,
        -817,
        366,
        956,
        749,
        471,
        228,
        -435,
        -269,
        652,
        -331,
        -387,
        -657,
        -255,
        382,
        -216,
        -6,
        -163,
        -681,
        980,
        913,
        -169,
        972,
        -523,
        354,
        747,
        805,
        382,
        -827,
        -796,
        372,
        753,
        519,
        906
      ]
    },
    {
      "array": [
        384,
        -67,
        120,
        759,
        697,
        232,
        -7,
        -557,
        -772,
        -987,
        687,
        397,
        -763,
        -86,
        -491,
        947,
        921,
        421,
        825,
        -679,
        946,
        -562,
        -626,
        -898,
        204,
        776,
        -343,
        393,
        51,
        -796,
        -425,
        31,
        165,
        975,
        -720,
        878,
        -785,
        -367,
        -609,
        662,
        -79,
        -112,
        -313,
        -94,
        187,
        260,
        43,
        85,
        -746,
        612,
        67,
        -389,
        508,
        777,
        624,
        993,
        -581,
        34,
        444,
        -544,
        243,
        -995,
        432,
        -755,
        -978,
        515,
        -68,
        -559,
        489,
        732,
        -19,
        -489,
        737,
        924
      ]
    },
    {
      "array": [
        544,
        -578,
        556,
        713,
        -655,
        -359,
        -810,
        -731,
        194,
        -531,
        -685,
        689,
        -279,
        -738,
        886,
        -54,
        -320,
        -500,
        738,
        445,
        -401,
        993,
        -753,
        329,
        -396,
        -924,
        -975,
        376,
        748,
        -356,
        972,
        459,
        399,
        669,
        -488,
        568,
        -702,
        551,
        763,
        -90,
        -249,
        -45,
        452,
        -917,
        394,
        195,
        -877,
        153,
        153,
        788,
        844,
        867,
        266,
        -739,
        904,
        -154,
        -947,
        464,
        343,
        -312,
        150,
        -656,
        528,
        61,
        94,
        -581
      ]
    },
    {
      "array": [
        -19,
        759,
        168,
        306,
        270,
        -602,
        558,
        -821,
        -599,
        328,
        753,
        -50,
        -568,
        268,
        -92,
        381,
        -96,
        730,
        629,
        678,
        -837,
        351,
        896,
        63,
        -85,
        437,
        -453,
        -991,
        294,
        -384,
        -628,
        -529,
        518,
        613,
        -319,
        -519,
        -220,
        -67,
        834,
        619,
        802,
        207,
        946,
        -904,
        295,
        718,
        -740,
        -557,
        -560,
        80,
        296,
        -90,
        401,
        407,
        798,
        254,
        154,
        387,
        434,
        491,
        228,
        307,
        268,
        505,
        -415,
        -976,
        676,
        -917,
        937,
        -609,
        593,
        -36,
        881,
        607,
        121,
        -373,
        915,
        -885,
        879,
        391,
        -158,
        588,
        -641,
        -937,
        986,
        949,
        -321
      ]
    },
    {
      "array": [
        -823,
        164,
        48,
        -987,
        323,
        399,
        -293,
        183,
        -908,
        -376,
        14,
        980,
        965,
        842,
        422,
        829,
        59,
        724,
        -415,
        -733,
        356,
        -855,
        -155,
        52,
        328,
        -544,
        -371,
        -160,
        -942,
        -51,
        700,
        -363,
        -353,
        -359,
        238,
        892,
        -730,
        -575,
        892,
        490,
        490,
        995,
        572,
        888,
        -935,
        919,
        -191,
        646,
        -120,
        125,
        -817,
        341,
        -575,
        372,
        -874,
        243,
        610,
        -36,
        -685,
        -337,
        -13,
        295,
        800,
        -950,
        -949,
        -257,
        631,
        -542,
        201,
        -796,
        157,
        950,
        540,
        -846,
        -265,
        746,
        355,
        -578,
        -441,
        -254,
        -941,
        -738,
        -469,
        -167,
        -420,
        -126,
        -410,
        59
      ]
    }
  ],
  "changelog": []
}