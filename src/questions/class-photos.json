{
  "uid": "class-photos",
  "testStrategy": "JSON",
  "name": "Class Photos",
  "version": 0,
  "releaseDate": "2021-02-08T00:00:00Z",
  "category": "Greedy Algorithms",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 44034,
    "failureCount": 14761
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "509323912",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 855
  },
  "prompt": "<div class=\"html\">\n<p>\n  It's photo day at the local school, and you're the photographer assigned to\n  take class photos. The class that you'll be photographing has an even number\n  of students, and all these students are wearing red or blue shirts. In fact,\n  exactly half of the class is wearing red shirts, and the other half is wearing\n  blue shirts. You're responsible for arranging the students in two rows before\n  taking the photo. Each row should contain the same number of the students and\n  should adhere to the following guidelines:\n</p>\n<ul>\n  <li>All students wearing red shirts must be in the same row.</li>\n  <li>All students wearing blue shirts must be in the same row.</li>\n  <li>\n    Each student in the back row must be strictly taller than the student\n    directly in front of them in the front row.\n  </li>\n</ul>\n<p>\n  You're given two input arrays: one containing the heights of all the students\n  with red shirts and another one containing the heights of all the students\n  with blue shirts. These arrays will always have the same length, and each\n  height will be a positive integer. Write a function that returns whether or\n  not a class photo that follows the stated guidelines can be taken.\n</p>\n<p>Note: you can assume that each class has at least 2 students.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">redShirtHeights</span> = [5, 8, 1, 3, 4]\n<span class=\"CodeEditor-promptParameter\">blueShirtHeights</span> = [6, 9, 2, 4, 5]\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue <span class=\"CodeEditor-promptComment\">// Place all students with blue shirts in the back row.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  Start by determining which row will have the students wearing blue shirts and\n  which row will have the students wearing red shirts. Once you know this, how\n  can you determine if it's possible to take the photo?\n</p>\n",
    "\n<p>\n  The shirt color of the tallest student will determine which students need to\n  be placed in the back row. The tallest student can't be placed in the front\n  row because there's no student taller than them who can be placed behind them.\n</p>\n",
    "\n<p>\n  Once you know which students should be placed in each row, you can simply\n  check if each student in the back row can be paired with a student in the\n  front row who is shorter than them. If you can't find a satisfactory pairing\n  for every student in the back row, then you can't take the photo.\n</p>\n",
    "\n<p>\n  Sort each input array in descending order, then determine which students will\n  be in the front and back rows following Hint #2. After this, simply loop\n  through your sorted input arrays, and check if the current tallest student in\n  the back row is taller than the current tallest student in the front row. If\n  you find that the current tallest student (one that has yet to be placed) in\n  the back row isn't taller than the current tallest student in the front row,\n  then the photo can't be taken.\n</p>"
  ],
  "spaceTime": "O(nlog(n)) time | O(1) space - where n is the number of students",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nbool classPhotos(vector<int> redShirtHeights, vector<int> blueShirtHeights) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(nlog(n)) time | O(1) space - where n is the number of students\nbool classPhotos(vector<int> redShirtHeights, vector<int> blueShirtHeights) {\n  sort(redShirtHeights.begin(), redShirtHeights.end());\n  sort(blueShirtHeights.begin(), blueShirtHeights.end());\n\n  string shirtColorInFirstRow =\n    redShirtHeights[0] < blueShirtHeights[0] ? \"RED\" : \"BLUE\";\n  for (int idx = 0; idx < redShirtHeights.size(); idx++) {\n    int redShirtHeight = redShirtHeights[idx];\n    int blueShirtHeight = blueShirtHeights[idx];\n\n    if (shirtColorInFirstRow == \"RED\") {\n      if (redShirtHeight >= blueShirtHeight) return false;\n    } else if (blueShirtHeight >= redShirtHeight) return false;\n  }\n\n  return true;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> redShirtHeights = {5, 8, 1, 3, 4};\n      vector<int> blueShirtHeights = {6, 9, 2, 4, 5};\n      bool expected = true;\n      auto actual = classPhotos(redShirtHeights, blueShirtHeights);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> redShirtHeights = {5, 8, 1, 3, 4};\n      vector<int> blueShirtHeights = {6, 9, 2, 4, 5};\n      bool expected = true;\n      auto actual = classPhotos(redShirtHeights, blueShirtHeights);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public bool ClassPhotos(\n    List<int> redShirtHeights, List<int> blueShirtHeights\n  ) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(nlog(n)) time | O(1) space - where n is the number of students\n  public bool ClassPhotos(\n    List<int> redShirtHeights, List<int> blueShirtHeights\n  ) {\n    redShirtHeights.Sort((a, b) => b.CompareTo(a));\n    blueShirtHeights.Sort((a, b) => b.CompareTo(a));\n\n    string shirtColorInFirstRow =\n      (redShirtHeights[0] < blueShirtHeights[0]) ? \"RED\" : \"BLUE\";\n    for (int idx = 0; idx < redShirtHeights.Count; idx++) {\n      int redShirtHeight = redShirtHeights[idx];\n      int blueShirtHeight = blueShirtHeights[idx];\n\n      if (shirtColorInFirstRow == \"RED\") {\n        if (redShirtHeight >= blueShirtHeight) {\n          return false;\n        }\n      } else {\n        if (blueShirtHeight >= redShirtHeight) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> redShirtHeights = new List<int> { 5, 8, 1, 3, 4 };\n    List<int> blueShirtHeights = new List<int> { 6, 9, 2, 4, 5 };\n    bool expected = true;\n    bool actual = new Program().ClassPhotos(redShirtHeights, blueShirtHeights);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> redShirtHeights = new List<int> { 5, 8, 1, 3, 4 };\n    List<int> blueShirtHeights = new List<int> { 6, 9, 2, 4, 5 };\n    bool expected = true;\n    bool actual = new Program().ClassPhotos(redShirtHeights, blueShirtHeights);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ClassPhotos(redShirtHeights []int, blueShirtHeights []int) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"sort\"\n)\n\n// O(nlog(n)) time | O(1) space - where n is the number of students\nfunc ClassPhotos(redShirtHeights []int, blueShirtHeights []int) bool {\n\tsort.Slice(redShirtHeights, func(i, j int) bool {\n\t\treturn redShirtHeights[i] > redShirtHeights[j]\n\t})\n\tsort.Slice(blueShirtHeights, func(i, j int) bool {\n\t\treturn blueShirtHeights[i] > blueShirtHeights[j]\n\t})\n\n\tshirtColorInFirstRow := \"BLUE\"\n\tif redShirtHeights[0] < blueShirtHeights[0] {\n\t\tshirtColorInFirstRow = \"RED\"\n\t}\n\n\tfor idx := range redShirtHeights {\n\t\tredShirtHeight := redShirtHeights[idx]\n\t\tblueShirtHeight := blueShirtHeights[idx]\n\n\t\tif shirtColorInFirstRow == \"RED\" {\n\t\t\tif redShirtHeight >= blueShirtHeight {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else {\n\t\t\tif blueShirtHeight >= redShirtHeight {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tredShirtHeights := []int{5, 8, 1, 3, 4}\n\tblueShirtHeights := []int{6, 9, 2, 4, 5}\n\texpected := true\n\tactual := ClassPhotos(redShirtHeights, blueShirtHeights)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tredShirtHeights := []int{5, 8, 1, 3, 4}\n\tblueShirtHeights := []int{6, 9, 2, 4, 5}\n\texpected := true\n\tactual := ClassPhotos(redShirtHeights, blueShirtHeights)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public boolean classPhotos(\n    ArrayList<Integer> redShirtHeights, ArrayList<Integer> blueShirtHeights\n  ) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlog(n)) time | O(1) space - where n is the number of students\n  public boolean classPhotos(\n    ArrayList<Integer> redShirtHeights, ArrayList<Integer> blueShirtHeights\n  ) {\n    Collections.sort(redShirtHeights, Collections.reverseOrder());\n    Collections.sort(blueShirtHeights, Collections.reverseOrder());\n\n    String shirtColorInFirstRow =\n      (redShirtHeights.get(0) < blueShirtHeights.get(0)) ? \"RED\" : \"BLUE\";\n    for (int idx = 0; idx < redShirtHeights.size(); idx++) {\n      int redShirtHeight = redShirtHeights.get(idx);\n      int blueShirtHeight = blueShirtHeights.get(idx);\n\n      if (shirtColorInFirstRow == \"RED\") {\n        if (redShirtHeight >= blueShirtHeight) {\n          return false;\n        }\n      } else {\n        if (blueShirtHeight >= redShirtHeight) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    ArrayList<Integer> redShirtHeights =\n      new ArrayList<Integer>(Arrays.asList(5, 8, 1, 3, 4));\n    ArrayList<Integer> blueShirtHeights =\n      new ArrayList<Integer>(Arrays.asList(6, 9, 2, 4, 5));\n    boolean expected = true;\n    boolean actual =\n      new Program().classPhotos(redShirtHeights, blueShirtHeights);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    ArrayList<Integer> redShirtHeights =\n      new ArrayList<Integer>(Arrays.asList(5, 8, 1, 3, 4));\n    ArrayList<Integer> blueShirtHeights =\n      new ArrayList<Integer>(Arrays.asList(6, 9, 2, 4, 5));\n    boolean expected = true;\n    boolean actual =\n      new Program().classPhotos(redShirtHeights, blueShirtHeights);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function classPhotos(redShirtHeights, blueShirtHeights) {\n  // Write your code here.\n  return false;\n}\n\n// Do not edit the line below.\nexports.classPhotos = classPhotos;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(1) space - where n is the number of students\nfunction classPhotos(redShirtHeights, blueShirtHeights) {\n  redShirtHeights.sort((a, b) => b - a);\n  blueShirtHeights.sort((a, b) => b - a);\n\n  const shirtColorInFirstRow = redShirtHeights[0] < blueShirtHeights[0] ? 'RED' : 'BLUE';\n  for (let idx = 0; idx < redShirtHeights.length; idx++) {\n    const redShirtHeight = redShirtHeights[idx];\n    const blueShirtHeight = blueShirtHeights[idx];\n\n    if (shirtColorInFirstRow === 'RED') {\n      if (redShirtHeight >= blueShirtHeight) return false;\n    } else if (blueShirtHeight >= redShirtHeight) return false;\n  }\n\n  return true;\n}\n\n// Do not edit the line below.\nexports.classPhotos = classPhotos;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const redShirtHeights = [5, 8, 1, 3, 4];\n  const blueShirtHeights = [6, 9, 2, 4, 5];\n  const expected = true;\n  const actual = program.classPhotos(redShirtHeights, blueShirtHeights);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const redShirtHeights = [5, 8, 1, 3, 4];\n  const blueShirtHeights = [6, 9, 2, 4, 5];\n  const expected = true;\n  const actual = program.classPhotos(redShirtHeights, blueShirtHeights);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun classPhotos(redShirtHeights: MutableList<Int>, blueShirtHeights: MutableList<Int>): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nlog(n)) time | O(1) space - where n is the number of students\nfun classPhotos(redShirtHeights: MutableList<Int>, blueShirtHeights: MutableList<Int>): Boolean {\n    redShirtHeights.sortDescending()\n    blueShirtHeights.sortDescending()\n\n    val shirtColorInFirstRow = if (redShirtHeights[0] < blueShirtHeights[0]) \"RED\" else \"BLUE\"\n    for (idx in 0 until redShirtHeights.size) {\n        val redShirtHeight = redShirtHeights[idx]\n        val blueShirtHeight = blueShirtHeights[idx]\n\n        if (shirtColorInFirstRow == \"RED\") {\n            if (redShirtHeight >= blueShirtHeight) return false\n        } else {\n            if (blueShirtHeight >= redShirtHeight) return false\n        }\n    }\n\n    return true\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.classPhotos\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val redShirtHeights = mutableListOf(5, 8, 1, 3, 4)\n        val blueShirtHeights = mutableListOf(6, 9, 2, 4, 5)\n        val expected = true\n        val output = classPhotos(redShirtHeights, blueShirtHeights)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.classPhotos\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val redShirtHeights = mutableListOf(5, 8, 1, 3, 4)\n        val blueShirtHeights = mutableListOf(6, 9, 2, 4, 5)\n        val expected = true\n        val output = classPhotos(redShirtHeights, blueShirtHeights)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def classPhotos(redShirtHeights, blueShirtHeights):\n    # Write your code here.\n    return False\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlog(n)) time | O(1) space - where n is the number of students\ndef classPhotos(redShirtHeights, blueShirtHeights):\n    redShirtHeights.sort(reverse=True)\n    blueShirtHeights.sort(reverse=True)\n\n    shirtColorInFirstRow = \"RED\" if redShirtHeights[0] < blueShirtHeights[0] else \"BLUE\"\n    for idx in range(len(redShirtHeights)):\n        redShirtHeight = redShirtHeights[idx]\n        blueShirtHeight = blueShirtHeights[idx]\n\n        if shirtColorInFirstRow == \"RED\":\n            if redShirtHeight >= blueShirtHeight:\n                return False\n        else:\n            if blueShirtHeight >= redShirtHeight:\n                return False\n\n    return True\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        redShirtHeights = [5, 8, 1, 3, 4]\n        blueShirtHeights = [6, 9, 2, 4, 5]\n        expected = True\n        actual = program.classPhotos(redShirtHeights, blueShirtHeights)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        redShirtHeights = [5, 8, 1, 3, 4]\n        blueShirtHeights = [6, 9, 2, 4, 5]\n        expected = True\n        actual = program.classPhotos(redShirtHeights, blueShirtHeights)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def classPhotos(redShirtHeights, blueShirtHeights)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def classPhotos(redShirtHeights, blueShirtHeights)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.classPhotos\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.classPhotos\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func classPhotos(_ redShirtHeights: inout [Int], _ blueShirtHeights: inout [Int]) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlog(n)) time | O(1) space - where n is the number of students\n  func classPhotos(_ redShirtHeights: inout [Int], _ blueShirtHeights: inout [Int]) -> Bool {\n    redShirtHeights.sort { $0 > $1 }\n    blueShirtHeights.sort { $0 > $1 }\n\n    var shirtColorInFirstRow = \"BLUE\"\n    if redShirtHeights[0] < blueShirtHeights[0] {\n      shirtColorInFirstRow = \"RED\"\n    }\n\n    for idx in 0 ..< redShirtHeights.count {\n      let redShirtHeight = redShirtHeights[idx]\n      let blueShirtHeight = blueShirtHeights[idx]\n\n      if shirtColorInFirstRow == \"RED\" {\n        if redShirtHeight >= blueShirtHeight {\n          return false\n        }\n      } else {\n        if blueShirtHeight >= redShirtHeight {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var redShirtHeights = [5, 8, 1, 3, 4]\n      var blueShirtHeights = [6, 9, 2, 4, 5]\n      var expected = true\n      var actual = Program().classPhotos(&redShirtHeights, &blueShirtHeights)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var redShirtHeights = [5, 8, 1, 3, 4]\n      var blueShirtHeights = [6, 9, 2, 4, 5]\n      var expected = true\n      var actual = Program().classPhotos(&redShirtHeights, &blueShirtHeights)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function classPhotos(redShirtHeights: number[], blueShirtHeights: number[]) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(1) space - where n is the number of students\nexport function classPhotos(redShirtHeights: number[], blueShirtHeights: number[]) {\n  redShirtHeights.sort((a, b) => b - a);\n  blueShirtHeights.sort((a, b) => b - a);\n\n  const shirtColorInFirstRow = redShirtHeights[0] < blueShirtHeights[0] ? 'RED' : 'BLUE';\n  for (let idx = 0; idx < redShirtHeights.length; idx++) {\n    const redShirtHeight = redShirtHeights[idx];\n    const blueShirtHeight = blueShirtHeights[idx];\n\n    if (shirtColorInFirstRow === 'RED') {\n      if (redShirtHeight >= blueShirtHeight) return false;\n    } else if (blueShirtHeight >= redShirtHeight) return false;\n  }\n\n  return true;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const redShirtHeights = [5, 8, 1, 3, 4];\n  const blueShirtHeights = [6, 9, 2, 4, 5];\n  const expected = true;\n  const actual = program.classPhotos(redShirtHeights, blueShirtHeights);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const redShirtHeights = [5, 8, 1, 3, 4];\n  const blueShirtHeights = [6, 9, 2, 4, 5];\n  const expected = true;\n  const actual = program.classPhotos(redShirtHeights, blueShirtHeights);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "redShirtHeights",
      "example": [
        5,
        8,
        1,
        3,
        4
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    },
    {
      "name": "blueShirtHeights",
      "example": [
        6,
        9,
        2,
        4,
        5
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "blueShirtHeights": [
        6,
        9,
        2,
        4,
        5
      ],
      "redShirtHeights": [
        5,
        8,
        1,
        3,
        4
      ]
    },
    {
      "blueShirtHeights": [
        5,
        8,
        1,
        3,
        4
      ],
      "redShirtHeights": [
        6,
        9,
        2,
        4,
        5
      ]
    },
    {
      "blueShirtHeights": [
        5,
        8,
        1,
        3,
        4,
        9
      ],
      "redShirtHeights": [
        6,
        9,
        2,
        4,
        5,
        1
      ]
    },
    {
      "blueShirtHeights": [
        6
      ],
      "redShirtHeights": [
        6
      ]
    },
    {
      "blueShirtHeights": [
        125
      ],
      "redShirtHeights": [
        126
      ]
    },
    {
      "blueShirtHeights": [
        2,
        3,
        4,
        5,
        6
      ],
      "redShirtHeights": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "blueShirtHeights": [
        5,
        6,
        7,
        2,
        3,
        1,
        2,
        3
      ],
      "redShirtHeights": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtHeights": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "redShirtHeights": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtHeights": [
        126
      ],
      "redShirtHeights": [
        125
      ]
    },
    {
      "blueShirtHeights": [
        21,
        5,
        4,
        4,
        4,
        4,
        4,
        4,
        4
      ],
      "redShirtHeights": [
        19,
        2,
        4,
        6,
        2,
        3,
        1,
        1,
        4
      ]
    },
    {
      "blueShirtHeights": [
        20,
        5,
        4,
        4,
        4,
        4,
        4,
        4
      ],
      "redShirtHeights": [
        19,
        19,
        21,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtHeights": [
        2,
        4,
        7,
        5,
        1
      ],
      "redShirtHeights": [
        3,
        5,
        6,
        8,
        2
      ]
    },
    {
      "blueShirtHeights": [
        2,
        4,
        7,
        5,
        1,
        6
      ],
      "redShirtHeights": [
        3,
        5,
        6,
        8,
        2,
        1
      ]
    },
    {
      "blueShirtHeights": [
        5,
        4
      ],
      "redShirtHeights": [
        4,
        5
      ]
    },
    {
      "blueShirtHeights": [
        5,
        4
      ],
      "redShirtHeights": [
        5,
        6
      ]
    }
  ],
  "jsonTests": [
    {
      "blueShirtHeights": [
        6,
        9,
        2,
        4,
        5
      ],
      "redShirtHeights": [
        5,
        8,
        1,
        3,
        4
      ]
    },
    {
      "blueShirtHeights": [
        5,
        8,
        1,
        3,
        4
      ],
      "redShirtHeights": [
        6,
        9,
        2,
        4,
        5
      ]
    },
    {
      "blueShirtHeights": [
        5,
        8,
        1,
        3,
        4,
        9
      ],
      "redShirtHeights": [
        6,
        9,
        2,
        4,
        5,
        1
      ]
    },
    {
      "blueShirtHeights": [
        6
      ],
      "redShirtHeights": [
        6
      ]
    },
    {
      "blueShirtHeights": [
        125
      ],
      "redShirtHeights": [
        126
      ]
    },
    {
      "blueShirtHeights": [
        2,
        3,
        4,
        5,
        6
      ],
      "redShirtHeights": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "blueShirtHeights": [
        5,
        6,
        7,
        2,
        3,
        1,
        2,
        3
      ],
      "redShirtHeights": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtHeights": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "redShirtHeights": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtHeights": [
        126
      ],
      "redShirtHeights": [
        125
      ]
    },
    {
      "blueShirtHeights": [
        21,
        5,
        4,
        4,
        4,
        4,
        4,
        4,
        4
      ],
      "redShirtHeights": [
        19,
        2,
        4,
        6,
        2,
        3,
        1,
        1,
        4
      ]
    },
    {
      "blueShirtHeights": [
        20,
        5,
        4,
        4,
        4,
        4,
        4,
        4
      ],
      "redShirtHeights": [
        19,
        19,
        21,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtHeights": [
        2,
        4,
        7,
        5,
        1
      ],
      "redShirtHeights": [
        3,
        5,
        6,
        8,
        2
      ]
    },
    {
      "blueShirtHeights": [
        2,
        4,
        7,
        5,
        1,
        6
      ],
      "redShirtHeights": [
        3,
        5,
        6,
        8,
        2,
        1
      ]
    },
    {
      "blueShirtHeights": [
        5,
        4
      ],
      "redShirtHeights": [
        4,
        5
      ]
    },
    {
      "blueShirtHeights": [
        5,
        4
      ],
      "redShirtHeights": [
        5,
        6
      ]
    }
  ],
  "changelog": []
}