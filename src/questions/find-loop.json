{
  "uid": "find-loop",
  "testStrategy": "JSON",
  "name": "Find Loop",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Linked Lists",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 20596,
    "failureCount": 5074
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "242227953",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1140
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in the head of a Singly Linked List that contains\n  a loop (in other words, the list's tail node points to some node in the list\n  instead of <span>None</span> / <span>null</span>). The function should return\n  the node (the actual node--not just its value) from which the loop originates\n  in constant space.\n</p>\n<p>\n  Each <span>LinkedList</span> node has an integer <span>value</span> as well as\n  a <span>next</span> node pointing to the next node in the list.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">head</span> = 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 <span class=\"CodeEditor-promptComment\">// the head node with value 0</span>\n                           ^         v\n                           9 <- 8 <- 7\n</pre>\n<h3>Sample Output</h3>\n<pre>\n4 -> 5 -> 6 <span class=\"CodeEditor-promptComment\">// the node with value 4</span>\n^         v\n9 <- 8 <- 7\n</pre>\n</div>",
  "hints": [
    "<p>\nTry traversing the linked list with two pointers, one iterating through every single node in the list and another iterating through every other node in the list (skipping a node every time). Eventually, both pointers will point to the same node since there is a loop in the list and since one pointer is moving faster than the other. Stop once the pointers overlap each other. How can you find the origin of the loop from here?\n</p>\n",
    "\n<p>\nCan you come up with a mathematical relation between the respective distances traveled by each pointer? How far will the first pointer have traveled when the pointers overlap? What about the second pointer? How can this relation then help you find the actual origin of the loop in the list?\n</p>\n",
    "\n<p>\nLet D be the distance between the start of the linked list and the origin of the loop in the list. Let P be distance between the origin of the loop and the node N where the first and second pointers overlap (going in the primary direction of the list). By the time the pointers reach N, the first pointer will have traveled a distance of length D + P, and the second pointer will have traveled a distance of length 2D + 2P, since it will have traveled twice as much as the first pointer. Thus, the distance between N and the origin of the loop (going in the primary direction of the list) can be arithmetically deduced to be 2D + 2P - D - 2P = D. With both pointers D length away from the origin of the loop, how can you find the origin?\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the number of nodes in the Linked List",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": "linkedlist",
    "outputType": "linkedlist"
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next;\n\n  LinkedList(int value);\n};\n\nLinkedList* findLoop(LinkedList* head) {\n  // Write your code here.\n  return nullptr;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next;\n\n  LinkedList(int value);\n};\n\n// O(n) time | O(1) space\nLinkedList* findLoop(LinkedList* head) {\n  LinkedList* first = head->next;\n  LinkedList* second = head->next->next;\n  while (first != second) {\n    first = first->next;\n    second = second->next->next;\n  }\n  first = head;\n  while (first != second) {\n    first = first->next;\n    second = second->next;\n  }\n  return first;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nLinkedList::LinkedList(int value) {\n  this->value = value;\n  this->next = nullptr;\n}\n\nvoid addMany(LinkedList* ll, vector<int> values) {\n  LinkedList* current = ll;\n  while (current->next != nullptr) {\n    current = current->next;\n  }\n  for (int value : values) {\n    current->next = new LinkedList(value);\n    current = current->next;\n  }\n}\n\nLinkedList* getNthNode(LinkedList* ll, int n) {\n  int counter = 1;\n  LinkedList* current = ll;\n  while (counter < n) {\n    current = current->next;\n    counter++;\n  }\n  return current;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      LinkedList test(0);\n      addMany(&test, {1, 2, 3, 4, 5, 6, 7, 8, 9});\n      getNthNode(&test, 10)->next = getNthNode(&test, 5);\n      assert(findLoop(&test) == getNthNode(&test, 5));\n    });\n  }\n};\n",
      "unitTests": "LinkedList::LinkedList(int value) {\n  this->value = value;\n  this->next = nullptr;\n}\n\nvoid addMany(LinkedList* ll, vector<int> values) {\n  LinkedList* current = ll;\n  while (current->next != nullptr) {\n    current = current->next;\n  }\n  for (int value : values) {\n    current->next = new LinkedList(value);\n    current = current->next;\n  }\n}\n\nLinkedList* getNthNode(LinkedList* ll, int n) {\n  int counter = 1;\n  LinkedList* current = ll;\n  while (counter < n) {\n    current = current->next;\n    counter++;\n  }\n  return current;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      LinkedList test(0);\n      addMany(&test, {1, 2, 3, 4, 5, 6, 7, 8, 9});\n      getNthNode(&test, 10)->next = getNthNode(&test, 5);\n      assert(findLoop(&test) == getNthNode(&test, 5));\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static LinkedList FindLoop(LinkedList head) {\n    // Write your code here.\n    return null;\n  }\n\n  public class LinkedList {\n    public int value;\n    public LinkedList next = null;\n\n    public LinkedList(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static LinkedList FindLoop(LinkedList head) {\n    LinkedList first = head.next;\n    LinkedList second = head.next.next;\n    while (first != second) {\n      first = first.next;\n      second = second.next.next;\n    }\n    first = head;\n    while (first != second) {\n      first = first.next;\n      second = second.next;\n    }\n    return first;\n  }\n\n  public class LinkedList {\n    public int value;\n    public LinkedList next = null;\n\n    public LinkedList(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    TestLinkedList test = new TestLinkedList(0);\n    test.addMany(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });\n    test.getNthNode(10).next = test.getNthNode(5);\n    Utils.AssertTrue(Program.FindLoop(test) == test.getNthNode(5));\n  }\n\n  public class TestLinkedList : Program.LinkedList {\n    public TestLinkedList(int value) : base(value) {}\n\n    public void addMany(int[] values) {\n      Program.LinkedList current = this;\n      while (current.next != null) {\n        current = current.next;\n      }\n      foreach (int value in values) {\n        current.next = new Program.LinkedList(value);\n        current = current.next;\n      }\n    }\n\n    public Program.LinkedList getNthNode(int n) {\n      int counter = 1;\n      Program.LinkedList current = this;\n      while (counter < n) {\n        current = current.next;\n        counter++;\n      }\n      return current;\n    }\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    TestLinkedList test = new TestLinkedList(0);\n    test.addMany(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });\n    test.getNthNode(10).next = test.getNthNode(5);\n    Utils.AssertTrue(Program.FindLoop(test) == test.getNthNode(5));\n  }\n\n  public class TestLinkedList : Program.LinkedList {\n    public TestLinkedList(int value) : base(value) {}\n\n    public void addMany(int[] values) {\n      Program.LinkedList current = this;\n      while (current.next != null) {\n        current = current.next;\n      }\n      foreach (int value in values) {\n        current.next = new Program.LinkedList(value);\n        current = current.next;\n      }\n    }\n\n    public Program.LinkedList getNthNode(int n) {\n      int counter = 1;\n      Program.LinkedList current = this;\n      while (counter < n) {\n        current = current.next;\n        counter++;\n      }\n      return current;\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\nfunc FindLoop(head *LinkedList) *LinkedList {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\n// O(n) time | O(1) space\nfunc FindLoop(head *LinkedList) *LinkedList {\n\tfirst := head.Next\n\tsecond := first.Next\n\tfor first != second {\n\t\tfirst, second = first.Next, second.Next.Next\n\t}\n\tfirst = head\n\tfor first != second {\n\t\tfirst = first.Next\n\t\tsecond = second.Next\n\t}\n\treturn first\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc NewLinkedList(root int, children ...int) *LinkedList {\n\tll := &LinkedList{root, nil}\n\tll.Add(children...)\n\treturn ll\n}\n\nfunc (ll *LinkedList) Add(values ...int) {\n\tcurrent := ll\n\tfor current.Next != nil {\n\t\tcurrent = current.Next\n\t}\n\tfor value := range values {\n\t\tcurrent.Next = &LinkedList{value, nil}\n\t\tcurrent = current.Next\n\t}\n}\n\nfunc (ll *LinkedList) GetNth(n int) *LinkedList {\n\tcounter, current := 1, ll\n\tfor counter < n {\n\t\tcounter, current = counter+1, current.Next\n\t}\n\treturn current\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tll := NewLinkedList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\tll.GetNth(10).Next = ll.GetNth(5)\n\toutput, expected := FindLoop(ll), ll.GetNth(5)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc NewLinkedList(root int, children ...int) *LinkedList {\n\tll := &LinkedList{root, nil}\n\tll.Add(children...)\n\treturn ll\n}\n\nfunc (ll *LinkedList) Add(values ...int) {\n\tcurrent := ll\n\tfor current.Next != nil {\n\t\tcurrent = current.Next\n\t}\n\tfor value := range values {\n\t\tcurrent.Next = &LinkedList{value, nil}\n\t\tcurrent = current.Next\n\t}\n}\n\nfunc (ll *LinkedList) GetNth(n int) *LinkedList {\n\tcounter, current := 1, ll\n\tfor counter < n {\n\t\tcounter, current = counter+1, current.Next\n\t}\n\treturn current\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tll := NewLinkedList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\tll.GetNth(10).Next = ll.GetNth(5)\n\toutput, expected := FindLoop(ll), ll.GetNth(5)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static LinkedList findLoop(LinkedList head) {\n    // Write your code here.\n    return null;\n  }\n\n  static class LinkedList {\n    int value;\n    LinkedList next = null;\n\n    public LinkedList(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static LinkedList findLoop(LinkedList head) {\n    LinkedList first = head.next;\n    LinkedList second = head.next.next;\n    while (first != second) {\n      first = first.next;\n      second = second.next.next;\n    }\n    first = head;\n    while (first != second) {\n      first = first.next;\n      second = second.next;\n    }\n    return first;\n  }\n\n  static class LinkedList {\n    int value;\n    LinkedList next = null;\n\n    public LinkedList(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    TestLinkedList test = new TestLinkedList(0);\n    test.addMany(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9});\n    test.getNthNode(10).next = test.getNthNode(5);\n    Utils.assertTrue(Program.findLoop(test) == test.getNthNode(5));\n  }\n\n  class TestLinkedList extends Program.LinkedList {\n    public TestLinkedList(int value) {\n      super(value);\n    }\n\n    public void addMany(int[] values) {\n      Program.LinkedList current = this;\n      while (current.next != null) {\n        current = current.next;\n      }\n      for (int value : values) {\n        current.next = new Program.LinkedList(value);\n        current = current.next;\n      }\n    }\n\n    public Program.LinkedList getNthNode(int n) {\n      int counter = 1;\n      Program.LinkedList current = this;\n      while (counter < n) {\n        current = current.next;\n        counter++;\n      }\n      return current;\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    TestLinkedList test = new TestLinkedList(0);\n    test.addMany(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9});\n    test.getNthNode(10).next = test.getNthNode(5);\n    Utils.assertTrue(Program.findLoop(test) == test.getNthNode(5));\n  }\n\n  class TestLinkedList extends Program.LinkedList {\n    public TestLinkedList(int value) {\n      super(value);\n    }\n\n    public void addMany(int[] values) {\n      Program.LinkedList current = this;\n      while (current.next != null) {\n        current = current.next;\n      }\n      for (int value : values) {\n        current.next = new Program.LinkedList(value);\n        current = current.next;\n      }\n    }\n\n    public Program.LinkedList getNthNode(int n) {\n      int counter = 1;\n      Program.LinkedList current = this;\n      while (counter < n) {\n        current = current.next;\n        counter++;\n      }\n      return current;\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nfunction findLoop(head) {\n  // Write your code here.\n}\n\n// Do not edit the lines below.\nexports.LinkedList = LinkedList;\nexports.findLoop = findLoop;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space\nfunction findLoop(head) {\n  let first = head.next;\n  let second = head.next.next;\n  while (first !== second) {\n    first = first.next;\n    second = second.next.next;\n  }\n  first = head;\n  while (first !== second) {\n    first = first.next;\n    second = second.next;\n  }\n  return first;\n}\n\nexports.LinkedList = LinkedList;\nexports.findLoop = findLoop;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nclass LinkedList extends program.LinkedList {\n  addMany(values) {\n    let current = this;\n    while (current.next !== null) {\n      current = current.next;\n    }\n    for (const value of values) {\n      current.next = new LinkedList(value);\n      current = current.next;\n    }\n    return this;\n  }\n\n  getNthNode(n) {\n    let counter = 1;\n    let current = this;\n    while (counter < n) {\n      current = current.next;\n      counter++;\n    }\n    return current;\n  }\n}\n\nit('Test Case #1', function () {\n  const test = new LinkedList(0).addMany([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  test.getNthNode(10).next = test.getNthNode(5);\n  chai.expect(program.findLoop(test)).to.deep.equal(test.getNthNode(5));\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nclass LinkedList extends program.LinkedList {\n  addMany(values) {\n    let current = this;\n    while (current.next !== null) {\n      current = current.next;\n    }\n    for (const value of values) {\n      current.next = new LinkedList(value);\n      current = current.next;\n    }\n    return this;\n  }\n\n  getNthNode(n) {\n    let counter = 1;\n    let current = this;\n    while (counter < n) {\n      current = current.next;\n      counter++;\n    }\n    return current;\n  }\n}\n\nit('Test Case #1', function () {\n  const test = new LinkedList(0).addMany([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  test.getNthNode(10).next = test.getNthNode(5);\n  chai.expect(program.findLoop(test)).to.deep.equal(test.getNthNode(5));\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\nfun findLoop(head: LinkedList?): LinkedList? {\n    // Write your code here.\n    return head\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the Linked List\nfun findLoop(head: LinkedList?): LinkedList? {\n    var first = head?.next\n    var second = first?.next\n    while (first != second) {\n        first = first?.next\n        second = second?.next?.next\n    }\n    first = head\n    while (first != second) {\n        first = first?.next\n        second = second?.next\n    }\n    return first\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.LinkedList as LinkedList\nimport com.algoexpert.program.findLoop as findLoop\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        var ll = LinkedList(0)\n        var tail = addAll(ll, listOf<Int>(1, 2, 3, 4, 5, 6, 7, 8, 9))\n        var fifth = ll.next!!.next!!.next!!.next!!.next!!\n        tail.next = fifth\n        var loop = findLoop(ll)\n        assert(loop == fifth)\n    }\n}\n\nfun addAll(ll: LinkedList, values: List<Int>): LinkedList {\n    var current = ll\n    for (value in values) {\n        val newLL = LinkedList(value)\n        current.next = newLL\n        current = newLL\n    }\n    return current\n}\n",
      "unitTests": "import com.algoexpert.program.LinkedList as LinkedList\nimport com.algoexpert.program.findLoop as findLoop\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        var ll = LinkedList(0)\n        var tail = addAll(ll, listOf<Int>(1, 2, 3, 4, 5, 6, 7, 8, 9))\n        var fifth = ll.next!!.next!!.next!!.next!!.next!!\n        tail.next = fifth\n        var loop = findLoop(ll)\n        assert(loop == fifth)\n    }\n}\n\nfun addAll(ll: LinkedList, values: List<Int>): LinkedList {\n    var current = ll\n    for (value in values) {\n        val newLL = LinkedList(value)\n        current.next = newLL\n        current = newLL\n    }\n    return current\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is an input class. Do not edit.\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\ndef findLoop(head):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\n# O(n) time | O(1) space\ndef findLoop(head):\n    first = head.next\n    second = head.next.next\n    while first != second:\n        first = first.next\n        second = second.next.next\n    first = head\n    while first != second:\n        first = first.next\n        second = second.next\n    return first\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass StartLinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\nlinkedListClass = StartLinkedList\nif hasattr(program, \"LinkedList\"):\n    linkedListClass = program.LinkedList\n\n\nclass LinkedList(linkedListClass):\n    def addMany(self, values):\n        current = self\n        while current.next is not None:\n            current = current.next\n        for value in values:\n            current.next = LinkedList(value)\n            current = current.next\n        return self\n\n    def getNthNode(self, n):\n        counter = 1\n        current = self\n        while counter < n:\n            current = current.next\n            counter += 1\n        return current\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = LinkedList(0).addMany([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        test.getNthNode(10).next = test.getNthNode(5)\n        self.assertEqual(program.findLoop(test), test.getNthNode(5))\n",
      "unitTests": "import program\nimport unittest\n\n\nclass StartLinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\nlinkedListClass = StartLinkedList\nif hasattr(program, \"LinkedList\"):\n    linkedListClass = program.LinkedList\n\n\nclass LinkedList(linkedListClass):\n    def addMany(self, values):\n        current = self\n        while current.next is not None:\n            current = current.next\n        for value in values:\n            current.next = LinkedList(value)\n            current = current.next\n        return self\n\n    def getNthNode(self, n):\n        counter = 1\n        current = self\n        while counter < n:\n            current = current.next\n            counter += 1\n        return current\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = LinkedList(0).addMany([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        test.getNthNode(10).next = test.getNthNode(5)\n        self.assertEqual(program.findLoop(test), test.getNthNode(5))\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "# This is an input struct. Do not edit.\nclass LinkedList\n  attr_accessor :value\n  attr_accessor :next\n\n  def initialize(value)\n    @value = value\n    @next = nil\n  end\nend\n\nclass Program\n  def findLoop(linkedList)\n    # Write your code here.\n    return nil\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass LinkedList\n  attr_accessor :value\n  attr_accessor :next\n\n  def initialize(value)\n    @value = value\n    @next = nil\n  end\nend\n\nclass Program\n  def findLoop(linkedList)\n    # Write your code here.\n    return nil\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.findLoop\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.findLoop\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class LinkedList {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n      next = nil\n    }\n  }\n\n  func findLoop(head: LinkedList) -> LinkedList? {\n    // Write your code here.\n    return nil\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  class LinkedList {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n      next = nil\n    }\n  }\n\n  // O(n) time | O(1) space\n  func findLoop(head: LinkedList) -> LinkedList? {\n    var firstPointer = head.next\n    var secondPointer = head.next?.next\n\n    while firstPointer !== secondPointer {\n      firstPointer = firstPointer?.next\n      secondPointer = secondPointer?.next?.next\n    }\n\n    firstPointer = head\n\n    while firstPointer !== secondPointer {\n      firstPointer = firstPointer?.next\n      secondPointer = secondPointer?.next\n    }\n\n    return firstPointer\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let test = TestLinkedList(value: 0).addMany(values: [1, 2, 3, 4, 5, 6, 7, 8, 9])\n      test.getNthNode(n: 10).next = test.getNthNode(n: 5)\n      try assert(program.findLoop(head: test) === test.getNthNode(n: 5))\n    }\n  }\n}\n\nclass TestLinkedList: Program.LinkedList {\n  func addMany(values: [Int]) -> TestLinkedList {\n    var current = self as Program.LinkedList\n\n    while current.next != nil {\n      current = current.next!\n    }\n\n    for value in values {\n      current.next = Program.LinkedList(value: value)\n      current = current.next!\n    }\n\n    return self\n  }\n\n  func getNthNode(n: Int) -> Program.LinkedList {\n    var counter = 1\n    var current = self as Program.LinkedList\n\n    while counter < n {\n      counter += 1\n\n      if let next = current.next {\n        current = next\n      }\n    }\n\n    return current\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let test = TestLinkedList(value: 0).addMany(values: [1, 2, 3, 4, 5, 6, 7, 8, 9])\n      test.getNthNode(n: 10).next = test.getNthNode(n: 5)\n      try assert(program.findLoop(head: test) === test.getNthNode(n: 5))\n    }\n  }\n}\n\nclass TestLinkedList: Program.LinkedList {\n  func addMany(values: [Int]) -> TestLinkedList {\n    var current = self as Program.LinkedList\n\n    while current.next != nil {\n      current = current.next!\n    }\n\n    for value in values {\n      current.next = Program.LinkedList(value: value)\n      current = current.next!\n    }\n\n    return self\n  }\n\n  func getNthNode(n: Int) -> Program.LinkedList {\n    var counter = 1\n    var current = self as Program.LinkedList\n\n    while counter < n {\n      counter += 1\n\n      if let next = current.next {\n        current = next\n      }\n    }\n\n    return current\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport function findLoop(head: LinkedList) {\n  // Write your code here.\n  return head;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space\nexport function findLoop(head: LinkedList) {\n  let first: LinkedList = head.next!;\n  let second: LinkedList = head.next!.next!;\n  while (first !== second) {\n    first = first.next!;\n    second = second.next!.next!;\n  }\n  first = head;\n  while (first !== second) {\n    first = first.next!;\n    second = second.next!;\n  }\n  return first;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\ntype LinkedList = program.LinkedList;\nconst {LinkedList} = program;\n\nit('Test Case #1', function () {\n  const test = addMany(new LinkedList(0), [1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  getNthNode(test, 10).next = getNthNode(test, 5);\n  chai.expect(program.findLoop(test)).to.deep.equal(getNthNode(test, 5));\n});\n\nfunction addMany(linkedList: LinkedList, values: number[]) {\n  let current = linkedList;\n  while (current.next !== null) {\n    current = current.next;\n  }\n  for (const value of values) {\n    current.next = new LinkedList(value);\n    current = current.next;\n  }\n  return linkedList;\n}\n\nfunction getNthNode(linkedList: LinkedList, n: number) {\n  let counter = 1;\n  let current = linkedList;\n  while (counter < n) {\n    current = current!.next!;\n    counter++;\n  }\n  return current;\n}\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\ntype LinkedList = program.LinkedList;\nconst {LinkedList} = program;\n\nit('Test Case #1', function () {\n  const test = addMany(new LinkedList(0), [1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  getNthNode(test, 10).next = getNthNode(test, 5);\n  chai.expect(program.findLoop(test)).to.deep.equal(getNthNode(test, 5));\n});\n\nfunction addMany(linkedList: LinkedList, values: number[]) {\n  let current = linkedList;\n  while (current.next !== null) {\n    current = current.next;\n  }\n  for (const value of values) {\n    current.next = new LinkedList(value);\n    current = current.next;\n  }\n  return linkedList;\n}\n\nfunction getNthNode(linkedList: LinkedList, n: number) {\n  let counter = 1;\n  let current = linkedList;\n  while (counter < n) {\n    current = current!.next!;\n    counter++;\n  }\n  return current;\n}\n"
    }
  },
  "customInputVars": [
    {
      "name": "linkedList",
      "example": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "4",
            "value": 9
          }
        ]
      },
      "schema": {
        "description": "A Singly Linked List is represented by a list of <span>nodes</span> and a <span>head</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>next</span> pointers and by the <span>head</span>.\n",
        "properties": {
          "head": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "next": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "next"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "head",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "4",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "0",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "1",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "2",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "3",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "5",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "6",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "7",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "8",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "9",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 5
          },
          {
            "id": "1",
            "next": "2",
            "value": 4
          },
          {
            "id": "2",
            "next": "3",
            "value": 3
          },
          {
            "id": "3",
            "next": "2",
            "value": 2
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "2-2",
            "value": 6
          },
          {
            "id": "2-2",
            "next": "7",
            "value": 2
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "4",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "2-2",
            "value": 6
          },
          {
            "id": "2-2",
            "next": "7",
            "value": 2
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "2-2",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "0-2",
            "value": 0
          },
          {
            "id": "0-2",
            "next": "0-3",
            "value": 0
          },
          {
            "id": "0-3",
            "next": "0-4",
            "value": 0
          },
          {
            "id": "0-4",
            "next": "0-5",
            "value": 0
          },
          {
            "id": "0-5",
            "next": "0-6",
            "value": 0
          },
          {
            "id": "0-6",
            "next": "0-7",
            "value": 0
          },
          {
            "id": "0-7",
            "next": "0-8",
            "value": 0
          },
          {
            "id": "0-8",
            "next": "0-9",
            "value": 0
          },
          {
            "id": "0-9",
            "next": "0-7",
            "value": 0
          }
        ]
      }
    }
  ],
  "jsonTests": [
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "4",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "0",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "1",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "2",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "3",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "5",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "6",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "7",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "8",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "9",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 5
          },
          {
            "id": "1",
            "next": "2",
            "value": 4
          },
          {
            "id": "2",
            "next": "3",
            "value": 3
          },
          {
            "id": "3",
            "next": "2",
            "value": 2
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "2-2",
            "value": 6
          },
          {
            "id": "2-2",
            "next": "7",
            "value": 2
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "4",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "2-2",
            "value": 6
          },
          {
            "id": "2-2",
            "next": "7",
            "value": 2
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "2-2",
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "0-2",
            "value": 0
          },
          {
            "id": "0-2",
            "next": "0-3",
            "value": 0
          },
          {
            "id": "0-3",
            "next": "0-4",
            "value": 0
          },
          {
            "id": "0-4",
            "next": "0-5",
            "value": 0
          },
          {
            "id": "0-5",
            "next": "0-6",
            "value": 0
          },
          {
            "id": "0-6",
            "next": "0-7",
            "value": 0
          },
          {
            "id": "0-7",
            "next": "0-8",
            "value": 0
          },
          {
            "id": "0-8",
            "next": "0-9",
            "value": 0
          },
          {
            "id": "0-9",
            "next": "0-7",
            "value": 0
          }
        ]
      }
    }
  ],
  "changelog": []
}