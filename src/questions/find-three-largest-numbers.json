{
  "uid": "find-three-largest-numbers",
  "testStrategy": "JSON",
  "name": "Find Three Largest Numbers",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Searching",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 60998,
    "failureCount": 19054
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "229698816",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 435
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of at least three integers and,\n  without sorting the input array, returns a sorted array of the three largest\n  integers in the input array.\n</p>\n<p>\n  The function should return duplicate integers if necessary; for example, it\n  should return <span>[10, 10, 12]</span> for an input array of\n  <span>[10, 5, 9, 10, 12]</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[18, 141, 541]\n</pre>\n</div>",
  "hints": [
    "<p>\nCan you keep track of the three largest numbers in an array as you traverse the input array?\n</p>\n",
    "\n<p>\nFollowing the suggestion in Hint #1, try traversing the input array and updating the three largest numbers if necessary by shifting them accordingly.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "<div class=\"html\">\n<p class=\"CodeEditor-notesQuestion\">\n  Can we just sort the input array and return the last three elements in the\n  sorted array?\n</p>\n<p>\n  The best sorting algorithms run, on average, in <i>O(nlog(n))</i> time; we can\n  implement a more optimal, linear-time algorithm (an <i>O(n)</i>-time\n  algorithm) by not sorting the input array.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> findThreeLargestNumbers(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <climits>\n#include <vector>\nusing namespace std;\n\nvoid updateLargest(vector<int>& threeLargest, int num);\nvoid shiftAndUpdate(vector<int>& largest, int num, int idx);\n\n// O(n) time | O(1) space\nvector<int> findThreeLargestNumbers(vector<int> array) {\n  vector<int> threeLargest{INT_MIN, INT_MIN, INT_MIN};\n  for (int num : array) {\n    updateLargest(threeLargest, num);\n  }\n  return threeLargest;\n}\n\nvoid updateLargest(vector<int>& threeLargest, int num) {\n  if (num > threeLargest[2]) {\n    shiftAndUpdate(threeLargest, num, 2);\n  } else if (num > threeLargest[1]) {\n    shiftAndUpdate(threeLargest, num, 1);\n  } else if (num > threeLargest[0]) {\n    shiftAndUpdate(threeLargest, num, 0);\n  }\n}\n\nvoid shiftAndUpdate(vector<int>& array, int num, int idx) {\n  for (int i = 0; i <= idx; i++) {\n    if (i == idx) {\n      array[i] = num;\n    } else {\n      array[i] = array[i + 1];\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{18, 141, 541};\n      assert(\n        findThreeLargestNumbers({141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7}) ==\n        expected\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{18, 141, 541};\n      assert(\n        findThreeLargestNumbers({141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7}) ==\n        expected\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] FindThreeLargestNumbers(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static int[] FindThreeLargestNumbers(int[] array) {\n    int[] threeLargest = { Int32.MinValue, Int32.MinValue, Int32.MinValue };\n    foreach (int num in array) {\n      updateLargest(threeLargest, num);\n    }\n    return threeLargest;\n  }\n\n  public static void updateLargest(int[] threeLargest, int num) {\n    if (num > threeLargest[2]) {\n      shiftAndUpdate(threeLargest, num, 2);\n    } else if (num > threeLargest[1]) {\n      shiftAndUpdate(threeLargest, num, 1);\n    } else if (num > threeLargest[0]) {\n      shiftAndUpdate(threeLargest, num, 0);\n    }\n  }\n\n  public static void shiftAndUpdate(int[] array, int num, int idx) {\n    for (int i = 0; i <= idx; i++) {\n      if (i == idx) {\n        array[i] = num;\n      } else {\n        array[i] = array[i + 1];\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 18, 141, 541 };\n    Utils.AssertTrue(compare(\n      Program.FindThreeLargestNumbers(\n        new int[] { 141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7 }\n      ),\n      expected\n    ));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 18, 141, 541 };\n    Utils.AssertTrue(compare(\n      Program.FindThreeLargestNumbers(\n        new int[] { 141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7 }\n      ),\n      expected\n    ));\n  }\n\n  public bool compare(int[] arr1, int[] arr2) {\n    if (arr1.Length != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc FindThreeLargestNumbers(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(n) time | O(1) space\nfunc FindThreeLargestNumbers(array []int) []int {\n\tthree := []int{math.MinInt32, math.MinInt32, math.MinInt32}\n\tfor _, num := range array {\n\t\tupdateLargest(three, num)\n\t}\n\treturn three\n}\n\nfunc updateLargest(three []int, num int) {\n\tif num > three[2] {\n\t\tshiftAndUpdate(three, num, 2)\n\t} else if num > three[1] {\n\t\tshiftAndUpdate(three, num, 1)\n\t} else if num > three[0] {\n\t\tshiftAndUpdate(three, num, 0)\n\t}\n}\n\nfunc shiftAndUpdate(array []int, num int, idx int) {\n\tfor i := 0; i < idx+1; i++ {\n\t\tif i == idx {\n\t\t\tarray[i] = num\n\t\t} else {\n\t\t\tarray[i] = array[i+1]\n\t\t}\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{18, 141, 541}\n\toutput := FindThreeLargestNumbers([]int{141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{18, 141, 541}\n\toutput := FindThreeLargestNumbers([]int{141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] findThreeLargestNumbers(int[] array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int[] findThreeLargestNumbers(int[] array) {\n    int[] threeLargest = {\n      Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE};\n    for (int num : array) {\n      updateLargest(threeLargest, num);\n    }\n    return threeLargest;\n  }\n\n  public static void updateLargest(int[] threeLargest, int num) {\n    if (num > threeLargest[2]) {\n      shiftAndUpdate(threeLargest, num, 2);\n    } else if (num > threeLargest[1]) {\n      shiftAndUpdate(threeLargest, num, 1);\n    } else if (num > threeLargest[0]) {\n      shiftAndUpdate(threeLargest, num, 0);\n    }\n  }\n\n  public static void shiftAndUpdate(int[] array, int num, int idx) {\n    for (int i = 0; i <= idx; i++) {\n      if (i == idx) {\n        array[i] = num;\n      } else {\n        array[i] = array[i + 1];\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {18, 141, 541};\n    Utils.assertTrue(compare(\n      Program.findThreeLargestNumbers(new int[] {\n        141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7}),\n      expected\n    ));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {18, 141, 541};\n    Utils.assertTrue(compare(\n      Program.findThreeLargestNumbers(new int[] {\n        141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7}),\n      expected\n    ));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function findThreeLargestNumbers(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.findThreeLargestNumbers = findThreeLargestNumbers;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nfunction findThreeLargestNumbers(array) {\n  const threeLargest = [null, null, null];\n  for (const num of array) {\n    updateLargest(threeLargest, num);\n  }\n  return threeLargest;\n}\n\nfunction updateLargest(threeLargest, num) {\n  if (threeLargest[2] === null || num > threeLargest[2]) {\n    shiftAndUpdate(threeLargest, num, 2);\n  } else if (threeLargest[1] === null || num > threeLargest[1]) {\n    shiftAndUpdate(threeLargest, num, 1);\n  } else if (threeLargest[0] === null || num > threeLargest[0]) {\n    shiftAndUpdate(threeLargest, num, 0);\n  }\n}\n\nfunction shiftAndUpdate(array, num, idx) {\n  for (let i = 0; i <= idx; i++) {\n    if (i === idx) {\n      array[i] = num;\n    } else {\n      array[i] = array[i + 1];\n    }\n  }\n}\n\nexports.findThreeLargestNumbers = findThreeLargestNumbers;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.findThreeLargestNumbers([141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]))\n    .to.deep.equal([18, 141, 541]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.findThreeLargestNumbers([141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]))\n    .to.deep.equal([18, 141, 541]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun findThreeLargestNumbers(array: List<Int>): List<Int> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space\nfun findThreeLargestNumbers(array: List<Int>): List<Int> {\n    val threeLargest = mutableListOf(Int.MIN_VALUE, Int.MIN_VALUE, Int.MIN_VALUE)\n    for (num in array) {\n        updateLargest(threeLargest, num)\n    }\n    return threeLargest\n}\n\nfun updateLargest(threeLargest: MutableList<Int>, num: Int) {\n    if (num > threeLargest[2]) {\n        shiftAndUpdate(threeLargest, num, 2)\n    } else if (num > threeLargest[1]) {\n        shiftAndUpdate(threeLargest, num, 1)\n    } else if (num > threeLargest[0]) {\n        shiftAndUpdate(threeLargest, num, 0)\n    }\n}\n\nfun shiftAndUpdate(array: MutableList<Int>, num: Int, idx: Int) {\n    for (i in 0 until idx + 1) {\n        if (i == idx) {\n            array[i] = num\n        } else {\n            array[i] = array[i + 1]\n        }\n    }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.findThreeLargestNumbers\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = listOf(18, 141, 541)\n        val input = listOf(141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7)\n        val output = findThreeLargestNumbers(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.findThreeLargestNumbers\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val expected = listOf(18, 141, 541)\n        val input = listOf(141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7)\n        val output = findThreeLargestNumbers(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def findThreeLargestNumbers(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space\ndef findThreeLargestNumbers(array):\n    threeLargest = [None, None, None]\n    for num in array:\n        updateLargest(threeLargest, num)\n    return threeLargest\n\n\ndef updateLargest(threeLargest, num):\n    if threeLargest[2] is None or num > threeLargest[2]:\n        shiftAndUpdate(threeLargest, num, 2)\n    elif threeLargest[1] is None or num > threeLargest[1]:\n        shiftAndUpdate(threeLargest, num, 1)\n    elif threeLargest[0] is None or num > threeLargest[0]:\n        shiftAndUpdate(threeLargest, num, 0)\n\n\ndef shiftAndUpdate(array, num, idx):\n    for i in range(idx + 1):\n        if i == idx:\n            array[i] = num\n        else:\n            array[i] = array[i + 1]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.findThreeLargestNumbers([141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]),\n            [18, 141, 541],\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.findThreeLargestNumbers([141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]),\n            [18, 141, 541],\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def findThreeLargestNumbers(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def findThreeLargestNumbers(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.findThreeLargestNumbers\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.findThreeLargestNumbers\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func findThreeLargestNumbers(array: [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  func findThreeLargestNumbers(array: [Int]) -> [Int] {\n    var threeLargest: [Int?] = [nil, nil, nil]\n\n    for number in array {\n      updateLargest(&threeLargest, number)\n    }\n\n    let threeLargestWithoutOptionals = threeLargest.compactMap { $0 }\n    return threeLargestWithoutOptionals\n  }\n\n  func updateLargest(_ threeLargest: inout [Int?], _ number: Int) {\n    if threeLargest[2] == nil {\n      shiftAndupdate(&threeLargest, number, 2)\n    } else if threeLargest[1] == nil {\n      shiftAndupdate(&threeLargest, number, 1)\n    } else if threeLargest[0] == nil {\n      shiftAndupdate(&threeLargest, number, 0)\n    }\n\n    if let thirdNumber = threeLargest[2], number > thirdNumber {\n      shiftAndupdate(&threeLargest, number, 2)\n    } else if let secondNumber = threeLargest[1], number > secondNumber {\n      shiftAndupdate(&threeLargest, number, 1)\n    } else if let firstNumber = threeLargest[0], number > firstNumber {\n      shiftAndupdate(&threeLargest, number, 0)\n    }\n  }\n\n  func shiftAndupdate(_ threeLargest: inout [Int?], _ number: Int, _ index: Int) {\n    for i in 0 ... index {\n      if i == index {\n        threeLargest[i] = number\n      } else {\n        threeLargest[i] = threeLargest[i + 1]\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([18, 141, 541], program.findThreeLargestNumbers(array: [141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([18, 141, 541], program.findThreeLargestNumbers(array: [141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function findThreeLargestNumbers(array: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nexport function findThreeLargestNumbers(array: number[]) {\n  const threeLargest: Array<number | null> = [null, null, null];\n  for (const num of array) {\n    updateLargest(threeLargest, num);\n  }\n  return threeLargest;\n}\n\nfunction updateLargest(threeLargest: Array<number | null>, num: number) {\n  if (threeLargest[2] === null || num > threeLargest[2]) {\n    shiftAndUpdate(threeLargest, num, 2);\n  } else if (threeLargest[1] === null || num > threeLargest[1]) {\n    shiftAndUpdate(threeLargest, num, 1);\n  } else if (threeLargest[0] === null || num > threeLargest[0]) {\n    shiftAndUpdate(threeLargest, num, 0);\n  }\n}\n\nfunction shiftAndUpdate(array: Array<number | null>, num: number, idx: number) {\n  for (let i = 0; i <= idx; i++) {\n    if (i === idx) {\n      array[i] = num;\n    } else {\n      array[i] = array[i + 1];\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.findThreeLargestNumbers([141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]))\n    .to.deep.equal([18, 141, 541]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.findThreeLargestNumbers([141, 1, 17, -7, -17, -27, 18, 541, 8, 7, 7]))\n    .to.deep.equal([18, 141, 541]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        141,
        1,
        17,
        -7,
        -17,
        -27,
        18,
        541,
        8,
        7,
        7
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 3,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        141,
        1,
        17,
        -7,
        -17,
        -27,
        18,
        541,
        8,
        7,
        7
      ]
    },
    {
      "array": [
        55,
        7,
        8
      ]
    },
    {
      "array": [
        55,
        43,
        11,
        3,
        -3,
        10
      ]
    },
    {
      "array": [
        7,
        8,
        3,
        11,
        43,
        55
      ]
    },
    {
      "array": [
        55,
        7,
        8,
        3,
        43,
        11
      ]
    },
    {
      "array": [
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7
      ]
    },
    {
      "array": [
        7,
        7,
        7,
        7,
        7,
        7,
        8,
        7,
        7,
        7,
        7
      ]
    },
    {
      "array": [
        -1,
        -2,
        -3,
        -7,
        -17,
        -27,
        -18,
        -541,
        -8,
        -7,
        7
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        141,
        1,
        17,
        -7,
        -17,
        -27,
        18,
        541,
        8,
        7,
        7
      ]
    },
    {
      "array": [
        55,
        7,
        8
      ]
    },
    {
      "array": [
        55,
        43,
        11,
        3,
        -3,
        10
      ]
    },
    {
      "array": [
        7,
        8,
        3,
        11,
        43,
        55
      ]
    },
    {
      "array": [
        55,
        7,
        8,
        3,
        43,
        11
      ]
    },
    {
      "array": [
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        7
      ]
    },
    {
      "array": [
        7,
        7,
        7,
        7,
        7,
        7,
        8,
        7,
        7,
        7,
        7
      ]
    },
    {
      "array": [
        -1,
        -2,
        -3,
        -7,
        -17,
        -27,
        -18,
        -541,
        -8,
        -7,
        7
      ]
    }
  ],
  "changelog": []
}