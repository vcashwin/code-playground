{
  "uid": "first-duplicate-value",
  "testStrategy": "JSON",
  "name": "First Duplicate Value",
  "version": 0,
  "releaseDate": "2020-12-23T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 51303,
    "failureCount": 15332
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "561923850",
    "duration": 0,
    "annotations": [
      {
        "title": "Typo",
        "content": "The math should be n + (n - 1) + (n - 2) + ... | *NOT* multiplied",
        "start": 584,
        "end": 590
      }
    ],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1427
  },
  "prompt": "<div class=\"html\">\n<p>\n  Given an array of integers between <span>1</span> and <span>n</span>,\n  inclusive, where <span>n</span> is the length of the array, write a function\n  that returns the first integer that appears more than once (when the array is\n  read from left to right).\n</p>\n<p>\n  In other words, out of all the integers that might occur more than once in the\n  input array, your function should return the one whose first duplicate value\n  has the minimum index.\n</p>\n<p>\n  If no integer appears more than once, your function should return\n  <span>-1</span>.\n</p>\n<p>Note that you're allowed to mutate the input array.</p>\n<h3>Sample Input #1</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [2, 1, 5, 2, 3, 3, 4]\n</pre>\n<h3>Sample Output #1</h3>\n<pre>\n2 <span class=\"CodeEditor-promptComment\">// 2 is the first integer that appears more than once.</span>\n<span class=\"CodeEditor-promptComment\">// 3 also appears more than once, but the second 3 appears after the second 2.</span>\n</pre>\n<h3>Sample Input #2</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [2, 1, 5, 3, 3, 2, 4]\n</pre>\n<h3>Sample Output #2</h3>\n<pre>\n3 <span class=\"CodeEditor-promptComment\">// 3 is the first integer that appears more than once.</span>\n<span class=\"CodeEditor-promptComment\">// 2 also appears more than once, but the second 2 appears after the second 3.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nThe brute-force solution can be done in O(n^2) time. Think about how you can determine if a value appears twice in an array.\n</p>\n",
    "\n<p>\nYou can use a data structure that has constant-time lookups to keep track of integers that you've seen already. This leads the way to a linear-time solution.\n</p>\n",
    "\n<p>\nYou should always pay close attention to the details of a question's prompt. In this question, the integers in the array are between 1 and n, inclusive, where n is the length of the input array. The prompt also explicitly allows us to mutate the array. How can these details help us find a better solution, either time-complexity-wise or space-complexity-wise? \n</p>\n",
    "\n<p>\nSince the integers are between 1 and the length of the input array, you can map them to indices in the array itself by subtracting 1 from them. Once you've mapped an integer to an index in the array, you can mutate the value in the array at that index and make it negative (by multiplying it by -1). Since the integers normally aren't negative, the first time that you encounter a negative value at the index that an integer maps to, you'll know that you'll have already seen that integer.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "<div class=\"html\">\n<p>\n  At 9:43 in the video, the math that describes the number of operations\n  performed in Solution #1 has a typo. It should <b>not</b> involve\n  multiplication; instead, the total number of operations is approximated by the\n  following sum:\n</p>\n<pre>\nn + (n - 1) + (n - 2) + ... + 1\n</pre>\n<p>\n  In the first iteration, we visit <span>n</span> elements; in the second\n  iteration, we visit <span>n - 1</span> elements; in the third iteration, we\n  visit <span>n - 2</span> elements; etc..\n</p>\n<p>\n  This sum is equal to <span>n(n + 1) / 2</span>, which leads to an algorithm\n  that runs in <span>O(n^2)</span> time.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint firstDuplicateValue(vector<int> array) { return -1; }\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n^2) time | O(1) space - where n is the length of the input array\nint firstDuplicateValue(vector<int> array) {\n  int minimumSecondIndex = array.size();\n  for (int i = 0; i < array.size(); i++) {\n    int value = array[i];\n    for (int j = i + 1; j < array.size(); j++) {\n      int valueToCompare = array[j];\n      if (value == valueToCompare) {\n        minimumSecondIndex = min(minimumSecondIndex, j);\n      }\n    }\n  }\n  if (minimumSecondIndex == array.size()) {\n    return -1;\n  }\n\n  return array[minimumSecondIndex];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input array\nint firstDuplicateValue(vector<int> array) {\n  unordered_map<int, bool> seen;\n  for (int value : array) {\n    if (seen.find(value) != seen.end()) {\n      return value;\n    }\n    seen[value] = true;\n  }\n  return -1;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the input array\nint firstDuplicateValue(vector<int> array) {\n  for (int value : array) {\n    int absValue = abs(value);\n    if (array[absValue - 1] < 0) {\n      return absValue;\n    }\n    array[absValue - 1] *= -1;\n  }\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {2, 1, 5, 2, 3, 3, 4};\n      int expected = 2;\n      int actual = firstDuplicateValue(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {2, 1, 5, 2, 3, 3, 4};\n      int expected = 2;\n      int actual = firstDuplicateValue(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public int FirstDuplicateValue(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n^2) time | O(1) space - where n is the length of the input array\n  public int FirstDuplicateValue(int[] array) {\n    int minimumSecondIndex = array.Length;\n    for (int i = 0; i < array.Length; i++) {\n      int value = array[i];\n      for (int j = i + 1; j < array.Length; j++) {\n        int valueToCompare = array[j];\n        if (value == valueToCompare) {\n          minimumSecondIndex = Math.Min(minimumSecondIndex, j);\n        }\n      }\n    }\n\n    if (minimumSecondIndex == array.Length) {\n      return -1;\n    }\n\n    return array[minimumSecondIndex];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int FirstDuplicateValue(int[] array) {\n    HashSet<int> seen = new HashSet<int>();\n    foreach (var value in array) {\n      if (seen.Contains(value)) return value;\n      seen.Add(value);\n    }\n    return -1;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public int FirstDuplicateValue(int[] array) {\n    foreach (var value in array) {\n      int absValue = Math.Abs(value);\n      if (array[absValue - 1] < 0) return absValue;\n      array[absValue - 1] *= -1;\n    }\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 2, 1, 5, 2, 3, 3, 4 };\n    var expected = 2;\n    var actual = new Program().FirstDuplicateValue(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 2, 1, 5, 2, 3, 3, 4 };\n    var expected = 2;\n    var actual = new Program().FirstDuplicateValue(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc FirstDuplicateValue(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(1) space - where n is the length of the input array\nfunc FirstDuplicateValue(array []int) int {\n\tminimumSecondIndex := len(array)\n\tfor i := 0; i < len(array); i++ {\n\t\tvalue := array[i]\n\t\tfor j := i + 1; j < len(array); j++ {\n\t\t\tvalueToCompare := array[j]\n\t\t\tif value == valueToCompare {\n\t\t\t\tminimumSecondIndex = min(minimumSecondIndex, j)\n\t\t\t}\n\t\t}\n\t}\n\tif minimumSecondIndex == len(array) {\n\t\treturn -1\n\t}\n\n\treturn array[minimumSecondIndex]\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunc FirstDuplicateValue(array []int) int {\n\tseen := map[int]bool{}\n\tfor _, value := range array {\n\t\tif seen[value] {\n\t\t\treturn value\n\t\t}\n\t\tseen[value] = true\n\t}\n\treturn -1\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunc FirstDuplicateValue(array []int) int {\n\tfor _, value := range array {\n\t\tabsValue := abs(value)\n\t\tif array[absValue-1] < 0 {\n\t\t\treturn absValue\n\t\t}\n\t\tarray[absValue-1] *= -1\n\t}\n\treturn -1\n}\n\nfunc abs(a int) int {\n\tif a < 0 {\n\t\treturn -a\n\t}\n\treturn a\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 1, 5, 2, 3, 3, 4}\n\texpected := 2\n\tactual := FirstDuplicateValue(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 1, 5, 2, 3, 3, 4}\n\texpected := 2\n\tactual := FirstDuplicateValue(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int firstDuplicateValue(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(1) space - where n is the length of the input array\n  public int firstDuplicateValue(int[] array) {\n    int minimumSecondIndex = array.length;\n    for (int i = 0; i < array.length; i++) {\n      int value = array[i];\n      for (int j = i + 1; j < array.length; j++) {\n        int valueToCompare = array[j];\n        if (value == valueToCompare) {\n          minimumSecondIndex = Math.min(minimumSecondIndex, j);\n        }\n      }\n    }\n\n    if (minimumSecondIndex == array.length) {\n      return -1;\n    }\n\n    return array[minimumSecondIndex];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int firstDuplicateValue(int[] array) {\n    HashSet<Integer> seen = new HashSet<Integer>();\n    for (int value : array) {\n      if (seen.contains(value)) return value;\n      seen.add(value);\n    }\n    return -1;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public int firstDuplicateValue(int[] array) {\n    for (int value : array) {\n      int absValue = Math.abs(value);\n      if (array[absValue - 1] < 0) return absValue;\n      array[absValue - 1] *= -1;\n    }\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {2, 1, 5, 2, 3, 3, 4};\n    var expected = 2;\n    var actual = new Program().firstDuplicateValue(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {2, 1, 5, 2, 3, 3, 4};\n    var expected = 2;\n    var actual = new Program().firstDuplicateValue(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function firstDuplicateValue(array) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.firstDuplicateValue = firstDuplicateValue;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space - where n is the length of the input array\nfunction firstDuplicateValue(array) {\n  let minimumSecondIndex = array.length;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    for (let j = i + 1; j < array.length; j++) {\n      const valueToCompare = array[j];\n      if (value === valueToCompare) {\n        minimumSecondIndex = Math.min(minimumSecondIndex, j);\n      }\n    }\n  }\n\n  if (minimumSecondIndex === array.length) return -1;\n\n  return array[minimumSecondIndex];\n}\n\n// Do not edit the line below.\nexports.firstDuplicateValue = firstDuplicateValue;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction firstDuplicateValue(array) {\n  const seen = new Set();\n  for (const value of array) {\n    if (seen.has(value)) return value;\n    seen.add(value);\n  }\n  return -1;\n}\n\n// Do not edit the line below.\nexports.firstDuplicateValue = firstDuplicateValue;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction firstDuplicateValue(array) {\n  for (const value of array) {\n    const absValue = Math.abs(value);\n    if (array[absValue - 1] < 0) return absValue;\n    array[absValue - 1] *= -1;\n  }\n  return -1;\n}\n\n// Do not edit the line below.\nexports.firstDuplicateValue = firstDuplicateValue;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [2, 1, 5, 2, 3, 3, 4];\n  const expected = 2;\n  const actual = program.firstDuplicateValue(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [2, 1, 5, 2, 3, 3, 4];\n  const expected = 2;\n  const actual = program.firstDuplicateValue(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun firstDuplicateValue(array: MutableList<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\n// O(n^2) time | O(1) space - where n is the length of the input array\nfun firstDuplicateValue(array: MutableList<Int>): Int {\n    var minimumSecondIndex = array.size\n    for (i in 0 until array.size) {\n        val value = array[i]\n        for (j in i + 1 until array.size) {\n            val valueToCompare = array[j]\n            if (value == valueToCompare) {\n                minimumSecondIndex = min(minimumSecondIndex, j)\n            }\n        }\n    }\n\n    if (minimumSecondIndex == array.size) return -1\n\n    return array[minimumSecondIndex]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the input array\nfun firstDuplicateValue(array: MutableList<Int>): Int {\n    val seen = mutableSetOf<Int>()\n    for (value in array) {\n        if (value in seen) return value\n        seen.add(value)\n    }\n    return -1\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\n\n// O(n) time | O(1) space - where n is the length of the input array\nfun firstDuplicateValue(array: MutableList<Int>): Int {\n    for (value in array) {\n        val absValue = abs(value)\n        if (array[absValue - 1] < 0) return absValue\n        array[absValue - 1] *= -1\n    }\n    return -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.firstDuplicateValue\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(2, 1, 5, 2, 3, 3, 4)\n        val expected = 2\n        val output = firstDuplicateValue(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.firstDuplicateValue\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(2, 1, 5, 2, 3, 3, 4)\n        val expected = 2\n        val output = firstDuplicateValue(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def firstDuplicateValue(array):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(1) space - where n is the length of the input array\ndef firstDuplicateValue(array):\n    minimumSecondIndex = len(array)\n    for i in range(len(array)):\n        value = array[i]\n        for j in range(i + 1, len(array)):\n            valueToCompare = array[j]\n            if value == valueToCompare:\n                minimumSecondIndex = min(minimumSecondIndex, j)\n\n    if minimumSecondIndex == len(array):\n        return -1\n\n    return array[minimumSecondIndex]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef firstDuplicateValue(array):\n    seen = set()\n    for value in array:\n        if value in seen:\n            return value\n        seen.add(value)\n    return -1\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef firstDuplicateValue(array):\n    for value in array:\n        absValue = abs(value)\n        if array[absValue - 1] < 0:\n            return absValue\n        array[absValue - 1] *= -1\n    return -1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 1, 5, 2, 3, 3, 4]\n        expected = 2\n        actual = program.firstDuplicateValue(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 1, 5, 2, 3, 3, 4]\n        expected = 2\n        actual = program.firstDuplicateValue(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def firstDuplicateValue(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def firstDuplicateValue(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def firstDuplicateValue(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def firstDuplicateValue(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.firstDuplicateValue\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.firstDuplicateValue\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func firstDuplicateValue(_ array: inout [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space - where n is the length of the input array\n  func firstDuplicateValue(_ array: inout [Int]) -> Int {\n    var minimumSecondIndex = array.count\n    for i in 0 ..< array.count {\n      let value = array[i]\n      for j in i + 1 ..< array.count {\n        let valueToCompare = array[j]\n        if value == valueToCompare {\n          minimumSecondIndex = min(minimumSecondIndex, j)\n        }\n      }\n    }\n    if minimumSecondIndex == array.count {\n      return -1\n    }\n    return array[minimumSecondIndex]\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  func firstDuplicateValue(_ array: inout [Int]) -> Int {\n    var seen = Set<Int>()\n    for value in array {\n      if seen.contains(value) {\n        return value\n      }\n      seen.insert(value)\n    }\n    return -1\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  func firstDuplicateValue(_ array: inout [Int]) -> Int {\n    for value in array {\n      let absValue = abs(value)\n      if array[absValue - 1] < 0 {\n        return absValue\n      }\n      array[absValue - 1] = -array[absValue - 1]\n    }\n    return -1\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [2, 1, 5, 2, 3, 3, 4]\n      var expected = 2\n      var actual = Program().firstDuplicateValue(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [2, 1, 5, 2, 3, 3, 4]\n      var expected = 2\n      var actual = Program().firstDuplicateValue(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function firstDuplicateValue(array: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space - where n is the length of the input array\nexport function firstDuplicateValue(array: number[]) {\n  let minimumSecondIndex = array.length;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    for (let j = i + 1; j < array.length; j++) {\n      const valueToCompare = array[j];\n      if (value === valueToCompare) {\n        minimumSecondIndex = Math.min(minimumSecondIndex, j);\n      }\n    }\n  }\n\n  if (minimumSecondIndex === array.length) return -1;\n\n  return array[minimumSecondIndex];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function firstDuplicateValue(array: number[]) {\n  const seen = new Set();\n  for (const value of array) {\n    if (seen.has(value)) return value;\n    seen.add(value);\n  }\n  return -1;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function firstDuplicateValue(array: number[]) {\n  for (const value of array) {\n    const absValue = Math.abs(value);\n    if (array[absValue - 1] < 0) return absValue;\n    array[absValue - 1] *= -1;\n  }\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [2, 1, 5, 2, 3, 3, 4];\n  const expected = 2;\n  const actual = program.firstDuplicateValue(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [2, 1, 5, 2, 3, 3, 4];\n  const expected = 2;\n  const actual = program.firstDuplicateValue(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        2,
        1,
        5,
        2,
        3,
        3,
        4
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        2,
        1,
        5,
        2,
        3,
        3,
        4
      ]
    },
    {
      "array": [
        2,
        1,
        5,
        3,
        3,
        2,
        4
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        3,
        2,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        3,
        1,
        1,
        4,
        4
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        10
      ]
    },
    {
      "array": [
        2,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        7,
        6,
        5,
        3,
        6,
        4,
        3,
        5,
        2
      ]
    },
    {
      "array": [
        9,
        13,
        6,
        2,
        3,
        5,
        5,
        5,
        3,
        2,
        2,
        2,
        2,
        4,
        3
      ]
    },
    {
      "array": [
        23,
        21,
        22,
        5,
        3,
        13,
        11,
        16,
        5,
        11,
        9,
        14,
        23,
        3,
        2,
        2,
        5,
        11,
        6,
        11,
        23,
        8,
        1
      ]
    },
    {
      "array": [
        8,
        20,
        4,
        12,
        14,
        9,
        19,
        17,
        14,
        20,
        22,
        9,
        6,
        15,
        1,
        15,
        10,
        9,
        17,
        7,
        22,
        17
      ]
    },
    {
      "array": [
        3,
        3,
        2
      ]
    },
    {
      "array": [
        6,
        6,
        5,
        1,
        3,
        7,
        7,
        8
      ]
    },
    {
      "array": [
        23,
        25,
        9,
        26,
        2,
        19,
        24,
        18,
        25,
        17,
        13,
        3,
        14,
        17,
        9,
        20,
        26,
        15,
        21,
        2,
        6,
        11,
        2,
        12,
        23,
        5,
        4,
        20
      ]
    },
    {
      "array": [
        12,
        22,
        6,
        18,
        5,
        17,
        18,
        22,
        22,
        4,
        6,
        14,
        12,
        8,
        5,
        6,
        10,
        7,
        13,
        22,
        17,
        18
      ]
    },
    {
      "array": [
        16,
        6,
        6,
        18,
        6,
        13,
        28,
        9,
        3,
        26,
        10,
        2,
        23,
        5,
        20,
        21,
        11,
        20,
        6,
        11,
        26,
        20,
        26,
        25,
        13,
        3,
        12,
        4
      ]
    },
    {
      "array": [
        15,
        2,
        6,
        3,
        3,
        22,
        14,
        16,
        6,
        21,
        4,
        16,
        2,
        17,
        9,
        13,
        1,
        3,
        5,
        6,
        1,
        2,
        23,
        16,
        16
      ]
    },
    {
      "array": [
        4,
        7,
        9,
        7,
        1,
        3,
        2,
        3,
        1,
        12,
        12,
        5
      ]
    },
    {
      "array": [
        9,
        21,
        9,
        22,
        3,
        23,
        4,
        26,
        7,
        11,
        25,
        25,
        19,
        13,
        23,
        28,
        5,
        23,
        19,
        13,
        10,
        26,
        28,
        9,
        28,
        16,
        7,
        13,
        22
      ]
    },
    {
      "array": [
        29,
        3,
        23,
        16,
        1,
        22,
        21,
        14,
        15,
        21,
        12,
        27,
        9,
        12,
        11,
        3,
        22,
        5,
        21,
        24,
        14,
        26,
        11,
        5,
        21,
        25,
        15,
        19,
        13,
        4
      ]
    },
    {
      "array": [
        13,
        2,
        8,
        8,
        10,
        11,
        13,
        11,
        9,
        13,
        4,
        5,
        7
      ]
    },
    {
      "array": [
        4,
        7,
        7,
        14,
        14,
        10,
        15,
        14,
        14,
        16,
        14,
        11,
        5,
        12,
        17,
        7,
        1,
        6,
        13
      ]
    },
    {
      "array": [
        2,
        5,
        1,
        4,
        1
      ]
    },
    {
      "array": [
        11,
        10,
        5,
        3,
        1,
        7,
        10,
        6,
        10,
        11,
        7
      ]
    },
    {
      "array": [
        2,
        13,
        3,
        9,
        1,
        9,
        1,
        11,
        11,
        5,
        3,
        1,
        9,
        12
      ]
    },
    {
      "array": [
        3,
        3,
        1,
        1
      ]
    },
    {
      "array": [
        26,
        18,
        21,
        26,
        26,
        16,
        16,
        3,
        19,
        9,
        10,
        24,
        21,
        9,
        8,
        11,
        17,
        21,
        18,
        22,
        17,
        27,
        6,
        7,
        6,
        10,
        4
      ]
    },
    {
      "array": [
        27,
        16,
        15,
        21,
        10,
        21,
        3,
        21,
        5,
        12,
        27,
        24,
        20,
        26,
        5,
        13,
        26,
        22,
        26,
        8,
        23,
        10,
        14,
        17,
        7,
        5,
        3
      ]
    },
    {
      "array": [
        11,
        6,
        1,
        1,
        4,
        19,
        10,
        12,
        19,
        8,
        12,
        15,
        26,
        9,
        6,
        20,
        17,
        12,
        26,
        15,
        25,
        18,
        26,
        5,
        3,
        5,
        16,
        5
      ]
    },
    {
      "array": [
        16,
        22,
        20,
        22,
        26,
        19,
        8,
        17,
        18,
        24,
        17,
        19,
        19,
        11,
        18,
        13,
        10,
        20,
        6,
        23,
        20,
        19,
        21,
        6,
        17,
        7
      ]
    },
    {
      "array": [
        11,
        13,
        6,
        12,
        4,
        15,
        4,
        9,
        3,
        10,
        5,
        8,
        15,
        5,
        8
      ]
    },
    {
      "array": [
        7,
        9,
        5,
        6,
        4,
        11,
        2,
        8,
        2,
        5,
        1
      ]
    },
    {
      "array": [
        8,
        1,
        5,
        2,
        9,
        12,
        9,
        6,
        9,
        9,
        5,
        13,
        5,
        9
      ]
    },
    {
      "array": [
        11,
        5,
        2,
        7,
        11,
        11,
        3,
        11,
        4,
        2,
        9
      ]
    },
    {
      "array": [
        2,
        22,
        3,
        20,
        18,
        8,
        29,
        25,
        7,
        12,
        12,
        17,
        1,
        28,
        3,
        6,
        11,
        2,
        28,
        16,
        23,
        27,
        8,
        28,
        4,
        29,
        24,
        12,
        29
      ]
    },
    {
      "array": [
        5,
        1,
        3,
        5,
        1
      ]
    },
    {
      "array": [
        20,
        12,
        3,
        18,
        9,
        16,
        4,
        18,
        6,
        19,
        14,
        23,
        10,
        13,
        6,
        1,
        22,
        11,
        11,
        16,
        13,
        15,
        17,
        19,
        14,
        12,
        20
      ]
    },
    {
      "array": [
        23,
        15,
        11,
        5,
        13,
        11,
        9,
        9,
        13,
        8,
        22,
        12,
        2,
        24,
        6,
        2,
        15,
        24,
        12,
        9,
        13,
        13,
        22,
        18
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        1,
        4
      ]
    },
    {
      "array": [
        7,
        14,
        4,
        6,
        17,
        17,
        3,
        14,
        1,
        16,
        18,
        4,
        12,
        13,
        8,
        19,
        1,
        2,
        4,
        14
      ]
    },
    {
      "array": [
        5,
        6,
        6,
        4,
        3,
        5
      ]
    },
    {
      "array": [
        3,
        2,
        3,
        1
      ]
    },
    {
      "array": [
        9,
        12,
        14,
        6,
        14,
        2,
        4,
        9,
        13,
        2,
        10,
        5,
        7,
        1
      ]
    },
    {
      "array": [
        9,
        2,
        11,
        5,
        6,
        8,
        10,
        15,
        5,
        7,
        11,
        6,
        19,
        19,
        14,
        15,
        3,
        9,
        16
      ]
    },
    {
      "array": [
        2,
        6,
        1,
        7,
        1,
        6,
        6
      ]
    },
    {
      "array": [
        6,
        3,
        1,
        8,
        2,
        2,
        1,
        7,
        10,
        8,
        6,
        4
      ]
    },
    {
      "array": [
        21,
        17,
        1,
        8,
        22,
        8,
        22,
        8,
        23,
        3,
        21,
        5,
        18,
        2,
        8,
        21,
        21,
        22,
        10,
        24,
        13,
        4,
        20,
        24
      ]
    },
    {
      "array": [
        16,
        9,
        13,
        10,
        18,
        17,
        11,
        5,
        11,
        4,
        2,
        16,
        15,
        6,
        3,
        7,
        15,
        10,
        1
      ]
    },
    {
      "array": [
        5,
        5,
        5,
        4,
        6,
        6,
        2
      ]
    },
    {
      "array": [
        5,
        3,
        8,
        2,
        9,
        6,
        8,
        1,
        6
      ]
    },
    {
      "array": [
        5,
        5,
        1,
        5,
        3,
        7,
        4,
        4
      ]
    },
    {
      "array": [
        19,
        4,
        1,
        6,
        2,
        5,
        20,
        13,
        8,
        6,
        11,
        12,
        12,
        12,
        11,
        18,
        7,
        13,
        6,
        10
      ]
    },
    {
      "array": [
        3,
        11,
        11,
        10,
        11,
        8,
        8,
        11,
        10,
        11,
        10,
        8,
        10
      ]
    },
    {
      "array": [
        15,
        3,
        15,
        6,
        13,
        3,
        12,
        10,
        17,
        8,
        13,
        1,
        12,
        9,
        14,
        7,
        16
      ]
    },
    {
      "array": [
        2,
        2,
        2
      ]
    },
    {
      "array": [
        11,
        6,
        8,
        8,
        8,
        9,
        10,
        6,
        4,
        1,
        10,
        1,
        6
      ]
    },
    {
      "array": [
        2,
        3,
        16,
        9,
        11,
        14,
        13,
        1,
        10,
        12,
        5,
        17,
        4,
        16,
        10,
        5,
        4
      ]
    },
    {
      "array": [
        13,
        4,
        10,
        10,
        8,
        13,
        13,
        7,
        11,
        6,
        3,
        2,
        11
      ]
    },
    {
      "array": [
        6,
        15,
        7,
        10,
        9,
        14,
        10,
        1,
        10,
        1,
        2,
        11,
        1,
        6,
        8
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        2,
        1,
        5,
        2,
        3,
        3,
        4
      ]
    },
    {
      "array": [
        2,
        1,
        5,
        3,
        3,
        2,
        4
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        3,
        2,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        3,
        1,
        1,
        4,
        4
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        10
      ]
    },
    {
      "array": [
        2,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        7,
        6,
        5,
        3,
        6,
        4,
        3,
        5,
        2
      ]
    },
    {
      "array": [
        9,
        13,
        6,
        2,
        3,
        5,
        5,
        5,
        3,
        2,
        2,
        2,
        2,
        4,
        3
      ]
    },
    {
      "array": [
        23,
        21,
        22,
        5,
        3,
        13,
        11,
        16,
        5,
        11,
        9,
        14,
        23,
        3,
        2,
        2,
        5,
        11,
        6,
        11,
        23,
        8,
        1
      ]
    },
    {
      "array": [
        8,
        20,
        4,
        12,
        14,
        9,
        19,
        17,
        14,
        20,
        22,
        9,
        6,
        15,
        1,
        15,
        10,
        9,
        17,
        7,
        22,
        17
      ]
    },
    {
      "array": [
        3,
        3,
        2
      ]
    },
    {
      "array": [
        6,
        6,
        5,
        1,
        3,
        7,
        7,
        8
      ]
    },
    {
      "array": [
        23,
        25,
        9,
        26,
        2,
        19,
        24,
        18,
        25,
        17,
        13,
        3,
        14,
        17,
        9,
        20,
        26,
        15,
        21,
        2,
        6,
        11,
        2,
        12,
        23,
        5,
        4,
        20
      ]
    },
    {
      "array": [
        12,
        22,
        6,
        18,
        5,
        17,
        18,
        22,
        22,
        4,
        6,
        14,
        12,
        8,
        5,
        6,
        10,
        7,
        13,
        22,
        17,
        18
      ]
    },
    {
      "array": [
        16,
        6,
        6,
        18,
        6,
        13,
        28,
        9,
        3,
        26,
        10,
        2,
        23,
        5,
        20,
        21,
        11,
        20,
        6,
        11,
        26,
        20,
        26,
        25,
        13,
        3,
        12,
        4
      ]
    },
    {
      "array": [
        15,
        2,
        6,
        3,
        3,
        22,
        14,
        16,
        6,
        21,
        4,
        16,
        2,
        17,
        9,
        13,
        1,
        3,
        5,
        6,
        1,
        2,
        23,
        16,
        16
      ]
    },
    {
      "array": [
        4,
        7,
        9,
        7,
        1,
        3,
        2,
        3,
        1,
        12,
        12,
        5
      ]
    },
    {
      "array": [
        9,
        21,
        9,
        22,
        3,
        23,
        4,
        26,
        7,
        11,
        25,
        25,
        19,
        13,
        23,
        28,
        5,
        23,
        19,
        13,
        10,
        26,
        28,
        9,
        28,
        16,
        7,
        13,
        22
      ]
    },
    {
      "array": [
        29,
        3,
        23,
        16,
        1,
        22,
        21,
        14,
        15,
        21,
        12,
        27,
        9,
        12,
        11,
        3,
        22,
        5,
        21,
        24,
        14,
        26,
        11,
        5,
        21,
        25,
        15,
        19,
        13,
        4
      ]
    },
    {
      "array": [
        13,
        2,
        8,
        8,
        10,
        11,
        13,
        11,
        9,
        13,
        4,
        5,
        7
      ]
    },
    {
      "array": [
        4,
        7,
        7,
        14,
        14,
        10,
        15,
        14,
        14,
        16,
        14,
        11,
        5,
        12,
        17,
        7,
        1,
        6,
        13
      ]
    },
    {
      "array": [
        2,
        5,
        1,
        4,
        1
      ]
    },
    {
      "array": [
        11,
        10,
        5,
        3,
        1,
        7,
        10,
        6,
        10,
        11,
        7
      ]
    },
    {
      "array": [
        2,
        13,
        3,
        9,
        1,
        9,
        1,
        11,
        11,
        5,
        3,
        1,
        9,
        12
      ]
    },
    {
      "array": [
        3,
        3,
        1,
        1
      ]
    },
    {
      "array": [
        26,
        18,
        21,
        26,
        26,
        16,
        16,
        3,
        19,
        9,
        10,
        24,
        21,
        9,
        8,
        11,
        17,
        21,
        18,
        22,
        17,
        27,
        6,
        7,
        6,
        10,
        4
      ]
    },
    {
      "array": [
        27,
        16,
        15,
        21,
        10,
        21,
        3,
        21,
        5,
        12,
        27,
        24,
        20,
        26,
        5,
        13,
        26,
        22,
        26,
        8,
        23,
        10,
        14,
        17,
        7,
        5,
        3
      ]
    },
    {
      "array": [
        11,
        6,
        1,
        1,
        4,
        19,
        10,
        12,
        19,
        8,
        12,
        15,
        26,
        9,
        6,
        20,
        17,
        12,
        26,
        15,
        25,
        18,
        26,
        5,
        3,
        5,
        16,
        5
      ]
    },
    {
      "array": [
        16,
        22,
        20,
        22,
        26,
        19,
        8,
        17,
        18,
        24,
        17,
        19,
        19,
        11,
        18,
        13,
        10,
        20,
        6,
        23,
        20,
        19,
        21,
        6,
        17,
        7
      ]
    },
    {
      "array": [
        11,
        13,
        6,
        12,
        4,
        15,
        4,
        9,
        3,
        10,
        5,
        8,
        15,
        5,
        8
      ]
    },
    {
      "array": [
        7,
        9,
        5,
        6,
        4,
        11,
        2,
        8,
        2,
        5,
        1
      ]
    },
    {
      "array": [
        8,
        1,
        5,
        2,
        9,
        12,
        9,
        6,
        9,
        9,
        5,
        13,
        5,
        9
      ]
    },
    {
      "array": [
        11,
        5,
        2,
        7,
        11,
        11,
        3,
        11,
        4,
        2,
        9
      ]
    },
    {
      "array": [
        2,
        22,
        3,
        20,
        18,
        8,
        29,
        25,
        7,
        12,
        12,
        17,
        1,
        28,
        3,
        6,
        11,
        2,
        28,
        16,
        23,
        27,
        8,
        28,
        4,
        29,
        24,
        12,
        29
      ]
    },
    {
      "array": [
        5,
        1,
        3,
        5,
        1
      ]
    },
    {
      "array": [
        20,
        12,
        3,
        18,
        9,
        16,
        4,
        18,
        6,
        19,
        14,
        23,
        10,
        13,
        6,
        1,
        22,
        11,
        11,
        16,
        13,
        15,
        17,
        19,
        14,
        12,
        20
      ]
    },
    {
      "array": [
        23,
        15,
        11,
        5,
        13,
        11,
        9,
        9,
        13,
        8,
        22,
        12,
        2,
        24,
        6,
        2,
        15,
        24,
        12,
        9,
        13,
        13,
        22,
        18
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        1,
        4
      ]
    },
    {
      "array": [
        7,
        14,
        4,
        6,
        17,
        17,
        3,
        14,
        1,
        16,
        18,
        4,
        12,
        13,
        8,
        19,
        1,
        2,
        4,
        14
      ]
    },
    {
      "array": [
        5,
        6,
        6,
        4,
        3,
        5
      ]
    },
    {
      "array": [
        3,
        2,
        3,
        1
      ]
    },
    {
      "array": [
        9,
        12,
        14,
        6,
        14,
        2,
        4,
        9,
        13,
        2,
        10,
        5,
        7,
        1
      ]
    },
    {
      "array": [
        9,
        2,
        11,
        5,
        6,
        8,
        10,
        15,
        5,
        7,
        11,
        6,
        19,
        19,
        14,
        15,
        3,
        9,
        16
      ]
    },
    {
      "array": [
        2,
        6,
        1,
        7,
        1,
        6,
        6
      ]
    },
    {
      "array": [
        6,
        3,
        1,
        8,
        2,
        2,
        1,
        7,
        10,
        8,
        6,
        4
      ]
    },
    {
      "array": [
        21,
        17,
        1,
        8,
        22,
        8,
        22,
        8,
        23,
        3,
        21,
        5,
        18,
        2,
        8,
        21,
        21,
        22,
        10,
        24,
        13,
        4,
        20,
        24
      ]
    },
    {
      "array": [
        16,
        9,
        13,
        10,
        18,
        17,
        11,
        5,
        11,
        4,
        2,
        16,
        15,
        6,
        3,
        7,
        15,
        10,
        1
      ]
    },
    {
      "array": [
        5,
        5,
        5,
        4,
        6,
        6,
        2
      ]
    },
    {
      "array": [
        5,
        3,
        8,
        2,
        9,
        6,
        8,
        1,
        6
      ]
    },
    {
      "array": [
        5,
        5,
        1,
        5,
        3,
        7,
        4,
        4
      ]
    },
    {
      "array": [
        19,
        4,
        1,
        6,
        2,
        5,
        20,
        13,
        8,
        6,
        11,
        12,
        12,
        12,
        11,
        18,
        7,
        13,
        6,
        10
      ]
    },
    {
      "array": [
        3,
        11,
        11,
        10,
        11,
        8,
        8,
        11,
        10,
        11,
        10,
        8,
        10
      ]
    },
    {
      "array": [
        15,
        3,
        15,
        6,
        13,
        3,
        12,
        10,
        17,
        8,
        13,
        1,
        12,
        9,
        14,
        7,
        16
      ]
    },
    {
      "array": [
        2,
        2,
        2
      ]
    },
    {
      "array": [
        11,
        6,
        8,
        8,
        8,
        9,
        10,
        6,
        4,
        1,
        10,
        1,
        6
      ]
    },
    {
      "array": [
        2,
        3,
        16,
        9,
        11,
        14,
        13,
        1,
        10,
        12,
        5,
        17,
        4,
        16,
        10,
        5,
        4
      ]
    },
    {
      "array": [
        13,
        4,
        10,
        10,
        8,
        13,
        13,
        7,
        11,
        6,
        3,
        2,
        11
      ]
    },
    {
      "array": [
        6,
        15,
        7,
        10,
        9,
        14,
        10,
        1,
        10,
        1,
        2,
        11,
        1,
        6,
        8
      ]
    }
  ],
  "changelog": []
}