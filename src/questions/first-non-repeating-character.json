{
  "uid": "first-non-repeating-character",
  "testStrategy": "JSON",
  "name": "First Non-Repeating Character",
  "version": 0,
  "releaseDate": "2021-04-01T00:00:00Z",
  "category": "Strings",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 45133,
    "failureCount": 10299
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "557290920",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 879
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a string of lowercase English-alphabet letters\n  and returns the index of the string's first non-repeating character.\n</p>\n<p>\n  The first non-repeating character is the first character in a string that\n  occurs only once.\n</p>\n<p>\n  If the input string doesn't have any non-repeating characters, your function\n  should return <span>-1</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"abcdcaf\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n1 <span class=\"CodeEditor-promptComment\">// The first non-repeating character is \"b\" and is found at index 1.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  How can you determine if a character only appears once in the entire input\n  string? What would be the brute-force approach to solve this problem?\n</p>\n",
    "\n<p>\n  One way to solve this problem is with nested traversals of the string: you\n  start by traversing the string, and for each character that you traverse, you\n  traverse through the entire string again to see if the character appears\n  anywhere else. The first index at which you find a character that doesn't\n  appear anywhere else in the string is the index that you return. This approach\n  works, but it's not optimal. Are there any data structures that you can use to\n  improve the time complexity of this approach?\n</p>\n",
    "\n<p>\n  Hash tables are very commonly used to keep track of frequencies. Build a hash\n  table, where every key is a character in the string and every value is the\n  corresponding character's frequency in the input string. You can traverse the\n  entire string once to fill the hash table, and then with a second traversal\n  through the string (not a nested traversal), you can use the hash table's\n  constant-time lookups to find the first character with a frequency of\n  <span>1</span>.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input string\nThe constant space is because the input string only has lowercase\nEnglish-alphabet letters; thus, our hash table will never have more\nthan 26 character frequencies.",
  "notes": "<div class=\"html\">\n<p class=\"CodeEditor-notesQuestion\">\n  In the optimal solution, we store the input string's character frequencies in\n  a hash table. Why is this solution's space complexity O(1) as opposed to O(n)?\n</p>\n<p>\n  The problem's prompt specifies that the input string only contains lowercase\n  English-alphabet letters. Since there are only 26 lowercase English-alphabet\n  letters, our hash table will never store more than 26 character frequencies;\n  thus, the optimal solution's space complexity is O(1). If the input string\n  could contain <b><i>any</i></b> character, then the space complexity would be\n  O(n).\n</p>\n<p>\n  This type of detail should always be confirmed with your interviewer in a real\n  coding interview.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint firstNonRepeatingCharacter(string string) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n^2) time | O(1) space - where n is the length of the input string\nint firstNonRepeatingCharacter(string string) {\n  for (int idx = 0; idx < string.size(); idx++) {\n    int foundDuplicate = false;\n    for (int idx2 = 0; idx2 < string.size(); idx2++) {\n      if (string[idx] == string[idx2] && idx != idx2) foundDuplicate = true;\n    }\n\n    if (!foundDuplicate) return idx;\n  }\n\n  return -1;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the input string\n// The constant space is because the input string only has lowercase\n// English-alphabet letters; thus, our hash table will never have more\n// than 26 character frequencies.\nint firstNonRepeatingCharacter(string string) {\n  unordered_map<char, int> characterFrequencies;\n\n  for (auto character : string) {\n    if (characterFrequencies.find(character) == characterFrequencies.end())\n      characterFrequencies[character] = 0;\n    characterFrequencies[character]++;\n  }\n\n  for (int idx = 0; idx < string.size(); idx++) {\n    char character = string[idx];\n    if (characterFrequencies[character] == 1) return idx;\n  }\n\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = \"abcdcaf\";\n      auto expected = 1;\n      auto actual = firstNonRepeatingCharacter(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = \"abcdcaf\";\n      auto expected = 1;\n      auto actual = firstNonRepeatingCharacter(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int FirstNonRepeatingCharacter(string str) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n^2) time | O(1) space - where n is the length of the input string\n  public int FirstNonRepeatingCharacter(string str) {\n    for (int idx = 0; idx < str.Length; idx++) {\n      bool foundDuplicate = false;\n      for (int idx2 = 0; idx2 < str.Length; idx2++) {\n        if (str[idx] == str[idx2] && idx != idx2) {\n          foundDuplicate = true;\n        }\n      }\n\n      if (!foundDuplicate) return idx;\n    }\n\n    return -1;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the input string\n  // The constant space is because the input string only has lowercase\n  // English-alphabet letters; thus, our hash table will never have more\n  // than 26 character frequencies.\n  public int FirstNonRepeatingCharacter(string str) {\n    Dictionary<char, int> characterFrequencies = new Dictionary<char, int>();\n\n    for (int idx = 0; idx < str.Length; idx++) {\n      char character = str[idx];\n      characterFrequencies[character] =\n        characterFrequencies.GetValueOrDefault(character, 0) + 1;\n    }\n\n    for (int idx = 0; idx < str.Length; idx++) {\n      char character = str[idx];\n      if (characterFrequencies[character] == 1) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"abcdcaf\";\n    int expected = 1;\n    var actual = new Program().FirstNonRepeatingCharacter(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"abcdcaf\";\n    int expected = 1;\n    var actual = new Program().FirstNonRepeatingCharacter(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc FirstNonRepeatingCharacter(str string) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(1) space - where n is the length of the input string\nfunc FirstNonRepeatingCharacter(str string) int {\n\tfor idx := range str {\n\t\tvar foundDuplicate = false\n\t\tfor idx2 := range str {\n\t\t\tif str[idx] == str[idx2] && idx != idx2 {\n\t\t\t\tfoundDuplicate = true\n\t\t\t}\n\t\t}\n\n\t\tif !foundDuplicate {\n\t\t\treturn idx\n\t\t}\n\t}\n\n\treturn -1\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the input string\n// The constant space is because the input string only has lowercase\n// English-alphabet letters; thus, our hash table will never have more\n// than 26 character frequencies.\nfunc FirstNonRepeatingCharacter(str string) int {\n\tcharacterFrequencies := map[rune]int{}\n\n\tfor _, char := range str {\n\t\tcharacterFrequencies[char] += 1\n\t}\n\n\tfor idx, char := range str {\n\t\tif characterFrequencies[char] == 1 {\n\t\t\treturn idx\n\t\t}\n\t}\n\n\treturn -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"abcdcaf\"\n\texpected := 1\n\tactual := FirstNonRepeatingCharacter(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"abcdcaf\"\n\texpected := 1\n\tactual := FirstNonRepeatingCharacter(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int firstNonRepeatingCharacter(String string) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(1) space - where n is the length of the input string\n  public int firstNonRepeatingCharacter(String string) {\n    for (int idx = 0; idx < string.length(); idx++) {\n      boolean foundDuplicate = false;\n      for (int idx2 = 0; idx2 < string.length(); idx2++) {\n        if (string.charAt(idx) == string.charAt(idx2) && idx != idx2) {\n          foundDuplicate = true;\n        }\n      }\n\n      if (!foundDuplicate) return idx;\n    }\n\n    return -1;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input string\n  // The constant space is because the input string only has lowercase\n  // English-alphabet letters; thus, our hash table will never have more\n  // than 26 character frequencies.\n  public int firstNonRepeatingCharacter(String string) {\n    HashMap<Character, Integer> characterFrequencies =\n      new HashMap<Character, Integer>();\n\n    for (int idx = 0; idx < string.length(); idx++) {\n      char character = string.charAt(idx);\n      characterFrequencies.put(\n        character, characterFrequencies.getOrDefault(character, 0) + 1\n      );\n    }\n\n    for (int idx = 0; idx < string.length(); idx++) {\n      char character = string.charAt(idx);\n      if (characterFrequencies.get(character) == 1) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"abcdcaf\";\n    int expected = 1;\n    var actual = new Program().firstNonRepeatingCharacter(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"abcdcaf\";\n    int expected = 1;\n    var actual = new Program().firstNonRepeatingCharacter(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function firstNonRepeatingCharacter(string) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the line below.\nexports.firstNonRepeatingCharacter = firstNonRepeatingCharacter;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space - where n is the length of the input string\nfunction firstNonRepeatingCharacter(string) {\n  for (let idx = 0; idx < string.length; idx++) {\n    let foundDuplicate = false;\n    for (let idx2 = 0; idx2 < string.length; idx2++) {\n      if (string[idx] === string[idx2] && idx !== idx2) foundDuplicate = true;\n    }\n\n    if (!foundDuplicate) return idx;\n  }\n\n  return -1;\n}\n\n// Do not edit the line below.\nexports.firstNonRepeatingCharacter = firstNonRepeatingCharacter;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input string\n// The constant space is because the input string only has lowercase\n// English-alphabet letters; thus, our hash table will never have more\n// than 26 character frequencies.\nfunction firstNonRepeatingCharacter(string) {\n  const characterFrequencies = {};\n\n  for (const character of string) {\n    if (!(character in characterFrequencies)) characterFrequencies[character] = 0;\n    characterFrequencies[character]++;\n  }\n\n  for (let idx = 0; idx < string.length; idx++) {\n    const character = string[idx];\n    if (characterFrequencies[character] === 1) return idx;\n  }\n\n  return -1;\n}\n\n// Do not edit the line below.\nexports.firstNonRepeatingCharacter = firstNonRepeatingCharacter;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = 'abcdcaf';\n  const expected = 1;\n  const actual = program.firstNonRepeatingCharacter(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = 'abcdcaf';\n  const expected = 1;\n  const actual = program.firstNonRepeatingCharacter(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun firstNonRepeatingCharacter(string: String): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(1) space - where n is the length of the input string\nfun firstNonRepeatingCharacter(string: String): Int {\n    for (idx in 0 until string.length) {\n        var foundDuplicate = false\n        for (idx2 in 0 until string.length) {\n            if (string[idx] == string[idx2] && idx != idx2) {\n                foundDuplicate = true\n            }\n        }\n\n        if (!foundDuplicate) return idx\n    }\n\n    return -1\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the input string\n// The constant space is because the input string only has lowercase\n// English-alphabet letters; thus, our hash table will never have more\n// than 26 character frequencies.\nfun firstNonRepeatingCharacter(string: String): Int {\n    val characterFrequencies = mutableMapOf<Char, Int>()\n\n    for (character in string) {\n        characterFrequencies[character] = characterFrequencies.getOrDefault(character, 0) + 1\n    }\n\n    for (idx in 0 until string.length) {\n        val character = string[idx]\n        if (characterFrequencies[character] == 1) return idx\n    }\n\n    return -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.firstNonRepeatingCharacter\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"abcdcaf\"\n        val expected = 1\n        val output = firstNonRepeatingCharacter(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.firstNonRepeatingCharacter\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"abcdcaf\"\n        val expected = 1\n        val output = firstNonRepeatingCharacter(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def firstNonRepeatingCharacter(string):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(1) space - where n is the length of the input string\ndef firstNonRepeatingCharacter(string):\n    for idx in range(len(string)):\n        foundDuplicate = False\n        for idx2 in range(len(string)):\n            if string[idx] == string[idx2] and idx != idx2:\n                foundDuplicate = True\n\n        if not foundDuplicate:\n            return idx\n\n    return -1\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input string\n# The constant space is because the input string only has lowercase\n# English-alphabet letters; thus, our hash table will never have more\n# than 26 character frequencies.\ndef firstNonRepeatingCharacter(string):\n    characterFrequencies = {}\n\n    for character in string:\n        characterFrequencies[character] = characterFrequencies.get(character, 0) + 1\n\n    for idx in range(len(string)):\n        character = string[idx]\n        if characterFrequencies[character] == 1:\n            return idx\n\n    return -1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = \"abcdcaf\"\n        expected = 1\n        actual = program.firstNonRepeatingCharacter(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = \"abcdcaf\"\n        expected = 1\n        actual = program.firstNonRepeatingCharacter(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def firstNonRepeatingCharacter(string)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def firstNonRepeatingCharacter(string)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = ...\n    # expected = ...\n    # assert_equal(expected, output)\n  end\nend\n",
      "unitTests": "class TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = ...\n    # expected = ...\n    # assert_equal(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func firstNonRepeatingCharacter(_ string: String) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space - where n is the length of the input string\n  func firstNonRepeatingCharacter(_ string: String) -> Int {\n    for (idx1, char1) in string.enumerated() {\n      var foundDuplicate = false\n      for (idx2, char2) in string.enumerated() {\n        if char1 == char2, idx1 != idx2 {\n          foundDuplicate = true\n        }\n      }\n\n      if !foundDuplicate {\n        return idx1\n      }\n    }\n\n    return -1\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input string\n// The constant space is because the input string only has lowercase\n// English-alphabet letters; thus, our hash table will never have more\n// than 26 character frequencies.\n  func firstNonRepeatingCharacter(_ string: String) -> Int {\n    var characterFrequencies = [Character: Int]()\n\n    for (_, char) in string.enumerated() {\n      if characterFrequencies[char] == nil {\n        characterFrequencies[char] = 0\n      }\n      characterFrequencies[char]! += 1\n    }\n\n    for (idx, char) in string.enumerated() {\n      if characterFrequencies[char] == 1 {\n        return idx\n      }\n    }\n\n    return -1\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = \"abcdcaf\"\n      var expected = 1\n      var actual = Program().firstNonRepeatingCharacter(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = \"abcdcaf\"\n      var expected = 1\n      var actual = Program().firstNonRepeatingCharacter(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function firstNonRepeatingCharacter(string: string) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(1) space - where n is the length of the input string\nexport function firstNonRepeatingCharacter(string: string) {\n  for (let idx = 0; idx < string.length; idx++) {\n    let foundDuplicate = false;\n    for (let idx2 = 0; idx2 < string.length; idx2++) {\n      if (string[idx] === string[idx2] && idx !== idx2) foundDuplicate = true;\n    }\n\n    if (!foundDuplicate) return idx;\n  }\n\n  return -1;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input string\n// The constant space is because the input string only has lowercase\n// English-alphabet letters; thus, our hash table will never have more\n// than 26 character frequencies.\nexport function firstNonRepeatingCharacter(string: string) {\n  const characterFrequencies: {[character: string]: number} = {};\n\n  for (const character of string) {\n    if (!(character in characterFrequencies)) characterFrequencies[character] = 0;\n    characterFrequencies[character]++;\n  }\n\n  for (let idx = 0; idx < string.length; idx++) {\n    const character = string[idx];\n    if (characterFrequencies[character] === 1) return idx;\n  }\n\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = 'abcdcaf';\n  const expected = 1;\n  const actual = program.firstNonRepeatingCharacter(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = 'abcdcaf';\n  const expected = 1;\n  const actual = program.firstNonRepeatingCharacter(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "abcdcaf",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "abcdcaf"
    },
    {
      "string": "faadabcbbebdf"
    },
    {
      "string": "a"
    },
    {
      "string": "ab"
    },
    {
      "string": "abc"
    },
    {
      "string": "abac"
    },
    {
      "string": "ababac"
    },
    {
      "string": "ababacc"
    },
    {
      "string": "lmnopqldsafmnopqsa"
    },
    {
      "string": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy"
    },
    {
      "string": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
    },
    {
      "string": ""
    },
    {
      "string": "ggyllaylacrhdzedddjsc"
    },
    {
      "string": "aaaaaaaaaaaaaaaaaaaabbbbbbbbbbcccccccccccdddddddddddeeeeeeeeffghgh"
    },
    {
      "string": "aabbccddeeff"
    }
  ],
  "jsonTests": [
    {
      "string": "abcdcaf"
    },
    {
      "string": "faadabcbbebdf"
    },
    {
      "string": "a"
    },
    {
      "string": "ab"
    },
    {
      "string": "abc"
    },
    {
      "string": "abac"
    },
    {
      "string": "ababac"
    },
    {
      "string": "ababacc"
    },
    {
      "string": "lmnopqldsafmnopqsa"
    },
    {
      "string": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy"
    },
    {
      "string": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
    },
    {
      "string": ""
    },
    {
      "string": "ggyllaylacrhdzedddjsc"
    },
    {
      "string": "aaaaaaaaaaaaaaaaaaaabbbbbbbbbbcccccccccccdddddddddddeeeeeeeeffghgh"
    },
    {
      "string": "aabbccddeeff"
    }
  ],
  "changelog": []
}