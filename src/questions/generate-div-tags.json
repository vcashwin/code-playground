{
  "uid": "generate-div-tags",
  "testStrategy": "JSON",
  "name": "Generate Div Tags",
  "version": 0,
  "releaseDate": "2021-03-02T00:00:00Z",
  "category": "Recursion",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 5537,
    "failureCount": 1122
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "516864505",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1458
  },
  "prompt": "<div class=\"html\">\n  <p>\n    Write a function that takes in a positive integer\n    <span>numberOfTags</span> and returns a list of all the valid strings that\n    you can generate with that number of matched\n    <span>&lt;div&gt;&lt;/div&gt;</span> tags.\n  </p>\n  <p>\n    A string is valid and contains matched\n    <span>&lt;div&gt;&lt;/div&gt;</span> tags if for every opening tag\n    <span>&lt;div&gt;</span>, there's a closing tag <span>&lt;/div&gt;</span>\n    that comes after the opening tag and that isn't used as a closing tag for\n    another opening tag. Each output string should contain exactly\n    <span>numberOfTags</span> opening tags and <span>numberOfTags</span> closing\n    tags.\n  </p>\n  <p>\n    For example, given <span>numberOfTags = 2</span>, the valid strings to\n    return would be: <span>[\"&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;\", \"&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;\"]</span>.\n  </p>\n  <p>Note that the output strings don't need to be in any particular order.</p>\n  <h3>Sample Input</h3>\n  <pre>\n<span class=\"CodeEditor-promptParameter\">numberOfTags</span> = 3\n</pre>\n  <h3>Sample Output</h3>\n  <pre>\n  [\n    \"&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\",\n    \"&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;\",\n    \"&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;\",\n    \"&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;\",\n    \"&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;\",\n  ] <span class=\"CodeEditor-promptComment\">// The strings could be ordered differently.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  The brute-force approach to solve this problem is to generate every single\n  possible string that contains <span>numberOfTags</span> tags and to then check\n  all of those strings to see if they're valid. Can you think of a better way to\n  do this?\n</p>\n",
    "\n<p>\n  To solve this problem optimally, you'll have to incrementally build valid\n  strings by adding <span>&lt;div&gt;</span> and <span>&lt;/div&gt;</span> tags\n  to already valid partial strings. While doing this, you can avoid creating\n  strings that will never lead to a valid final string by following two rules:\n</p>\n<ol>\n  <li>\n    If a string has fewer opening tags than\n    <span>numberOfTags</span>, it's valid to add an opening tag to the end of\n    it.\n  </li>\n  <li>\n    If a string has fewer closing tags than opening tags, it's valid to add a\n    closing tag to the end of it.\n  </li>\n</ol>\n",
    "\n<p>\n  Using the rules defined in Hint #2, write a recursive algorithm that generates\n  all possible valid strings. You'll need to keep track of how many opening and\n  closing tags each partial string has available (at each recursive call), and\n  you'll simply follow the rules outlined in Hint #2. Once a string has no more\n  opening and closing tags available, you can add it to your final list of\n  strings. Your first call to the function will start with an empty string as\n  the partial string and with <span>numberOfTags</span> as the number of opening\n  and closing tags available. For example, after you add an opening tag to a\n  partial string, you'll recursively call the function like this:\n  <span\n    >recursiveFunction(partialStringWithExtraOpeningTag, openingTags - 1,\n    closingTags)</span\n  >\n</p>"
  ],
  "spaceTime": "O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space - where n is the input number",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<string> generateDivTags(int numberOfTags) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid generateDivTagsFromPrefix(\n  int openingTagsNeeded,\n  int closingTagsNeeded,\n  string prefix,\n  vector<string>& result\n);\n\n// O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n// where n is the input number\nvector<string> generateDivTags(int numberOfTags) {\n  vector<string> matchedDivTags;\n  generateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", matchedDivTags);\n  return matchedDivTags;\n}\n\nvoid generateDivTagsFromPrefix(\n  int openingTagsNeeded,\n  int closingTagsNeeded,\n  string prefix,\n  vector<string>& result\n) {\n  if (openingTagsNeeded > 0) {\n    string newPrefix = prefix + \"<div>\";\n    generateDivTagsFromPrefix(\n      openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result\n    );\n  }\n\n  if (openingTagsNeeded < closingTagsNeeded) {\n    string newPrefix = prefix + \"</div>\";\n    generateDivTagsFromPrefix(\n      openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result\n    );\n  }\n\n  if (closingTagsNeeded == 0) result.push_back(prefix);\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      int input = 3;\n      vector<string> expected = {\n        \"<div><div><div></div></\"\n        \"div></div>\",\n        \"<div><div></div><div></\"\n        \"div></div>\",\n        \"<div><div></div></\"\n        \"div><div></div>\",\n        \"<div></div><div><div></\"\n        \"div></div>\",\n        \"<div></div><div></\"\n        \"div><div></div>\"};\n      auto actual = generateDivTags(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      int input = 3;\n      vector<string> expected = {\n        \"<div><div><div></div></\"\n        \"div></div>\",\n        \"<div><div></div><div></\"\n        \"div></div>\",\n        \"<div><div></div></\"\n        \"div><div></div>\",\n        \"<div></div><div><div></\"\n        \"div></div>\",\n        \"<div></div><div></\"\n        \"div><div></div>\"};\n      auto actual = generateDivTags(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<string> GenerateDivTags(int numberOfTags) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n  // where n is the input number\n  public List<string> GenerateDivTags(int numberOfTags) {\n    List<string> matchedDivTags = new List<string>();\n    GenerateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", matchedDivTags);\n    return matchedDivTags;\n  }\n\n  public void GenerateDivTagsFromPrefix(\n    int openingTagsNeeded,\n    int closingTagsNeeded,\n    string prefix,\n    List<string> result\n  ) {\n    if (openingTagsNeeded > 0) {\n      string newPrefix = prefix + \"<div>\";\n      GenerateDivTagsFromPrefix(\n        openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result\n      );\n    }\n\n    if (openingTagsNeeded < closingTagsNeeded) {\n      string newPrefix = prefix + \"</div>\";\n      GenerateDivTagsFromPrefix(\n        openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result\n      );\n    }\n\n    if (closingTagsNeeded == 0) {\n      result.Add(prefix);\n    }\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int input = 3;\n    List<string> expected = new List<string> {\n      \"<div><div><div></div></div></div>\",\n      \"<div><div></div><div></div></div>\",\n      \"<div><div></div></div><div></div>\",\n      \"<div></div><div><div></div></div>\",\n      \"<div></div><div></div><div></div>\"\n    };\n    var actual = new Program().GenerateDivTags(input);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int input = 3;\n    List<string> expected = new List<string> {\n      \"<div><div><div></div></div></div>\",\n      \"<div><div></div><div></div></div>\",\n      \"<div><div></div></div><div></div>\",\n      \"<div></div><div><div></div></div>\",\n      \"<div></div><div></div><div></div>\"\n    };\n    var actual = new Program().GenerateDivTags(input);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc GenerateDivTags(numberOfTags int) []string {\n\t// Write your code here.\n\treturn []string{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n// where n is the input number\nfunc GenerateDivTags(numberOfTags int) []string {\n\tmatchedDivTags := []string{}\n\tgenerateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", &matchedDivTags)\n\treturn matchedDivTags\n}\n\nfunc generateDivTagsFromPrefix(openingTagsNeeded int, closingTagsNeeded int, prefix string, result *[]string) {\n\tif openingTagsNeeded > 0 {\n\t\tnewPrefix := prefix + \"<div>\"\n\t\tgenerateDivTagsFromPrefix(openingTagsNeeded-1, closingTagsNeeded, newPrefix, result)\n\t}\n\n\tif openingTagsNeeded < closingTagsNeeded {\n\t\tnewPrefix := prefix + \"</div>\"\n\t\tgenerateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded-1, newPrefix, result)\n\t}\n\n\tif closingTagsNeeded == 0 {\n\t\t*result = append(*result, prefix)\n\t}\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := 3\n\texpected := []string{\n\t\t\"<div><div><div></div></div></div>\",\n\t\t\"<div><div></div><div></div></div>\",\n\t\t\"<div><div></div></div><div></div>\",\n\t\t\"<div></div><div><div></div></div>\",\n\t\t\"<div></div><div></div><div></div>\",\n\t}\n\tactual := GenerateDivTags(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := 3\n\texpected := []string{\n\t\t\"<div><div><div></div></div></div>\",\n\t\t\"<div><div></div><div></div></div>\",\n\t\t\"<div><div></div></div><div></div>\",\n\t\t\"<div></div><div><div></div></div>\",\n\t\t\"<div></div><div></div><div></div>\",\n\t}\n\tactual := GenerateDivTags(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<String> generateDivTags(int numberOfTags) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n  // where n is the input number\n  public ArrayList<String> generateDivTags(int numberOfTags) {\n    ArrayList<String> matchedDivTags = new ArrayList<String>();\n    generateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", matchedDivTags);\n    return matchedDivTags;\n  }\n\n  public void generateDivTagsFromPrefix(\n    int openingTagsNeeded,\n    int closingTagsNeeded,\n    String prefix,\n    ArrayList<String> result\n  ) {\n    if (openingTagsNeeded > 0) {\n      String newPrefix = prefix + \"<div>\";\n      generateDivTagsFromPrefix(\n        openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result\n      );\n    }\n\n    if (openingTagsNeeded < closingTagsNeeded) {\n      String newPrefix = prefix + \"</div>\";\n      generateDivTagsFromPrefix(\n        openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result\n      );\n    }\n\n    if (closingTagsNeeded == 0) {\n      result.add(prefix);\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int input = 3;\n    ArrayList<String> expected = new ArrayList<String>(Arrays.asList(\n      \"<div><div><div></div></div></div>\",\n      \"<div><div></div><div></div></div>\",\n      \"<div><div></div></div><div></div>\",\n      \"<div></div><div><div></div></div>\",\n      \"<div></div><div></div><div></div>\"\n    ));\n    var actual = new Program().generateDivTags(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int input = 3;\n    ArrayList<String> expected = new ArrayList<String>(Arrays.asList(\n      \"<div><div><div></div></div></div>\",\n      \"<div><div></div><div></div></div>\",\n      \"<div><div></div></div><div></div>\",\n      \"<div></div><div><div></div></div>\",\n      \"<div></div><div></div><div></div>\"\n    ));\n    var actual = new Program().generateDivTags(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function generateDivTags(numberOfTags) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.generateDivTags = generateDivTags;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n// where n is the input number\nfunction generateDivTags(numberOfTags) {\n  const matchedDivTags = [];\n  generateDivTagsFromPrefix(numberOfTags, numberOfTags, '', matchedDivTags);\n  return matchedDivTags;\n}\n\nfunction generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded, prefix, result) {\n  if (openingTagsNeeded > 0) {\n    const newPrefix = prefix + '<div>';\n    generateDivTagsFromPrefix(openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result);\n  }\n\n  if (openingTagsNeeded < closingTagsNeeded) {\n    const newPrefix = prefix + '</div>';\n    generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result);\n  }\n\n  if (closingTagsNeeded === 0) result.push(prefix);\n}\n\n// Do not edit the line below.\nexports.generateDivTags = generateDivTags;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = 3;\n  const expected = [\n    '<div><div><div></div></div></div>',\n    '<div><div></div><div></div></div>',\n    '<div><div></div></div><div></div>',\n    '<div></div><div><div></div></div>',\n    '<div></div><div></div><div></div>',\n  ];\n  const actual = program.generateDivTags(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = 3;\n  const expected = [\n    '<div><div><div></div></div></div>',\n    '<div><div></div><div></div></div>',\n    '<div><div></div></div><div></div>',\n    '<div></div><div><div></div></div>',\n    '<div></div><div></div><div></div>',\n  ];\n  const actual = program.generateDivTags(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun generateDivTags(numberOfTags: Int): List<String> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n// where n is the input number\nfun generateDivTags(numberOfTags: Int): List<String> {\n    val matchedDivTags = mutableListOf<String>()\n    generateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", matchedDivTags)\n    return matchedDivTags\n}\n\nfun generateDivTagsFromPrefix(openingTagsNeeded: Int, closingTagsNeeded: Int, prefix: String, result: MutableList<String>) {\n    if (openingTagsNeeded > 0) {\n        val newPrefix = prefix + \"<div>\"\n        generateDivTagsFromPrefix(openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result)\n    }\n\n    if (openingTagsNeeded < closingTagsNeeded) {\n        val newPrefix = prefix + \"</div>\"\n        generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result)\n    }\n\n    if (closingTagsNeeded == 0) result.add(prefix)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.generateDivTags\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = 3\n        val expected = listOf(\n            \"<div><div><div></div></div></div>\",\n            \"<div><div></div><div></div></div>\",\n            \"<div><div></div></div><div></div>\",\n            \"<div></div><div><div></div></div>\",\n            \"<div></div><div></div><div></div>\",\n        )\n        val output = generateDivTags(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.generateDivTags\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = 3\n        val expected = listOf(\n            \"<div><div><div></div></div></div>\",\n            \"<div><div></div><div></div></div>\",\n            \"<div><div></div></div><div></div>\",\n            \"<div></div><div><div></div></div>\",\n            \"<div></div><div></div><div></div>\",\n        )\n        val output = generateDivTags(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def generateDivTags(numberOfTags):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n# where n is the input number\ndef generateDivTags(numberOfTags):\n    matchedDivTags = []\n    generateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", matchedDivTags)\n    return matchedDivTags\n\n\ndef generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded, prefix, result):\n    if openingTagsNeeded > 0:\n        newPrefix = prefix + \"<div>\"\n        generateDivTagsFromPrefix(openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result)\n\n    if openingTagsNeeded < closingTagsNeeded:\n        newPrefix = prefix + \"</div>\"\n        generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result)\n\n    if closingTagsNeeded == 0:\n        result.append(prefix)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = 3\n        expected = [\n            \"<div><div><div></div></div></div>\",\n            \"<div><div></div><div></div></div>\",\n            \"<div><div></div></div><div></div>\",\n            \"<div></div><div><div></div></div>\",\n            \"<div></div><div></div><div></div>\",\n        ]\n        actual = program.generateDivTags(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = 3\n        expected = [\n            \"<div><div><div></div></div></div>\",\n            \"<div><div></div><div></div></div>\",\n            \"<div><div></div></div><div></div>\",\n            \"<div></div><div><div></div></div>\",\n            \"<div></div><div></div><div></div>\",\n        ]\n        actual = program.generateDivTags(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def generateDivTags(numberOfTags)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def generateDivTags(numberOfTags)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.generateDivTags\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.generateDivTags\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func generateDivTags(_ numberOfTags: Int) -> [String] {\n    // Write your code here.\n    return [String]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n  // where n is the input number\n  func generateDivTags(_ numberOfTags: Int) -> [String] {\n    var matchedDivTags = [String]()\n    generateDivTagsFromPrefix(numberOfTags, numberOfTags, \"\", &matchedDivTags)\n    return matchedDivTags\n  }\n\n  func generateDivTagsFromPrefix(_ openingTagsNeeded: Int, _ closingTagsNeeded: Int, _ prefix: String, _ result: inout [String]) {\n    if openingTagsNeeded > 0 {\n      let newPrefix = prefix + \"<div>\"\n      generateDivTagsFromPrefix(openingTagsNeeded - 1, closingTagsNeeded, newPrefix, &result)\n    }\n\n    if openingTagsNeeded < closingTagsNeeded {\n      let newPrefix = prefix + \"</div>\"\n      generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded - 1, newPrefix, &result)\n    }\n\n    if closingTagsNeeded == 0 {\n      result.append(prefix)\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = 3\n      let expected = [\n        \"<div><div><div></div></div></div>\",\n        \"<div><div></div><div></div></div>\",\n        \"<div><div></div></div><div></div>\",\n        \"<div></div><div><div></div></div>\",\n        \"<div></div><div></div><div></div>\",\n      ]\n      var actual = Program().generateDivTags(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = 3\n      let expected = [\n        \"<div><div><div></div></div></div>\",\n        \"<div><div></div><div></div></div>\",\n        \"<div><div></div></div><div></div>\",\n        \"<div></div><div><div></div></div>\",\n        \"<div></div><div></div><div></div>\",\n      ]\n      var actual = Program().generateDivTags(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function generateDivTags(numberOfTags: number) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O((2n)!/((n!((n + 1)!)))) time | O((2n)!/((n!((n + 1)!)))) space -\n// where n is the input number\nexport function generateDivTags(numberOfTags: number) {\n  const matchedDivTags: string[] = [];\n  generateDivTagsFromPrefix(numberOfTags, numberOfTags, '', matchedDivTags);\n  return matchedDivTags;\n}\n\nfunction generateDivTagsFromPrefix(\n  openingTagsNeeded: number,\n  closingTagsNeeded: number,\n  prefix: string,\n  result: string[],\n) {\n  if (openingTagsNeeded > 0) {\n    const newPrefix = prefix + '<div>';\n    generateDivTagsFromPrefix(openingTagsNeeded - 1, closingTagsNeeded, newPrefix, result);\n  }\n\n  if (openingTagsNeeded < closingTagsNeeded) {\n    const newPrefix = prefix + '</div>';\n    generateDivTagsFromPrefix(openingTagsNeeded, closingTagsNeeded - 1, newPrefix, result);\n  }\n\n  if (closingTagsNeeded === 0) result.push(prefix);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = 3;\n  const expected = [\n    '<div><div><div></div></div></div>',\n    '<div><div></div><div></div></div>',\n    '<div><div></div></div><div></div>',\n    '<div></div><div><div></div></div>',\n    '<div></div><div></div><div></div>',\n  ];\n  const actual = program.generateDivTags(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = 3;\n  const expected = [\n    '<div><div><div></div></div></div>',\n    '<div><div></div><div></div></div>',\n    '<div><div></div></div><div></div>',\n    '<div></div><div><div></div></div>',\n    '<div></div><div></div><div></div>',\n  ];\n  const actual = program.generateDivTags(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "numberOfTags",
      "example": 3,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "numberOfTags": 3
    },
    {
      "numberOfTags": 2
    },
    {
      "numberOfTags": 1
    },
    {
      "numberOfTags": 4
    },
    {
      "numberOfTags": 5
    },
    {
      "numberOfTags": 6
    }
  ],
  "jsonTests": [
    {
      "numberOfTags": 3
    },
    {
      "numberOfTags": 2
    },
    {
      "numberOfTags": 1
    },
    {
      "numberOfTags": 4
    },
    {
      "numberOfTags": 5
    },
    {
      "numberOfTags": 6
    }
  ],
  "changelog": []
}