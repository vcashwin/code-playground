{
  "uid": "generate-document",
  "testStrategy": "JSON",
  "name": "Generate Document",
  "version": 0,
  "releaseDate": "2021-03-02T00:00:00Z",
  "category": "Strings",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 42157,
    "failureCount": 11526
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "516444788",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1258
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given a string of available characters and a string representing a\n  document that you need to generate. Write a function that determines if you\n  can generate the document using the available characters. If you can generate\n  the document, your function should return <span>true</span>; otherwise, it\n  should return <span>false</span>.\n</p>\n<p>\n  You're only able to generate the document if the frequency of unique\n  characters in the characters string is greater than or equal to the frequency\n  of unique characters in the document string. For example, if you're given\n  <span>characters = \"abcabc\"</span> and <span>document = \"aabbccc\"</span> you\n  <b>cannot</b> generate the document because you're missing one <span>c</span>.\n</p>\n<p>\n  The document that you need to create may contain any characters, including\n  special characters, capital letters, numbers, and spaces.\n</p>\n<p>Note: you can always generate the empty string (<span>\"\"</span>).</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">characters</span> = \"Bste!hetsi ogEAxpelrt x \"\n<span class=\"CodeEditor-promptParameter\">document</span> = \"AlgoExpert is the Best!\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n</div>",
  "hints": [
    "<p>\n  There are multiple ways to the solve this problem, but not all approaches have\n  an optimal time complexity. Is there any way to solve this problem in better\n  than <span>O(m * (n + m))</span> or <span>O(n * (n + m))</span> time, where\n  <span>n</span> is the length of the <span>characters</span> string and\n  <span>m</span> is the length of the <span>document</span> string?\n</p>\n",
    "\n<p>\n  One of the simplest ways to solve this problem is to loop through the\n  <span>document</span> string, one character at a time. At every character, you\n  can count how many times it occurs in the <span>document</span> string and in\n  the <span>characters</span> string. If it occurs more times in the\n  <span>document</span> string than in the <span>characters</span> string, then\n  you cannot generate the document. What is the time complexity of this\n  approach?\n</p>\n",
    "\n<p>\n  The approach discussed in Hint #2 runs in <span>O(m * (n + m))</span> time.\n  Can you use some external space to optimize this time complexity?\n</p>\n",
    "\n<p>\n  You can solve this problem in <span>O(n + m)</span> time. To do so, you need\n  to use a hash table. Start by counting all of the characters in the\n  <span>characters</span> string and storing these counts in a hash table. Then,\n  loop through the <span>document</span> string, and check if each character is\n  in the hash table and has a value greater than zero. If a character isn't in\n  the hash table or doesn't have a value greater than zero, then you cannot\n  generate the document. If a character is in the hash table and has a value\n  greater than zero, then decrement its value in the hash table to indicate that\n  you've \"used\" one of these available characters. If you make it through the\n  entire <span>document</span> string without returning <span>false</span>, then\n  you can generate the document.\n</p>"
  ],
  "spaceTime": "O(n + m) time | O(c) space - where n is the number of characters, m is the length of the document, and c is the number of unique characters in the characters string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool generateDocument(string characters, string document) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nint countCharacterFrequency(char character, string target);\n\n// O(m * (n + m)) time | O(1) space - where n is the number\n// of characters and m is the length of the document\nbool generateDocument(string characters, string document) {\n  for (auto character : document) {\n    auto documentFrequency = countCharacterFrequency(character, document);\n    auto charactersFrequency = countCharacterFrequency(character, characters);\n    if (documentFrequency > charactersFrequency) return false;\n  }\n\n  return true;\n}\n\nint countCharacterFrequency(char character, string target) {\n  int frequency = 0;\n  for (auto c : target) {\n    if (c == character) frequency++;\n  }\n\n  return frequency;\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_set>\nusing namespace std;\n\nint countCharacterFrequency(char character, string target);\n\n// O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the\n// document\nbool generateDocument(string characters, string document) {\n  unordered_set<char> alreadyCounted;\n\n  for (auto character : document) {\n    if (alreadyCounted.find(character) != alreadyCounted.end()) continue;\n\n    auto documentFrequency = countCharacterFrequency(character, document);\n    auto charactersFrequency = countCharacterFrequency(character, characters);\n    if (documentFrequency > charactersFrequency) return false;\n\n    alreadyCounted.insert(character);\n  }\n\n  return true;\n}\n\nint countCharacterFrequency(char character, string target) {\n  int frequency = 0;\n  for (auto c : target) {\n    if (c == character) frequency++;\n  }\n\n  return frequency;\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\nusing namespace std;\n\n// O(n + m) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the\n// characters string\nbool generateDocument(string characters, string document) {\n  unordered_map<char, int> characterCounts;\n\n  for (auto character : characters) {\n    if (characterCounts.find(character) == characterCounts.end())\n      characterCounts[character] = 0;\n\n    characterCounts[character]++;\n  }\n\n  for (auto character : document) {\n    if (characterCounts.find(character) == characterCounts.end() || characterCounts[character] == 0)\n      return false;\n\n    characterCounts[character]--;\n  }\n\n  return true;\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto characters = \"Bste!hetsi ogEAxpelrt x \";\n      auto document = \"AlgoExpert is the Best!\";\n      auto expected = true;\n      auto actual = generateDocument(characters, document);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto characters = \"Bste!hetsi ogEAxpelrt x \";\n      auto document = \"AlgoExpert is the Best!\";\n      auto expected = true;\n      auto actual = generateDocument(characters, document);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public bool GenerateDocument(string characters, string document) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(m * (n + m)) time | O(1) space - where n is the number\n  // of characters and m is the length of the document\n  public bool GenerateDocument(string characters, string document) {\n    for (int idx = 0; idx < document.Length; idx++) {\n      char character = document[idx];\n      int documentFrequency = countcharFrequency(character, document);\n      int charactersFrequency = countcharFrequency(character, characters);\n      if (documentFrequency > charactersFrequency) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public int countcharFrequency(char character, string target) {\n    int frequency = 0;\n    for (int idx = 0; idx < target.Length; idx++) {\n      char c = target[idx];\n      if (c == character) {\n        frequency += 1;\n      }\n    }\n\n    return frequency;\n  }\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(c * (n + m)) time | O(c) space - where n is the number of characters, m\n  // is the length of the document, and c is the number of unique characters in\n  // the document\n  public bool GenerateDocument(string characters, string document) {\n    HashSet<char> alreadyCounted = new HashSet<char>();\n\n    for (int idx = 0; idx < document.Length; idx++) {\n      char character = document[idx];\n      if (alreadyCounted.Contains(character)) {\n        continue;\n      }\n\n      int documentFrequency = countcharFrequency(character, document);\n      int charactersFrequency = countcharFrequency(character, characters);\n      if (documentFrequency > charactersFrequency) {\n        return false;\n      }\n\n      alreadyCounted.Add(character);\n    }\n\n    return true;\n  }\n\n  public int countcharFrequency(char character, string target) {\n    int frequency = 0;\n    for (int idx = 0; idx < target.Length; idx++) {\n      char c = target[idx];\n      if (c == character) {\n        frequency += 1;\n      }\n    }\n\n    return frequency;\n  }\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n + m) time | O(c) space - where n is the number of characters, m is\n  // the length of the document, and c is the number of unique characters in the\n  // characters string\n  public bool GenerateDocument(string characters, string document) {\n    Dictionary<char, int> characterCounts = new Dictionary<char, int>();\n\n    for (int idx = 0; idx < characters.Length; idx++) {\n      char character = characters[idx];\n      characterCounts[character] =\n        characterCounts.GetValueOrDefault(character, 0) + 1;\n    }\n\n    for (int idx = 0; idx < document.Length; idx++) {\n      char character = document[idx];\n      if (!characterCounts.ContainsKey(character) || characterCounts[character] == 0) {\n        return false;\n      }\n\n      characterCounts[character] = characterCounts[character] - 1;\n    }\n\n    return true;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string characters = \"Bste!hetsi ogEAxpelrt x \";\n    string document = \"AlgoExpert is the Best!\";\n    bool expected = true;\n    var actual = new Program().GenerateDocument(characters, document);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string characters = \"Bste!hetsi ogEAxpelrt x \";\n    string document = \"AlgoExpert is the Best!\";\n    bool expected = true;\n    var actual = new Program().GenerateDocument(characters, document);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc GenerateDocument(characters string, document string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(m * (n + m)) time | O(1) space - where n is the number\n// of characters and m is the length of the document\nfunc GenerateDocument(characters string, document string) bool {\n\tfor _, character := range document {\n\t\tdocumentFrequency := countCharacterFrequency(character, document)\n\t\tcharactersFrequency := countCharacterFrequency(character, characters)\n\t\tif documentFrequency > charactersFrequency {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc countCharacterFrequency(character rune, target string) int {\n\tvar frequency = 0\n\tfor _, char := range target {\n\t\tif char == character {\n\t\t\tfrequency += 1\n\t\t}\n\t}\n\n\treturn frequency\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the document\nfunc GenerateDocument(characters string, document string) bool {\n\talreadyCounted := map[rune]bool{}\n\n\tfor _, character := range document {\n\t\tif alreadyCounted[character] {\n\t\t\tcontinue\n\t\t}\n\n\t\tdocumentFrequency := countCharacterFrequency(character, document)\n\t\tcharactersFrequency := countCharacterFrequency(character, characters)\n\t\tif documentFrequency > charactersFrequency {\n\t\t\treturn false\n\t\t}\n\n\t\talreadyCounted[character] = true\n\t}\n\n\treturn true\n}\n\nfunc countCharacterFrequency(character rune, target string) int {\n\tvar frequency = 0\n\tfor _, char := range target {\n\t\tif char == character {\n\t\t\tfrequency += 1\n\t\t}\n\t}\n\n\treturn frequency\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n + m) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the characters string\nfunc GenerateDocument(characters string, document string) bool {\n\tcharacterCounts := map[rune]int{}\n\n\tfor _, character := range characters {\n\t\tcharacterCounts[character] = characterCounts[character] + 1\n\t}\n\n\tfor _, character := range document {\n\t\tif characterCounts[character] == 0 {\n\t\t\treturn false\n\t\t}\n\n\t\tcharacterCounts[character] = characterCounts[character] - 1\n\t}\n\n\treturn true\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tcharacters := \"Bste!hetsi ogEAxpelrt x \"\n\tdocument := \"AlgoExpert is the Best!\"\n\texpected := true\n\tactual := GenerateDocument(characters, document)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tcharacters := \"Bste!hetsi ogEAxpelrt x \"\n\tdocument := \"AlgoExpert is the Best!\"\n\texpected := true\n\tactual := GenerateDocument(characters, document)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public boolean generateDocument(String characters, String document) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(m * (n + m)) time | O(1) space - where n is the number\n  // of characters and m is the length of the document\n  public boolean generateDocument(String characters, String document) {\n    for (int idx = 0; idx < document.length(); idx++) {\n      char character = document.charAt(idx);\n      int documentFrequency = countCharacterFrequency(character, document);\n      int charactersFrequency = countCharacterFrequency(character, characters);\n      if (documentFrequency > charactersFrequency) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public int countCharacterFrequency(char character, String target) {\n    int frequency = 0;\n    for (int idx = 0; idx < target.length(); idx++) {\n      char c = target.charAt(idx);\n      if (c == character) {\n        frequency += 1;\n      }\n    }\n\n    return frequency;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(c * (n + m)) time | O(c) space - where n is the number of characters, m\n  // is the length of the document, and c is the number of unique characters in\n  // the document\n  public boolean generateDocument(String characters, String document) {\n    Set<Character> alreadyCounted = new HashSet<Character>();\n\n    for (int idx = 0; idx < document.length(); idx++) {\n      char character = document.charAt(idx);\n      if (alreadyCounted.contains(character)) {\n        continue;\n      }\n\n      int documentFrequency = countCharacterFrequency(character, document);\n      int charactersFrequency = countCharacterFrequency(character, characters);\n      if (documentFrequency > charactersFrequency) {\n        return false;\n      }\n\n      alreadyCounted.add(character);\n    }\n\n    return true;\n  }\n\n  public int countCharacterFrequency(char character, String target) {\n    int frequency = 0;\n    for (int idx = 0; idx < target.length(); idx++) {\n      char c = target.charAt(idx);\n      if (c == character) {\n        frequency += 1;\n      }\n    }\n\n    return frequency;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n + m) time | O(c) space - where n is the number of characters, m is\n  // the length of the document, and c is the number of unique characters in the\n  // characters string\n  public boolean generateDocument(String characters, String document) {\n    HashMap<Character, Integer> characterCounts =\n      new HashMap<Character, Integer>();\n\n    for (int idx = 0; idx < characters.length(); idx++) {\n      char character = characters.charAt(idx);\n      characterCounts.put(\n        character, characterCounts.getOrDefault(character, 0) + 1\n      );\n    }\n\n    for (int idx = 0; idx < document.length(); idx++) {\n      char character = document.charAt(idx);\n      if (!characterCounts.containsKey(character) || characterCounts.get(character) == 0) {\n        return false;\n      }\n\n      characterCounts.put(character, characterCounts.get(character) - 1);\n    }\n\n    return true;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String characters = \"Bste!hetsi ogEAxpelrt x \";\n    String document = \"AlgoExpert is the Best!\";\n    boolean expected = true;\n    var actual = new Program().generateDocument(characters, document);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String characters = \"Bste!hetsi ogEAxpelrt x \";\n    String document = \"AlgoExpert is the Best!\";\n    boolean expected = true;\n    var actual = new Program().generateDocument(characters, document);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function generateDocument(characters, document) {\n  // Write your code here.\n  return false;\n}\n\n// Do not edit the line below.\nexports.generateDocument = generateDocument;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(m * (n + m)) time | O(1) space - where n is the number\n// of characters and m is the length of the document\nfunction generateDocument(characters, document) {\n  for (const character of document) {\n    const documentFrequency = countCharacterFrequency(character, document);\n    const charactersFrequency = countCharacterFrequency(character, characters);\n    if (documentFrequency > charactersFrequency) return false;\n  }\n\n  return true;\n}\n\nfunction countCharacterFrequency(character, target) {\n  let frequency = 0;\n  for (const char of target) {\n    if (char === character) frequency++;\n  }\n\n  return frequency;\n}\n\n// Do not edit the line below.\nexports.generateDocument = generateDocument;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the document\nfunction generateDocument(characters, document) {\n  const alreadyCounted = new Set();\n\n  for (const character of document) {\n    if (character in alreadyCounted) continue;\n\n    const documentFrequency = countCharacterFrequency(character, document);\n    const charactersFrequency = countCharacterFrequency(character, characters);\n    if (documentFrequency > charactersFrequency) return false;\n\n    alreadyCounted.add(character);\n  }\n\n  return true;\n}\n\nfunction countCharacterFrequency(character, target) {\n  let frequency = 0;\n  for (const char of target) {\n    if (char === character) frequency++;\n  }\n\n  return frequency;\n}\n\n// Do not edit the line below.\nexports.generateDocument = generateDocument;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the characters string\nfunction generateDocument(characters, document) {\n  const characterCounts = {};\n\n  for (const character of characters) {\n    if (!(character in characterCounts)) characterCounts[character] = 0;\n\n    characterCounts[character]++;\n  }\n\n  for (const character of document) {\n    if (!(character in characterCounts) || characterCounts[character] === 0) return false;\n\n    characterCounts[character]--;\n  }\n\n  return true;\n}\n\n// Do not edit the line below.\nexports.generateDocument = generateDocument;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const characters = 'Bste!hetsi ogEAxpelrt x ';\n  const document = 'AlgoExpert is the Best!';\n  const expected = true;\n  const actual = program.generateDocument(characters, document);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const characters = 'Bste!hetsi ogEAxpelrt x ';\n  const document = 'AlgoExpert is the Best!';\n  const expected = true;\n  const actual = program.generateDocument(characters, document);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun generateDocument(characters: String, document: String): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(m * (n + m)) time | O(1) space - where n is the number\n// of characters and m is the length of the document\nfun generateDocument(characters: String, document: String): Boolean {\n    for (character in document) {\n        val documentFrequency = countCharacterFrequency(character, document)\n        val charactersFrequency = countCharacterFrequency(character, characters)\n        if (documentFrequency > charactersFrequency) return false\n    }\n\n    return true\n}\n\nfun countCharacterFrequency(character: Char, target: String): Int {\n    var frequency = 0\n    for (char in target) {\n        if (char == character) frequency += 1\n    }\n\n    return frequency\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the document\nfun generateDocument(characters: String, document: String): Boolean {\n    val alreadyCounted = mutableSetOf<Char>()\n\n    for (character in document) {\n        if (character in alreadyCounted) continue\n\n        val documentFrequency = countCharacterFrequency(character, document)\n        val charactersFrequency = countCharacterFrequency(character, characters)\n        if (documentFrequency > charactersFrequency) return false\n\n        alreadyCounted.add(character)\n    }\n\n    return true\n}\n\nfun countCharacterFrequency(character: Char, target: String): Int {\n    var frequency = 0\n    for (char in target) {\n        if (char == character) frequency += 1\n    }\n\n    return frequency\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n + m) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the characters string\nfun generateDocument(characters: String, document: String): Boolean {\n    val characterCounts = mutableMapOf<Char, Int>()\n\n    for (character in characters) {\n        if (!(character in characterCounts)) characterCounts[character] = 0\n\n        characterCounts[character] = characterCounts[character]!! + 1\n    }\n\n    for (character in document) {\n        if (!(character in characterCounts) || characterCounts[character] == 0) return false\n\n        characterCounts[character] = characterCounts[character]!! - 1\n    }\n\n    return true\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.generateDocument\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val characters = \"Bste!hetsi ogEAxpelrt x \"\n        val document = \"AlgoExpert is the Best!\"\n        val expected = true\n        val output = generateDocument(characters, document)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.generateDocument\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val characters = \"Bste!hetsi ogEAxpelrt x \"\n        val document = \"AlgoExpert is the Best!\"\n        val expected = true\n        val output = generateDocument(characters, document)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def generateDocument(characters, document):\n    # Write your code here.\n    return False\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(m * (n + m)) time | O(1) space - where n is the number\n# of characters and m is the length of the document\ndef generateDocument(characters, document):\n    for character in document:\n        documentFrequency = countCharacterFrequency(character, document)\n        charactersFrequency = countCharacterFrequency(character, characters)\n        if documentFrequency > charactersFrequency:\n            return False\n\n    return True\n\n\ndef countCharacterFrequency(character, target):\n    frequency = 0\n    for char in target:\n        if char == character:\n            frequency += 1\n\n    return frequency\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n# the length of the document, and c is the number of unique characters in the document\ndef generateDocument(characters, document):\n    alreadyCounted = set()\n\n    for character in document:\n        if character in alreadyCounted:\n            continue\n\n        documentFrequency = countCharacterFrequency(character, document)\n        charactersFrequency = countCharacterFrequency(character, characters)\n        if documentFrequency > charactersFrequency:\n            return False\n\n        alreadyCounted.add(character)\n\n    return True\n\n\ndef countCharacterFrequency(character, target):\n    frequency = 0\n    for char in target:\n        if char == character:\n            frequency += 1\n\n    return frequency\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n + m) time | O(c) space - where n is the number of characters, m is\n# the length of the document, and c is the number of unique characters in the characters string\ndef generateDocument(characters, document):\n    characterCounts = {}\n\n    for character in characters:\n        if character not in characterCounts:\n            characterCounts[character] = 0\n\n        characterCounts[character] += 1\n\n    for character in document:\n        if character not in characterCounts or characterCounts[character] == 0:\n            return False\n\n        characterCounts[character] -= 1\n\n    return True\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        characters = \"Bste!hetsi ogEAxpelrt x \"\n        document = \"AlgoExpert is the Best!\"\n        expected = True\n        actual = program.generateDocument(characters, document)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        characters = \"Bste!hetsi ogEAxpelrt x \"\n        document = \"AlgoExpert is the Best!\"\n        expected = True\n        actual = program.generateDocument(characters, document)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def generateDocument(characters, document)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def generateDocument(characters, document)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.generateDocument\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.generateDocument\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func generateDocument(_ characters: String, _ document: String) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(m * (n + m)) time | O(1) space - where n is the number\n  // of characters and m is the length of the document\n  func generateDocument(_ characters: String, _ document: String) -> Bool {\n    for character in document {\n      let documentFrequency = countCharacterFrequency(character, document)\n      let charactersFrequency = countCharacterFrequency(character, characters)\n      if documentFrequency > charactersFrequency {\n        return false\n      }\n    }\n    return true\n  }\n\n  func countCharacterFrequency(_ character: Character, _ target: String) -> Int {\n    var frequency = 0\n    for char in target {\n      if char == character {\n        frequency += 1\n      }\n    }\n    return frequency\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n  // the length of the document, and c is the number of unique characters in the document\n  func generateDocument(_ characters: String, _ document: String) -> Bool {\n    var alreadyCounted: Set<Character> = []\n\n    for character in document {\n      if alreadyCounted.contains(character) {\n        continue\n      }\n\n      let documentFrequency = countCharacterFrequency(character, document)\n      let charactersFrequency = countCharacterFrequency(character, characters)\n      if documentFrequency > charactersFrequency {\n        return false\n      }\n\n      alreadyCounted.insert(character)\n    }\n\n    return true\n  }\n\n  func countCharacterFrequency(_ character: Character, _ target: String) -> Int {\n    var frequency = 0\n    for char in target {\n      if char == character {\n        frequency += 1\n      }\n    }\n    return frequency\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n + m) time | O(c) space - where n is the number of characters, m is\n  // the length of the document, and c is the number of unique characters in the characters string\n  func generateDocument(_ characters: String, _ document: String) -> Bool {\n    var characterCounts = [Character: Int]()\n\n    for character in characters {\n      if characterCounts[character] == nil {\n        characterCounts[character] = 0\n      }\n      characterCounts[character] = characterCounts[character]! + 1\n    }\n\n    for character in document {\n      if characterCounts[character] == nil || characterCounts[character] == 0 {\n        return false\n      }\n      characterCounts[character] = characterCounts[character]! - 1\n    }\n\n    return true\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let characters = \"Bste!hetsi ogEAxpelrt x \"\n      let document = \"AlgoExpert is the Best!\"\n      let expected = true\n      var actual = Program().generateDocument(characters, document)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let characters = \"Bste!hetsi ogEAxpelrt x \"\n      let document = \"AlgoExpert is the Best!\"\n      let expected = true\n      var actual = Program().generateDocument(characters, document)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function generateDocument(characters: string, document: string) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(m * (n + m)) time | O(1) space - where n is the number\n// of characters and m is the length of the document\nexport function generateDocument(characters: string, document: string) {\n  for (const character of document) {\n    const documentFrequency = countCharacterFrequency(character, document);\n    const charactersFrequency = countCharacterFrequency(character, characters);\n    if (documentFrequency > charactersFrequency) return false;\n  }\n\n  return true;\n}\n\nfunction countCharacterFrequency(character: string, target: string) {\n  let frequency = 0;\n  for (const char of target) {\n    if (char === character) frequency++;\n  }\n\n  return frequency;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(c * (n + m)) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the document\nexport function generateDocument(characters: string, document: string) {\n  const alreadyCounted: Set<string> = new Set();\n\n  for (const character of document) {\n    if (character in alreadyCounted) continue;\n\n    const documentFrequency = countCharacterFrequency(character, document);\n    const charactersFrequency = countCharacterFrequency(character, characters);\n    if (documentFrequency > charactersFrequency) return false;\n\n    alreadyCounted.add(character);\n  }\n\n  return true;\n}\n\nfunction countCharacterFrequency(character: string, target: string) {\n  let frequency = 0;\n  for (const char of target) {\n    if (char === character) frequency++;\n  }\n\n  return frequency;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(c) space - where n is the number of characters, m is\n// the length of the document, and c is the number of unique characters in the characters string\nexport function generateDocument(characters: string, document: string) {\n  const characterCounts: {[character: string]: number} = {};\n\n  for (const character of characters) {\n    if (!(character in characterCounts)) characterCounts[character] = 0;\n\n    characterCounts[character]++;\n  }\n\n  for (const character of document) {\n    if (!(character in characterCounts) || characterCounts[character] === 0) return false;\n\n    characterCounts[character]--;\n  }\n\n  return true;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const characters = 'Bste!hetsi ogEAxpelrt x ';\n  const document = 'AlgoExpert is the Best!';\n  const expected = true;\n  const actual = program.generateDocument(characters, document);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const characters = 'Bste!hetsi ogEAxpelrt x ';\n  const document = 'AlgoExpert is the Best!';\n  const expected = true;\n  const actual = program.generateDocument(characters, document);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "characters",
      "example": "Bste!hetsi ogEAxpelrt x ",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "document",
      "example": "AlgoExpert is the Best!",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "characters": "Bste!hetsi ogEAxpelrt x ",
      "document": "AlgoExpert is the Best!"
    },
    {
      "characters": "A",
      "document": "a"
    },
    {
      "characters": "a",
      "document": "a"
    },
    {
      "characters": "a hsgalhsa sanbjksbdkjba kjx",
      "document": ""
    },
    {
      "characters": " ",
      "document": "hello"
    },
    {
      "characters": "     ",
      "document": "     "
    },
    {
      "characters": "aheaollabbhb",
      "document": "hello"
    },
    {
      "characters": "aheaolabbhb",
      "document": "hello"
    },
    {
      "characters": "estssa",
      "document": "testing"
    },
    {
      "characters": "Bste!hetsi ogEAxpert",
      "document": "AlgoExpert is the Best!"
    },
    {
      "characters": "helloworld ",
      "document": "hello wOrld"
    },
    {
      "characters": "helloworldO",
      "document": "hello wOrld"
    },
    {
      "characters": "helloworldO ",
      "document": "hello wOrld"
    },
    {
      "characters": "&*&you^a%^&8766 _=-09     docanCMakemthisdocument",
      "document": "Can you make this document &"
    },
    {
      "characters": "abcabcabcacbcdaabc",
      "document": "bacaccadac"
    }
  ],
  "jsonTests": [
    {
      "characters": "Bste!hetsi ogEAxpelrt x ",
      "document": "AlgoExpert is the Best!"
    },
    {
      "characters": "A",
      "document": "a"
    },
    {
      "characters": "a",
      "document": "a"
    },
    {
      "characters": "a hsgalhsa sanbjksbdkjba kjx",
      "document": ""
    },
    {
      "characters": " ",
      "document": "hello"
    },
    {
      "characters": "     ",
      "document": "     "
    },
    {
      "characters": "aheaollabbhb",
      "document": "hello"
    },
    {
      "characters": "aheaolabbhb",
      "document": "hello"
    },
    {
      "characters": "estssa",
      "document": "testing"
    },
    {
      "characters": "Bste!hetsi ogEAxpert",
      "document": "AlgoExpert is the Best!"
    },
    {
      "characters": "helloworld ",
      "document": "hello wOrld"
    },
    {
      "characters": "helloworldO",
      "document": "hello wOrld"
    },
    {
      "characters": "helloworldO ",
      "document": "hello wOrld"
    },
    {
      "characters": "&*&you^a%^&8766 _=-09     docanCMakemthisdocument",
      "document": "Can you make this document &"
    },
    {
      "characters": "abcabcabcacbcdaabc",
      "document": "bacaccadac"
    }
  ],
  "changelog": []
}