{
  "uid": "height-balanced-binary-tree",
  "testStrategy": "JSON",
  "name": "Height Balanced Binary Tree",
  "version": 0,
  "releaseDate": "2021-02-20T00:00:00Z",
  "category": "Binary Trees",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 20980,
    "failureCount": 4758
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "510956784",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1149
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given the root node of a Binary Tree. Write a function that returns\n  <span>true</span> if this Binary Tree is height balanced and\n  <span>false</span> if it isn't.\n</p>\n<p>\n  A Binary Tree is height balanced if for each node in the tree, the difference\n  between the height of its left subtree and the height of its right subtree is\n  at most <span>1</span>.\n</p>\n<p>\n  Each <span>BinaryTree</span> node has an integer <span>value</span>, a\n  <span>left</span> child node, and a <span>right</span> child node. Children\n  nodes can either be <span>BinaryTree</span> nodes themselves or\n  <span>None</span> / <span>null</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> = 1\n     /   \\\n    2     3\n  /   \\     \\\n 4     5     6\n     /   \\\n    7     8\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n</div>",
  "hints": [
    "<p>\n  To solve this problem, you'll have to determine if <b>every</b> subtree in the\n  Binary Tree is balanced. Which subtrees do you know will always be balanced?\n</p>\n",
    "\n<p>\n  To determine if a subtree is balanced, you need to know the height of its left\n  and right subtrees. The only exception to this is if a subtree has no left and\n  right subtrees (i.e., it's just a leaf node); in that case, the subtree must\n  be balanced.\n</p>\n",
    "\n<p>\n  Recursively calculate the left and right subtree heights from each node. Once\n  you know the heights of a particular node's left and right subtrees, you can\n  determine if the subtree rooted at that node is balanced. If a subtree ever\n  isn't balanced, you can immediately conclude that the entire tree isn't\n  balanced. If you make it through the entire tree without finding any\n  unbalanced subtrees, and if you determine that the heights of the main two\n  subtrees aren't more than <span>1</span> apart, then the entire tree is\n  balanced.\n</p>"
  ],
  "spaceTime": "O(n) time | O(h) space - where n is the number of nodes in the binary tree",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": "tree",
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) { this->value = value; }\n};\n\nbool heightBalancedBinaryTree(BinaryTree* tree) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) { this->value = value; }\n};\n\nstruct TreeInfo {\n  bool isBalanced;\n  int height;\n};\n\nTreeInfo getTreeInfo(BinaryTree* node);\n\n// O(n) time | O(h) space - where n is the number of nodes in the binary tree\nbool heightBalancedBinaryTree(BinaryTree* tree) {\n  auto treeInfo = getTreeInfo(tree);\n  return treeInfo.isBalanced;\n}\n\nTreeInfo getTreeInfo(BinaryTree* node) {\n  if (node == nullptr) return TreeInfo{true, -1};\n\n  auto leftSubtreeInfo = getTreeInfo(node->left);\n  auto rightSubtreeInfo = getTreeInfo(node->right);\n\n  bool isBalanced = leftSubtreeInfo.isBalanced && rightSubtreeInfo.isBalanced &&\n                    abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1;\n  int height = max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1;\n  return TreeInfo{isBalanced, height};\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto root = new BinaryTree(1);\n      root->left = new BinaryTree(2);\n      root->right = new BinaryTree(3);\n      root->left->left = new BinaryTree(4);\n      root->left->right = new BinaryTree(5);\n      root->right->right = new BinaryTree(6);\n      root->left->right->left = new BinaryTree(7);\n      root->left->right->right = new BinaryTree(8);\n      bool expected = true;\n      auto actual = heightBalancedBinaryTree(root);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto root = new BinaryTree(1);\n      root->left = new BinaryTree(2);\n      root->right = new BinaryTree(3);\n      root->left->left = new BinaryTree(4);\n      root->left->right = new BinaryTree(5);\n      root->right->right = new BinaryTree(6);\n      root->left->right->left = new BinaryTree(7);\n      root->left->right->right = new BinaryTree(8);\n      bool expected = true;\n      auto actual = heightBalancedBinaryTree(root);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public bool HeightBalancedBinaryTree(BinaryTree tree) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public class TreeInfo {\n    public bool isBalanced;\n    public int height;\n\n    public TreeInfo(bool isBalanced, int height) {\n      this.isBalanced = isBalanced;\n      this.height = height;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the binary tree\n  public bool HeightBalancedBinaryTree(BinaryTree tree) {\n    TreeInfo treeInfo = getTreeInfo(tree);\n    return treeInfo.isBalanced;\n  }\n\n  public TreeInfo getTreeInfo(BinaryTree node) {\n    if (node == null) {\n      return new TreeInfo(true, -1);\n    }\n\n    TreeInfo leftSubtreeInfo = getTreeInfo(node.left);\n    TreeInfo rightSubtreeInfo = getTreeInfo(node.right);\n\n    bool isBalanced =\n      leftSubtreeInfo.isBalanced && rightSubtreeInfo.isBalanced &&\n      Math.Abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1;\n\n    int height = Math.Max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1;\n    return new TreeInfo(isBalanced, height);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(1);\n    root = new Program.BinaryTree(1);\n    root.left = new Program.BinaryTree(2);\n    root.right = new Program.BinaryTree(3);\n    root.left.left = new Program.BinaryTree(4);\n    root.left.right = new Program.BinaryTree(5);\n    root.right.right = new Program.BinaryTree(6);\n    root.left.right.left = new Program.BinaryTree(7);\n    root.left.right.right = new Program.BinaryTree(8);\n    bool expected = true;\n    var actual = new Program().HeightBalancedBinaryTree(root);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(1);\n    root = new Program.BinaryTree(1);\n    root.left = new Program.BinaryTree(2);\n    root.right = new Program.BinaryTree(3);\n    root.left.left = new Program.BinaryTree(4);\n    root.left.right = new Program.BinaryTree(5);\n    root.right.right = new Program.BinaryTree(6);\n    root.left.right.left = new Program.BinaryTree(7);\n    root.left.right.right = new Program.BinaryTree(8);\n    bool expected = true;\n    var actual = new Program().HeightBalancedBinaryTree(root);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\nfunc HeightBalancedBinaryTree(tree *BinaryTree) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\ntype treeInfo struct {\n\tisBalanced bool\n\theight     int\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the binary tree\nfunc HeightBalancedBinaryTree(tree *BinaryTree) bool {\n\ttreeInfo := getTreeInfo(tree)\n\treturn treeInfo.isBalanced\n}\n\nfunc getTreeInfo(node *BinaryTree) treeInfo {\n\tif node == nil {\n\t\treturn treeInfo{isBalanced: true, height: -1}\n\t}\n\n\tleftSubtreeInfo := getTreeInfo(node.Left)\n\trightSubtreeInfo := getTreeInfo(node.Right)\n\n\tisBalanced := leftSubtreeInfo.isBalanced && rightSubtreeInfo.isBalanced && abs(\n\t\tleftSubtreeInfo.height-rightSubtreeInfo.height) <= 1\n\theight := max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1\n\n\treturn treeInfo{\n\t\tisBalanced: isBalanced,\n\t\theight:     height,\n\t}\n}\n\nfunc abs(a int) int {\n\tif a < 0 {\n\t\treturn -a\n\t}\n\treturn a\n}\n\nfunc max(a, b int) int {\n\tif a < b {\n\t\treturn b\n\t}\n\treturn a\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := &BinaryTree{Value: 1}\n\troot.Left = &BinaryTree{Value: 2}\n\troot.Right = &BinaryTree{Value: 3}\n\troot.Left.Left = &BinaryTree{Value: 4}\n\troot.Left.Right = &BinaryTree{Value: 5}\n\troot.Right.Right = &BinaryTree{Value: 6}\n\troot.Left.Right.Left = &BinaryTree{Value: 7}\n\troot.Left.Right.Right = &BinaryTree{Value: 8}\n\texpected := true\n\tactual := HeightBalancedBinaryTree(root)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := &BinaryTree{Value: 1}\n\troot.Left = &BinaryTree{Value: 2}\n\troot.Right = &BinaryTree{Value: 3}\n\troot.Left.Left = &BinaryTree{Value: 4}\n\troot.Left.Right = &BinaryTree{Value: 5}\n\troot.Right.Right = &BinaryTree{Value: 6}\n\troot.Left.Right.Left = &BinaryTree{Value: 7}\n\troot.Left.Right.Right = &BinaryTree{Value: 8}\n\texpected := true\n\tactual := HeightBalancedBinaryTree(root)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public boolean heightBalancedBinaryTree(BinaryTree tree) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  static class TreeInfo {\n    public boolean isBalanced;\n    public int height;\n\n    public TreeInfo(boolean isBalanced, int height) {\n      this.isBalanced = isBalanced;\n      this.height = height;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the binary tree\n  public boolean heightBalancedBinaryTree(BinaryTree tree) {\n    TreeInfo treeInfo = getTreeInfo(tree);\n    return treeInfo.isBalanced;\n  }\n\n  public TreeInfo getTreeInfo(BinaryTree node) {\n    if (node == null) {\n      return new TreeInfo(true, -1);\n    }\n\n    TreeInfo leftSubtreeInfo = getTreeInfo(node.left);\n    TreeInfo rightSubtreeInfo = getTreeInfo(node.right);\n\n    boolean isBalanced = leftSubtreeInfo.isBalanced\n      && rightSubtreeInfo.isBalanced\n      && Math.abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1;\n\n    int height = Math.max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1;\n    return new TreeInfo(isBalanced, height);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(1);\n    root = new Program.BinaryTree(1);\n    root.left = new Program.BinaryTree(2);\n    root.right = new Program.BinaryTree(3);\n    root.left.left = new Program.BinaryTree(4);\n    root.left.right = new Program.BinaryTree(5);\n    root.right.right = new Program.BinaryTree(6);\n    root.left.right.left = new Program.BinaryTree(7);\n    root.left.right.right = new Program.BinaryTree(8);\n    boolean expected = true;\n    var actual = new Program().heightBalancedBinaryTree(root);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree root = new Program.BinaryTree(1);\n    root = new Program.BinaryTree(1);\n    root.left = new Program.BinaryTree(2);\n    root.right = new Program.BinaryTree(3);\n    root.left.left = new Program.BinaryTree(4);\n    root.left.right = new Program.BinaryTree(5);\n    root.right.right = new Program.BinaryTree(6);\n    root.left.right.left = new Program.BinaryTree(7);\n    root.left.right.right = new Program.BinaryTree(8);\n    boolean expected = true;\n    var actual = new Program().heightBalancedBinaryTree(root);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction heightBalancedBinaryTree(tree) {\n  // Write your code here.\n  return false;\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.heightBalancedBinaryTree = heightBalancedBinaryTree;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass TreeInfo {\n  constructor(isBalanced, height) {\n    this.isBalanced = isBalanced;\n    this.height = height;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the binary tree\nfunction heightBalancedBinaryTree(tree) {\n  const treeInfo = getTreeInfo(tree);\n  return treeInfo.isBalanced;\n}\n\nfunction getTreeInfo(node) {\n  if (node === null) return new TreeInfo(true, -1);\n\n  const leftSubtreeInfo = getTreeInfo(node.left);\n  const rightSubtreeInfo = getTreeInfo(node.right);\n\n  const isBalanced =\n    leftSubtreeInfo.isBalanced &&\n    rightSubtreeInfo.isBalanced &&\n    Math.abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1;\n  const height = Math.max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1;\n  return new TreeInfo(isBalanced, height);\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.heightBalancedBinaryTree = heightBalancedBinaryTree;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nconst {BinaryTree} = program;\n\nit('Test Case #1', function () {\n  const root = new BinaryTree(1);\n  root.left = new BinaryTree(2);\n  root.right = new BinaryTree(3);\n  root.left.left = new BinaryTree(4);\n  root.left.right = new BinaryTree(5);\n  root.right.right = new BinaryTree(6);\n  root.left.right.left = new BinaryTree(7);\n  root.left.right.right = new BinaryTree(8);\n  const expected = true;\n  const actual = program.heightBalancedBinaryTree(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nconst {BinaryTree} = program;\n\nit('Test Case #1', function () {\n  const root = new BinaryTree(1);\n  root.left = new BinaryTree(2);\n  root.right = new BinaryTree(3);\n  root.left.left = new BinaryTree(4);\n  root.left.right = new BinaryTree(5);\n  root.right.right = new BinaryTree(6);\n  root.left.right.left = new BinaryTree(7);\n  root.left.right.right = new BinaryTree(8);\n  const expected = true;\n  const actual = program.heightBalancedBinaryTree(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\nfun heightBalancedBinaryTree(tree: BinaryTree): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\nimport kotlin.math.max\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\nopen class TreeInfo(isBalanced: Boolean, height: Int) {\n    val isBalanced = isBalanced\n    val height = height\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the binary tree\nfun heightBalancedBinaryTree(tree: BinaryTree): Boolean {\n    val treeInfo = getTreeInfo(tree)\n    return treeInfo.isBalanced\n}\n\nfun getTreeInfo(node: BinaryTree?): TreeInfo {\n    if (node == null) return TreeInfo(true, -1)\n\n    val leftSubtreeInfo = getTreeInfo(node.left)\n    val rightSubtreeInfo = getTreeInfo(node.right)\n\n    val isBalanced = leftSubtreeInfo.isBalanced && rightSubtreeInfo.isBalanced && abs(\n        leftSubtreeInfo.height - rightSubtreeInfo.height,\n    ) <= 1\n    val height = max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1\n    return TreeInfo(isBalanced, height)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.BinaryTree\nimport com.algoexpert.program.heightBalancedBinaryTree\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val root = BinaryTree(1)\n        root.left = BinaryTree(2)\n        root.right = BinaryTree(3)\n        root.left!!.left = BinaryTree(4)\n        root.left!!.right = BinaryTree(5)\n        root.right!!.right = BinaryTree(6)\n        root.left!!.right!!.left = BinaryTree(7)\n        root.left!!.right!!.right = BinaryTree(8)\n        val expected = true\n        val output = heightBalancedBinaryTree(root)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.BinaryTree\nimport com.algoexpert.program.heightBalancedBinaryTree\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val root = BinaryTree(1)\n        root.left = BinaryTree(2)\n        root.right = BinaryTree(3)\n        root.left!!.left = BinaryTree(4)\n        root.left!!.right = BinaryTree(5)\n        root.right!!.right = BinaryTree(6)\n        root.left!!.right!!.left = BinaryTree(7)\n        root.left!!.right!!.right = BinaryTree(8)\n        val expected = true\n        val output = heightBalancedBinaryTree(root)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef heightBalancedBinaryTree(tree):\n    # Write your code here.\n    return False\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\nclass TreeInfo:\n    def __init__(self, isBalanced, height):\n        self.isBalanced = isBalanced\n        self.height = height\n\n\n# O(n) time | O(h) space - where n is the number of nodes in the binary tree\ndef heightBalancedBinaryTree(tree):\n    treeInfo = getTreeInfo(tree)\n    return treeInfo.isBalanced\n\n\ndef getTreeInfo(node):\n    if node is None:\n        return TreeInfo(True, -1)\n\n    leftSubtreeInfo = getTreeInfo(node.left)\n    rightSubtreeInfo = getTreeInfo(node.right)\n\n    isBalanced = (\n        leftSubtreeInfo.isBalanced\n        and rightSubtreeInfo.isBalanced\n        and abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1\n    )\n    height = max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1\n    return TreeInfo(isBalanced, height)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\nBinaryTree = program.BinaryTree\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = BinaryTree(1)\n        root.left = BinaryTree(2)\n        root.right = BinaryTree(3)\n        root.left.left = BinaryTree(4)\n        root.left.right = BinaryTree(5)\n        root.right.right = BinaryTree(6)\n        root.left.right.left = BinaryTree(7)\n        root.left.right.right = BinaryTree(8)\n        expected = True\n        actual = program.heightBalancedBinaryTree(root)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\nBinaryTree = program.BinaryTree\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = BinaryTree(1)\n        root.left = BinaryTree(2)\n        root.right = BinaryTree(3)\n        root.left.left = BinaryTree(4)\n        root.left.right = BinaryTree(5)\n        root.right.right = BinaryTree(6)\n        root.left.right.left = BinaryTree(7)\n        root.left.right.right = BinaryTree(8)\n        expected = True\n        actual = program.heightBalancedBinaryTree(root)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def heightBalancedBinaryTree(tree)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def heightBalancedBinaryTree(tree)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.heightBalancedBinaryTree\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.heightBalancedBinaryTree\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func heightBalancedBinaryTree(_ tree: BinaryTree) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  struct treeInfo {\n    var isBalanced: Bool\n    var height: Int\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the binary tree\n  func heightBalancedBinaryTree(_ tree: BinaryTree) -> Bool {\n    let treeInfo = getTreeInfo(tree)\n    return treeInfo.isBalanced\n  }\n\n  func getTreeInfo(_ node: BinaryTree?) -> treeInfo {\n    if node == nil {\n      return treeInfo(isBalanced: true, height: -1)\n    }\n\n    let leftSubtreeInfo = getTreeInfo(node!.left)\n    let rightSubtreeInfo = getTreeInfo(node!.right)\n\n    let isBalanced = leftSubtreeInfo.isBalanced && rightSubtreeInfo.isBalanced && abs(\n      leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1\n    let height = max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1\n\n    return treeInfo(isBalanced: isBalanced, height: height)\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var root = Program.BinaryTree(value: 1)\n      root.left = Program.BinaryTree(value: 2)\n      root.right = Program.BinaryTree(value: 3)\n      root.left!.left = Program.BinaryTree(value: 4)\n      root.left!.right = Program.BinaryTree(value: 5)\n      root.right!.right = Program.BinaryTree(value: 6)\n      root.left!.right!.left = Program.BinaryTree(value: 7)\n      root.left!.right!.right = Program.BinaryTree(value: 8)\n      let expected = true\n      var actual = Program().heightBalancedBinaryTree(root)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var root = Program.BinaryTree(value: 1)\n      root.left = Program.BinaryTree(value: 2)\n      root.right = Program.BinaryTree(value: 3)\n      root.left!.left = Program.BinaryTree(value: 4)\n      root.left!.right = Program.BinaryTree(value: 5)\n      root.right!.right = Program.BinaryTree(value: 6)\n      root.left!.right!.left = Program.BinaryTree(value: 7)\n      root.left!.right!.right = Program.BinaryTree(value: 8)\n      let expected = true\n      var actual = Program().heightBalancedBinaryTree(root)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function heightBalancedBinaryTree(tree: BinaryTree) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass TreeInfo {\n  isBalanced: boolean;\n  height: number;\n\n  constructor(isBalanced: boolean, height: number) {\n    this.isBalanced = isBalanced;\n    this.height = height;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the binary tree\nexport function heightBalancedBinaryTree(tree: BinaryTree) {\n  const treeInfo = getTreeInfo(tree);\n  return treeInfo.isBalanced;\n}\n\nfunction getTreeInfo(node: BinaryTree | null): TreeInfo {\n  if (node === null) return new TreeInfo(true, -1);\n\n  const leftSubtreeInfo = getTreeInfo(node.left);\n  const rightSubtreeInfo = getTreeInfo(node.right);\n\n  const isBalanced =\n    leftSubtreeInfo.isBalanced &&\n    rightSubtreeInfo.isBalanced &&\n    Math.abs(leftSubtreeInfo.height - rightSubtreeInfo.height) <= 1;\n  const height = Math.max(leftSubtreeInfo.height, rightSubtreeInfo.height) + 1;\n  return new TreeInfo(isBalanced, height);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nconst {BinaryTree} = program;\n\nit('Test Case #1', function () {\n  const root = new BinaryTree(1);\n  root.left = new BinaryTree(2);\n  root.right = new BinaryTree(3);\n  root.left.left = new BinaryTree(4);\n  root.left.right = new BinaryTree(5);\n  root.right.right = new BinaryTree(6);\n  root.left.right.left = new BinaryTree(7);\n  root.left.right.right = new BinaryTree(8);\n  const expected = true;\n  const actual = program.heightBalancedBinaryTree(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nconst {BinaryTree} = program;\n\nit('Test Case #1', function () {\n  const root = new BinaryTree(1);\n  root.left = new BinaryTree(2);\n  root.right = new BinaryTree(3);\n  root.left.left = new BinaryTree(4);\n  root.left.right = new BinaryTree(5);\n  root.right.right = new BinaryTree(6);\n  root.left.right.left = new BinaryTree(7);\n  root.left.right.right = new BinaryTree(8);\n  const expected = true;\n  const actual = program.heightBalancedBinaryTree(root);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "tree",
      "example": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "6",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      },
      "schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "6",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "6",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "11",
            "right": "6",
            "value": 3
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "5",
            "value": 4
          },
          {
            "id": "4",
            "left": "6",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "7",
            "value": 2
          },
          {
            "id": "3",
            "left": "8",
            "right": "5",
            "value": 4
          },
          {
            "id": "4",
            "left": "6",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": "9",
            "value": 4
          },
          {
            "id": "5",
            "left": "9",
            "right": "10",
            "value": 5
          },
          {
            "id": "6",
            "left": "11",
            "right": "12",
            "value": 6
          },
          {
            "id": "7",
            "left": "13",
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "13",
            "left": null,
            "right": null,
            "value": 13
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": "9",
            "value": 4
          },
          {
            "id": "5",
            "left": "9",
            "right": "10",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "12",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "12",
            "left": null,
            "right": "13",
            "value": 12
          },
          {
            "id": "13",
            "left": null,
            "right": null,
            "value": 13
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "12",
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": "11",
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "12",
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          }
        ],
        "root": "1"
      }
    }
  ],
  "jsonTests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "6",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "6",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "11",
            "right": "6",
            "value": 3
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "7",
            "right": "8",
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "5",
            "value": 4
          },
          {
            "id": "4",
            "left": "6",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "7",
            "value": 2
          },
          {
            "id": "3",
            "left": "8",
            "right": "5",
            "value": 4
          },
          {
            "id": "4",
            "left": "6",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": "9",
            "value": 4
          },
          {
            "id": "5",
            "left": "9",
            "right": "10",
            "value": 5
          },
          {
            "id": "6",
            "left": "11",
            "right": "12",
            "value": 6
          },
          {
            "id": "7",
            "left": "13",
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "13",
            "left": null,
            "right": null,
            "value": 13
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": "9",
            "value": 4
          },
          {
            "id": "5",
            "left": "9",
            "right": "10",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "12",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "12",
            "left": null,
            "right": "13",
            "value": 12
          },
          {
            "id": "13",
            "left": null,
            "right": null,
            "value": 13
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": null,
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "12",
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": "11",
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": "8",
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": "12",
            "right": null,
            "value": 5
          },
          {
            "id": "6",
            "left": "9",
            "right": "10",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          }
        ],
        "root": "1"
      }
    }
  ],
  "changelog": []
}