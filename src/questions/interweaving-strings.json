{
  "uid": "interweaving-strings",
  "testStrategy": "JSON",
  "name": "Interweaving Strings",
  "version": 0,
  "releaseDate": "2019-11-21T00:00:00Z",
  "category": "Recursion",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 10125,
    "failureCount": 3846
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "374517467",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1401
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in three strings and returns a boolean\n  representing whether the third string can be formed by interweaving the first\n  two strings.\n</p>\n<p>\n  To interweave strings means to merge them by alternating their letters without\n  any specific pattern. For instance, the strings <span>\"abc\"</span> and\n  <span>\"123\"</span> can be interwoven as <span>\"a1b2c3\"</span>, as\n  <span>\"abc123\"</span>, and as <span>\"ab1c23\"</span> (this list is\n  nonexhaustive).\n</p>\n<p>\n  Letters within a string must maintain their relative ordering in the\n  interwoven string.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">one</span> = \"algoexpert\"\n<span class=\"CodeEditor-promptParameter\">two</span> = \"your-dream-job\"\n<span class=\"CodeEditor-promptParameter\">three</span> = \"your-algodream-expertjob\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n</div>",
  "hints": [
    "<p>\nTry traversing the three strings with three different pointers to solve this problem.\n</p>\n",
    "\n<p>\nDeclare three variables (i, j, and k, for instance) pointing to indices in the three strings, respectively, and starting at 0. At any given combination of indices, if neither the character at i in the first string nor the character at j in the second string is equal to the character at k in the third string, then the first two strings can't interweave to form the third one (at least not in whatever way led to the values of i, j, and k in question).\n</p>\n",
    "\n<p>\nIf at any given combination of the indices i, j, and k mentioned in Hint #2, the character at i in the first string or the character at j in the second string is equal to the character at k in the third string, then you can potentially interweave the first two strings to get the third one. In such a case, try incrementing the two relevant indices (i and k or j and k) and repeating this process until you confirm whether or not the first two strings can be interwoven to form the third one. Try using recursion to implement this algorithm.\n</p>\n",
    "\n<p>\nBy following Hint #3, you'll perform, in some cases, many computations multiple times. How can you use caching to improve the time complexity of this algorithm?\n</p>"
  ],
  "spaceTime": "O(nm) time | O(nm) space - where n is the length of the first string and m is the length of the second string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool interweavingStrings(string one, string two, string three) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nbool areInterwoven(string one, string two, string three, int i, int j);\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nbool interweavingStrings(string one, string two, string three) {\n  if (three.size() != one.size() + two.size()) {\n    return false;\n  }\n\n  return areInterwoven(one, two, three, 0, 0);\n}\n\nbool areInterwoven(string one, string two, string three, int i, int j) {\n  int k = i + j;\n  if (k == three.size()) return true;\n\n  if (i < one.size() && one[i] == three[k]) {\n    if (areInterwoven(one, two, three, i + 1, j)) return true;\n  }\n\n  if (j < two.size() && two[j] == three[k]) {\n    return areInterwoven(one, two, three, i, j + 1);\n  }\n\n  return false;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nbool areInterwoven(\n  string one, string two, string three, int i, int j, vector<vector<int>>& cache\n);\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nbool interweavingStrings(string one, string two, string three) {\n  if (three.size() != one.size() + two.size()) {\n    return false;\n  }\n\n  vector<vector<int>> cache;\n  for (int i = 0; i < one.size() + 1; i++) {\n    cache.push_back(vector<int>{});\n    for (int j = 0; j < two.size() + 1; j++) {\n      cache[i].push_back(-1);\n    }\n  }\n\n  return areInterwoven(one, two, three, 0, 0, cache);\n}\n\nbool areInterwoven(\n  string one, string two, string three, int i, int j, vector<vector<int>>& cache\n) {\n  if (cache[i][j] != -1) return cache[i][j];\n\n  int k = i + j;\n  if (k == three.size()) return true;\n\n  if (i < one.size() && one[i] == three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n    if (cache[i][j] == true) return true;\n  }\n\n  if (j < two.size() && two[j] == three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);\n    return cache[i][j];\n  }\n\n  cache[i][j] = false;\n  return false;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string one = \"algoexpert\";\n      string two = \"your-dream-job\";\n      string three = \"your-algodream-expertjob\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string one = \"algoexpert\";\n      string two = \"your-dream-job\";\n      string three = \"your-algodream-expertjob\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static bool Interweavingstrings(string one, string two, string three) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(2^(n + m)) time | O(n + m) space - where n is the length\n  // of the first string and m is the length of the second string\n  public static bool Interweavingstrings(string one, string two, string three) {\n    if (three.Length != one.Length + two.Length) {\n      return false;\n    }\n\n    return areInterwoven(one, two, three, 0, 0);\n  }\n\n  public static bool areInterwoven(\n    string one, string two, string three, int i, int j\n  ) {\n    int k = i + j;\n    if (k == three.Length) return true;\n\n    if (i < one.Length && one[i] == three[k]) {\n      if (areInterwoven(one, two, three, i + 1, j)) return true;\n    }\n\n    if (j < two.Length && two[j] == three[k]) {\n      return areInterwoven(one, two, three, i, j + 1);\n    }\n\n    return false;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(nm) time | O(nm) space - where n is the length of the\n  // first string and m is the length of the second string\n  public static bool Interweavingstrings(string one, string two, string three) {\n    if (three.Length != one.Length + two.Length) {\n      return false;\n    }\n\n    bool?[,] cache = new bool?[one.Length + 1, two.Length + 1];\n    return areInterwoven(one, two, three, 0, 0, cache);\n  }\n\n  public static bool areInterwoven(\n    string one, string two, string three, int i, int j, bool?[,] cache\n  ) {\n    if (cache[i, j].HasValue) {\n      return cache[i, j].Value;\n    }\n\n    int k = i + j;\n    if (k == three.Length) {\n      return true;\n    }\n\n    if (i < one.Length && one[i] == three[k]) {\n      cache[i, j] = areInterwoven(one, two, three, i + 1, j, cache);\n      if (cache[i, j].HasValue && cache[i, j].Value) {\n        return true;\n      }\n    }\n\n    if (j < two.Length && two[j] == three[k]) {\n      cache[i, j] = areInterwoven(one, two, three, i, j + 1, cache);\n      return cache[i, j].Value;\n    }\n\n    cache[i, j] = false;\n    return false;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string one = \"algoexpert\";\n    string two = \"your-dream-job\";\n    string three = \"your-algodream-expertjob\";\n    Utils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string one = \"algoexpert\";\n    string two = \"your-dream-job\";\n    string three = \"your-algodream-expertjob\";\n    Utils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc InterweavingStrings(one, two, three string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nfunc InterweavingStrings(one, two, three string) bool {\n\tif len(three) != len(one)+len(two) {\n\t\treturn false\n\t}\n\treturn areInterwoven(one, two, three, 0, 0)\n}\n\nfunc areInterwoven(one, two, three string, i, j int) bool {\n\tk := i + j\n\tif k == len(three) {\n\t\treturn true\n\t}\n\n\tif i < len(one) && one[i] == three[k] {\n\t\tif areInterwoven(one, two, three, i+1, j) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\tif j < len(two) && two[j] == three[k] {\n\t\treturn areInterwoven(one, two, three, i, j+1)\n\t}\n\treturn false\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nfunc InterweavingStrings(one, two, three string) bool {\n\tif len(three) != len(one)+len(two) {\n\t\treturn false\n\t}\n\tcache := make([][]*bool, len(one)+1)\n\tfor i := 0; i < len(one)+1; i++ {\n\t\tcache[i] = make([]*bool, len(two)+1)\n\t}\n\treturn areInterwoven(one, two, three, 0, 0, cache)\n}\n\nfunc areInterwoven(one, two, three string, i, j int, cache [][]*bool) bool {\n\tif cache[i][j] != nil {\n\t\treturn *cache[i][j]\n\t}\n\n\tk := i + j\n\tif k == len(three) {\n\t\treturn true\n\t}\n\n\tif i < len(one) && one[i] == three[k] {\n\t\tresult := areInterwoven(one, two, three, i+1, j, cache)\n\t\tcache[i][j] = &result\n\t\tif result {\n\t\t\treturn true\n\t\t}\n\t}\n\n\tif j < len(two) && two[j] == three[k] {\n\t\tresult := areInterwoven(one, two, three, i, j+1, cache)\n\t\tcache[i][j] = &result\n\t\treturn result\n\t}\n\n\tresult := false\n\tcache[i][j] = &result\n\treturn result\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tone := \"algoexpert\"\n\ttwo := \"your-dream-job\"\n\tthree := \"your-algodream-expertjob\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tone := \"algoexpert\"\n\ttwo := \"your-dream-job\"\n\tthree := \"your-algodream-expertjob\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static boolean interweavingStrings(\n    String one, String two, String three\n  ) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(2^(n + m)) time | O(n + m) space - where n is the length\n  // of the first string and m is the length of the second string\n  public static boolean interweavingStrings(\n    String one, String two, String three\n  ) {\n    if (three.length() != one.length() + two.length()) {\n      return false;\n    }\n\n    return areInterwoven(one, two, three, 0, 0);\n  }\n\n  public static boolean areInterwoven(\n    String one, String two, String three, int i, int j\n  ) {\n    int k = i + j;\n    if (k == three.length()) return true;\n\n    if (i < one.length() && one.charAt(i) == three.charAt(k)) {\n      if (areInterwoven(one, two, three, i + 1, j)) return true;\n    }\n\n    if (j < two.length() && two.charAt(j) == three.charAt(k)) {\n      return areInterwoven(one, two, three, i, j + 1);\n    }\n\n    return false;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm) time | O(nm) space - where n is the length of the\n  // first string and m is the length of the second string\n  public static boolean interweavingStrings(\n    String one, String two, String three\n  ) {\n    if (three.length() != one.length() + two.length()) {\n      return false;\n    }\n\n    Boolean[][] cache = new Boolean[one.length() + 1][two.length() + 1];\n    return areInterwoven(one, two, three, 0, 0, cache);\n  }\n\n  public static boolean areInterwoven(\n    String one, String two, String three, int i, int j, Boolean[][] cache\n  ) {\n    if (cache[i][j] != null) return cache[i][j];\n\n    int k = i + j;\n    if (k == three.length()) {\n      return true;\n    }\n\n    if (i < one.length() && one.charAt(i) == three.charAt(k)) {\n      cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n      if (cache[i][j]) return true;\n    }\n\n    if (j < two.length() && two.charAt(j) == three.charAt(k)) {\n      var result = areInterwoven(one, two, three, i, j + 1, cache);\n      cache[i][j] = result;\n      return result;\n    }\n\n    cache[i][j] = false;\n    return false;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String one = \"algoexpert\";\n    String two = \"your-dream-job\";\n    String three = \"your-algodream-expertjob\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String one = \"algoexpert\";\n    String two = \"your-dream-job\";\n    String three = \"your-algodream-expertjob\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function interweavingStrings(one, two, three) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.interweavingStrings = interweavingStrings;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nfunction interweavingStrings(one, two, three) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  return areInterwoven(one, two, three, 0, 0);\n}\n\nfunction areInterwoven(one, two, three, i, j) {\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    if (areInterwoven(one, two, three, i + 1, j)) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    return areInterwoven(one, two, three, i, j + 1);\n  }\n\n  return false;\n}\n\nexports.interweavingStrings = interweavingStrings;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nfunction interweavingStrings(one, two, three) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  const cache = new Array(one.length + 1).fill(0).map(_ => new Array(two.length + 1).fill(null));\n  return areInterwoven(one, two, three, 0, 0, cache);\n}\n\nfunction areInterwoven(one, two, three, i, j, cache) {\n  if (cache[i][j] !== null) return cache[i][j];\n\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n    if (cache[i][j]) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);\n    return cache[i][j];\n  }\n\n  cache[i][j] = false;\n  return false;\n}\n\nexports.interweavingStrings = interweavingStrings;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const one = 'algoexpert';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const one = 'algoexpert';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun interweavingStrings(one: String, two: String, three: String): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nfun interweavingStrings(one: String, two: String, three: String): Boolean {\n    if (three.length != one.length + two.length) {\n        return false\n    }\n\n    return areInterwoven(one, two, three, 0, 0)\n}\n\nfun areInterwoven(one: String, two: String, three: String, i: Int, j: Int): Boolean {\n    val k = i + j\n    if (k == three.length) return true\n\n    if (i < one.length && one[i] == three[k]) {\n        if (areInterwoven(one, two, three, i + 1, j)) return true\n    }\n\n    if (j < two.length && two[j] == three[k]) {\n        return areInterwoven(one, two, three, i, j + 1)\n    }\n\n    return false\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nfun interweavingStrings(one: String, two: String, three: String): Boolean {\n    if (three.length !== one.length + two.length) {\n        return false\n    }\n\n    val cache = List(one.length + 1, { MutableList<Boolean?>(two.length + 1, { null }) })\n    return areInterwoven(one, two, three, 0, 0, cache)\n}\n\nfun areInterwoven(one: String, two: String, three: String, i: Int, j: Int, cache: List<MutableList<Boolean?>>): Boolean {\n    if (cache[i][j] !== null) return cache[i][j]!!\n\n    val k = i + j\n    if (k == three.length) return true\n\n    if (i < one.length && one[i] == three[k]) {\n        cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache)\n        if (cache[i][j]!!) return true\n    }\n\n    if (j < two.length && two[j] == three[k]) {\n        cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache)\n        return cache[i][j]!!\n    }\n\n    cache[i][j] = false\n    return false\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.interweavingStrings as interweavingStrings\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val one = \"algoexpert\"\n        val two = \"your-dream-job\"\n        val three = \"your-algodream-expertjob\"\n        assert(interweavingStrings(one, two, three))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.interweavingStrings as interweavingStrings\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val one = \"algoexpert\"\n        val two = \"your-dream-job\"\n        val three = \"your-algodream-expertjob\"\n        assert(interweavingStrings(one, two, three))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def interweavingStrings(one, two, three):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(2^(n + m)) time | O(n + m) space - where n is the length\n# of the first string and m is the length of the second string\ndef interweavingStrings(one, two, three):\n    if len(three) != len(one) + len(two):\n        return False\n\n    return areInterwoven(one, two, three, 0, 0)\n\n\ndef areInterwoven(one, two, three, i, j):\n    k = i + j\n    if k == len(three):\n        return True\n\n    if i < len(one) and one[i] == three[k]:\n        if areInterwoven(one, two, three, i + 1, j):\n            return True\n\n    if j < len(two) and two[j] == three[k]:\n        return areInterwoven(one, two, three, i, j + 1)\n\n    return False\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nm) time | O(nm) space - where n is the length of the\n# first string and m is the length of the second string\ndef interweavingStrings(one, two, three):\n    if len(three) != len(one) + len(two):\n        return False\n\n    cache = [[None for j in range(len(two) + 1)] for i in range(len(one) + 1)]\n    return areInterwoven(one, two, three, 0, 0, cache)\n\n\ndef areInterwoven(one, two, three, i, j, cache):\n    if cache[i][j] is not None:\n        return cache[i][j]\n\n    k = i + j\n    if k == len(three):\n        return True\n\n    if i < len(one) and one[i] == three[k]:\n        cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache)\n        if cache[i][j]:\n            return True\n\n    if j < len(two) and two[j] == three[k]:\n        cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache)\n        return cache[i][j]\n\n    cache[i][j] = False\n    return False\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        one = \"algoexpert\"\n        two = \"your-dream-job\"\n        three = \"your-algodream-expertjob\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        one = \"algoexpert\"\n        two = \"your-dream-job\"\n        three = \"your-algodream-expertjob\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def interweavingStrings(one, two, three)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def interweavingStrings(one, two, three)\n    # Write your code here.\n    return false\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def interweavingStrings(one, two, three)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.interweavingStrings\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.interweavingStrings\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func interweavingStrings(_ one: String, _ two: String, _ three: String) -> Bool {\n    // Write your code here\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(2^(n + m)) time | O(n + m) space - where n is the length\n  // of the first string and m is the length of the second string\n  func interweavingStrings(_ one: String, _ two: String, _ three: String) -> Bool {\n    if three.length != one.length + two.length {\n      return false\n    }\n    return areInterwoven(one, two, three, 0, 0)\n  }\n\n  func areInterwoven(_ one: String, _ two: String, _ three: String, _ i: Int, _ j: Int) -> Bool {\n    let k = i + j\n    if k == three.length {\n      return true\n    }\n\n    let oneI = one.index(one.startIndex, offsetBy: i)\n    let twoJ = two.index(two.startIndex, offsetBy: j)\n    let threeK = three.index(three.startIndex, offsetBy: k)\n    if i < one.length, one[oneI] == three[threeK] {\n      if areInterwoven(one, two, three, i + 1, j) {\n        return true\n      }\n    }\n\n    if j < two.length, two[twoJ] == three[threeK] {\n      return areInterwoven(one, two, three, i, j + 1)\n    }\n\n    return false\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nm) time | O(nm) space - where n is the length of the\n  // first string and m is the length of the second string\n  func interweavingStrings(_ one: String, _ two: String, _ three: String) -> Bool {\n    if three.length != one.length + two.length {\n      return false\n    }\n    var cache: [[Bool?]] = Array(repeating: Array(repeating: nil, count: two.length + 1), count: one.length + 1)\n    return areInterwoven(one, two, three, 0, 0, &cache)\n  }\n\n  func areInterwoven(_ one: String, _ two: String, _ three: String, _ i: Int, _ j: Int, _ cache: inout [[Bool?]]) -> Bool {\n    if let result = cache[i][j] {\n      return result\n    }\n\n    let k = i + j\n    if k == three.length {\n      return true\n    }\n\n    let oneI = one.index(one.startIndex, offsetBy: i)\n    let twoJ = two.index(two.startIndex, offsetBy: j)\n    let threeK = three.index(three.startIndex, offsetBy: k)\n    if i < one.length, one[oneI] == three[threeK] {\n      let result = areInterwoven(one, two, three, i + 1, j, &cache)\n      cache[i][j] = result\n      if result {\n        return true\n      }\n    }\n\n    if j < two.length, two[twoJ] == three[threeK] {\n      let result = areInterwoven(one, two, three, i, j + 1, &cache)\n      cache[i][j] = result\n      return result\n    }\n\n    cache[i][j] = false\n    return false\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let one = \"algoexpert\"\n      let two = \"your-dream-job\"\n      let three = \"your-algodream-expertjob\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let one = \"algoexpert\"\n      let two = \"your-dream-job\"\n      let three = \"your-algodream-expertjob\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function interweavingStrings(one: string, two: string, three: string) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nexport function interweavingStrings(one: string, two: string, three: string) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  return areInterwoven(one, two, three, 0, 0);\n}\n\nfunction areInterwoven(one: string, two: string, three: string, i: number, j: number): boolean {\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    if (areInterwoven(one, two, three, i + 1, j)) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    return areInterwoven(one, two, three, i, j + 1);\n  }\n\n  return false;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nexport function interweavingStrings(one: string, two: string, three: string) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  const cache: Array<boolean | null>[] = new Array(one.length + 1)\n    .fill(0)\n    .map(_ => new Array(two.length + 1).fill(null));\n  return areInterwoven(one, two, three, 0, 0, cache);\n}\n\nfunction areInterwoven(\n  one: string,\n  two: string,\n  three: string,\n  i: number,\n  j: number,\n  cache: Array<boolean | null>[],\n) {\n  if (cache[i][j] !== null) return cache[i][j];\n\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n    if (cache[i][j]) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);\n    return cache[i][j];\n  }\n\n  cache[i][j] = false;\n  return false;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const one = 'algoexpert';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const one = 'algoexpert';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "one",
      "example": "algoexpert",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "two",
      "example": "your-dream-job",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "three",
      "example": "your-algodream-expertjob",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "one": "algoexpert",
      "three": "your-algodream-expertjob",
      "two": "your-dream-job"
    },
    {
      "one": "a",
      "three": "ab",
      "two": "b"
    },
    {
      "one": "a",
      "three": "ba",
      "two": "b"
    },
    {
      "one": "a",
      "three": "ac",
      "two": "b"
    },
    {
      "one": "abc",
      "three": "abcdef",
      "two": "def"
    },
    {
      "one": "abc",
      "three": "adbecf",
      "two": "def"
    },
    {
      "one": "abc",
      "three": "deabcf",
      "two": "def"
    },
    {
      "one": "aabcc",
      "three": "aadbbcbcac",
      "two": "dbbca"
    },
    {
      "one": "aabcc",
      "three": "aadbbbaccc",
      "two": "dbbca"
    },
    {
      "one": "algoexpert",
      "three": "ayloguore-xdpreeratm-job",
      "two": "your-dream-job"
    },
    {
      "one": "aaaaaaa",
      "three": "aaaaaaaaaaaaaab",
      "two": "aaaabaaa"
    },
    {
      "one": "aaaaaaa",
      "three": "aaaaaaaaaaaaaa",
      "two": "aaaaaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaabacaaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaacabaaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaaaacbaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "algoexpert",
      "three": "1your-algodream-expertjob",
      "two": "your-dream-job"
    },
    {
      "one": "algoexpert",
      "three": "your-algodream-expertjob1",
      "two": "your-dream-job"
    },
    {
      "one": "algoexpert",
      "three": "your-algodream-expertjo",
      "two": "your-dream-job"
    },
    {
      "one": "ae",
      "three": "see",
      "two": "e"
    },
    {
      "one": "algo",
      "three": "fralgogo",
      "two": "frog"
    }
  ],
  "jsonTests": [
    {
      "one": "algoexpert",
      "three": "your-algodream-expertjob",
      "two": "your-dream-job"
    },
    {
      "one": "a",
      "three": "ab",
      "two": "b"
    },
    {
      "one": "a",
      "three": "ba",
      "two": "b"
    },
    {
      "one": "a",
      "three": "ac",
      "two": "b"
    },
    {
      "one": "abc",
      "three": "abcdef",
      "two": "def"
    },
    {
      "one": "abc",
      "three": "adbecf",
      "two": "def"
    },
    {
      "one": "abc",
      "three": "deabcf",
      "two": "def"
    },
    {
      "one": "aabcc",
      "three": "aadbbcbcac",
      "two": "dbbca"
    },
    {
      "one": "aabcc",
      "three": "aadbbbaccc",
      "two": "dbbca"
    },
    {
      "one": "algoexpert",
      "three": "ayloguore-xdpreeratm-job",
      "two": "your-dream-job"
    },
    {
      "one": "aaaaaaa",
      "three": "aaaaaaaaaaaaaab",
      "two": "aaaabaaa"
    },
    {
      "one": "aaaaaaa",
      "three": "aaaaaaaaaaaaaa",
      "two": "aaaaaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaabacaaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaacabaaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaaaacbaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "algoexpert",
      "three": "1your-algodream-expertjob",
      "two": "your-dream-job"
    },
    {
      "one": "algoexpert",
      "three": "your-algodream-expertjob1",
      "two": "your-dream-job"
    },
    {
      "one": "algoexpert",
      "three": "your-algodream-expertjo",
      "two": "your-dream-job"
    },
    {
      "one": "ae",
      "three": "see",
      "two": "e"
    },
    {
      "one": "algo",
      "three": "fralgogo",
      "two": "frog"
    }
  ],
  "changelog": []
}