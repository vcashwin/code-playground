{
  "uid": "kadane's-algorithm",
  "testStrategy": "JSON",
  "name": "Kadane's Algorithm",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Famous Algorithms",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 34625,
    "failureCount": 9417
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "241820432",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1148
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of integers and returns the\n  maximum sum that can be obtained by summing up all of the integers in a\n  non-empty subarray of the input array. A subarray must only contain adjacent\n  numbers (numbers next to each other in the input array).\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n19 <span class=\"CodeEditor-promptComment\">// [1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1]</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nThis problem seems fairly simple until you run into negative numbers, some of which are so big in absolute value that they essentially break an otherwise good subarray into two subarrays, and some of which are small enough that there exists a subarray containing them whose numbers sum to maximum sum that you're looking for. How can you determine which group a negative number belongs to?\n</p>\n",
    "\n<p>\nRealize that at any given index in the input array, the maximum sum for a subarray ending at that index is either the maximum sum for a subarray ending at the previous index plus the number at that index, or just the number at that index. Thus, for each index in the array, you can calculate the maximum sum of a subarray ending at that index, and this can be done in one simple pass through the input array.\n</p>\n",
    "\n<p>\nHow can you alter the pass through the input array mentioned in Hint #2 so as to obtain the actual answer to the problem, that is the maximum sum of any subarray in the input array? You should be able to accomplish everything in one loop through the input array.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint kadanesAlgorithm(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space\nint kadanesAlgorithm(vector<int> array) {\n  int maxEndingHere = array[0];\n  int maxSoFar = array[0];\n  for (int i = 1; i < array.size(); i++) {\n    int num = array[i];\n    maxEndingHere = max(num, maxEndingHere + num);\n    maxSoFar = max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        kadanesAlgorithm({3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4}\n        ) == 19\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        kadanesAlgorithm({3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4}\n        ) == 19\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int KadanesAlgorithm(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static int KadanesAlgorithm(int[] array) {\n    int maxEndingHere = array[0];\n    int maxSoFar = array[0];\n    for (int i = 1; i < array.Length; i++) {\n      int num = array[i];\n      maxEndingHere = Math.Max(num, maxEndingHere + num);\n      maxSoFar = Math.Max(maxSoFar, maxEndingHere);\n    }\n    return maxSoFar;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4 };\n    Utils.AssertTrue(Program.KadanesAlgorithm(input) == 19);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4 };\n    Utils.AssertTrue(Program.KadanesAlgorithm(input) == 19);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc KadanesAlgorithm(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space\nfunc KadanesAlgorithm(array []int) int {\n\tmaxEndingHere := array[0]\n\tmaxSoFar := array[0]\n\tfor i := 1; i < len(array); i++ {\n\t\tnum := array[i]\n\t\tmaxEndingHere = max(num, maxEndingHere+num)\n\t\tmaxSoFar = max(maxSoFar, maxEndingHere)\n\t}\n\treturn maxSoFar\n}\n\nfunc max(a int, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 19\n\toutput := KadanesAlgorithm([]int{3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 19\n\toutput := KadanesAlgorithm([]int{3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int kadanesAlgorithm(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int kadanesAlgorithm(int[] array) {\n    int maxEndingHere = array[0];\n    int maxSoFar = array[0];\n    for (int i = 1; i < array.length; i++) {\n      int num = array[i];\n      maxEndingHere = Math.max(num, maxEndingHere + num);\n      maxSoFar = Math.max(maxSoFar, maxEndingHere);\n    }\n    return maxSoFar;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 19);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 19);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function kadanesAlgorithm(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.kadanesAlgorithm = kadanesAlgorithm;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction kadanesAlgorithm(array) {\n  let maxEndingHere = array[0];\n  let maxSoFar = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const num = array[i];\n    maxEndingHere = Math.max(num, maxEndingHere + num);\n    maxSoFar = Math.max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}\n\nexports.kadanesAlgorithm = kadanesAlgorithm;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    .to.deep.equal(19);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    .to.deep.equal(19);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun kadanesAlgorithm(array: List<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(n) time | O(1) space\nfun kadanesAlgorithm(array: List<Int>): Int {\n    var maxEndingHere = array[0]\n    var maxSoFar = array[0]\n    for (i in 1 until array.size) {\n        val num = array[i]\n        maxEndingHere = max(num, maxEndingHere + num)\n        maxSoFar = max(maxSoFar, maxEndingHere)\n    }\n    return maxSoFar\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.kadanesAlgorithm\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4)\n        val output = kadanesAlgorithm(input)\n        assert(output == 19)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.kadanesAlgorithm\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4)\n        val output = kadanesAlgorithm(input)\n        assert(output == 19)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def kadanesAlgorithm(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef kadanesAlgorithm(array):\n    maxEndingHere = array[0]\n    maxSoFar = array[0]\n    for i in range(1, len(array)):\n        num = array[i]\n        maxEndingHere = max(num, maxEndingHere + num)\n        maxSoFar = max(maxSoFar, maxEndingHere)\n    return maxSoFar\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]), 19\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]), 19\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def kadanesAlgorithm(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def kadanesAlgorithm(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.kadanesAlgorithm\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.kadanesAlgorithm\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func kadanesAlgorithm(array: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space)\n  func kadanesAlgorithm(array: [Int]) -> Int {\n    if array.count > 0 {\n      var maxEndingHere = array.first\n      var maxSoFar = array.first\n\n      for i in 1 ..< array.count {\n        let currentNumber = array[i]\n\n        maxEndingHere = max(currentNumber, currentNumber + maxEndingHere!)\n        maxSoFar = max(maxSoFar!, maxEndingHere!)\n      }\n\n      return maxSoFar!\n    } else {\n      return -1\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(19, program.kadanesAlgorithm(array: [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(19, program.kadanesAlgorithm(array: [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function kadanesAlgorithm(array: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function kadanesAlgorithm(array: number[]) {\n  let maxEndingHere = array[0];\n  let maxSoFar = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const num = array[i];\n    maxEndingHere = Math.max(num, maxEndingHere + num);\n    maxSoFar = Math.max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    .to.deep.equal(19);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    .to.deep.equal(19);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        3,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        3,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        -1,
        -2,
        -3,
        -4,
        -5,
        -6,
        -7,
        -8,
        -9,
        -10
      ]
    },
    {
      "array": [
        -10,
        -2,
        -9,
        -4,
        -8,
        -6,
        -7,
        -1,
        -3,
        -5
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -20,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -22,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        1,
        2,
        -4,
        3,
        5,
        -9,
        8,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8,
        -18,
        100
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8,
        -15,
        100
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        6
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6,
        20,
        -23,
        15,
        1,
        -3,
        4
      ]
    },
    {
      "array": [
        100,
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6,
        20,
        -23,
        15,
        1,
        -3,
        4
      ]
    },
    {
      "array": [
        -1000,
        -1000,
        2,
        4,
        -5,
        -6,
        -7,
        -8,
        -2,
        -100
      ]
    },
    {
      "array": [
        -2,
        -1
      ]
    },
    {
      "array": [
        -2,
        1
      ]
    },
    {
      "array": [
        -10
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        3,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        -1,
        -2,
        -3,
        -4,
        -5,
        -6,
        -7,
        -8,
        -9,
        -10
      ]
    },
    {
      "array": [
        -10,
        -2,
        -9,
        -4,
        -8,
        -6,
        -7,
        -1,
        -3,
        -5
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -20,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -22,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        1,
        2,
        -4,
        3,
        5,
        -9,
        8,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8,
        -18,
        100
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8,
        -15,
        100
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        6
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6,
        20,
        -23,
        15,
        1,
        -3,
        4
      ]
    },
    {
      "array": [
        100,
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6,
        20,
        -23,
        15,
        1,
        -3,
        4
      ]
    },
    {
      "array": [
        -1000,
        -1000,
        2,
        4,
        -5,
        -6,
        -7,
        -8,
        -2,
        -100
      ]
    },
    {
      "array": [
        -2,
        -1
      ]
    },
    {
      "array": [
        -2,
        1
      ]
    },
    {
      "array": [
        -10
      ]
    }
  ],
  "changelog": []
}