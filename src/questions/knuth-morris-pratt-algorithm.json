{
  "uid": "knuth-morris-pratt-algorithm",
  "testStrategy": "JSON",
  "name": "Knuth—Morris—Pratt Algorithm",
  "version": 0,
  "releaseDate": "2018-10-20T00:00:00Z",
  "category": "Famous Algorithms",
  "difficulty": 4,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 5290,
    "failureCount": 1451
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "293554991",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2881
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in two strings and checks if the first string\n  contains the second one using the Knuth—Morris—Pratt algorithm. The function\n  should return a boolean.\n</p>\n<p>\n  If you're unfamiliar with the Knuth—Morris—Pratt Algorithm, we recommend\n  watching the Conceptual Overview section of this question's video explanation\n  before starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"aefoaefcdaefcdaed\"\n<span class=\"CodeEditor-promptParameter\">substring</span> = \"aefcdaed\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n</div>",
  "hints": [
    "<p>\nThe Knuth—Morris—Pratt algorithm works by identifying patterns in the potential substring and exploiting them to avoid doing needless character comparisons when searching for the substring in the main string. For instance, take the string \"ababac\" and the substring \"abac\"; comparing these strings will fail at the fourth character, where \"b\" is not equal to \"c\". Instead of having to restart our comparisons at the second character of the main string, however, we notice that the substring \"ab\", which is at the beginning of our potential substring, just appeared near our point of failure in the main string. How can we use this to our advantage?\n</p>\n",
    "\n<p>\nStart by traversing the potential substring and building out a pattern table. This 1-dimensional array should store, for every position in the substring, the last index at which a matching pattern has been seen; more specifically, this index should be the ending index of a prefix in the substring that is also a suffix at the given position. For example, the string \"abcababcd\" should yield the following pattern table: [-1, -1, -1, 0, 1, 0, 1, 2, -1].\n</p>\n",
    "\n<p>\nAfter the pattern table mentioned in Hint #2 has been built, traverse the main string and the potential substring with two separate pointers. When characters match, move the pointers forward. When characters don't match, check if the pointer in the substring is at the very beginning of the substring; if it is, then there is no match and you can move the pointer of the main string forward until there is a match; if it isn't, then move it to the position that comes right after the last seen pattern stored at the previous index in the pattern table.\n</p>"
  ],
  "spaceTime": "O(n + m) time | O(m) space - where n is the length of the main string and m is the length of the potential substring",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool knuthMorrisPrattAlgorithm(string str, string substr) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<int> buildPattern(string substr);\nbool doesMatch(string str, string substr, vector<int> pattern);\n\n// O(n + m) time | O(m) space\nbool knuthMorrisPrattAlgorithm(string str, string substr) {\n  vector<int> pattern = buildPattern(substr);\n  return doesMatch(str, substr, pattern);\n}\n\nvector<int> buildPattern(string substr) {\n  vector<int> pattern(substr.size(), -1);\n  int j = 0;\n  int i = 1;\n  while (i < substr.size()) {\n    if (substr[i] == substr[j]) {\n      pattern[i] = j;\n      i++;\n      j++;\n    } else if (j > 0) {\n      j = pattern[j - 1] + 1;\n    } else {\n      i++;\n    }\n  }\n  return pattern;\n}\n\nbool doesMatch(string str, string substr, vector<int> pattern) {\n  int i = 0;\n  int j = 0;\n  while (i + substr.size() - j <= str.size()) {\n    if (str[i] == substr[j]) {\n      if (j == substr.size() - 1) return true;\n      i++;\n      j++;\n    } else if (j > 0) {\n      j = pattern[j - 1] + 1;\n    } else {\n      i++;\n    }\n  }\n  return false;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\") == true\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\") == true\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static bool KnuthMorrisPrattAlgorithm(string str, string substring) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n + m) time | O(m) space\n  public static bool KnuthMorrisPrattAlgorithm(string str, string substring) {\n    int[] pattern = buildPattern(substring);\n    return doesMatch(str, substring, pattern);\n  }\n\n  public static int[] buildPattern(string substring) {\n    int[] pattern = new int[substring.Length];\n    Array.Fill(pattern, -1);\n    int j = 0;\n    int i = 1;\n    while (i < substring.Length) {\n      if (substring[i] == substring[j]) {\n        pattern[i] = j;\n        i++;\n        j++;\n      } else if (j > 0) {\n        j = pattern[j - 1] + 1;\n      } else {\n        i++;\n      }\n    }\n    return pattern;\n  }\n\n  public static bool doesMatch(string str, string substring, int[] pattern) {\n    int i = 0;\n    int j = 0;\n    while (i + substring.Length - j <= str.Length) {\n      if (str[i] == substring[j]) {\n        if (j == substring.Length - 1) return true;\n        i++;\n        j++;\n      } else if (j > 0) {\n        j = pattern[j - 1] + 1;\n      } else {\n        i++;\n      }\n    }\n    return false;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.KnuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\") == true\n    );\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.KnuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\") == true\n    );\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc KnuthMorrisPrattAlgorithm(str, substr string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n + m) time | O(m) space\nfunc KnuthMorrisPrattAlgorithm(str, substr string) bool {\n\tpattern := buildPattern(substr)\n\treturn doesMatch(str, substr, pattern)\n}\n\nfunc buildPattern(substr string) []int {\n\tpattern := make([]int, len(substr))\n\tfor i := range substr {\n\t\tpattern[i] = -1\n\t}\n\ti, j := 1, 0\n\tfor i < len(substr) {\n\t\tif substr[i] == substr[j] {\n\t\t\tpattern[i] = j\n\t\t\ti, j = i+1, j+1\n\t\t} else if j > 0 {\n\t\t\tj = pattern[j-1] + 1\n\t\t} else {\n\t\t\ti += 1\n\t\t}\n\t}\n\treturn pattern\n}\n\nfunc doesMatch(str, substr string, pattern []int) bool {\n\ti, j := 0, 0\n\tfor i+len(substr)-j <= len(str) {\n\t\tif str[i] == substr[j] {\n\t\t\tif j == len(substr)-1 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\ti, j = i+1, j+1\n\t\t} else if j > 0 {\n\t\t\tj = pattern[j-1] + 1\n\t\t} else {\n\t\t\ti += 1\n\t\t}\n\t}\n\treturn false\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := true\n\toutput := KnuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\")\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := true\n\toutput := KnuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\")\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static boolean knuthMorrisPrattAlgorithm(\n    String string, String substring\n  ) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.Arrays;\n\nclass Program {\n  // O(n + m) time | O(m) space\n  public static boolean knuthMorrisPrattAlgorithm(\n    String string, String substring\n  ) {\n    int[] pattern = buildPattern(substring);\n    return doesMatch(string, substring, pattern);\n  }\n\n  public static int[] buildPattern(String substring) {\n    int[] pattern = new int[substring.length()];\n    Arrays.fill(pattern, -1);\n    int j = 0;\n    int i = 1;\n    while (i < substring.length()) {\n      if (substring.charAt(i) == substring.charAt(j)) {\n        pattern[i] = j;\n        i++;\n        j++;\n      } else if (j > 0) {\n        j = pattern[j - 1] + 1;\n      } else {\n        i++;\n      }\n    }\n    return pattern;\n  }\n\n  public static boolean doesMatch(\n    String string, String substring, int[] pattern\n  ) {\n    int i = 0;\n    int j = 0;\n    while (i + substring.length() - j <= string.length()) {\n      if (string.charAt(i) == substring.charAt(j)) {\n        if (j == substring.length() - 1) return true;\n        i++;\n        j++;\n      } else if (j > 0) {\n        j = pattern[j - 1] + 1;\n      } else {\n        i++;\n      }\n    }\n    return false;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\") == true\n    );\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\") == true\n    );\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function knuthMorrisPrattAlgorithm(string, substring) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.knuthMorrisPrattAlgorithm = knuthMorrisPrattAlgorithm;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(m) space\nfunction knuthMorrisPrattAlgorithm(string, substring) {\n  let pattern = buildPattern(substring);\n  return doesMatch(string, substring, pattern);\n}\n\nfunction buildPattern(substring) {\n  let pattern = new Array(substring.length).fill(-1);\n  let j = 0;\n  let i = 1;\n  while (i < substring.length) {\n    if (substring[i] === substring[j]) {\n      pattern[i] = j;\n      i++;\n      j++;\n    } else if (j > 0) {\n      j = pattern[j - 1] + 1;\n    } else {\n      i++;\n    }\n  }\n  return pattern;\n}\n\nfunction doesMatch(string, substring, pattern) {\n  let i = 0;\n  let j = 0;\n  while (i + substring.length - j <= string.length) {\n    if (string[i] === substring[j]) {\n      if (j === substring.length - 1) return true;\n      i++;\n      j++;\n    } else if (j > 0) {\n      j = pattern[j - 1] + 1;\n    } else {\n      i++;\n    }\n  }\n  return false;\n}\n\nexports.knuthMorrisPrattAlgorithm = knuthMorrisPrattAlgorithm;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.knuthMorrisPrattAlgorithm('aefoaefcdaefcdaed', 'aefcdaed'))\n    .to.deep.equal(true);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.knuthMorrisPrattAlgorithm('aefoaefcdaefcdaed', 'aefcdaed'))\n    .to.deep.equal(true);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun knuthMorrisPrattAlgorithm(string: String, substring: String): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n + m) time | O(m) space\nfun knuthMorrisPrattAlgorithm(string: String, substring: String): Boolean {\n    val pattern = buildPattern(substring)\n    return doesMatch(string, substring, pattern)\n}\n\nfun buildPattern(substring: String): List<Int> {\n    val pattern = MutableList(substring.length) { -1 }\n    var j = 0\n    var i = 1\n    while (i < substring.length) {\n        if (substring[i] == substring[j]) {\n            pattern[i] = j\n            i++\n            j++\n        } else if (j > 0) {\n            j = pattern[j - 1] + 1\n        } else {\n            i++\n        }\n    }\n    return pattern\n}\n\nfun doesMatch(string: String, substring: String, pattern: List<Int>): Boolean {\n    var i = 0\n    var j = 0\n    while (i + substring.length - j <= string.length) {\n        if (string[i] == substring[j]) {\n            if (j == substring.length - 1) return true\n            i++\n            j++\n        } else if (j > 0) {\n            j = pattern[j - 1] + 1\n        } else {\n            i++\n        }\n    }\n    return false\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.knuthMorrisPrattAlgorithm\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\")\n        assert(output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.knuthMorrisPrattAlgorithm\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\")\n        assert(output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def knuthMorrisPrattAlgorithm(string, substring):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n + m) time | O(m) space\ndef knuthMorrisPrattAlgorithm(string, substring):\n    pattern = buildPattern(substring)\n    return doesMatch(string, substring, pattern)\n\n\ndef buildPattern(substring):\n    pattern = [-1 for i in substring]\n    j = 0\n    i = 1\n    while i < len(substring):\n        if substring[i] == substring[j]:\n            pattern[i] = j\n            i += 1\n            j += 1\n        elif j > 0:\n            j = pattern[j - 1] + 1\n        else:\n            i += 1\n    return pattern\n\n\ndef doesMatch(string, substring, pattern):\n    i = 0\n    j = 0\n    while i + len(substring) - j <= len(string):\n        if string[i] == substring[j]:\n            if j == len(substring) - 1:\n                return True\n            i += 1\n            j += 1\n        elif j > 0:\n            j = pattern[j - 1] + 1\n        else:\n            i += 1\n    return False\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\"), True)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", \"aefcdaed\"), True)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def knuthMorrisPrattAlgorithm(string, substring)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def knuthMorrisPrattAlgorithm(string, substring)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.knuthMorrisPrattAlgorithm\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.knuthMorrisPrattAlgorithm\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func knuthMorrisPrattAlgorithm(_ string: String, subString: String) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n + m) time | O(m) space\n  func knuthMorrisPrattAlgorithm(_ string: String, subString: String) -> Bool {\n    let pattern = buildPattern(subString)\n    return doesMatch(string, subString, pattern)\n  }\n\n  func buildPattern(_ subString: String) -> [Int] {\n    var pattern = Array(repeating: -1, count: subString.count)\n\n    var i = 1\n    var j = 0\n\n    while i < subString.count {\n      let iStringIndex = subString.index(subString.startIndex, offsetBy: i)\n      let jStringIndex = subString.index(subString.startIndex, offsetBy: j)\n\n      if subString[iStringIndex] == subString[jStringIndex] {\n        pattern[i] = j\n\n        i += 1\n        j += 1\n      } else if j > 0 {\n        j = pattern[j - 1] + 1\n      } else {\n        i += 1\n      }\n    }\n\n    return pattern\n  }\n\n  func doesMatch(_ string: String, _ subString: String, _ pattern: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n\n    while i + (subString.count - j) <= string.count {\n      let iStringIndex = string.index(string.startIndex, offsetBy: i)\n      let jStringIndex = subString.index(subString.startIndex, offsetBy: j)\n\n      if string[iStringIndex] == subString[jStringIndex] {\n        if j == subString.count - 1 {\n          return true\n        }\n\n        i += 1\n        j += 1\n      } else if j > 0 {\n        j = pattern[j - 1] + 1\n      } else {\n        i += 1\n      }\n    }\n\n    return false\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", subString: \"aefcdaed\"))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.knuthMorrisPrattAlgorithm(\"aefoaefcdaefcdaed\", subString: \"aefcdaed\"))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function knuthMorrisPrattAlgorithm(string: string, substring: string) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(m) space\nexport function knuthMorrisPrattAlgorithm(string: string, substring: string) {\n  let pattern = buildPattern(substring);\n  return doesMatch(string, substring, pattern);\n}\n\nfunction buildPattern(substring: string) {\n  let pattern: number[] = new Array(substring.length).fill(-1);\n  let j = 0;\n  let i = 1;\n  while (i < substring.length) {\n    if (substring[i] === substring[j]) {\n      pattern[i] = j;\n      i++;\n      j++;\n    } else if (j > 0) {\n      j = pattern[j - 1] + 1;\n    } else {\n      i++;\n    }\n  }\n  return pattern;\n}\n\nfunction doesMatch(string: string, substring: string, pattern: number[]) {\n  let i = 0;\n  let j = 0;\n  while (i + substring.length - j <= string.length) {\n    if (string[i] === substring[j]) {\n      if (j === substring.length - 1) return true;\n      i++;\n      j++;\n    } else if (j > 0) {\n      j = pattern[j - 1] + 1;\n    } else {\n      i++;\n    }\n  }\n  return false;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.knuthMorrisPrattAlgorithm('aefoaefcdaefcdaed', 'aefcdaed'))\n    .to.deep.equal(true);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.knuthMorrisPrattAlgorithm('aefoaefcdaefcdaed', 'aefcdaed'))\n    .to.deep.equal(true);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "aefoaefcdaefcdaed",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "substring",
      "example": "aefcdaed",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "aefoaefcdaefcdaed",
      "substring": "aefcdaed"
    },
    {
      "string": "testwafwafawfawfawfawfawfawfawfa",
      "substring": "fawfawfawfawfa"
    },
    {
      "string": "tesseatesgawatewtesaffawgfawtteafawtesftawfawfawfwfawftest",
      "substring": "test"
    },
    {
      "string": "aaabaabacdedfaabaabaaa",
      "substring": "aabaabaaa"
    },
    {
      "string": "abxabcabcaby",
      "substring": "abcaby"
    },
    {
      "string": "decadaafcdf",
      "substring": "daf"
    },
    {
      "string": "aefoaefcdaefcdaed",
      "substring": "aefcaefaeiaefcd"
    },
    {
      "string": "aefcdfaecdaefaefcdaefeaefcdcdeae",
      "substring": "aefcdaefeaefcd"
    },
    {
      "string": "bccbefbcdabbbcabfdcfe",
      "substring": "abc"
    },
    {
      "string": "adafccfefbbbfeeccbcfd",
      "substring": "ecb"
    },
    {
      "string": "testwherethefullstringmatches",
      "substring": "testwherethefullstringmatches"
    },
    {
      "string": "aabc",
      "substring": "abc"
    }
  ],
  "jsonTests": [
    {
      "string": "aefoaefcdaefcdaed",
      "substring": "aefcdaed"
    },
    {
      "string": "testwafwafawfawfawfawfawfawfawfa",
      "substring": "fawfawfawfawfa"
    },
    {
      "string": "tesseatesgawatewtesaffawgfawtteafawtesftawfawfawfwfawftest",
      "substring": "test"
    },
    {
      "string": "aaabaabacdedfaabaabaaa",
      "substring": "aabaabaaa"
    },
    {
      "string": "abxabcabcaby",
      "substring": "abcaby"
    },
    {
      "string": "decadaafcdf",
      "substring": "daf"
    },
    {
      "string": "aefoaefcdaefcdaed",
      "substring": "aefcaefaeiaefcd"
    },
    {
      "string": "aefcdfaecdaefaefcdaefeaefcdcdeae",
      "substring": "aefcdaefeaefcd"
    },
    {
      "string": "bccbefbcdabbbcabfdcfe",
      "substring": "abc"
    },
    {
      "string": "adafccfefbbbfeeccbcfd",
      "substring": "ecb"
    },
    {
      "string": "testwherethefullstringmatches",
      "substring": "testwherethefullstringmatches"
    },
    {
      "string": "aabc",
      "substring": "abc"
    }
  ],
  "changelog": []
}