{
  "uid": "largest-park",
  "testStrategy": "JSON",
  "name": "Largest Park",
  "version": 0,
  "releaseDate": "2023-07-10T00:00:00Z",
  "category": "Stacks",
  "difficulty": 4,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 310,
    "failureCount": 53
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "833867235",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 1276
  },
  "prompt": "<div class=\"html\">\n  <p>\n    A city wants to build a new public park, and you've been tasked with finding\n    the largest park they can build without disturbing existing infrastructure.\n  </p>\n  <p>\n    Write a function that takes in a two-dimensional array (a matrix)\n    <span>land</span> representing the total land of the city from a top-down\n    view. Each value in <span>land</span> is a boolean; false values are pieces\n    of land not currently in use, while true values are pieces of land currently\n    in use by other infrastructure. Return the area of the largest possible\n    park.\n  </p>\n\n  <p>\n    The largest possible park will be placed exclusively on unused land (false\n    values). Moreover, the city wants the park to be a perfect rectangle. If\n    there is no available land, your function should return 0.\n  </p>\n  <h3>Sample Input</h3>\n  <pre>\n<span class=\"CodeEditor-promptParameter\">land</span> = [\n  [false, true, true, true, false],\n  [false, false, false, true, false],\n  [false, false, false, false, false],\n  [false, true, true, true, true]\n]\n</pre>\n  <h3>Sample Output</h3>\n  <pre>\n6 <span class=\"CodeEditor-promptComment\"> // The park would go from row 1 to row 2 in columns 0 to 3, giving a total area of 6.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  Try first breaking this problem down into smaller problems. If you had only\n  a single row, how would you find the largest rectangle of available land in\n  that single row?\n</p>\n",
    "\n<p>\n  If a second row is added below the first row, now each column has a height.\n  This essentially forms a histogram, where you need to find the largest\n  rectangle within that histogram.\n</p>\n",
    "\n<p>\n  To find the area of the largest rectangle in one of these histograms, you need\n  to find the width and the height of the rectangles. Since they must be perfect\n  rectangles, the height is constrained to the lowest height of the histogram\n  bars in the span. The width is then the number of bars in the span.\n</p>\n",
    "\n<p>\n  As you iterate through the histogram, think about how you can identify the\n  start and end of a potential rectangle. When you encounter a bar that is\n  shorter than the previous bars, it means the current rectangle has ended.\n  Can you use this observation to find the largest rectangle in the histogram?\n</p>\n",
    "\n<p>\n  To keep track of the bars that are part of the same rectangle, try using a\n  monotonic stack to maintain the column indices in increasing order based on\n  heights.\n</p>\n",
    "\n<p>\n  Iterate through each column of the histogram. While the stack is not empty and\n  the height at the current column index is less than the height at the index\n  on top of the stack, pop column indices off of the stack, calculating the\n  rectangle's width and height using the popped index and current index. Check\n  if this area is larger than the largest area seen so far, and if it is then\n  save it. After this process, append the current index to the stack.\n  After this iteration, make sure to also process any remaining values in the\n  stack.\n</p>\n",
    "\n<p>\n  Repeat this process with every row, finding the largest possible rectangle of\n  the histogram where this row is the bottom row. The largest rectangle found\n  in any of these rows will be the final solution.\n</p>"
  ],
  "spaceTime": "O(w * h) time | O(w) space - where w is the width of the input matrix and h is the height of the input matrix",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint largestPark(vector<vector<bool>> land) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <stack>\n\nusing namespace std;\n\nint largestRectangleHistogram(vector<int>& heights);\n\n// O(w * h) time | O(w) space - where w is the width of the input matrix and\n// h is the height of the input matrix\nint largestPark(vector<vector<bool>> land) {\n  vector<int> heights(land[0].size());\n  int maxArea = 0;\n\n  for (const auto& row : land) {\n    for (int columnIndex = 0; columnIndex < land[0].size(); columnIndex++) {\n      heights[columnIndex] =\n        row[columnIndex] == false ? heights[columnIndex] + 1 : 0;\n    }\n    maxArea = max(maxArea, largestRectangleHistogram(heights));\n  }\n\n  return maxArea;\n}\n\nint largestRectangleHistogram(vector<int>& heights) {\n  stack<int> stack;\n  int maxArea = 0;\n\n  for (int columnIndex = 0; columnIndex < heights.size(); columnIndex++) {\n    while (!stack.empty() && heights[columnIndex] < heights[stack.top()]) {\n      int height = heights[stack.top()];\n      stack.pop();\n      int width = stack.empty() ? columnIndex : columnIndex - stack.top() - 1;\n      maxArea = max(maxArea, width * height);\n    }\n    stack.push(columnIndex);\n  }\n\n  while (!stack.empty()) {\n    int height = heights[stack.top()];\n    stack.pop();\n    int width =\n      stack.empty() ? heights.size() : heights.size() - stack.top() - 1;\n    maxArea = std::max(maxArea, width * height);\n  }\n\n  return maxArea;\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<bool>> land = {\n        {false, true, true, true, false},\n        {false, false, false, true, false},\n        {false, false, false, false, false},\n        {false, true, true, true, true}};\n      auto expected = 6;\n      auto actual = largestPark(land);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<bool>> land = {\n        {false, true, true, true, false},\n        {false, false, false, true, false},\n        {false, false, false, false, false},\n        {false, true, true, true, true}};\n      auto expected = 6;\n      auto actual = largestPark(land);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int LargestPark(bool[][] land) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(w * h) time | O(w) space - where w is the width of the input matrix and\n  // h is the height of the input matrix\n  public int LargestPark(bool[][] land) {\n    int[] heights = new int[land[0].Length];\n    int maxArea = 0;\n\n    foreach (var row in land) {\n      for (int columnIndex = 0; columnIndex < land[0].Length; columnIndex++) {\n        heights[columnIndex] =\n          row[columnIndex] == false ? heights[columnIndex] + 1 : 0;\n      }\n      maxArea = Math.Max(maxArea, largestRectangleHistogram(heights));\n    }\n\n    return maxArea;\n  }\n\n  static int largestRectangleHistogram(int[] heights) {\n    Stack<int> stack = new Stack<int>();\n    int maxArea = 0;\n\n    for (int columnIndex = 0; columnIndex < heights.Length; columnIndex++) {\n      while (stack.Count > 0 && heights[columnIndex] < heights[stack.Peek()]) {\n        int height = heights[stack.Pop()];\n        int width =\n          (stack.Count == 0) ? columnIndex : columnIndex - stack.Peek() - 1;\n        maxArea = Math.Max(maxArea, width * height);\n      }\n      stack.Push(columnIndex);\n    }\n\n    while (stack.Count > 0) {\n      int height = heights[stack.Pop()];\n      int width =\n        (stack.Count == 0) ? heights.Length : heights.Length - stack.Peek() - 1;\n      maxArea = Math.Max(maxArea, width * height);\n    }\n\n    return maxArea;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    bool[][] land = new bool[][] {\n      new bool[] { false, true, true, true, false },\n      new bool[] { false, false, false, true, false },\n      new bool[] { false, false, false, false, false },\n      new bool[] { false, true, true, true, true },\n    };\n    int expected = 6;\n    int actual = new Program().LargestPark(land);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    bool[][] land = new bool[][] {\n      new bool[] { false, true, true, true, false },\n      new bool[] { false, false, false, true, false },\n      new bool[] { false, false, false, false, false },\n      new bool[] { false, true, true, true, true },\n    };\n    int expected = 6;\n    int actual = new Program().LargestPark(land);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc LargestPark(land [][]bool) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(w * h) time | O(w) space - where w is the width of the input matrix and\n// h is the height of the input matrix\nfunc LargestPark(land [][]bool) int {\n\theights := make([]int, len(land[0]))\n\tmaxArea := 0\n\n\tfor _, row := range land {\n\t\tfor columnIndex := 0; columnIndex < len(land[0]); columnIndex++ {\n\t\t\tif row[columnIndex] == false {\n\t\t\t\theights[columnIndex]++\n\t\t\t} else {\n\t\t\t\theights[columnIndex] = 0\n\t\t\t}\n\t\t}\n\t\tmaxArea = int(math.Max(float64(maxArea), float64(largestRectangleHistogram(heights))))\n\t}\n\n\treturn maxArea\n}\n\nfunc largestRectangleHistogram(heights []int) int {\n\tstack := []int{}\n\tmaxArea := 0\n\n\tfor columnIndex := 0; columnIndex < len(heights); columnIndex++ {\n\t\tfor len(stack) > 0 && heights[columnIndex] < heights[stack[len(stack)-1]] {\n\t\t\theight := heights[stack[len(stack)-1]]\n\t\t\tstack = stack[:len(stack)-1]\n\t\t\twidth := columnIndex\n\t\t\tif len(stack) > 0 {\n\t\t\t\twidth = columnIndex - stack[len(stack)-1] - 1\n\t\t\t}\n\t\t\tmaxArea = int(math.Max(float64(maxArea), float64(width*height)))\n\t\t}\n\t\tstack = append(stack, columnIndex)\n\t}\n\n\tfor len(stack) > 0 {\n\t\theight := heights[stack[len(stack)-1]]\n\t\tstack = stack[:len(stack)-1]\n\t\twidth := len(heights)\n\t\tif len(stack) > 0 {\n\t\t\twidth = len(heights) - stack[len(stack)-1] - 1\n\t\t}\n\t\tmaxArea = int(math.Max(float64(maxArea), float64(width*height)))\n\t}\n\n\treturn maxArea\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tland := [][]bool{\n\t\t{false, true, true, true, false},\n\t\t{false, false, false, true, false},\n\t\t{false, false, false, false, false},\n\t\t{false, true, true, true, true},\n\t}\n\texpected := 6\n\tactual := LargestPark(land)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tland := [][]bool{\n\t\t{false, true, true, true, false},\n\t\t{false, false, false, true, false},\n\t\t{false, false, false, false, false},\n\t\t{false, true, true, true, true},\n\t}\n\texpected := 6\n\tactual := LargestPark(land)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int largestPark(boolean[][] land) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(w * h) time | O(w) space - where w is the width of the input matrix and\n  // h is the height of the input matrix\n  public int largestPark(boolean[][] land) {\n    int[] heights = new int[land[0].length];\n    int maxArea = 0;\n\n    for (boolean[] row : land) {\n      for (int columnIndex = 0; columnIndex < land[0].length; columnIndex++) {\n        heights[columnIndex] =\n          row[columnIndex] == false ? heights[columnIndex] + 1 : 0;\n      }\n      maxArea = Math.max(maxArea, largestRectangleHistogram(heights));\n    }\n\n    return maxArea;\n  }\n\n  static int largestRectangleHistogram(int[] heights) {\n    Stack<Integer> stack = new Stack<Integer>();\n    int maxArea = 0;\n\n    for (int columnIndex = 0; columnIndex < heights.length; columnIndex++) {\n      while (!stack.isEmpty() && heights[columnIndex] < heights[stack.peek()]) {\n        int height = heights[stack.pop()];\n        int width =\n          stack.isEmpty() ? columnIndex : columnIndex - stack.peek() - 1;\n        maxArea = Math.max(maxArea, width * height);\n      }\n      stack.push(columnIndex);\n    }\n\n    while (!stack.isEmpty()) {\n      int height = heights[stack.pop()];\n      int width =\n        stack.isEmpty() ? heights.length : heights.length - stack.peek() - 1;\n      maxArea = Math.max(maxArea, width * height);\n    }\n\n    return maxArea;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    boolean[][] land = new boolean[][] {\n      {false, true, true, true, false},\n      {false, false, false, true, false},\n      {false, false, false, false, false},\n      {false, true, true, true, true}};\n    int expected = 6;\n    int actual = new Program().largestPark(land);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    boolean[][] land = new boolean[][] {\n      {false, true, true, true, false},\n      {false, false, false, true, false},\n      {false, false, false, false, false},\n      {false, true, true, true, true}};\n    int expected = 6;\n    int actual = new Program().largestPark(land);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function largestPark(land) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the line below.\nexports.largestPark = largestPark;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(w * h) time | O(w) space - where w is the width of the input matrix and\n// h is the height of the input matrix\nfunction largestPark(land) {\n  const heights = new Array(land[0].length).fill(0);\n  let maxArea = 0;\n\n  for (const row of land) {\n    for (let columnIndex = 0; columnIndex < land[0].length; columnIndex++) {\n      heights[columnIndex] = row[columnIndex] === false ? heights[columnIndex] + 1 : 0;\n    }\n    maxArea = Math.max(maxArea, largestRectangleHistogram(heights));\n  }\n\n  return maxArea;\n}\n\nfunction largestRectangleHistogram(heights) {\n  const stack = [];\n  let maxArea = 0;\n\n  for (let columnIndex = 0; columnIndex < heights.length; columnIndex++) {\n    while (stack.length > 0 && heights[columnIndex] < heights[stack[stack.length - 1]]) {\n      const height = heights[stack.pop()];\n      const width = stack.length === 0 ? columnIndex : columnIndex - stack[stack.length - 1] - 1;\n      maxArea = Math.max(maxArea, width * height);\n    }\n    stack.push(columnIndex);\n  }\n\n  while (stack.length > 0) {\n    const height = heights[stack.pop()];\n    const width =\n      stack.length === 0 ? heights.length : heights.length - stack[stack.length - 1] - 1;\n    maxArea = Math.max(maxArea, width * height);\n  }\n\n  return maxArea;\n}\n\n// Do not edit the line below.\nexports.largestPark = largestPark;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const land = [\n    [false, true, true, true, false],\n    [false, false, false, true, false],\n    [false, false, false, false, false],\n    [false, true, true, true, true],\n  ];\n  const expected = 6;\n  const actual = program.largestPark(land);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const land = [\n    [false, true, true, true, false],\n    [false, false, false, true, false],\n    [false, false, false, false, false],\n    [false, true, true, true, true],\n  ];\n  const expected = 6;\n  const actual = program.largestPark(land);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun largestPark(land: MutableList<MutableList<Boolean>>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport java.util.Stack\nimport kotlin.math.max\n\n// O(w * h) time | O(w) space - where w is the width of the input matrix and\n// h is the height of the input matrix\nfun largestPark(land: MutableList<MutableList<Boolean>>): Int {\n    val heights = MutableList(land[0].size) { 0 }\n    var maxArea = 0\n\n    for (row in land) {\n        for (columnIndex in 0 until land[0].size) {\n            heights[columnIndex] = if (row[columnIndex] == false) heights[columnIndex] + 1 else 0\n        }\n        maxArea = max(maxArea, largestRectangleHistogram(heights))\n    }\n\n    return maxArea\n}\n\nfun largestRectangleHistogram(heights: List<Int>): Int {\n    val stack = Stack<Int>()\n    var maxArea = 0\n\n    for (columnIndex in 0 until heights.size) {\n        while (stack.size > 0 && heights[columnIndex] < heights[stack[stack.size - 1]]) {\n            val height = heights[stack.pop()]\n            val width = if (stack.size == 0) columnIndex else columnIndex - stack[stack.size - 1] - 1\n            maxArea = max(maxArea, width * height)\n        }\n        stack.push(columnIndex)\n    }\n\n    while (stack.size > 0) {\n        val height = heights[stack.pop()]\n        val width = if (stack.size == 0) heights.size else heights.size - stack[stack.size - 1] - 1\n        maxArea = max(maxArea, width * height)\n    }\n\n    return maxArea\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.largestPark\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val land = mutableListOf(\n            mutableListOf(false, true, true, true, false),\n            mutableListOf(false, false, false, true, false),\n            mutableListOf(false, false, false, false, false),\n            mutableListOf(false, true, true, true, true),\n        )\n        val expected = 6\n        val output = largestPark(land)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.largestPark\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val land = mutableListOf(\n            mutableListOf(false, true, true, true, false),\n            mutableListOf(false, false, false, true, false),\n            mutableListOf(false, false, false, false, false),\n            mutableListOf(false, true, true, true, true),\n        )\n        val expected = 6\n        val output = largestPark(land)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def largestPark(land):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(w * h) time | O(w) space - where w is the width of the input matrix and\n# h is the height of the input matrix\ndef largestPark(land):\n    heights = [0] * len(land[0])\n    maxArea = 0\n\n    for row in land:\n        for columnIndex in range(len(land[0])):\n            heights[columnIndex] = heights[columnIndex] + 1 if row[columnIndex] == False else 0\n        maxArea = max(maxArea, largestRectangleHistogram(heights))\n\n    return maxArea\n\n\ndef largestRectangleHistogram(heights):\n    stack = []\n    maxArea = 0\n\n    for columnIndex in range(len(heights)):\n        while len(stack) > 0 and heights[columnIndex] < heights[stack[-1]]:\n            height = heights[stack.pop()]\n            width = columnIndex if len(stack) == 0 else columnIndex - stack[-1] - 1\n            maxArea = max(maxArea, width * height)\n        stack.append(columnIndex)\n\n    while len(stack) > 0:\n        height = heights[stack.pop()]\n        width = len(heights) if len(stack) == 0 else len(heights) - stack[-1] - 1\n        maxArea = max(maxArea, width * height)\n\n    return maxArea\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        land = [\n            [False, True, True, True, False],\n            [False, False, False, True, False],\n            [False, False, False, False, False],\n            [False, True, True, True, True],\n        ]\n        expected = 6\n        actual = program.largestPark(land)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        land = [\n            [False, True, True, True, False],\n            [False, False, False, True, False],\n            [False, False, False, False, False],\n            [False, True, True, True, True],\n        ]\n        expected = 6\n        actual = program.largestPark(land)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "\nclass Program\n    def largestPark(land)\n        # Write your code here.\n        return -1\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n\nclass Program\n    def largestPark(land)\n        # Write your code here.\n        return -1\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.largestPark\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.largestPark\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func largestPark(_ land: [[Bool]]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(w * h) time | O(w) space - where w is the width of the input matrix and\n  // h is the height of the input matrix\n  func largestPark(_ land: [[Bool]]) -> Int {\n    var heights = Array(repeating: 0, count: land[0].count)\n    var maxArea = 0\n\n    for row in land {\n      for columnIndex in 0 ..< land[0].count {\n        heights[columnIndex] = row[columnIndex] == false ? heights[columnIndex] + 1 : 0\n      }\n      maxArea = max(maxArea, largestRectangleHistogram(heights))\n    }\n\n    return maxArea\n  }\n\n  func largestRectangleHistogram(_ heights: [Int]) -> Int {\n    var stack: [Int] = []\n    var maxArea = 0\n\n    for columnIndex in 0 ..< heights.count {\n      while !stack.isEmpty && heights[columnIndex] < heights[stack.last!] {\n        let height = heights[stack.removeLast()]\n        let width = stack.isEmpty ? columnIndex : columnIndex - stack.last! - 1\n        maxArea = max(maxArea, width * height)\n      }\n      stack.append(columnIndex)\n    }\n\n    while !stack.isEmpty {\n      let height = heights[stack.removeLast()]\n      let width = stack.isEmpty ? heights.count : heights.count - stack.last! - 1\n      maxArea = max(maxArea, width * height)\n    }\n\n    return maxArea\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var land = [\n        [false, true, true, true, false],\n        [false, false, false, true, false],\n        [false, false, false, false, false],\n        [false, true, true, true, true],\n      ]\n      var expected = 6\n      var actual = Program().largestPark(land)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var land = [\n        [false, true, true, true, false],\n        [false, false, false, true, false],\n        [false, false, false, false, false],\n        [false, true, true, true, true],\n      ]\n      var expected = 6\n      var actual = Program().largestPark(land)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function largestPark(land: boolean[][]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(w * h) time | O(w) space - where w is the width of the input matrix and\n// h is the height of the input matrix\nexport function largestPark(land: boolean[][]) {\n  const heights = new Array(land[0].length).fill(0);\n  let maxArea = 0;\n\n  for (const row of land) {\n    for (let columnIndex = 0; columnIndex < land[0].length; columnIndex++) {\n      heights[columnIndex] = row[columnIndex] === false ? heights[columnIndex] + 1 : 0;\n    }\n    maxArea = Math.max(maxArea, largestRectangleHistogram(heights));\n  }\n\n  return maxArea;\n}\n\nfunction largestRectangleHistogram(heights: number[]) {\n  const stack: number[] = [];\n  let maxArea = 0;\n\n  for (let columnIndex = 0; columnIndex < heights.length; columnIndex++) {\n    while (stack.length > 0 && heights[columnIndex] < heights[stack[stack.length - 1]]) {\n      const height = heights[stack.pop()!];\n      const width = stack.length === 0 ? columnIndex : columnIndex - stack[stack.length - 1] - 1;\n      maxArea = Math.max(maxArea, width * height);\n    }\n    stack.push(columnIndex);\n  }\n\n  while (stack.length > 0) {\n    const height = heights[stack.pop()!];\n    const width =\n      stack.length === 0 ? heights.length : heights.length - stack[stack.length - 1] - 1;\n    maxArea = Math.max(maxArea, width * height);\n  }\n\n  return maxArea;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const land = [\n    [false, true, true, true, false],\n    [false, false, false, true, false],\n    [false, false, false, false, false],\n    [false, true, true, true, true],\n  ];\n  const expected = 6;\n  const actual = program.largestPark(land);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const land = [\n    [false, true, true, true, false],\n    [false, false, false, true, false],\n    [false, false, false, false, false],\n    [false, true, true, true, true],\n  ];\n  const expected = 6;\n  const actual = program.largestPark(land);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "land",
      "example": [
        [
          true
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "type": "boolean"
          },
          "type": "array"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "land": [
        [
          true
        ]
      ]
    },
    {
      "land": [
        [
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          true,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          true,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          true
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          false,
          false,
          false
        ],
        [
          true,
          false,
          false,
          false,
          false
        ],
        [
          false,
          true,
          true,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true
        ],
        [
          true,
          true,
          true
        ],
        [
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false
        ],
        [
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          true,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          false,
          true,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          true,
          true,
          false,
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          false,
          true,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          true,
          true,
          false,
          true,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true
        ],
        [
          false
        ],
        [
          true
        ],
        [
          false
        ],
        [
          true
        ],
        [
          false
        ],
        [
          true
        ]
      ]
    },
    {
      "land": [
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ]
      ]
    },
    {
      "land": [
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          false,
          false
        ],
        [
          false,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false,
          false
        ],
        [
          false,
          true,
          false,
          true,
          true
        ],
        [
          false,
          true,
          true,
          false,
          false
        ],
        [
          false,
          true,
          false,
          false,
          true
        ],
        [
          true,
          false,
          true,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          true,
          false
        ],
        [
          true,
          false,
          true,
          true,
          false,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          true,
          false,
          false,
          true,
          true
        ],
        [
          true,
          true,
          false,
          true,
          true,
          false,
          false
        ],
        [
          false,
          true,
          false,
          true,
          false,
          false,
          false
        ],
        [
          false,
          true,
          false,
          false,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true,
          false,
          false,
          false
        ],
        [
          true,
          true,
          true,
          false,
          false,
          false
        ],
        [
          true,
          true,
          true,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          true,
          true,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          false,
          true,
          false,
          false
        ],
        [
          false,
          false,
          true,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          false,
          false,
          false
        ],
        [
          true,
          true,
          false,
          false,
          false,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          false
        ],
        [
          true,
          true,
          false,
          false,
          false,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          true
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          true,
          false,
          false,
          false,
          false,
          false,
          false,
          false
        ]
      ]
    }
  ],
  "jsonTests": [
    {
      "land": [
        [
          true
        ]
      ]
    },
    {
      "land": [
        [
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          true,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          true,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          false
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          true
        ],
        [
          false,
          false,
          false
        ],
        [
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          false,
          false,
          false
        ],
        [
          true,
          false,
          false,
          false,
          false
        ],
        [
          false,
          true,
          true,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true
        ],
        [
          true,
          true,
          true
        ],
        [
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false
        ],
        [
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          true,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          false,
          true,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          true,
          true,
          false,
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          false,
          true,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          true,
          true,
          false,
          true,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true
        ],
        [
          false
        ],
        [
          true
        ],
        [
          false
        ],
        [
          true
        ],
        [
          false
        ],
        [
          true
        ]
      ]
    },
    {
      "land": [
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ],
        [
          true
        ]
      ]
    },
    {
      "land": [
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ],
        [
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          true,
          false,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          false,
          false
        ],
        [
          false,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false,
          false
        ],
        [
          false,
          true,
          false,
          true,
          true
        ],
        [
          false,
          true,
          true,
          false,
          false
        ],
        [
          false,
          true,
          false,
          false,
          true
        ],
        [
          true,
          false,
          true,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          true,
          false
        ],
        [
          true,
          false,
          true,
          true,
          false,
          false,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          true,
          false,
          false,
          true,
          true
        ],
        [
          true,
          true,
          false,
          true,
          true,
          false,
          false
        ],
        [
          false,
          true,
          false,
          true,
          false,
          false,
          false
        ],
        [
          false,
          true,
          false,
          false,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ],
        [
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true,
          false,
          false,
          false
        ],
        [
          true,
          true,
          true,
          false,
          false,
          false
        ],
        [
          true,
          true,
          true,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          true
        ]
      ]
    },
    {
      "land": [
        [
          false,
          false,
          false,
          true,
          true,
          true
        ],
        [
          false,
          true,
          true,
          true,
          true,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          false,
          false,
          false,
          false,
          true
        ],
        [
          true,
          true,
          true,
          true,
          true,
          false
        ],
        [
          false,
          false,
          true,
          true,
          false,
          false
        ]
      ]
    },
    {
      "land": [
        [
          true,
          false,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          false,
          true,
          false,
          false
        ],
        [
          false,
          false,
          true,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          false,
          false,
          false,
          false
        ],
        [
          true,
          true,
          false,
          false,
          false,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          false
        ],
        [
          true,
          true,
          false,
          false,
          false,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          true
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          false,
          true,
          false,
          false,
          true
        ],
        [
          false,
          true,
          false,
          true,
          false,
          true,
          false,
          false,
          true,
          false,
          true,
          true,
          false,
          true,
          false
        ],
        [
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          true
        ],
        [
          true,
          false,
          true,
          true,
          false,
          true,
          false,
          true,
          true,
          false,
          false,
          true,
          false,
          false,
          false
        ],
        [
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          true,
          false,
          false,
          false,
          false,
          false,
          false,
          false
        ]
      ]
    }
  ],
  "changelog": []
}