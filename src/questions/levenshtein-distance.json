{
  "uid": "levenshtein-distance",
  "testStrategy": "JSON",
  "name": "Levenshtein Distance",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 26073,
    "failureCount": 8750
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "224893903",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1564
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in two strings and returns the minimum number of\n  edit operations that need to be performed on the first string to obtain the\n  second string.\n</p>\n<p>\n  There are three edit operations: insertion of a character, deletion of a\n  character, and substitution of a character for another.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">str1</span> = \"abc\"\n<span class=\"CodeEditor-promptParameter\">str2</span> = \"yabd\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n2 <span class=\"CodeEditor-promptComment\">// insert \"y\"; substitute \"c\" for \"d\"</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building a two-dimensional array of the minimum numbers of edits for pairs of substrings of the input strings. Let the rows of the array represent substrings of the second input string str2. Let the first row represent the empty string. Let each row i thereafter represent the substrings of str2 from 0 to i, with i excluded. Let the columns similarly represent the first input string str1.\n</p>\n",
    "\n<p>\nBuild up the array mentioned in Hint #1 one row at a time. In other words, find the minimum numbers of edits between all the substrings of str1 represented by the columns and the empty string represented by the first row, then between all the substrings of str1 represented by the columns and the first letter of str2 represented by the second row, etc., until you compare both full strings. Find a formula that relates the minimum number of edits at any given point to previous numbers.\n</p>\n",
    "\n<p>\nAt any position (i, j) in the two-dimensional array, if str2[i] is equal to str1[j], then the edit distance at position (i, j) is equal to the one at position (i - 1, j - 1), since adding str2[i] and str1[j] to the substrings represented at position (i - 1, j - 1) does not require any additional edit operation. If str2[i] is not equal to str1[j] however, then the edit distance at position (i, j) is equal to 1 + the minimum of the edit distances at positions (i - 1, j), (i, j - 1), and (i - 1, j - 1). Why is that the case?\n</p>\n",
    "\n<p>\nDo you really need to store the entire two-dimensional array mentioned in Hint #1? Identify what stored values you actually use throughout the process of building the array and come up with a way of storing only what you need and nothing more.\n</p>"
  ],
  "spaceTime": "O(nm) time | O(min(n, m)) space - where n and m are the lengths of the two input strings",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint levenshteinDistance(string str1, string str2) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(nm) time | O(nm) space\nint levenshteinDistance(string str1, string str2) {\n  vector<vector<int>> edits(\n    str2.length() + 1, vector<int>(str1.length() + 1, 0)\n  );\n  for (int i = 0; i < str2.length() + 1; i++) {\n    for (int j = 0; j < str1.length() + 1; j++) {\n      edits[i][j] = j;\n    }\n    edits[i][0] = i;\n  }\n  for (int i = 1; i < str2.length() + 1; i++) {\n    for (int j = 1; j < str1.length() + 1; j++) {\n      if (str2[i - 1] == str1[j - 1]) {\n        edits[i][j] = edits[i - 1][j - 1];\n      } else {\n        edits[i][j] =\n          1 + min(edits[i - 1][j - 1], min(edits[i - 1][j], edits[i][j - 1]));\n      }\n    }\n  }\n  return edits[str2.length()][str1.length()];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(nm) time | O(min(n, m)) space\nint levenshteinDistance(string str1, string str2) {\n  string small = str1.length() < str2.length() ? str1 : str2;\n  string big = str1.length() >= str2.length() ? str1 : str2;\n  vector<int> evenEdits(small.length() + 1);\n  vector<int> oddEdits(small.length() + 1);\n  for (int j = 0; j < small.length() + 1; j++) {\n    evenEdits[j] = j;\n  }\n\n  vector<int>* currentEdits;\n  vector<int>* previousEdits;\n  for (int i = 1; i < big.length() + 1; i++) {\n    if (i % 2 == 1) {\n      currentEdits = &oddEdits;\n      previousEdits = &evenEdits;\n    } else {\n      currentEdits = &evenEdits;\n      previousEdits = &oddEdits;\n    }\n\n    (*currentEdits)[0] = i;\n    for (int j = 1; j < small.length() + 1; j++) {\n      if (big[i - 1] == small[j - 1]) {\n        (*currentEdits)[j] = previousEdits->at(j - 1);\n      } else {\n        (*currentEdits)[j] =\n          1 + min(\n                previousEdits->at(j - 1),\n                min(previousEdits->at(j), currentEdits->at(j - 1))\n              );\n      }\n    }\n  }\n  return big.length() % 2 == 0 ? evenEdits[small.length()]\n                               : oddEdits[small.length()];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(levenshteinDistance(\"abc\", \"yabd\") == 2);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(levenshteinDistance(\"abc\", \"yabd\") == 2);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int LevenshteinDistance(string str1, string str2) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nm) time | O(nm) space\n  public static int LevenshteinDistance(string str1, string str2) {\n    int[,] edits = new int[str2.Length + 1, str1.Length + 1];\n    for (int i = 0; i < str2.Length + 1; i++) {\n      for (int j = 0; j < str1.Length + 1; j++) {\n        edits[i, j] = j;\n      }\n      edits[i, 0] = i;\n    }\n    for (int i = 1; i < str2.Length + 1; i++) {\n      for (int j = 1; j < str1.Length + 1; j++) {\n        if (str2[i - 1] == str1[j - 1]) {\n          edits[i, j] = edits[i - 1, j - 1];\n        } else {\n          edits[i, j] = 1 + Math.Min(\n                              edits[i - 1, j - 1],\n                              Math.Min(edits[i - 1, j], edits[i, j - 1])\n                            );\n        }\n      }\n    }\n    return edits[str2.Length, str1.Length];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nm) time | O(min(n, m)) space\n  public static int LevenshteinDistance(string str1, string str2) {\n    string small = str1.Length < str2.Length ? str1 : str2;\n    string big = str1.Length >= str2.Length ? str1 : str2;\n    int[] evenEdits = new int[small.Length + 1];\n    int[] oddEdits = new int[small.Length + 1];\n    for (int j = 0; j < small.Length + 1; j++) {\n      evenEdits[j] = j;\n    }\n    int[] currentEdits;\n    int[] previousEdits;\n    for (int i = 1; i < big.Length + 1; i++) {\n      if (i % 2 == 1) {\n        currentEdits = oddEdits;\n        previousEdits = evenEdits;\n      } else {\n        currentEdits = evenEdits;\n        previousEdits = oddEdits;\n      }\n      currentEdits[0] = i;\n      for (int j = 1; j < small.Length + 1; j++) {\n        if (big[i - 1] == small[j - 1]) {\n          currentEdits[j] = previousEdits[j - 1];\n        } else {\n          currentEdits[j] =\n            1 + Math.Min(\n                  previousEdits[j - 1],\n                  Math.Min(previousEdits[j], currentEdits[j - 1])\n                );\n        }\n      }\n    }\n    return big.Length % 2 == 0 ? evenEdits[small.Length]\n                               : oddEdits[small.Length];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.LevenshteinDistance(\"abc\", \"yabd\") == 2);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.LevenshteinDistance(\"abc\", \"yabd\") == 2);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc LevenshteinDistance(a, b string) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(nm) time | O(nm) space\nfunc LevenshteinDistance(a, b string) int {\n\tedits := make([][]int, len(b)+1)\n\tfor y := range edits {\n\t\tedits[y] = make([]int, len(a)+1)\n\t\tfor x := range edits[y] {\n\t\t\tedits[y][x] = x\n\t\t}\n\t}\n\tfor i := 1; i < len(b)+1; i++ {\n\t\tedits[i][0] = edits[i-1][0] + 1\n\t}\n\n\tfor i := 1; i < len(b)+1; i++ {\n\t\tfor j := 1; j < len(a)+1; j++ {\n\t\t\tif b[i-1] == a[j-1] {\n\t\t\t\tedits[i][j] = edits[i-1][j-1]\n\t\t\t} else {\n\t\t\t\tedits[i][j] = 1 + min(edits[i-1][j-1], edits[i-1][j], edits[i][j-1])\n\t\t\t}\n\t\t}\n\t}\n\treturn edits[len(b)][len(a)]\n}\n\nfunc min(args ...int) int {\n\tcurr := args[0]\n\tfor _, num := range args {\n\t\tif curr > num {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(nm) time | O(min(n, m)) space\nfunc LevenshteinDistance(a, b string) int {\n\tsmall, big := a, b\n\tif len(a) > len(b) {\n\t\tbig, small = small, big\n\t}\n\tevenEdits := make([]int, len(small)+1)\n\toddEdits := make([]int, len(small)+1)\n\tvar previousEdits, currentEdits []int\n\tfor i := range evenEdits {\n\t\tevenEdits[i] = i\n\t\toddEdits[i] = math.MinInt32\n\t}\n\tfor i := 1; i < len(big)+1; i++ {\n\t\tif i%2 == 1 {\n\t\t\tcurrentEdits, previousEdits = oddEdits, evenEdits\n\t\t} else {\n\t\t\tcurrentEdits, previousEdits = evenEdits, oddEdits\n\t\t}\n\t\tcurrentEdits[0] = i\n\t\tfor j := 1; j < len(small)+1; j++ {\n\t\t\tif big[i-1] == small[j-1] {\n\t\t\t\tcurrentEdits[j] = previousEdits[j-1]\n\t\t\t} else {\n\t\t\t\tcurrentEdits[j] = 1 + min(previousEdits[j-1], previousEdits[j], currentEdits[j-1])\n\t\t\t}\n\t\t}\n\t}\n\tif len(big)%2 == 0 {\n\t\treturn evenEdits[len(small)]\n\t}\n\treturn oddEdits[len(small)]\n}\n\nfunc min(args ...int) int {\n\tcurr := args[0]\n\tfor _, num := range args {\n\t\tif curr > num {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\trequire.Equal(t, LevenshteinDistance(\"abc\", \"yabd\"), 2)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\trequire.Equal(t, LevenshteinDistance(\"abc\", \"yabd\"), 2)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int levenshteinDistance(String str1, String str2) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nm) time | O(nm) space\n  public static int levenshteinDistance(String str1, String str2) {\n    int[][] edits = new int[str2.length() + 1][str1.length() + 1];\n    for (int i = 0; i < str2.length() + 1; i++) {\n      for (int j = 0; j < str1.length() + 1; j++) {\n        edits[i][j] = j;\n      }\n      edits[i][0] = i;\n    }\n    for (int i = 1; i < str2.length() + 1; i++) {\n      for (int j = 1; j < str1.length() + 1; j++) {\n        if (str2.charAt(i - 1) == str1.charAt(j - 1)) {\n          edits[i][j] = edits[i - 1][j - 1];\n        } else {\n          edits[i][j] = 1\n            + Math.min(\n              edits[i - 1][j - 1], Math.min(edits[i - 1][j], edits[i][j - 1])\n            );\n        }\n      }\n    }\n    return edits[str2.length()][str1.length()];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nm) time | O(min(n, m)) space\n  public static int levenshteinDistance(String str1, String str2) {\n    String small = str1.length() < str2.length() ? str1 : str2;\n    String big = str1.length() >= str2.length() ? str1 : str2;\n    int[] evenEdits = new int[small.length() + 1];\n    int[] oddEdits = new int[small.length() + 1];\n    for (int j = 0; j < small.length() + 1; j++) {\n      evenEdits[j] = j;\n    }\n\n    int[] currentEdits;\n    int[] previousEdits;\n    for (int i = 1; i < big.length() + 1; i++) {\n      if (i % 2 == 1) {\n        currentEdits = oddEdits;\n        previousEdits = evenEdits;\n      } else {\n        currentEdits = evenEdits;\n        previousEdits = oddEdits;\n      }\n      currentEdits[0] = i;\n      for (int j = 1; j < small.length() + 1; j++) {\n        if (big.charAt(i - 1) == small.charAt(j - 1)) {\n          currentEdits[j] = previousEdits[j - 1];\n        } else {\n          currentEdits[j] = 1\n            + Math.min(\n              previousEdits[j - 1],\n              Math.min(previousEdits[j], currentEdits[j - 1])\n            );\n        }\n      }\n    }\n    return big.length() % 2 == 0 ? evenEdits[small.length()]\n                                 : oddEdits[small.length()];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.levenshteinDistance(\"abc\", \"yabd\") == 2);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.levenshteinDistance(\"abc\", \"yabd\") == 2);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function levenshteinDistance(str1, str2) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.levenshteinDistance = levenshteinDistance;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm) time | O(nm) space\nfunction levenshteinDistance(str1, str2) {\n  const edits = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    const row = [];\n    for (let j = 0; j < str1.length + 1; j++) {\n      row.push(j);\n    }\n    row[0] = i;\n    edits.push(row);\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        edits[i][j] = edits[i - 1][j - 1];\n      } else {\n        edits[i][j] = 1 + Math.min(edits[i - 1][j - 1], edits[i - 1][j], edits[i][j - 1]);\n      }\n    }\n  }\n  return edits[str2.length][str1.length];\n}\n\nexports.levenshteinDistance = levenshteinDistance;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm) time | O(min(n, m)) space\nfunction levenshteinDistance(str1, str2) {\n  const small = str1.length < str2.length ? str1 : str2;\n  const big = str1.length >= str2.length ? str1 : str2;\n  const evenEdits = [];\n  const oddEdits = new Array(small.length + 1);\n  for (let j = 0; j < small.length + 1; j++) {\n    evenEdits.push(j);\n  }\n  for (let i = 1; i < big.length + 1; i++) {\n    let currentEdits, previousEdits;\n    if (i % 2 === 1) {\n      currentEdits = oddEdits;\n      previousEdits = evenEdits;\n    } else {\n      currentEdits = evenEdits;\n      previousEdits = oddEdits;\n    }\n    currentEdits[0] = i;\n    for (let j = 1; j < small.length + 1; j++) {\n      if (big[i - 1] === small[j - 1]) {\n        currentEdits[j] = previousEdits[j - 1];\n      } else {\n        currentEdits[j] = 1 + Math.min(previousEdits[j - 1], previousEdits[j], currentEdits[j - 1]);\n      }\n    }\n  }\n  return big.length % 2 === 0 ? evenEdits[small.length] : oddEdits[small.length];\n}\n\nexports.levenshteinDistance = levenshteinDistance;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.levenshteinDistance('abc', 'yabd')).to.deep.equal(2);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.levenshteinDistance('abc', 'yabd')).to.deep.equal(2);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun levenshteinDistance(str1: String, str2: String): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\n// O(nm) time | O(nm) space\nfun levenshteinDistance(str1: String, str2: String): Int {\n    val edits = List(str2.length + 1) { MutableList(str1.length + 1) { j -> j } }\n    for (i in 0 until str2.length + 1) {\n        for (j in 0 until str1.length + 1) {\n            edits[i][j] = j\n        }\n        edits[i][0] = i\n    }\n\n    for (i in 1 until str2.length + 1) {\n        for (j in 1 until str1.length + 1) {\n            if (str2[i - 1] == str1[j - 1]) {\n                edits[i][j] = edits[i - 1][j - 1]\n            } else {\n                edits[i][j] = 1 + min(edits[i - 1][j - 1], min(edits[i - 1][j], edits[i][j - 1]))\n            }\n        }\n    }\n    return edits[str2.length][str1.length]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\n// O(nm) time | O(min(n, m)) space\nfun levenshteinDistance(str1: String, str2: String): Int {\n    var small = if (str1.length < str2.length) str1 else str2\n    var big = if (str1.length >= str2.length) str1 else str2\n    val evenEdits = MutableList(small.length + 1) { j -> j }\n    val oddEdits = MutableList(small.length + 1) { j -> j }\n\n    var currentEdits: MutableList<Int>\n    var previousEdits: MutableList<Int>\n    for (i in 1 until big.length + 1) {\n        if (i % 2 == 1) {\n            currentEdits = oddEdits\n            previousEdits = evenEdits\n        } else {\n            currentEdits = evenEdits\n            previousEdits = oddEdits\n        }\n\n        currentEdits[0] = i\n        for (j in 1 until small.length + 1) {\n            if (big[i - 1] == small[j - 1]) {\n                currentEdits[j] = previousEdits[j - 1]\n            } else {\n                currentEdits[j] = 1 + min(previousEdits[j - 1], min(previousEdits[j], currentEdits[j - 1]))\n            }\n        }\n    }\n    return if (big.length % 2 == 0) evenEdits[small.length] else oddEdits[small.length]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.levenshteinDistance\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = levenshteinDistance(\"abc\", \"yabd\")\n        val expected = 2\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.levenshteinDistance\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = levenshteinDistance(\"abc\", \"yabd\")\n        val expected = 2\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def levenshteinDistance(str1, str2):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nm) time | O(nm) space\ndef levenshteinDistance(str1, str2):\n    edits = [[x for x in range(len(str1) + 1)] for y in range(len(str2) + 1)]\n    for i in range(1, len(str2) + 1):\n        edits[i][0] = edits[i - 1][0] + 1\n    for i in range(1, len(str2) + 1):\n        for j in range(1, len(str1) + 1):\n            if str2[i - 1] == str1[j - 1]:\n                edits[i][j] = edits[i - 1][j - 1]\n            else:\n                edits[i][j] = 1 + min(edits[i - 1][j - 1], edits[i - 1][j], edits[i][j - 1])\n    return edits[-1][-1]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nm) time | O(min(n, m)) space\ndef levenshteinDistance(str1, str2):\n    small = str1 if len(str1) < len(str2) else str2\n    big = str1 if len(str1) >= len(str2) else str2\n    evenEdits = [x for x in range(len(small) + 1)]\n    oddEdits = [None for x in range(len(small) + 1)]\n    for i in range(1, len(big) + 1):\n        if i % 2 == 1:\n            currentEdits = oddEdits\n            previousEdits = evenEdits\n        else:\n            currentEdits = evenEdits\n            previousEdits = oddEdits\n        currentEdits[0] = i\n        for j in range(1, len(small) + 1):\n            if big[i - 1] == small[j - 1]:\n                currentEdits[j] = previousEdits[j - 1]\n            else:\n                currentEdits[j] = 1 + min(\n                    previousEdits[j - 1], previousEdits[j], currentEdits[j - 1]\n                )\n    return evenEdits[-1] if len(big) % 2 == 0 else oddEdits[-1]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.levenshteinDistance(\"abc\", \"yabd\"), 2)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.levenshteinDistance(\"abc\", \"yabd\"), 2)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def levenshteinDistance(str1, str2)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def levenshteinDistance(str1, str2)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def levenshteinDistance(str1, str2)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.levenshteinDistance\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.levenshteinDistance\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func levenshteinDistance(firstString: String, secondString: String) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nd) time | O(nm) space)\n  func levenshteinDistance(firstString: String, secondString: String) -> Int {\n    var edits = [[Int]]()\n\n    for i in 0 ..< firstString.count + 1 {\n      var row = [Int]()\n\n      for j in 0 ..< secondString.count + 1 {\n        row.append(j)\n      }\n\n      row[0] = i\n      edits.append(row)\n    }\n\n    for i in 1 ..< firstString.count + 1 {\n      for j in 1 ..< secondString.count + 1 {\n        let firstIndex = firstString.index(firstString.startIndex, offsetBy: i - 1)\n        let secondIndex = secondString.index(secondString.startIndex, offsetBy: j - 1)\n\n        if firstString[firstIndex] == secondString[secondIndex] {\n          edits[i][j] = edits[i - 1][j - 1]\n        } else {\n          edits[i][j] = 1 + min(edits[i - 1][j - 1], min(edits[i][j - 1], edits[i - 1][j]))\n        }\n      }\n    }\n\n    return edits[firstString.count][secondString.count]\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nd) time | O(min(n, m) space)\n  func levenshteinDistance(firstString: String, secondString: String) -> Int {\n    let small = firstString.count < secondString.count ? firstString : secondString\n    let big = firstString.count >= secondString.count ? firstString : secondString\n\n    var evenEdits = [Int]()\n    var oddEdits = Array(repeating: 0, count: small.count + 1)\n\n    for i in 0 ..< small.count + 1 {\n      evenEdits.append(i)\n    }\n\n    for i in 1 ..< big.count + 1 {\n      if i % 2 == 1 {\n        optimizedLevenshteinHelper(bigIndex: i, smallString: small, bigString: big, currentEdits: &oddEdits, previousEdits: &evenEdits)\n      } else {\n        optimizedLevenshteinHelper(bigIndex: i, smallString: small, bigString: big, currentEdits: &evenEdits, previousEdits: &oddEdits)\n      }\n    }\n\n    return big.count % 2 == 0 ? evenEdits[small.count] : oddEdits[small.count]\n  }\n\n  func optimizedLevenshteinHelper(bigIndex: Int, smallString: String, bigString: String, currentEdits: inout [Int], previousEdits: inout [Int]) {\n    currentEdits[0] = bigIndex\n\n    for j in 1 ..< smallString.count + 1 {\n      let firstIndex = bigString.index(bigString.startIndex, offsetBy: bigIndex - 1)\n      let secondIndex = smallString.index(smallString.startIndex, offsetBy: j - 1)\n\n      if bigString[firstIndex] == smallString[secondIndex] {\n        currentEdits[j] = previousEdits[j - 1]\n      } else {\n        currentEdits[j] = 1 + min(previousEdits[j], min(previousEdits[j - 1], currentEdits[j - 1]))\n      }\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.levenshteinDistance(firstString: \"abc\", secondString: \"yabd\")\n      try assertEqual(2, output)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.levenshteinDistance(firstString: \"abc\", secondString: \"yabd\")\n      try assertEqual(2, output)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function levenshteinDistance(str1: string, str2: string) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm) time | O(nm) space\nexport function levenshteinDistance(str1: string, str2: string) {\n  const edits: number[][] = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    const row: number[] = [];\n    for (let j = 0; j < str1.length + 1; j++) {\n      row.push(j);\n    }\n    row[0] = i;\n    edits.push(row);\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        edits[i][j] = edits[i - 1][j - 1];\n      } else {\n        edits[i][j] = 1 + Math.min(edits[i - 1][j - 1], edits[i - 1][j], edits[i][j - 1]);\n      }\n    }\n  }\n  return edits[str2.length][str1.length];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nm) time | O(min(n, m)) space\nexport function levenshteinDistance(str1: string, str2: string) {\n  const small = str1.length < str2.length ? str1 : str2;\n  const big = str1.length >= str2.length ? str1 : str2;\n  const evenEdits: number[] = [];\n  const oddEdits: number[] = new Array(small.length + 1);\n  for (let j = 0; j < small.length + 1; j++) {\n    evenEdits.push(j);\n  }\n  for (let i = 1; i < big.length + 1; i++) {\n    let currentEdits, previousEdits;\n    if (i % 2 === 1) {\n      currentEdits = oddEdits;\n      previousEdits = evenEdits;\n    } else {\n      currentEdits = evenEdits;\n      previousEdits = oddEdits;\n    }\n    currentEdits[0] = i;\n    for (let j = 1; j < small.length + 1; j++) {\n      if (big[i - 1] === small[j - 1]) {\n        currentEdits[j] = previousEdits[j - 1];\n      } else {\n        currentEdits[j] = 1 + Math.min(previousEdits[j - 1], previousEdits[j], currentEdits[j - 1]);\n      }\n    }\n  }\n  return big.length % 2 === 0 ? evenEdits[small.length] : oddEdits[small.length];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.levenshteinDistance('abc', 'yabd')).to.deep.equal(2);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.levenshteinDistance('abc', 'yabd')).to.deep.equal(2);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "str1",
      "example": "abc",
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "str2",
      "example": "yabd",
      "schema": {
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "str1": "abc",
      "str2": "yabd"
    },
    {
      "str1": "",
      "str2": ""
    },
    {
      "str1": "",
      "str2": "abc"
    },
    {
      "str1": "abc",
      "str2": "abc"
    },
    {
      "str1": "abc",
      "str2": "abx"
    },
    {
      "str1": "abc",
      "str2": "abcx"
    },
    {
      "str1": "abc",
      "str2": "yabcx"
    },
    {
      "str1": "algoexpert",
      "str2": "algozexpert"
    },
    {
      "str1": "abcdefghij",
      "str2": "1234567890"
    },
    {
      "str1": "abcdefghij",
      "str2": "a234567890"
    },
    {
      "str1": "biting",
      "str2": "mitten"
    },
    {
      "str1": "cereal",
      "str2": "saturday"
    },
    {
      "str1": "cereal",
      "str2": "saturdzz"
    },
    {
      "str1": "abbbbbbbbb",
      "str2": "bbbbbbbbba"
    },
    {
      "str1": "xabc",
      "str2": "abcx"
    },
    {
      "str1": "table",
      "str2": "bal"
    },
    {
      "str1": "gumbo",
      "str2": "gambol"
    }
  ],
  "jsonTests": [
    {
      "str1": "abc",
      "str2": "yabd"
    },
    {
      "str1": "",
      "str2": ""
    },
    {
      "str1": "",
      "str2": "abc"
    },
    {
      "str1": "abc",
      "str2": "abc"
    },
    {
      "str1": "abc",
      "str2": "abx"
    },
    {
      "str1": "abc",
      "str2": "abcx"
    },
    {
      "str1": "abc",
      "str2": "yabcx"
    },
    {
      "str1": "algoexpert",
      "str2": "algozexpert"
    },
    {
      "str1": "abcdefghij",
      "str2": "1234567890"
    },
    {
      "str1": "abcdefghij",
      "str2": "a234567890"
    },
    {
      "str1": "biting",
      "str2": "mitten"
    },
    {
      "str1": "cereal",
      "str2": "saturday"
    },
    {
      "str1": "cereal",
      "str2": "saturdzz"
    },
    {
      "str1": "abbbbbbbbb",
      "str2": "bbbbbbbbba"
    },
    {
      "str1": "xabc",
      "str2": "abcx"
    },
    {
      "str1": "table",
      "str2": "bal"
    },
    {
      "str1": "gumbo",
      "str2": "gambol"
    }
  ],
  "changelog": []
}