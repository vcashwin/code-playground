{
  "uid": "longest-peak",
  "testStrategy": "JSON",
  "name": "Longest Peak",
  "version": 0,
  "releaseDate": "2020-03-29T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": true,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 49662,
    "failureCount": 20772
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "400907692",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1583
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns the length of\n  the longest peak in the array.\n</p>\n<p>\n  A peak is defined as adjacent integers in the array that are <b>strictly</b>\n  increasing until they reach a tip (the highest value in the peak), at which\n  point they become <b>strictly</b> decreasing. At least three integers are required to\n  form a peak.\n</p>\n<p>\n  For example, the integers <span>1, 4, 10, 2</span> form a peak, but the\n  integers <span>4, 0, 10</span> don't and neither do the integers\n  <span>1, 2, 2, 0</span>. Similarly, the integers <span>1, 2, 3</span> don't\n  form a peak because there aren't any strictly decreasing integers after the\n  <span>3</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n6 <span class=\"CodeEditor-promptComment\">// 0, 10, 6, 5, -1, -3</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nYou can solve this question by iterating through the array from left to right once.\n</p>\n",
    "\n<p>\nIterate through the array from left to right, and treat every integer as the potential tip of a peak. To be the tip of a peak, an integer has to be strictly greater than its adjacent integers. What can you do when you find an actual tip?\n</p>\n",
    "\n<p>\nAs you iterate through the array from left to right, whenever you find a tip of a peak, expand outwards from the tip until you no longer have a peak. Given what peaks look like and how many peaks can therefore fit in an array, realize that this process results in a linear-time algorithm. Make sure to keep track of the longest peak you find as you iterate through the array.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint longestPeak(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the input array\nint longestPeak(vector<int> array) {\n  int longestPeakLength = 0;\n  int i = 1;\n  while (i < int(array.size() - 1)) {\n    bool isPeak = array[i - 1] < array[i] && array[i] > array[i + 1];\n    if (!isPeak) {\n      i += 1;\n      continue;\n    }\n\n    int leftIdx = i - 2;\n    while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n      leftIdx -= 1;\n    }\n\n    int rightIdx = i + 2;\n    while (rightIdx < array.size() && array[rightIdx] < array[rightIdx - 1]) {\n      rightIdx += 1;\n    }\n    int currentPeakLength = rightIdx - leftIdx - 1;\n    longestPeakLength = max(longestPeakLength, currentPeakLength);\n    i = rightIdx;\n  }\n  return longestPeakLength;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3};\n      int expected = 6;\n      int actual = longestPeak(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3};\n      int expected = 6;\n      int actual = longestPeak(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int LongestPeak(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public static int LongestPeak(int[] array) {\n    int longestPeakLength = 0;\n    int i = 1;\n    while (i < array.Length - 1) {\n      bool isPeak = array[i - 1] < array[i] && array[i] > array[i + 1];\n      if (!isPeak) {\n        i += 1;\n        continue;\n      }\n\n      int leftIdx = i - 2;\n      while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n        leftIdx -= 1;\n      }\n\n      int rightIdx = i + 2;\n      while (rightIdx < array.Length && array[rightIdx] < array[rightIdx - 1]) {\n        rightIdx += 1;\n      }\n      int currentPeakLength = rightIdx - leftIdx - 1;\n      if (currentPeakLength > longestPeakLength) {\n        longestPeakLength = currentPeakLength;\n      }\n      i = rightIdx;\n    }\n    return longestPeakLength;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3 };\n    var expected = 6;\n    var actual = Program.LongestPeak(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3 };\n    var expected = 6;\n    var actual = Program.LongestPeak(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc LongestPeak(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunc LongestPeak(array []int) int {\n\tlongestPeakLength := 0\n\ti := 1\n\tfor i < len(array)-1 {\n\t\tisPeak := array[i-1] < array[i] && array[i] > array[i+1]\n\t\tif !isPeak {\n\t\t\ti += 1\n\t\t\tcontinue\n\t\t}\n\n\t\tleftIdx := i - 2\n\t\tfor leftIdx >= 0 && array[leftIdx] < array[leftIdx+1] {\n\t\t\tleftIdx -= 1\n\t\t}\n\n\t\trightIdx := i + 2\n\t\tfor rightIdx < len(array) && array[rightIdx] < array[rightIdx-1] {\n\t\t\trightIdx += 1\n\t\t}\n\t\tcurrentPeakLength := rightIdx - leftIdx - 1\n\t\tif currentPeakLength > longestPeakLength {\n\t\t\tlongestPeakLength = currentPeakLength\n\t\t}\n\t\ti = rightIdx\n\t}\n\treturn longestPeakLength\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3}\n\tactual := LongestPeak(array)\n\trequire.Equal(t, 6, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3}\n\tactual := LongestPeak(array)\n\trequire.Equal(t, 6, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int longestPeak(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public static int longestPeak(int[] array) {\n    int longestPeakLength = 0;\n    int i = 1;\n    while (i < array.length - 1) {\n      boolean isPeak = array[i - 1] < array[i] && array[i] > array[i + 1];\n      if (!isPeak) {\n        i += 1;\n        continue;\n      }\n\n      int leftIdx = i - 2;\n      while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n        leftIdx -= 1;\n      }\n\n      int rightIdx = i + 2;\n      while (rightIdx < array.length && array[rightIdx] < array[rightIdx - 1]) {\n        rightIdx += 1;\n      }\n      int currentPeakLength = rightIdx - leftIdx - 1;\n      if (currentPeakLength > longestPeakLength) {\n        longestPeakLength = currentPeakLength;\n      }\n      i = rightIdx;\n    }\n    return longestPeakLength;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3};\n    var expected = 6;\n    var actual = Program.longestPeak(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3};\n    var expected = 6;\n    var actual = Program.longestPeak(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function longestPeak(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.longestPeak = longestPeak;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction longestPeak(array) {\n  let longestPeakLength = 0;\n  let i = 1;\n  while (i < array.length - 1) {\n    const isPeak = array[i - 1] < array[i] && array[i + 1] < array[i];\n    if (!isPeak) {\n      i++;\n      continue;\n    }\n\n    let leftIdx = i - 2;\n    while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n      leftIdx--;\n    }\n    let rightIdx = i + 2;\n    while (rightIdx < array.length && array[rightIdx] < array[rightIdx - 1]) {\n      rightIdx++;\n    }\n\n    const currentPeakLength = rightIdx - leftIdx - 1;\n    longestPeakLength = Math.max(longestPeakLength, currentPeakLength);\n    i = rightIdx;\n  }\n  return longestPeakLength;\n}\n\nexports.longestPeak = longestPeak;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3];\n  const expected = 6;\n  chai.expect(program.longestPeak(array)).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3];\n  const expected = 6;\n  chai.expect(program.longestPeak(array)).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun longestPeak(array: List<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(n) time | O(1) space - where n is the length of the input array\nfun longestPeak(array: List<Int>): Int {\n    var longestPeakLength: Int = 0\n    var i = 1\n    while (i < array.size - 1) {\n        val isPeak = array[i - 1] < array[i] && array[i + 1] < array[i]\n        if (!isPeak) {\n            i++\n            continue\n        }\n\n        var leftIdx = i - 2\n        while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n            leftIdx--\n        }\n        var rightIdx = i + 2\n        while (rightIdx < array.size && array[rightIdx] < array[rightIdx - 1]) {\n            rightIdx++\n        }\n\n        val currentPeakLength = rightIdx - leftIdx - 1\n        longestPeakLength = max(longestPeakLength, currentPeakLength)\n        i = rightIdx\n    }\n    return longestPeakLength\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.longestPeak as longestPeak\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf<Int>(1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3)\n        val expected = 6\n        val output = longestPeak(array)\n        assert(output == expected)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.longestPeak as longestPeak\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf<Int>(1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3)\n        val expected = 6\n        val output = longestPeak(array)\n        assert(output == expected)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def longestPeak(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef longestPeak(array):\n    longestPeakLength = 0\n    i = 1\n    while i < len(array) - 1:\n        isPeak = array[i - 1] < array[i] and array[i] > array[i + 1]\n        if not isPeak:\n            i += 1\n            continue\n\n        leftIdx = i - 2\n        while leftIdx >= 0 and array[leftIdx] < array[leftIdx + 1]:\n            leftIdx -= 1\n        rightIdx = i + 2\n        while rightIdx < len(array) and array[rightIdx] < array[rightIdx - 1]:\n            rightIdx += 1\n\n        currentPeakLength = rightIdx - leftIdx - 1\n        longestPeakLength = max(longestPeakLength, currentPeakLength)\n        i = rightIdx\n    return longestPeakLength\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]\n        expected = 6\n        self.assertEqual(program.longestPeak(array), expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]\n        expected = 6\n        self.assertEqual(program.longestPeak(array), expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def longestPeak(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def longestPeak(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.longestPeak\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.longestPeak\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func longestPeak(array: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  func longestPeak(array: [Int]) -> Int {\n    var longestPeakLength = 0\n    var i = 1\n    while i < array.count - 1 {\n      let isPeak = array[i - 1] < array[i] && array[i] > array[i + 1]\n      if !isPeak {\n        i += 1\n        continue\n      }\n\n      var leftIdx = i - 2\n      while leftIdx >= 0, array[leftIdx] < array[leftIdx + 1] {\n        leftIdx -= 1\n      }\n\n      var rightIdx = i + 2\n      while rightIdx < array.count, array[rightIdx] < array[rightIdx - 1] {\n        rightIdx += 1\n      }\n\n      let currentPeakLength = rightIdx - leftIdx - 1\n      if currentPeakLength > longestPeakLength {\n        longestPeakLength = currentPeakLength\n      }\n      i = rightIdx\n    }\n    return longestPeakLength\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]\n      let expected = 6\n      let actual = program.longestPeak(array: array)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]\n      let expected = 6\n      let actual = program.longestPeak(array: array)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function longestPeak(array: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function longestPeak(array: number[]) {\n  let longestPeakLength = 0;\n  let i = 1;\n  while (i < array.length - 1) {\n    const isPeak = array[i - 1] < array[i] && array[i + 1] < array[i];\n    if (!isPeak) {\n      i++;\n      continue;\n    }\n\n    let leftIdx = i - 2;\n    while (leftIdx >= 0 && array[leftIdx] < array[leftIdx + 1]) {\n      leftIdx--;\n    }\n    let rightIdx = i + 2;\n    while (rightIdx < array.length && array[rightIdx] < array[rightIdx - 1]) {\n      rightIdx++;\n    }\n\n    const currentPeakLength = rightIdx - leftIdx - 1;\n    longestPeakLength = Math.max(longestPeakLength, currentPeakLength);\n    i = rightIdx;\n  }\n  return longestPeakLength;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3];\n  const expected = 6;\n  chai.expect(program.longestPeak(array)).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3];\n  const expected = 6;\n  chai.expect(program.longestPeak(array)).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        2,
        3,
        3,
        4,
        0,
        10,
        6,
        5,
        -1,
        -3,
        2,
        3
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        2,
        3,
        3,
        4,
        0,
        10,
        6,
        5,
        -1,
        -3,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        1
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1,
        2,
        1
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1,
        2,
        10,
        12,
        -3,
        5,
        6,
        7,
        10
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1,
        2,
        10,
        12
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        100,
        1000
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        2,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        2,
        3,
        10,
        12,
        -3,
        -3,
        2,
        3,
        45,
        800,
        99,
        98,
        0,
        -1,
        -1,
        2,
        3,
        4,
        5,
        0,
        -1,
        -1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        3,
        4,
        0,
        10
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        2,
        3,
        3,
        4,
        0,
        10,
        6,
        5,
        -1,
        -3,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        1
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1,
        2,
        1
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1,
        2,
        10,
        12,
        -3,
        5,
        6,
        7,
        10
      ]
    },
    {
      "array": [
        5,
        4,
        3,
        2,
        1,
        2,
        10,
        12
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        100,
        1000
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        2,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        2,
        3,
        10,
        12,
        -3,
        -3,
        2,
        3,
        45,
        800,
        99,
        98,
        0,
        -1,
        -1,
        2,
        3,
        4,
        5,
        0,
        -1,
        -1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        3,
        4,
        0,
        10
      ]
    }
  ],
  "changelog": []
}