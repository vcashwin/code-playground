{
  "uid": "max-path-sum-in-binary-tree",
  "testStrategy": "JSON",
  "name": "Max Path Sum In Binary Tree",
  "version": 0,
  "releaseDate": "2018-10-20T00:00:00Z",
  "category": "Binary Trees",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 16376,
    "failureCount": 6345
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "291379597",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2142
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a Binary Tree and returns its max path sum.\n</p>\n<p>\n  A path is a collection of connected nodes in a tree, where no node is\n  connected to more than two other nodes; a path sum is the sum of the values of\n  the nodes in a particular path.\n</p>\n<p>\n  Each <span>BinaryTree</span> node has an integer <span>value</span>, a\n  <span>left</span> child node, and a <span>right</span> child node. Children\n  nodes can either be <span>BinaryTree</span> nodes themselves or\n  <span>None</span> / <span>null</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> = 1\n    /     \\\n   2       3\n /   \\   /   \\\n4     5 6     7\n</pre>\n<h3>Sample Output</h3>\n<pre>\n18 <span class=\"CodeEditor-promptComment\">// 5 + 2 + 1 + 3 + 7</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nIf you were to imagine each node in a Binary Tree as the root of the Binary Tree, temporarily eliminating all of the nodes that come above it, how would you find the max path sum for each of these newly imagined Binary Trees? In simpler terms, how can you find the max path sum for each subtree in the Binary Tree?\n</p>\n",
    "\n<p>\nFor every node in a Binary Tree, there are four options for the max path sum that includes its value: the node's value alone, the node's value plus the max path sum of its left subtree, the node's value plus the max path sum of its right subtree, or the node's value plus the max path sum of both its subtrees.\n</p>\n",
    "\n<p>\nA recursive algorithm that computes each node's max path sum and uses it to compute its parents' nodes' max path sums seems appropriate, but realize that you cannot have a path going through a node and both its subtrees as well as that node's parent node. In other words, the fourth option mentioned in Hint #2 poses a challenge to implementing a recursive algorithm that solves this problem. How can you get around it?\n</p>"
  ],
  "spaceTime": "O(n) time | O(log(n)) space - where n is the number of nodes in the Binary Tree",
  "notes": "<div class=\"html\">\n<p>\n  In the video explanation, we forget to handle the edge case where all nodes in\n  the input Binary Tree have negative values.\n</p>\n<p>\n  In this case, the <span>maxPathSum</span> is guaranteed to be negative, since\n  there are no positive-valued nodes.\n</p>\n<p>\n  This means that we can't set the base-case\n  <span>leftMaxPathSum</span> and <span>rightMaxPathSum</span> values, when the\n  left and / or right child nodes are <span>null</span>, to 0. Setting them to 0\n  means that the final <span>maxPathSum</span> will always be 0, since the final\n  computation in our recursive method will compare 0 to a negative value.\n</p>\n<pre>\nmaxPathSum = max(leftMaxPathSum, rightMaxPathSum, maxSumAsRootNode)\n</pre>\n<p>\n  This operation will always yield 0 when <span>maxSumAsRootNode</span> is\n  negative and <span>leftMaxPathSum</span> and / or\n  <span>rightMaxPathSum</span> are 0.\n</p>\n<p>\n  Therefore, we set the base-case <span>leftMaxPathSum</span> and\n  <span>rightMaxPathSum</span> values, when the left and / or right child nodes\n  are <span>null</span>, to <span>-Infinity</span> (or whatever the min number\n  in your programming language is).\n</p>\n<pre>\nif tree is None:\n    return (0, float(\"-inf\"))\n</pre>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": "tree",
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left;\n  BinaryTree* right;\n\n  BinaryTree(int value);\n  void insert(vector<int> values, int i = 0);\n};\n\nint maxPathSum(BinaryTree tree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left;\n  BinaryTree* right;\n\n  BinaryTree(int value);\n  void insert(vector<int> values, int i = 0);\n};\n\nvector<int> findMaxSum(BinaryTree* tree);\n\n// O(n) time | O(log(n)) space\nint maxPathSum(BinaryTree tree) {\n  vector<int> maxSumArray = findMaxSum(&tree);\n  return maxSumArray[1];\n}\n\nvector<int> findMaxSum(BinaryTree* tree) {\n  if (tree == nullptr) {\n    return vector<int>{0, INT_MIN};\n  }\n\n  vector<int> leftMaxSumArray = findMaxSum(tree->left);\n  int leftMaxSumAsBranch = leftMaxSumArray[0];\n  int leftMaxPathSum = leftMaxSumArray[1];\n\n  vector<int> rightMaxSumArray = findMaxSum(tree->right);\n  int rightMaxSumAsBranch = rightMaxSumArray[0];\n  int rightMaxPathSum = rightMaxSumArray[1];\n\n  int maxChildSumAsBranch = max(leftMaxSumAsBranch, rightMaxSumAsBranch);\n  int maxSumAsBranch = max(maxChildSumAsBranch + tree->value, tree->value);\n  int maxSumAsRootNode =\n    max(leftMaxSumAsBranch + tree->value + rightMaxSumAsBranch, maxSumAsBranch);\n  int maxPathSum = max(leftMaxPathSum, max(rightMaxPathSum, maxSumAsRootNode));\n\n  return vector<int>{maxSumAsBranch, maxPathSum};\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\n#include <deque>\n\nBinaryTree::BinaryTree(int value) {\n  this->value = value;\n  this->left = nullptr;\n  this->right = nullptr;\n}\n\nvoid BinaryTree::insert(vector<int> values, int i) {\n  if (i >= values.size()) {\n    return;\n  }\n  deque<BinaryTree*> queue;\n  queue.push_back(this);\n  while (queue.size() > 0) {\n    BinaryTree* current = queue.front();\n    queue.pop_front();\n    if (current->left == nullptr) {\n      current->left = new BinaryTree(values[i]);\n      break;\n    }\n    queue.push_back(current->left);\n    if (current->right == nullptr) {\n      current->right = new BinaryTree(values[i]);\n      break;\n    }\n    queue.push_back(current->right);\n  }\n  this->insert(values, i + 1);\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree test(1);\n      test.insert({2, 3, 4, 5, 6, 7});\n      assert(maxPathSum(test) == 18);\n    });\n  }\n};\n",
      "unitTests": "#include <deque>\n\nBinaryTree::BinaryTree(int value) {\n  this->value = value;\n  this->left = nullptr;\n  this->right = nullptr;\n}\n\nvoid BinaryTree::insert(vector<int> values, int i) {\n  if (i >= values.size()) {\n    return;\n  }\n  deque<BinaryTree*> queue;\n  queue.push_back(this);\n  while (queue.size() > 0) {\n    BinaryTree* current = queue.front();\n    queue.pop_front();\n    if (current->left == nullptr) {\n      current->left = new BinaryTree(values[i]);\n      break;\n    }\n    queue.push_back(current->left);\n    if (current->right == nullptr) {\n      current->right = new BinaryTree(values[i]);\n      break;\n    }\n    queue.push_back(current->right);\n  }\n  this->insert(values, i + 1);\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree test(1);\n      test.insert({2, 3, 4, 5, 6, 7});\n      assert(maxPathSum(test) == 18);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int MaxPathSum(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left;\n    public BinaryTree right;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(log(n)) space\n  public static int MaxPathSum(BinaryTree tree) {\n    List<int> maxSumArray = findMaxSum(tree);\n    return maxSumArray[1];\n  }\n\n  public static List<int> findMaxSum(BinaryTree tree) {\n    if (tree == null) {\n      return new List<int>() { 0, Int32.MinValue };\n    }\n    List<int> leftMaxSumArray = findMaxSum(tree.left);\n    int leftMaxSumAsBranch = leftMaxSumArray[0];\n    int leftMaxPathSum = leftMaxSumArray[1];\n\n    List<int> rightMaxSumArray = findMaxSum(tree.right);\n    int rightMaxSumAsBranch = rightMaxSumArray[0];\n    int rightMaxPathSum = rightMaxSumArray[1];\n\n    int maxChildSumAsBranch = Math.Max(leftMaxSumAsBranch, rightMaxSumAsBranch);\n    int maxSumAsBranch = Math.Max(maxChildSumAsBranch + tree.value, tree.value);\n    int maxSumAsRootNode = Math.Max(\n      leftMaxSumAsBranch + tree.value + rightMaxSumAsBranch, maxSumAsBranch\n    );\n    int maxPathSum =\n      Math.Max(leftMaxPathSum, Math.Max(rightMaxPathSum, maxSumAsRootNode));\n\n    return new List<int>() { maxSumAsBranch, maxPathSum };\n  }\n\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left;\n    public BinaryTree right;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    TestBinaryTree test = new TestBinaryTree(1);\n    test.insert(new int[] { 2, 3, 4, 5, 6, 7 }, 0);\n    Utils.AssertTrue(Program.MaxPathSum(test) == 18);\n  }\n\n  public class TestBinaryTree : Program.BinaryTree {\n    public TestBinaryTree(int value) : base(value) {}\n\n    public void insert(int[] values, int i) {\n      if (i >= values.Length) {\n        return;\n      }\n      List<Program.BinaryTree> queue = new List<Program.BinaryTree>();\n      queue.Add(this);\n      var index = 0;\n      while (index < queue.Count) {\n        Program.BinaryTree current = queue[index];\n        index += 1;\n        if (current.left == null) {\n          current.left = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.Add(current.left);\n        if (current.right == null) {\n          current.right = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.Add(current.right);\n      }\n      insert(values, i + 1);\n    }\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    TestBinaryTree test = new TestBinaryTree(1);\n    test.insert(new int[] { 2, 3, 4, 5, 6, 7 }, 0);\n    Utils.AssertTrue(Program.MaxPathSum(test) == 18);\n  }\n\n  public class TestBinaryTree : Program.BinaryTree {\n    public TestBinaryTree(int value) : base(value) {}\n\n    public void insert(int[] values, int i) {\n      if (i >= values.Length) {\n        return;\n      }\n      List<Program.BinaryTree> queue = new List<Program.BinaryTree>();\n      queue.Add(this);\n      var index = 0;\n      while (index < queue.Count) {\n        Program.BinaryTree current = queue[index];\n        index += 1;\n        if (current.left == null) {\n          current.left = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.Add(current.left);\n        if (current.right == null) {\n          current.right = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.Add(current.right);\n      }\n      insert(values, i + 1);\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\ntype BinaryTree struct {\n\tValue       int\n\tLeft, Right *BinaryTree\n}\n\nfunc MaxPathSum(tree *BinaryTree) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\ntype BinaryTree struct {\n\tValue       int\n\tLeft, Right *BinaryTree\n}\n\n// O(n) time | O(log(n)) space\nfunc MaxPathSum(tree *BinaryTree) int {\n\t_, maxSum := findMaxSum(tree)\n\treturn maxSum\n}\n\nfunc findMaxSum(tree *BinaryTree) (int, int) {\n\tif tree == nil {\n\t\treturn 0, math.MinInt32\n\t}\n\tleftMaxSumAsBranch, leftMaxPathSum := findMaxSum(tree.Left)\n\trightMaxSumAsBranch, rightMaxPathSum := findMaxSum(tree.Right)\n\tmaxChildSumAsBranch := max(leftMaxSumAsBranch, rightMaxSumAsBranch)\n\n\tvalue := tree.Value\n\tmaxSumAsBranch := max(maxChildSumAsBranch+value, value)\n\tmaxSumAsRootNode := max(leftMaxSumAsBranch+value+rightMaxSumAsBranch, maxSumAsBranch)\n\tmaxPathSum := max(leftMaxPathSum, rightMaxPathSum, maxSumAsRootNode)\n\n\treturn maxSumAsBranch, maxPathSum\n}\n\nfunc max(first int, vals ...int) int {\n\tfor _, val := range vals {\n\t\tif val > first {\n\t\t\tfirst = val\n\t\t}\n\t}\n\treturn first\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\ttest := NewBinaryTree(1).insertAll([]int{2, 3, 4, 5, 6, 7})\n\trequire.Equal(t, MaxPathSum(test), 18)\n}\n\nfunc NewBinaryTree(value int) *BinaryTree {\n\treturn &BinaryTree{Value: value}\n}\n\nfunc (tree *BinaryTree) insertAll(values []int) *BinaryTree {\n\tfor _, value := range values {\n\t\ttree.insert(value)\n\t}\n\treturn tree\n}\n\nfunc (tree *BinaryTree) insert(value int) {\n\tqueue := []*BinaryTree{tree}\n\tvar current *BinaryTree\n\tfor len(queue) > 0 {\n\t\tcurrent, queue = queue[0], queue[1:]\n\t\tif current.Left == nil {\n\t\t\tcurrent.Left = NewBinaryTree(value)\n\t\t\tbreak\n\t\t}\n\t\tqueue = append(queue, current.Left)\n\t\tif current.Right == nil {\n\t\t\tcurrent.Right = NewBinaryTree(value)\n\t\t\tbreak\n\t\t}\n\t\tqueue = append(queue, current.Right)\n\t}\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\ttest := NewBinaryTree(1).insertAll([]int{2, 3, 4, 5, 6, 7})\n\trequire.Equal(t, MaxPathSum(test), 18)\n}\n\nfunc NewBinaryTree(value int) *BinaryTree {\n\treturn &BinaryTree{Value: value}\n}\n\nfunc (tree *BinaryTree) insertAll(values []int) *BinaryTree {\n\tfor _, value := range values {\n\t\ttree.insert(value)\n\t}\n\treturn tree\n}\n\nfunc (tree *BinaryTree) insert(value int) {\n\tqueue := []*BinaryTree{tree}\n\tvar current *BinaryTree\n\tfor len(queue) > 0 {\n\t\tcurrent, queue = queue[0], queue[1:]\n\t\tif current.Left == nil {\n\t\t\tcurrent.Left = NewBinaryTree(value)\n\t\t\tbreak\n\t\t}\n\t\tqueue = append(queue, current.Left)\n\t\tif current.Right == nil {\n\t\t\tcurrent.Right = NewBinaryTree(value)\n\t\t\tbreak\n\t\t}\n\t\tqueue = append(queue, current.Right)\n\t}\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int maxPathSum(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left;\n    public BinaryTree right;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(log(n)) space\n  public static int maxPathSum(BinaryTree tree) {\n    List<Integer> maxSumArray = findMaxSum(tree);\n    return maxSumArray.get(1);\n  }\n\n  public static List<Integer> findMaxSum(BinaryTree tree) {\n    if (tree == null) {\n      return new ArrayList<Integer>(Arrays.asList(0, Integer.MIN_VALUE));\n    }\n    List<Integer> leftMaxSumArray = findMaxSum(tree.left);\n    Integer leftMaxSumAsBranch = leftMaxSumArray.get(0);\n    Integer leftMaxPathSum = leftMaxSumArray.get(1);\n\n    List<Integer> rightMaxSumArray = findMaxSum(tree.right);\n    Integer rightMaxSumAsBranch = rightMaxSumArray.get(0);\n    Integer rightMaxPathSum = rightMaxSumArray.get(1);\n\n    Integer maxChildSumAsBranch =\n      Math.max(leftMaxSumAsBranch, rightMaxSumAsBranch);\n    Integer maxSumAsBranch =\n      Math.max(maxChildSumAsBranch + tree.value, tree.value);\n    Integer maxSumAsRootNode = Math.max(\n      leftMaxSumAsBranch + tree.value + rightMaxSumAsBranch, maxSumAsBranch\n    );\n    int maxPathSum =\n      Math.max(leftMaxPathSum, Math.max(rightMaxPathSum, maxSumAsRootNode));\n\n    return new ArrayList<Integer>(Arrays.asList(maxSumAsBranch, maxPathSum));\n  }\n\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left;\n    public BinaryTree right;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.ArrayDeque;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    TestBinaryTree test = new TestBinaryTree(1);\n    test.insert(new int[] {2, 3, 4, 5, 6, 7}, 0);\n    Utils.assertTrue(Program.maxPathSum(test) == 18);\n  }\n\n  class TestBinaryTree extends Program.BinaryTree {\n    public TestBinaryTree(int value) {\n      super(value);\n    }\n\n    public void insert(int[] values, int i) {\n      if (i >= values.length) {\n        return;\n      }\n      ArrayDeque<Program.BinaryTree> queue =\n        new ArrayDeque<Program.BinaryTree>();\n      queue.addLast(this);\n      while (queue.size() > 0) {\n        Program.BinaryTree current = queue.pollFirst();\n        if (current.left == null) {\n          current.left = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.addLast(current.left);\n        if (current.right == null) {\n          current.right = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.addLast(current.right);\n      }\n      insert(values, i + 1);\n    }\n  }\n}\n",
      "unitTests": "import java.util.ArrayDeque;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    TestBinaryTree test = new TestBinaryTree(1);\n    test.insert(new int[] {2, 3, 4, 5, 6, 7}, 0);\n    Utils.assertTrue(Program.maxPathSum(test) == 18);\n  }\n\n  class TestBinaryTree extends Program.BinaryTree {\n    public TestBinaryTree(int value) {\n      super(value);\n    }\n\n    public void insert(int[] values, int i) {\n      if (i >= values.length) {\n        return;\n      }\n      ArrayDeque<Program.BinaryTree> queue =\n        new ArrayDeque<Program.BinaryTree>();\n      queue.addLast(this);\n      while (queue.size() > 0) {\n        Program.BinaryTree current = queue.pollFirst();\n        if (current.left == null) {\n          current.left = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.addLast(current.left);\n        if (current.right == null) {\n          current.right = new Program.BinaryTree(values[i]);\n          break;\n        }\n        queue.addLast(current.right);\n      }\n      insert(values, i + 1);\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function maxPathSum(tree) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.maxPathSum = maxPathSum;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(log(n)) space\nfunction maxPathSum(tree) {\n  const [_, maxSum] = findMaxSum(tree);\n  return maxSum;\n}\n\nfunction findMaxSum(tree) {\n  if (tree === null) return [0, -Infinity];\n\n  const [leftMaxSumAsBranch, leftMaxPathSum] = findMaxSum(tree.left);\n  const [rightMaxSumAsBranch, rightMaxPathSum] = findMaxSum(tree.right);\n  const maxChildSumAsBranch = Math.max(leftMaxSumAsBranch, rightMaxSumAsBranch);\n\n  const {value} = tree;\n  const maxSumAsBranch = Math.max(maxChildSumAsBranch + value, value);\n  const maxSumAsRootNode = Math.max(\n    leftMaxSumAsBranch + value + rightMaxSumAsBranch,\n    maxSumAsBranch,\n  );\n  const maxPathSum = Math.max(leftMaxPathSum, rightMaxPathSum, maxSumAsRootNode);\n\n  return [maxSumAsBranch, maxPathSum];\n}\n\nexports.maxPathSum = maxPathSum;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const test = new BinaryTree(1).insert([2, 3, 4, 5, 6, 7]);\n  chai.expect(program.maxPathSum(test)).to.deep.equal(18);\n});\n\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(values, i = 0) {\n    if (i >= values.length) return;\n    const queue = [this];\n    while (queue.length > 0) {\n      let current = queue.shift();\n      if (current.left === null) {\n        current.left = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.left);\n      if (current.right === null) {\n        current.right = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.right);\n    }\n    this.insert(values, i + 1);\n    return this;\n  }\n}\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const test = new BinaryTree(1).insert([2, 3, 4, 5, 6, 7]);\n  chai.expect(program.maxPathSum(test)).to.deep.equal(18);\n});\n\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(values, i = 0) {\n    if (i >= values.length) return;\n    const queue = [this];\n    while (queue.length > 0) {\n      let current = queue.shift();\n      if (current.left === null) {\n        current.left = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.left);\n      if (current.right === null) {\n        current.right = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.right);\n    }\n    this.insert(values, i + 1);\n    return this;\n  }\n}\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\nfun maxPathSum(tree: BinaryTree): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\n// O(n) time | O(log(n)) space\nfun maxPathSum(tree: BinaryTree): Int {\n    val (_, maxSumArray) = findMaxSum(tree)\n    return maxSumArray\n}\n\nfun findMaxSum(tree: BinaryTree?): List<Int> {\n    if (tree == null) return listOf(0, Int.MIN_VALUE)\n\n    val (leftMaxSumAsBranch, leftMaxPathSum) = findMaxSum(tree.left)\n    val (rightMaxSumAsBranch, rightMaxPathSum) = findMaxSum(tree.right)\n    val maxChildSumAsBranch = max(leftMaxSumAsBranch, rightMaxSumAsBranch)\n\n    val value = tree.value\n    val maxSumAsBranch = max(maxChildSumAsBranch + value, value)\n    val maxSumAsRootNode = max(leftMaxSumAsBranch + value + rightMaxSumAsBranch, maxSumAsBranch)\n    val maxPathSum = listOf(leftMaxPathSum, rightMaxPathSum, maxSumAsRootNode).max()!!\n\n    return listOf(maxSumAsBranch, maxPathSum)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.BinaryTree as BinaryTree\nimport com.algoexpert.program.maxPathSum as maxPathSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BinaryTree(1)\n        tree.left = BinaryTree(2)\n        tree.right = BinaryTree(3)\n        tree.left!!.left = BinaryTree(4)\n        tree.left!!.right = BinaryTree(5)\n        tree.right!!.left = BinaryTree(6)\n        tree.right!!.right = BinaryTree(7)\n\n        val result = maxPathSum(tree)\n\n        assert(result == 18)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.BinaryTree as BinaryTree\nimport com.algoexpert.program.maxPathSum as maxPathSum\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BinaryTree(1)\n        tree.left = BinaryTree(2)\n        tree.right = BinaryTree(3)\n        tree.left!!.left = BinaryTree(4)\n        tree.left!!.right = BinaryTree(5)\n        tree.right!!.left = BinaryTree(6)\n        tree.right!!.right = BinaryTree(7)\n\n        val result = maxPathSum(tree)\n\n        assert(result == 18)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def maxPathSum(tree):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(log(n)) space\ndef maxPathSum(tree):\n    _, maxSum = findMaxSum(tree)\n    return maxSum\n\n\ndef findMaxSum(tree):\n    if tree is None:\n        return (0, float(\"-inf\"))\n\n    leftMaxSumAsBranch, leftMaxPathSum = findMaxSum(tree.left)\n    rightMaxSumAsBranch, rightMaxPathSum = findMaxSum(tree.right)\n    maxChildSumAsBranch = max(leftMaxSumAsBranch, rightMaxSumAsBranch)\n\n    value = tree.value\n    maxSumAsBranch = max(maxChildSumAsBranch + value, value)\n    maxSumAsRootNode = max(leftMaxSumAsBranch + value + rightMaxSumAsBranch, maxSumAsBranch)\n    maxPathSum = max(leftMaxPathSum, rightMaxPathSum, maxSumAsRootNode)\n\n    return (maxSumAsBranch, maxPathSum)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = BinaryTree(1).insert([2, 3, 4, 5, 6, 7])\n        self.assertEqual(program.maxPathSum(test), 18)\n\n\nclass BinaryTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def insert(self, values, i=0):\n        if i >= len(values):\n            return\n        queue = [self]\n        while len(queue) > 0:\n            current = queue.pop(0)\n            if current.left is None:\n                current.left = BinaryTree(values[i])\n                break\n            queue.append(current.left)\n            if current.right is None:\n                current.right = BinaryTree(values[i])\n                break\n            queue.append(current.right)\n        self.insert(values, i + 1)\n        return self\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = BinaryTree(1).insert([2, 3, 4, 5, 6, 7])\n        self.assertEqual(program.maxPathSum(test), 18)\n\n\nclass BinaryTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def insert(self, values, i=0):\n        if i >= len(values):\n            return\n        queue = [self]\n        while len(queue) > 0:\n            current = queue.pop(0)\n            if current.left is None:\n                current.left = BinaryTree(values[i])\n                break\n            queue.append(current.left)\n            if current.right is None:\n                current.right = BinaryTree(values[i])\n                break\n            queue.append(current.right)\n        self.insert(values, i + 1)\n        return self\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def maxPathSum(tree)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n  attr_accessor :value\n  attr_accessor :left\n  attr_accessor :right\n\n  def initialize(value)\n    @value = value\n    @left = nil\n    @right = nil\n  end\nend\n\nclass Program\n  def maxPathSum(tree)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxPathSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxPathSum\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func maxPathSum(tree: BinaryTree?) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  // O(n) time | O(log(n)) space\n  func maxPathSum(tree: BinaryTree?) -> Int {\n    let rootMaxSumTuple = findMaxSum(tree: tree)\n    return rootMaxSumTuple.1\n  }\n\n  func findMaxSum(tree: BinaryTree?) -> (Int, Int) {\n    if tree === nil {\n      return (0, Int.min)\n    }\n\n    let leftMaxSumTuple = findMaxSum(tree: tree?.left)\n    let rightMaxSumTuple = findMaxSum(tree: tree?.right)\n    let childStraightMaxSum = max(leftMaxSumTuple.0, rightMaxSumTuple.0)\n\n    let value = tree!.value\n\n    let currentStraightMaxSum = max(value + childStraightMaxSum, value)\n    let currentTriangleMaxSum = max(leftMaxSumTuple.0 + value + rightMaxSumTuple.0, currentStraightMaxSum)\n    let currentMaxSum = max(max(leftMaxSumTuple.1, rightMaxSumTuple.1), currentTriangleMaxSum)\n\n    return (currentStraightMaxSum, currentMaxSum)\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let fourthTest = TestBinaryTree(value: 1).insert(values: [2, 3, 4, 5, 6, 7], index: 0)\n      try assertEqual(18, program.maxPathSum(tree: fourthTest))\n    }\n  }\n}\n\nclass TestBinaryTree: Program.BinaryTree {\n  func insert(values: [Int], index: Int) -> Program.BinaryTree? {\n    if index >= values.count { return nil }\n\n    var queue: [Program.BinaryTree?] = [self]\n\n    while queue.count > 0 {\n      let current = queue.removeFirst()\n\n      if current?.left === nil {\n        current?.left = TestBinaryTree(value: values[index])\n        break\n      }\n\n      queue.append(current?.left)\n\n      if current?.right === nil {\n        current?.right = TestBinaryTree(value: values[index])\n        break\n      }\n\n      queue.append(current?.right)\n    }\n\n    insert(values: values, index: index + 1)\n    return self\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let fourthTest = TestBinaryTree(value: 1).insert(values: [2, 3, 4, 5, 6, 7], index: 0)\n      try assertEqual(18, program.maxPathSum(tree: fourthTest))\n    }\n  }\n}\n\nclass TestBinaryTree: Program.BinaryTree {\n  func insert(values: [Int], index: Int) -> Program.BinaryTree? {\n    if index >= values.count { return nil }\n\n    var queue: [Program.BinaryTree?] = [self]\n\n    while queue.count > 0 {\n      let current = queue.removeFirst()\n\n      if current?.left === nil {\n        current?.left = TestBinaryTree(value: values[index])\n        break\n      }\n\n      queue.append(current?.left)\n\n      if current?.right === nil {\n        current?.right = TestBinaryTree(value: values[index])\n        break\n      }\n\n      queue.append(current?.right)\n    }\n\n    insert(values: values, index: index + 1)\n    return self\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function maxPathSum(tree: BinaryTree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(log(n)) space\nexport function maxPathSum(tree: BinaryTree) {\n  const [_, maxSum] = findMaxSum(tree);\n  return maxSum;\n}\n\nfunction findMaxSum(tree: BinaryTree | null) {\n  if (tree === null) return [0, -Infinity];\n\n  const [leftMaxSumAsBranch, leftMaxPathSum] = findMaxSum(tree.left);\n  const [rightMaxSumAsBranch, rightMaxPathSum] = findMaxSum(tree.right);\n  const maxChildSumAsBranch = Math.max(leftMaxSumAsBranch, rightMaxSumAsBranch);\n\n  const {value} = tree;\n  const maxSumAsBranch = Math.max(maxChildSumAsBranch + value, value);\n  const maxSumAsRootNode = Math.max(\n    leftMaxSumAsBranch + value + rightMaxSumAsBranch,\n    maxSumAsBranch,\n  );\n  const maxPathSum = Math.max(leftMaxPathSum, rightMaxPathSum, maxSumAsRootNode);\n\n  return [maxSumAsBranch, maxPathSum];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const test = new BinaryTree(1).insert([2, 3, 4, 5, 6, 7]);\n  chai.expect(program.maxPathSum(test)).to.deep.equal(18);\n});\n\nclass BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(values: number[], i = 0): BinaryTree {\n    if (i >= values.length) return this;\n    const queue: BinaryTree[] = [this];\n    while (queue.length > 0) {\n      let current = queue.shift()!;\n      if (current.left === null) {\n        current.left = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.left);\n      if (current.right === null) {\n        current.right = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.right);\n    }\n    this.insert(values, i + 1);\n    return this;\n  }\n}\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const test = new BinaryTree(1).insert([2, 3, 4, 5, 6, 7]);\n  chai.expect(program.maxPathSum(test)).to.deep.equal(18);\n});\n\nclass BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(values: number[], i = 0): BinaryTree {\n    if (i >= values.length) return this;\n    const queue: BinaryTree[] = [this];\n    while (queue.length > 0) {\n      let current = queue.shift()!;\n      if (current.left === null) {\n        current.left = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.left);\n      if (current.right === null) {\n        current.right = new BinaryTree(values[i]);\n        break;\n      }\n      queue.push(current.right);\n    }\n    this.insert(values, i + 1);\n    return this;\n  }\n}\n"
    }
  },
  "customInputVars": [
    {
      "name": "tree",
      "example": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      },
      "schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "-1",
            "value": 1
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "-5",
            "left": "6",
            "right": null,
            "value": -5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-10",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-2",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-10",
            "left": "30",
            "right": "45",
            "value": -10
          },
          {
            "id": "45",
            "left": "3",
            "right": "-3",
            "value": 45
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-10",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-3",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-2",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-10",
            "left": "30",
            "right": "45",
            "value": -10
          },
          {
            "id": "45",
            "left": "3",
            "right": "-3",
            "value": 45
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": "100",
            "right": null,
            "value": 5
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-10",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-3",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-2",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-10",
            "left": "30",
            "right": "75",
            "value": -10
          },
          {
            "id": "75",
            "left": "3",
            "right": "-3",
            "value": 75
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": "100",
            "right": null,
            "value": 5
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-150",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-4",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-4",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-3",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-150",
            "left": "30",
            "right": "75",
            "value": -150
          },
          {
            "id": "75",
            "left": "3",
            "right": "-3",
            "value": 75
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": "150",
            "right": "-8",
            "value": 3
          },
          {
            "id": "-8",
            "left": null,
            "right": null,
            "value": -8
          },
          {
            "id": "150",
            "left": null,
            "right": null,
            "value": 150
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": "5-2",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "5",
            "left": "100",
            "right": "100-2",
            "value": 5
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-150",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-4",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-4",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-3",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-150",
            "left": "30",
            "right": "75",
            "value": -150
          },
          {
            "id": "75",
            "left": "3",
            "right": "-3",
            "value": 75
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": "150",
            "right": "151",
            "value": 3
          },
          {
            "id": "151",
            "left": null,
            "right": null,
            "value": 151
          },
          {
            "id": "150",
            "left": null,
            "right": null,
            "value": 150
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": "5-2",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "5",
            "left": "100",
            "right": "100-2",
            "value": 5
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-2",
            "right": "1-7",
            "value": -3
          },
          {
            "id": "1-7",
            "left": "1-8",
            "right": "1-10",
            "value": 1
          },
          {
            "id": "1-10",
            "left": "-5-2",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "-5-2",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "1-8",
            "left": "0-4",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-2",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-3",
            "right": "1-6",
            "value": 5
          },
          {
            "id": "1-6",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2",
            "value": -5
          },
          {
            "id": "2",
            "left": "1-4",
            "right": "1-5",
            "value": 2
          },
          {
            "id": "1-5",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-4",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "3",
            "value": 0
          },
          {
            "id": "3",
            "left": "1-3",
            "right": "-1",
            "value": 3
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-2",
            "value": -3
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-2",
            "right": "1-6",
            "value": -3
          },
          {
            "id": "1-6",
            "left": "1-7",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": "-5-2",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "-5-2",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "1-7",
            "left": "0-4",
            "right": "1-8",
            "value": 1
          },
          {
            "id": "1-8",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-2",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-3",
            "right": "1-5",
            "value": 5
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2",
            "value": -5
          },
          {
            "id": "2",
            "left": "1-3",
            "right": "1-4",
            "value": 2
          },
          {
            "id": "1-4",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-3",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "-4",
            "value": 0
          },
          {
            "id": "-4",
            "left": "10",
            "right": "-1",
            "value": -4
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-2",
            "value": -3
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-4",
            "right": "1-7",
            "value": -3
          },
          {
            "id": "1-7",
            "left": "1-8",
            "right": "1-10",
            "value": 1
          },
          {
            "id": "1-10",
            "left": "-5-3",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "-5-3",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "1-8",
            "left": "0-4",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-4",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-5",
            "right": "1-6",
            "value": 5
          },
          {
            "id": "1-6",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-5",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2-3",
            "value": -5
          },
          {
            "id": "2-3",
            "left": "1-4",
            "right": "1-5",
            "value": 2
          },
          {
            "id": "1-5",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-4",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "-4",
            "value": 0
          },
          {
            "id": "-4",
            "left": "3-2",
            "right": "-1",
            "value": -4
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "3-2",
            "left": "7",
            "right": "-5-2",
            "value": 3
          },
          {
            "id": "-5-2",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-3",
            "value": -3
          },
          {
            "id": "1-3",
            "left": "2",
            "right": "2-2",
            "value": 1
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-2",
            "left": "3",
            "right": "1-2",
            "value": 0
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-2",
            "right": "1-7",
            "value": -3
          },
          {
            "id": "1-7",
            "left": "1-8",
            "right": "1-10",
            "value": 1
          },
          {
            "id": "1-10",
            "left": "5-2",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "1-8",
            "left": "0-4",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-2",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-3",
            "right": "1-6",
            "value": 5
          },
          {
            "id": "1-6",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2",
            "value": -5
          },
          {
            "id": "2",
            "left": "1-4",
            "right": "1-5",
            "value": 2
          },
          {
            "id": "1-5",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-4",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "3",
            "value": 0
          },
          {
            "id": "3",
            "left": "1-3",
            "right": "-1",
            "value": 3
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-2",
            "value": -3
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": null,
            "value": -2
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": "-1",
            "right": null,
            "value": -2
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": "-1",
            "right": null,
            "value": -2
          },
          {
            "id": "-1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "-2"
      }
    }
  ],
  "jsonTests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": "6",
            "right": "7",
            "value": 3
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "-1",
            "value": 1
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "3",
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "-5",
            "left": "6",
            "right": null,
            "value": -5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-10",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-2",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-10",
            "left": "30",
            "right": "45",
            "value": -10
          },
          {
            "id": "45",
            "left": "3",
            "right": "-3",
            "value": 45
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-10",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-3",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-2",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-10",
            "left": "30",
            "right": "45",
            "value": -10
          },
          {
            "id": "45",
            "left": "3",
            "right": "-3",
            "value": 45
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": "100",
            "right": null,
            "value": 5
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-10",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-3",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-2",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-10",
            "left": "30",
            "right": "75",
            "value": -10
          },
          {
            "id": "75",
            "left": "3",
            "right": "-3",
            "value": 75
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "5",
            "left": "100",
            "right": null,
            "value": 5
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-150",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-4",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-4",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-3",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-150",
            "left": "30",
            "right": "75",
            "value": -150
          },
          {
            "id": "75",
            "left": "3",
            "right": "-3",
            "value": 75
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": "150",
            "right": "-8",
            "value": 3
          },
          {
            "id": "-8",
            "left": null,
            "right": null,
            "value": -8
          },
          {
            "id": "150",
            "left": null,
            "right": null,
            "value": 150
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": "5-2",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "5",
            "left": "100",
            "right": "100-2",
            "value": 5
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-150",
            "right": "-5",
            "value": 1
          },
          {
            "id": "-5",
            "left": "-20",
            "right": "-21",
            "value": -5
          },
          {
            "id": "-21",
            "left": "100-4",
            "right": "1-3",
            "value": -21
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "100-4",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-20",
            "left": "100-3",
            "right": "2",
            "value": -20
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "100-3",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "-150",
            "left": "30",
            "right": "75",
            "value": -150
          },
          {
            "id": "75",
            "left": "3",
            "right": "-3",
            "value": 75
          },
          {
            "id": "-3",
            "left": null,
            "right": null,
            "value": -3
          },
          {
            "id": "3",
            "left": "150",
            "right": "151",
            "value": 3
          },
          {
            "id": "151",
            "left": null,
            "right": null,
            "value": 151
          },
          {
            "id": "150",
            "left": null,
            "right": null,
            "value": 150
          },
          {
            "id": "30",
            "left": "5",
            "right": "1-2",
            "value": 30
          },
          {
            "id": "1-2",
            "left": "5-2",
            "right": "10",
            "value": 1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "5",
            "left": "100",
            "right": "100-2",
            "value": 5
          },
          {
            "id": "100-2",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-2",
            "right": "1-7",
            "value": -3
          },
          {
            "id": "1-7",
            "left": "1-8",
            "right": "1-10",
            "value": 1
          },
          {
            "id": "1-10",
            "left": "-5-2",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "-5-2",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "1-8",
            "left": "0-4",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-2",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-3",
            "right": "1-6",
            "value": 5
          },
          {
            "id": "1-6",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2",
            "value": -5
          },
          {
            "id": "2",
            "left": "1-4",
            "right": "1-5",
            "value": 2
          },
          {
            "id": "1-5",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-4",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "3",
            "value": 0
          },
          {
            "id": "3",
            "left": "1-3",
            "right": "-1",
            "value": 3
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-2",
            "value": -3
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-2",
            "right": "1-6",
            "value": -3
          },
          {
            "id": "1-6",
            "left": "1-7",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": "-5-2",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "-5-2",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "1-7",
            "left": "0-4",
            "right": "1-8",
            "value": 1
          },
          {
            "id": "1-8",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-2",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-3",
            "right": "1-5",
            "value": 5
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2",
            "value": -5
          },
          {
            "id": "2",
            "left": "1-3",
            "right": "1-4",
            "value": 2
          },
          {
            "id": "1-4",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-3",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "-4",
            "value": 0
          },
          {
            "id": "-4",
            "left": "10",
            "right": "-1",
            "value": -4
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-2",
            "value": -3
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-4",
            "right": "1-7",
            "value": -3
          },
          {
            "id": "1-7",
            "left": "1-8",
            "right": "1-10",
            "value": 1
          },
          {
            "id": "1-10",
            "left": "-5-3",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "-5-3",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "1-8",
            "left": "0-4",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-4",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-5",
            "right": "1-6",
            "value": 5
          },
          {
            "id": "1-6",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-5",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2-3",
            "value": -5
          },
          {
            "id": "2-3",
            "left": "1-4",
            "right": "1-5",
            "value": 2
          },
          {
            "id": "1-5",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-4",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "-4",
            "value": 0
          },
          {
            "id": "-4",
            "left": "3-2",
            "right": "-1",
            "value": -4
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "3-2",
            "left": "7",
            "right": "-5-2",
            "value": 3
          },
          {
            "id": "-5-2",
            "left": null,
            "right": null,
            "value": -5
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-3",
            "value": -3
          },
          {
            "id": "1-3",
            "left": "2",
            "right": "2-2",
            "value": 1
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-2",
            "left": "3",
            "right": "1-2",
            "value": 0
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-5",
            "right": "-3-2",
            "value": 1
          },
          {
            "id": "-3-2",
            "left": "2-2",
            "right": "1-7",
            "value": -3
          },
          {
            "id": "1-7",
            "left": "1-8",
            "right": "1-10",
            "value": 1
          },
          {
            "id": "1-10",
            "left": "5-2",
            "right": "0-5",
            "value": 1
          },
          {
            "id": "0-5",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "1-8",
            "left": "0-4",
            "right": "1-9",
            "value": 1
          },
          {
            "id": "1-9",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-4",
            "left": null,
            "right": null,
            "value": 0
          },
          {
            "id": "2-2",
            "left": "0-3",
            "right": "5",
            "value": 2
          },
          {
            "id": "5",
            "left": "2-3",
            "right": "1-6",
            "value": 5
          },
          {
            "id": "1-6",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "2-3",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "0-3",
            "left": "-9",
            "right": "-91",
            "value": 0
          },
          {
            "id": "-91",
            "left": null,
            "right": null,
            "value": -91
          },
          {
            "id": "-9",
            "left": null,
            "right": null,
            "value": -9
          },
          {
            "id": "-5",
            "left": "0",
            "right": "2",
            "value": -5
          },
          {
            "id": "2",
            "left": "1-4",
            "right": "1-5",
            "value": 2
          },
          {
            "id": "1-5",
            "left": "-1-3",
            "right": "-100",
            "value": 1
          },
          {
            "id": "-100",
            "left": null,
            "right": null,
            "value": -100
          },
          {
            "id": "-1-3",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-4",
            "left": "-1-2",
            "right": "-6",
            "value": 1
          },
          {
            "id": "-6",
            "left": null,
            "right": null,
            "value": -6
          },
          {
            "id": "-1-2",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "0",
            "left": "-3",
            "right": "3",
            "value": 0
          },
          {
            "id": "3",
            "left": "1-3",
            "right": "-1",
            "value": 3
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "-3",
            "left": "0-2",
            "right": "1-2",
            "value": -3
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "0-2",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": null,
            "value": -2
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": "-1",
            "right": null,
            "value": -2
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": "-1",
            "right": null,
            "value": -2
          },
          {
            "id": "-1",
            "left": "2",
            "right": "3",
            "value": -1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "-2"
      }
    }
  ],
  "changelog": []
}