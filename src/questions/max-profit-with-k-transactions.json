{
  "uid": "max-profit-with-k-transactions",
  "testStrategy": "JSON",
  "name": "Max Profit With K Transactions",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 4,
  "acl": {
    "isFree": true,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 9945,
    "failureCount": 11034
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225692229",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2014
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given an array of positive integers representing the prices of a single stock on\n  various days (each index in the array represents a different day). You're also\n  given an integer <span>k</span>, which represents the number of transactions\n  you're allowed to make. One transaction consists of buying the stock on a\n  given day and selling it on another, later day.\n</p>\n<p>\n  Write a function that returns the maximum profit that you can make by buying\n  and selling the stock, given k transactions.\n</p>\n<p>\n  Note that you can only hold one share of the stock at a time; in other words,\n  you can't buy more than one share of the stock on any given day, and you can't\n  buy a share of the stock if you're still holding another share. Also, you\n  don't need to use all k transactions that you're allowed.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">prices</span> = [5, 11, 3, 50, 60, 90]\n<span class=\"CodeEditor-promptParameter\">k</span> = 2\n</pre>\n<h3>Sample Output</h3>\n<pre>\n93 <span class=\"CodeEditor-promptComment\">// Buy: 5, Sell: 11; Buy: 3, Sell: 90</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building a two-dimensional array of the maximum profits you can make on each day with zero, one, two, etc., k transactions. Let columns represent days and rows represent the number of transactions.\n</p>\n",
    "\n<p>\nBuild up the array mentioned in Hint #1 one row at a time. In other words, find the maximum profits that you can make on each day with zero transactions first, then with one transaction, etc., until you reach k transactions. Find a formula that relates the maximum profit at any given point to previous profits. Once you find that formula, identify certain values that you repeatedly need and that you can temporarily store to optimize your algorithm.\n</p>\n",
    "\n<p>\nDo you really need to store the entire two-dimensional array mentioned in Hint #1? Identify what stored values you actually use throughout the process of building the array and come up with a way of storing only what you need and nothing more.\n</p>"
  ],
  "spaceTime": "O(nk) time | O(n) space - where n is the number of prices and k is the number of transactions",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint maxProfitWithKTransactions(vector<int> prices, int k) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <climits>\n#include <vector>\nusing namespace std;\n\n// O(nk) time | O(nk) space\nint maxProfitWithKTransactions(vector<int> prices, int k) {\n  if (prices.size() == 0) {\n    return 0;\n  }\n  vector<vector<int>> profits(k + 1, vector<int>(prices.size(), 0));\n  for (int t = 1; t < k + 1; t++) {\n    int maxThusFar = INT_MIN;\n    for (int d = 1; d < prices.size(); d++) {\n      maxThusFar = max(maxThusFar, profits[t - 1][d - 1] - prices[d - 1]);\n      profits[t][d] = max(profits[t][d - 1], maxThusFar + prices[d]);\n    }\n  }\n  return profits[k][prices.size() - 1];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <climits>\n#include <vector>\nusing namespace std;\n\n// O(nk) time | O(n) space\nint maxProfitWithKTransactions(vector<int> prices, int k) {\n  if (prices.size() == 0) {\n    return 0;\n  }\n  vector<int> evenProfits(prices.size());\n  vector<int> oddProfits(prices.size());\n  for (int t = 1; t < k + 1; t++) {\n    int maxThusFar = INT_MIN;\n    vector<int>* currentProfits;\n    vector<int>* previousProfits;\n    if (t % 2 == 1) {\n      currentProfits = &oddProfits;\n      previousProfits = &evenProfits;\n    } else {\n      currentProfits = &evenProfits;\n      previousProfits = &oddProfits;\n    }\n    for (int d = 1; d < prices.size(); d++) {\n      maxThusFar = max(maxThusFar, previousProfits->at(d - 1) - prices[d - 1]);\n      currentProfits->at(d) =\n        max(currentProfits->at(d - 1), maxThusFar + prices[d]);\n    }\n  }\n  return k % 2 == 0 ? evenProfits[prices.size() - 1]\n                    : oddProfits[prices.size() - 1];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{5, 11, 3, 50, 60, 90};\n      assert(maxProfitWithKTransactions(input, 2) == 93);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{5, 11, 3, 50, 60, 90};\n      assert(maxProfitWithKTransactions(input, 2) == 93);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int MaxProfitWithKTransactions(int[] prices, int k) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nk) time | O(nk) space\n  public static int MaxProfitWithKTransactions(int[] prices, int k) {\n    if (prices.Length == 0) {\n      return 0;\n    }\n    int[,] profits = new int[k + 1, prices.Length];\n    for (int t = 1; t < k + 1; t++) {\n      int maxThusFar = Int32.MinValue;\n      for (int d = 1; d < prices.Length; d++) {\n        maxThusFar =\n          Math.Max(maxThusFar, profits[t - 1, d - 1] - prices[d - 1]);\n        profits[t, d] = Math.Max(profits[t, d - 1], maxThusFar + prices[d]);\n      }\n    }\n    return profits[k, prices.Length - 1];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nk) time | O(n) space\n  public static int MaxProfitWithKTransactions(int[] prices, int k) {\n    if (prices.Length == 0) {\n      return 0;\n    }\n    int[] evenProfits = new int[prices.Length];\n    int[] oddProfits = new int[prices.Length];\n    for (int i = 0; i < prices.Length; i++) {\n      evenProfits[i] = 0;\n      oddProfits[i] = 0;\n    }\n    for (int t = 1; t < k + 1; t++) {\n      int maxThusFar = Int32.MinValue;\n      int[] currentProfits = new int[prices.Length];\n      int[] previousProfits = new int[prices.Length];\n      if (t % 2 == 1) {\n        currentProfits = oddProfits;\n        previousProfits = evenProfits;\n      } else {\n        currentProfits = evenProfits;\n        previousProfits = oddProfits;\n      }\n      for (int d = 1; d < prices.Length; d++) {\n        maxThusFar =\n          Math.Max(maxThusFar, previousProfits[d - 1] - prices[d - 1]);\n        currentProfits[d] =\n          Math.Max(currentProfits[d - 1], maxThusFar + prices[d]);\n      }\n    }\n    return k % 2 == 0 ? evenProfits[prices.Length - 1]\n                      : oddProfits[prices.Length - 1];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 5, 11, 3, 50, 60, 90 };\n    Utils.AssertEquals(93, Program.MaxProfitWithKTransactions(input, 2));\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 5, 11, 3, 50, 60, 90 };\n    Utils.AssertEquals(93, Program.MaxProfitWithKTransactions(input, 2));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MaxProfitWithKTransactions(prices []int, k int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(nk) time | O(nk) space\nfunc MaxProfitWithKTransactions(prices []int, k int) int {\n\tif len(prices) == 0 {\n\t\treturn 0\n\t}\n\tprofits := make([][]int, k+1)\n\tfor i := range profits {\n\t\tprofits[i] = make([]int, len(prices))\n\t}\n\tfor t := 1; t < k+1; t++ {\n\t\tmaxThusFar := math.MinInt32\n\t\tfor d := 1; d < len(prices); d++ {\n\t\t\tmaxThusFar = max(maxThusFar, profits[t-1][d-1]-prices[d-1])\n\t\t\tprofits[t][d] = max(profits[t][d-1], maxThusFar+prices[d])\n\t\t}\n\t}\n\treturn profits[k][len(prices)-1]\n}\n\nfunc max(arg int, rest ...int) int {\n\tcurr := arg\n\tfor _, num := range rest {\n\t\tif curr < num {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// # O(nk) time | O(n) space\nfunc MaxProfitWithKTransactions(prices []int, k int) int {\n\tif len(prices) == 0 {\n\t\treturn 0\n\t}\n\tevenProfits := make([]int, len(prices))\n\toddProfits := make([]int, len(prices))\n\tvar currentProfits, previousProfits []int\n\tfor t := 1; t < k+1; t++ {\n\t\tmaxThusFar := math.MinInt32\n\t\tif t%2 == 1 {\n\t\t\tcurrentProfits, previousProfits = oddProfits, evenProfits\n\t\t} else {\n\t\t\tcurrentProfits, previousProfits = evenProfits, oddProfits\n\t\t}\n\t\tfor d := 1; d < len(prices); d++ {\n\t\t\tmaxThusFar = max(maxThusFar, previousProfits[d-1]-prices[d-1])\n\t\t\tcurrentProfits[d] = max(currentProfits[d-1], maxThusFar+prices[d])\n\t\t}\n\t}\n\tif k%2 == 0 {\n\t\treturn evenProfits[len(prices)-1]\n\t}\n\treturn oddProfits[len(prices)-1]\n}\n\nfunc max(arg int, rest ...int) int {\n\tcurr := arg\n\tfor _, num := range rest {\n\t\tif curr < num {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\trequire.Equal(t, 93, MaxProfitWithKTransactions([]int{5, 11, 3, 50, 60, 90}, 2))\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\trequire.Equal(t, 93, MaxProfitWithKTransactions([]int{5, 11, 3, 50, 60, 90}, 2))\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int maxProfitWithKTransactions(int[] prices, int k) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nk) time | O(nk) space\n  public static int maxProfitWithKTransactions(int[] prices, int k) {\n    if (prices.length == 0) {\n      return 0;\n    }\n    int[][] profits = new int[k + 1][prices.length];\n    for (int t = 1; t < k + 1; t++) {\n      int maxThusFar = Integer.MIN_VALUE;\n      for (int d = 1; d < prices.length; d++) {\n        maxThusFar =\n          Math.max(maxThusFar, profits[t - 1][d - 1] - prices[d - 1]);\n        profits[t][d] = Math.max(profits[t][d - 1], maxThusFar + prices[d]);\n      }\n    }\n    return profits[k][prices.length - 1];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nk) time | O(n) space\n  public static int maxProfitWithKTransactions(int[] prices, int k) {\n    if (prices.length == 0) {\n      return 0;\n    }\n    int[] evenProfits = new int[prices.length];\n    int[] oddProfits = new int[prices.length];\n\n    int[] currentProfits;\n    int[] previousProfits;\n    for (int t = 1; t < k + 1; t++) {\n      int maxThusFar = Integer.MIN_VALUE;\n      if (t % 2 == 1) {\n        currentProfits = oddProfits;\n        previousProfits = evenProfits;\n      } else {\n        currentProfits = evenProfits;\n        previousProfits = oddProfits;\n      }\n      for (int d = 1; d < prices.length; d++) {\n        maxThusFar =\n          Math.max(maxThusFar, previousProfits[d - 1] - prices[d - 1]);\n        currentProfits[d] =\n          Math.max(currentProfits[d - 1], maxThusFar + prices[d]);\n      }\n    }\n    return k % 2 == 0 ? evenProfits[prices.length - 1]\n                      : oddProfits[prices.length - 1];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {5, 11, 3, 50, 60, 90};\n    Utils.assertTrue(Program.maxProfitWithKTransactions(input, 2) == 93);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {5, 11, 3, 50, 60, 90};\n    Utils.assertTrue(Program.maxProfitWithKTransactions(input, 2) == 93);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function maxProfitWithKTransactions(prices, k) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.maxProfitWithKTransactions = maxProfitWithKTransactions;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nk) time | O(nk) space\nfunction maxProfitWithKTransactions(prices, k) {\n  if (!prices.length) return 0;\n  const profits = [];\n  for (let t = 0; t < k + 1; t++) {\n    const row = new Array(prices.length).fill(0);\n    profits.push(row);\n  }\n  for (let t = 1; t < k + 1; t++) {\n    let maxThusFar = -Infinity;\n    for (let d = 1; d < prices.length; d++) {\n      maxThusFar = Math.max(maxThusFar, profits[t - 1][d - 1] - prices[d - 1]);\n      profits[t][d] = Math.max(profits[t][d - 1], maxThusFar + prices[d]);\n    }\n  }\n  return profits[k][prices.length - 1];\n}\n\nexports.maxProfitWithKTransactions = maxProfitWithKTransactions;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nk) time | O(n) space\nfunction maxProfitWithKTransactions(prices, k) {\n  if (!prices.length) return 0;\n  const evenProfits = new Array(prices.length).fill(0);\n  const oddProfits = new Array(prices.length).fill(0);\n  for (let t = 1; t < k + 1; t++) {\n    let maxThusFar = -Infinity;\n    let currentProfits, previousProfits;\n    if (t % 2 === 1) {\n      currentProfits = oddProfits;\n      previousProfits = evenProfits;\n    } else {\n      currentProfits = evenProfits;\n      previousProfits = oddProfits;\n    }\n    for (let d = 1; d < prices.length; d++) {\n      maxThusFar = Math.max(maxThusFar, previousProfits[d - 1] - prices[d - 1]);\n      currentProfits[d] = Math.max(currentProfits[d - 1], maxThusFar + prices[d]);\n    }\n  }\n  return k % 2 === 0 ? evenProfits[prices.length - 1] : oddProfits[prices.length - 1];\n}\n\nexports.maxProfitWithKTransactions = maxProfitWithKTransactions;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2)).to.deep.equal(93);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2)).to.deep.equal(93);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun maxProfitWithKTransactions(prices: List<Int>, k: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(nk) time | O(nk) space\nfun maxProfitWithKTransactions(prices: List<Int>, k: Int): Int {\n    if (prices.size == 0) return 0\n\n    val profits = List(k + 1) { MutableList(prices.size) { 0 } }\n    for (t in 1 until k + 1) {\n        var maxThusFar = Int.MIN_VALUE\n        for (d in 1 until prices.size) {\n            maxThusFar = max(maxThusFar, profits[t - 1][d - 1] - prices[d - 1])\n            profits[t][d] = max(profits[t][d - 1], maxThusFar + prices[d])\n        }\n    }\n    return profits[k][prices.size - 1]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(nk) time | O(n) space\nfun maxProfitWithKTransactions(prices: List<Int>, k: Int): Int {\n    if (prices.size == 0) return 0\n    var evenProfits = MutableList(prices.size) { 0 }\n    var oddProfits = MutableList(prices.size) { 0 }\n    for (t in 1 until k + 1) {\n        var maxThusFar = Int.MIN_VALUE\n        var currentProfits: MutableList<Int>\n        var previousProfits: MutableList<Int>\n        if (t % 2 == 1) {\n            currentProfits = oddProfits\n            previousProfits = evenProfits\n        } else {\n            currentProfits = evenProfits\n            previousProfits = oddProfits\n        }\n        for (d in 1 until prices.size) {\n            maxThusFar = max(maxThusFar, previousProfits[d - 1] - prices[d - 1])\n            currentProfits[d] = max(currentProfits[d - 1], maxThusFar + prices[d])\n        }\n    }\n    return if (k % 2 == 0) evenProfits[prices.size - 1] else oddProfits[prices.size - 1]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.maxProfitWithKTransactions\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(5, 11, 3, 50, 60, 90)\n        val output = maxProfitWithKTransactions(input, 2)\n        val expected = 93\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.maxProfitWithKTransactions\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(5, 11, 3, 50, 60, 90)\n        val output = maxProfitWithKTransactions(input, 2)\n        val expected = 93\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def maxProfitWithKTransactions(prices, k):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nk) time | O(nk) space\ndef maxProfitWithKTransactions(prices, k):\n    if not len(prices):\n        return 0\n    profits = [[0 for d in prices] for t in range(k + 1)]\n    for t in range(1, k + 1):\n        maxThusFar = float(\"-inf\")\n        for d in range(1, len(prices)):\n            maxThusFar = max(maxThusFar, profits[t - 1][d - 1] - prices[d - 1])\n            profits[t][d] = max(profits[t][d - 1], maxThusFar + prices[d])\n    return profits[-1][-1]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nk) time | O(n) space\ndef maxProfitWithKTransactions(prices, k):\n    if not len(prices):\n        return 0\n    evenProfits = [0 for d in prices]\n    oddProfits = [0 for d in prices]\n    for t in range(1, k + 1):\n        maxThusFar = float(\"-inf\")\n        if t % 2 == 1:\n            currentProfits = oddProfits\n            previousProfits = evenProfits\n        else:\n            currentProfits = evenProfits\n            previousProfits = oddProfits\n        for d in range(1, len(prices)):\n            maxThusFar = max(maxThusFar, previousProfits[d - 1] - prices[d - 1])\n            currentProfits[d] = max(currentProfits[d - 1], maxThusFar + prices[d])\n    return evenProfits[-1] if k % 2 == 0 else oddProfits[-1]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2), 93)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2), 93)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def maxProfitWithKTransactions(prices, k)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def maxProfitWithKTransactions(prices, k)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def maxProfitWithKTransactions(prices, k)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxProfitWithKTransactions\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maxProfitWithKTransactions\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func maxProfitWithKTransactions(_ prices: [Int], _ k: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nk) time | O(nk) space\n  func maxProfitWithKTransactions(_ prices: [Int], _ k: Int) -> Int {\n    if prices.count == 0 {\n      return 0\n    }\n\n    var profits = [[Int]]()\n\n    for _ in stride(from: 0, through: k, by: 1) {\n      let row = Array(repeating: 0, count: prices.count)\n      profits.append(row)\n    }\n\n    for transaction in stride(from: 1, through: k, by: 1) {\n      var maxProfitThusFar = Int.min\n\n      for day in stride(from: 1, to: prices.count, by: 1) {\n        maxProfitThusFar = max(maxProfitThusFar, profits[transaction - 1][day - 1] - prices[day - 1])\n        profits[transaction][day] = max(profits[transaction][day - 1], maxProfitThusFar + prices[day])\n      }\n    }\n\n    return profits[k][prices.count - 1]\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nk) time | O(n) space\n  func maxProfitWithKTransactions(_ prices: [Int], _ k: Int) -> Int {\n    if prices.count == 0 {\n      return 0\n    }\n\n    var evenProfits = Array(repeating: 0, count: prices.count)\n    var oddProfits = Array(repeating: 0, count: prices.count)\n\n    for transaction in stride(from: 1, through: k, by: 1) {\n      var maxProfitThusFar = Int.min\n\n      if transaction % 2 == 0 {\n        secondSolutionHelper(&evenProfits, &oddProfits, &maxProfitThusFar, prices)\n      } else {\n        secondSolutionHelper(&oddProfits, &evenProfits, &maxProfitThusFar, prices)\n      }\n    }\n\n    if k % 2 == 0 {\n      return evenProfits[prices.count - 1]\n    } else {\n      return oddProfits[prices.count - 1]\n    }\n  }\n\n  func secondSolutionHelper(_ currentProfits: inout [Int], _ previousProfits: inout [Int], _ maxProfitThusFar: inout Int, _ prices: [Int]) {\n    for day in stride(from: 1, to: prices.count, by: 1) {\n      maxProfitThusFar = max(maxProfitThusFar, previousProfits[day - 1] - prices[day - 1])\n      currentProfits[day] = max(currentProfits[day - 1], maxProfitThusFar + prices[day])\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(93, program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(93, program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function maxProfitWithKTransactions(prices: number[], k: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nk) time | O(nk) space\nexport function maxProfitWithKTransactions(prices: number[], k: number) {\n  if (!prices.length) return 0;\n  const profits: number[][] = [];\n  for (let t = 0; t < k + 1; t++) {\n    const row: number[] = new Array(prices.length).fill(0);\n    profits.push(row);\n  }\n  for (let t = 1; t < k + 1; t++) {\n    let maxThusFar = -Infinity;\n    for (let d = 1; d < prices.length; d++) {\n      maxThusFar = Math.max(maxThusFar, profits[t - 1][d - 1] - prices[d - 1]);\n      profits[t][d] = Math.max(profits[t][d - 1], maxThusFar + prices[d]);\n    }\n  }\n  return profits[k][prices.length - 1];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nk) time | O(n) space\nexport function maxProfitWithKTransactions(prices: number[], k: number) {\n  if (!prices.length) return 0;\n  const evenProfits: number[] = new Array(prices.length).fill(0);\n  const oddProfits: number[] = new Array(prices.length).fill(0);\n  for (let t = 1; t < k + 1; t++) {\n    let maxThusFar = -Infinity;\n    let currentProfits, previousProfits;\n    if (t % 2 === 1) {\n      currentProfits = oddProfits;\n      previousProfits = evenProfits;\n    } else {\n      currentProfits = evenProfits;\n      previousProfits = oddProfits;\n    }\n    for (let d = 1; d < prices.length; d++) {\n      maxThusFar = Math.max(maxThusFar, previousProfits[d - 1] - prices[d - 1]);\n      currentProfits[d] = Math.max(currentProfits[d - 1], maxThusFar + prices[d]);\n    }\n  }\n  return k % 2 === 0 ? evenProfits[prices.length - 1] : oddProfits[prices.length - 1];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2)).to.deep.equal(93);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.maxProfitWithKTransactions([5, 11, 3, 50, 60, 90], 2)).to.deep.equal(93);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "prices",
      "example": [
        5,
        11,
        3,
        50,
        60,
        90
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "k",
      "example": 2,
      "schema": {
        "minimum": 0,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "k": 2,
      "prices": [
        5,
        11,
        3,
        50,
        60,
        90
      ]
    },
    {
      "k": 1,
      "prices": []
    },
    {
      "k": 1,
      "prices": [
        1
      ]
    },
    {
      "k": 1,
      "prices": [
        1,
        10
      ]
    },
    {
      "k": 3,
      "prices": [
        1,
        10
      ]
    },
    {
      "k": 1,
      "prices": [
        3,
        2,
        5,
        7,
        1,
        3,
        7
      ]
    },
    {
      "k": 3,
      "prices": [
        5,
        11,
        3,
        50,
        60,
        90
      ]
    },
    {
      "k": 2,
      "prices": [
        5,
        11,
        3,
        50,
        40,
        90
      ]
    },
    {
      "k": 3,
      "prices": [
        5,
        11,
        3,
        50,
        40,
        90
      ]
    },
    {
      "k": 2,
      "prices": [
        50,
        25,
        12,
        4,
        3,
        10,
        1,
        100
      ]
    },
    {
      "k": 5,
      "prices": [
        100,
        99,
        98,
        97,
        1
      ]
    },
    {
      "k": 5,
      "prices": [
        1,
        100,
        2,
        200,
        3,
        300,
        4,
        400,
        5,
        500
      ]
    },
    {
      "k": 5,
      "prices": [
        1,
        100,
        101,
        200,
        201,
        300,
        301,
        400,
        401,
        500
      ]
    },
    {
      "k": 4,
      "prices": [
        1,
        25,
        24,
        23,
        12,
        36,
        14,
        40,
        31,
        41,
        5
      ]
    },
    {
      "k": 2,
      "prices": [
        1,
        25,
        24,
        23,
        12,
        36,
        14,
        40,
        31,
        41,
        5
      ]
    }
  ],
  "jsonTests": [
    {
      "k": 2,
      "prices": [
        5,
        11,
        3,
        50,
        60,
        90
      ]
    },
    {
      "k": 1,
      "prices": []
    },
    {
      "k": 1,
      "prices": [
        1
      ]
    },
    {
      "k": 1,
      "prices": [
        1,
        10
      ]
    },
    {
      "k": 3,
      "prices": [
        1,
        10
      ]
    },
    {
      "k": 1,
      "prices": [
        3,
        2,
        5,
        7,
        1,
        3,
        7
      ]
    },
    {
      "k": 3,
      "prices": [
        5,
        11,
        3,
        50,
        60,
        90
      ]
    },
    {
      "k": 2,
      "prices": [
        5,
        11,
        3,
        50,
        40,
        90
      ]
    },
    {
      "k": 3,
      "prices": [
        5,
        11,
        3,
        50,
        40,
        90
      ]
    },
    {
      "k": 2,
      "prices": [
        50,
        25,
        12,
        4,
        3,
        10,
        1,
        100
      ]
    },
    {
      "k": 5,
      "prices": [
        100,
        99,
        98,
        97,
        1
      ]
    },
    {
      "k": 5,
      "prices": [
        1,
        100,
        2,
        200,
        3,
        300,
        4,
        400,
        5,
        500
      ]
    },
    {
      "k": 5,
      "prices": [
        1,
        100,
        101,
        200,
        201,
        300,
        301,
        400,
        401,
        500
      ]
    },
    {
      "k": 4,
      "prices": [
        1,
        25,
        24,
        23,
        12,
        36,
        14,
        40,
        31,
        41,
        5
      ]
    },
    {
      "k": 2,
      "prices": [
        1,
        25,
        24,
        23,
        12,
        36,
        14,
        40,
        31,
        41,
        5
      ]
    }
  ],
  "changelog": []
}