{
  "uid": "maximum-sum-submatrix",
  "testStrategy": "JSON",
  "name": "Maximum Sum Submatrix",
  "version": 0,
  "releaseDate": "2021-04-01T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 5248,
    "failureCount": 1366
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "524563826",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 2049
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given a two-dimensional array (a matrix) of potentially unequal height\n  and width that's filled with integers. You're also given a positive integer\n  <span>size</span>. Write a function that returns the maximum sum that can be\n  generated from a submatrix with dimensions <span>size * size</span>.\n</p>\n<p>For example, consider the following matrix:</p>\n<pre>\n[\n  [2, 4],\n  [5, 6],\n  [-3, 2],\n]\n</pre>\n<p>If <span>size = 2</span>, then the 2x2 submatrices to consider are:</p>\n<pre>\n[2, 4]\n[5, 6]\n------\n[5, 6]\n[-3, 2]\n</pre>\n<p>\n  The sum of the elements in the first submatrix is <span>17</span>, and the sum\n  of the elements in the second submatrix is <span>10</span>. In this example,\n  your function should return <span>17</span>.\n</p>\n<p>\n  Note: <span>size</span> will always be at least <span>1</span>, and the\n  dimensions of the input <span>matrix</span> will always be at least\n  <span>size * size</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">matrix</span> = \n[\n  [5, 3, -1, 5],\n  [-7, 3, 7, 4],\n  [12, 8, 0, 0],\n  [1, -8, -8, 2],\n]\n<span class=\"CodeEditor-promptParameter\">size</span> = 2\n</pre>\n<h3>Sample Output</h3>\n<pre>\n18\n<span class=\"CodeEditor-promptComment\">// [</span>\n<span class=\"CodeEditor-promptComment\">//   [., ., ., .],</span>\n<span class=\"CodeEditor-promptComment\">//   [., 3, 7, .],</span>\n<span class=\"CodeEditor-promptComment\">//   [., 8, 0, .],</span>\n<span class=\"CodeEditor-promptComment\">//   [., ., ., .],</span>\n<span class=\"CodeEditor-promptComment\">// ]</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  The brute-force approach to solve this problem involves simply considering all\n  possible submatrices of size <span>size * size</span>, determining their sums,\n  and finally returning the maximum sum. This approach is acceptable, but it\n  isn't optimal. Why isn't it optimal?\n</p>\n",
    "\n<p>\n  The approach stated in Hint #1 isn't optimal because it repeats some\n  additions. When considering submatrices of any size larger than\n  <span>1</span>, it's almost always the case that some these matrices will have\n  overlapping elements, meaning that we'll repeatedly add up the same numbers.\n  If we were to use the brute-force approach, we would get a time complexity of\n  <span>O(width * height * size)</span>. To achieve a more optimal time\n  complexity, we need to avoid readding elements that have already been added.\n  Can you think of a way to solve this problem in\n  <span>O(width * height)</span> time?\n</p>\n",
    "\n<p>\n  To avoid doing repeated addition, we have to use auxiliary space. Ideally,\n  this extra space will allow us to determine the sum of a submatrix of any size\n  in constant time. Start by creating a matrix with the same dimensions as the\n  input matrix (we call this matrix <span>sums</span>). The element at position\n  <span>i, j</span> (where <span>i</span> is the row and <span>j</span> is the\n  column) in this new matrix should be the sum of all the elements in the\n  submatrix whose top left corner is at <span>0, 0</span> and whose bottom right\n  corner is at <span>i, j</span>. How can you quickly fill up this new matrix,\n  and how can you then use it to determine the sum of a submatrix of any size in\n  constant time?\n</p>\n",
    "\n<p>\n  The sum of a matrix whose bottom right corner is at <span>i, j</span> (where\n  <span>size &lt;= i &lt;= j</span>) is simply\n  <span>sums[i][j] - sums[i - size][j] - sums[i][j - size] + sums[i - size][j - size]</span>.\n  See the Conceptual Overview section of this question's video explanation\n  for a more in-depth explanation.\n</p>"
  ],
  "spaceTime": "O(w * h) time | O(w * h) space - where w is the width of the matrix and h is the height",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint maximumSumSubmatrix(vector<vector<int>> matrix, int size) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <limits>\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> createSumMatrix(vector<vector<int>> matrix);\n\n// O(w * h) time | O(w * h) space - where w is\n// the width of the matrix and h is the height\nint maximumSumSubmatrix(vector<vector<int>> matrix, int size) {\n  vector<vector<int>> sums = createSumMatrix(matrix);\n  int maxSubMatrixSum = numeric_limits<int>::min();\n\n  for (int row = size - 1; row < matrix.size(); row++) {\n    for (int col = size - 1; col < matrix[row].size(); col++) {\n      int total = sums[row][col];\n\n      int touchesTopBorder = row - size < 0;\n      if (!touchesTopBorder) total -= sums[row - size][col];\n\n      int touchesLeftBorder = col - size < 0;\n      if (!touchesLeftBorder) total -= sums[row][col - size];\n\n      int touchesTopOrLeftBorder = touchesTopBorder || touchesLeftBorder;\n      if (!touchesTopOrLeftBorder) total += sums[row - size][col - size];\n\n      maxSubMatrixSum = max(maxSubMatrixSum, total);\n    }\n  }\n\n  return maxSubMatrixSum;\n}\n\nvector<vector<int>> createSumMatrix(vector<vector<int>> matrix) {\n  vector<vector<int>> sums;\n  for (int row = 0; row < matrix.size(); row++) {\n    sums.push_back({});\n    for (int col = 0; col < matrix[row].size(); col++) {\n      sums[row].push_back(0);\n    }\n  }\n  sums[0][0] = matrix[0][0];\n\n  // Fill the first row.\n  for (int idx = 1; idx < matrix[0].size(); idx++) {\n    sums[0][idx] = sums[0][idx - 1] + matrix[0][idx];\n  }\n\n  // Fill the first column.\n  for (int idx = 1; idx < matrix.size(); idx++) {\n    sums[idx][0] = sums[idx - 1][0] + matrix[idx][0];\n  }\n\n  // Fill the rest of the matrix.\n  for (int row = 1; row < matrix.size(); row++) {\n    for (int col = 1; col < matrix[row].size(); col++) {\n      sums[row][col] = sums[row - 1][col] + sums[row][col - 1] -\n                       sums[row - 1][col - 1] + matrix[row][col];\n    }\n  }\n\n  return sums;\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> matrix = {\n        {5, 3, -1, 5}, {-7, 3, 7, 4}, {12, 8, 0, 0}, {1, -8, -8, 2}};\n      auto size = 2;\n      auto expected = 18;\n      auto actual = maximumSumSubmatrix(matrix, size);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> matrix = {\n        {5, 3, -1, 5}, {-7, 3, 7, 4}, {12, 8, 0, 0}, {1, -8, -8, 2}};\n      auto size = 2;\n      auto expected = 18;\n      auto actual = maximumSumSubmatrix(matrix, size);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int MaximumSumSubmatrix(int[,] matrix, int size) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(w * h) time | O(w * h) space - where w is\n  // the width of the matrix and h is the height\n  public int MaximumSumSubmatrix(int[,] matrix, int size) {\n    int[,] sums = createSumMatrix(matrix);\n    int maxSubMatrixSum = Int32.MinValue;\n\n    for (int row = size - 1; row < matrix.GetLength(0); row++) {\n      for (int col = size - 1; col < matrix.GetLength(1); col++) {\n        int total = sums[row, col];\n\n        bool touchesTopBorder = (row - size < 0);\n        if (!touchesTopBorder) {\n          total -= sums[row - size, col];\n        }\n\n        bool touchesLeftBorder = (col - size < 0);\n        if (!touchesLeftBorder) {\n          total -= sums[row, col - size];\n        }\n\n        bool touchesTopOrLeftBorder = (touchesTopBorder || touchesLeftBorder);\n        if (!touchesTopOrLeftBorder) {\n          total += sums[row - size, col - size];\n        }\n\n        maxSubMatrixSum = Math.Max(maxSubMatrixSum, total);\n      }\n    }\n\n    return maxSubMatrixSum;\n  }\n\n  public int[,] createSumMatrix(int[,] matrix) {\n    int[,] sums = new int[matrix.GetLength(0), matrix.GetLength(1)];\n    sums[0, 0] = matrix[0, 0];\n\n    // Fill the first row.\n    for (int idx = 1; idx < matrix.GetLength(1); idx++) {\n      sums[0, idx] = sums[0, idx - 1] + matrix[0, idx];\n    }\n\n    // Fill the first column.\n    for (int idx = 1; idx < matrix.GetLength(0); idx++) {\n      sums[idx, 0] = sums[idx - 1, 0] + matrix[idx, 0];\n    }\n\n    // Fill in the rest of the matrix.\n    for (int row = 1; row < matrix.GetLength(0); row++) {\n      for (int col = 1; col < matrix.GetLength(1); col++) {\n        sums[row, col] = sums[row - 1, col] + sums[row, col - 1] -\n                         sums[row - 1, col - 1] + matrix[row, col];\n      }\n    }\n\n    return sums;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[,] matrix = new int[,] {\n      { 5, 3, -1, 5 }, { -7, 3, 7, 4 }, { 12, 8, 0, 0 }, { 1, -8, -8, 2 }\n    };\n    int size = 2;\n    int expected = 18;\n    var actual = new Program().MaximumSumSubmatrix(matrix, size);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[,] matrix = new int[,] {\n      { 5, 3, -1, 5 }, { -7, 3, 7, 4 }, { 12, 8, 0, 0 }, { 1, -8, -8, 2 }\n    };\n    int size = 2;\n    int expected = 18;\n    var actual = new Program().MaximumSumSubmatrix(matrix, size);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MaximumSumSubmatrix(matrix [][]int, size int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"math\"\n)\n\n// O(w * h) time | O(w * h) space - where w is\n// the width of the matrix and h is the height\nfunc MaximumSumSubmatrix(matrix [][]int, size int) int {\n\tsums := createSumMatrix(matrix)\n\tmaxSubMatrixSum := math.MinInt32\n\n\tfor row := size - 1; row < len(matrix); row++ {\n\t\tfor col := size - 1; col < len(matrix[row]); col++ {\n\t\t\ttotal := sums[row][col]\n\n\t\t\ttouchesTopBorder := row-size < 0\n\t\t\tif !touchesTopBorder {\n\t\t\t\ttotal -= sums[row-size][col]\n\t\t\t}\n\n\t\t\ttouchesLeftBorder := col-size < 0\n\t\t\tif !touchesLeftBorder {\n\t\t\t\ttotal -= sums[row][col-size]\n\t\t\t}\n\n\t\t\ttouchesTopOrLeftBorder := touchesTopBorder || touchesLeftBorder\n\t\t\tif !touchesTopOrLeftBorder {\n\t\t\t\ttotal += sums[row-size][col-size]\n\t\t\t}\n\n\t\t\tmaxSubMatrixSum = max(maxSubMatrixSum, total)\n\t\t}\n\t}\n\n\treturn maxSubMatrixSum\n}\n\nfunc createSumMatrix(matrix [][]int) [][]int {\n\tsums := make([][]int, len(matrix))\n\tfor i := range sums {\n\t\tsums[i] = make([]int, len(matrix[0]))\n\t}\n\tsums[0][0] = matrix[0][0]\n\n\t// Fill the first row.\n\tfor idx := 1; idx < len(matrix[0]); idx++ {\n\t\tsums[0][idx] = sums[0][idx-1] + matrix[0][idx]\n\t}\n\n\t// Fill the first column.\n\tfor idx := 1; idx < len(matrix); idx++ {\n\t\tsums[idx][0] = sums[idx-1][0] + matrix[idx][0]\n\t}\n\n\t// Fill the rest of the matrix.\n\tfor row := 1; row < len(matrix); row++ {\n\t\tfor col := 1; col < len(matrix[row]); col++ {\n\t\t\tsums[row][col] = sums[row-1][col] + sums[row][col-1] - sums[row-1][col-1] + matrix[row][col]\n\t\t}\n\t}\n\treturn sums\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tmatrix := [][]int{\n\t\t{5, 3, -1, 5},\n\t\t{-7, 3, 7, 4},\n\t\t{12, 8, 0, 0},\n\t\t{1, -8, -8, 2},\n\t}\n\tsize := 2\n\texpected := 18\n\tactual := MaximumSumSubmatrix(matrix, size)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tmatrix := [][]int{\n\t\t{5, 3, -1, 5},\n\t\t{-7, 3, 7, 4},\n\t\t{12, 8, 0, 0},\n\t\t{1, -8, -8, 2},\n\t}\n\tsize := 2\n\texpected := 18\n\tactual := MaximumSumSubmatrix(matrix, size)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int maximumSumSubmatrix(int[][] matrix, int size) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(w * h) time | O(w * h) space - where w is\n  // the width of the matrix and h is the height\n  public int maximumSumSubmatrix(int[][] matrix, int size) {\n    int[][] sums = createSumMatrix(matrix);\n    int maxSubMatrixSum = Integer.MIN_VALUE;\n\n    for (int row = size - 1; row < matrix.length; row++) {\n      for (int col = size - 1; col < matrix[row].length; col++) {\n        int total = sums[row][col];\n\n        boolean touchesTopBorder = (row - size < 0);\n        if (!touchesTopBorder) {\n          total -= sums[row - size][col];\n        }\n\n        boolean touchesLeftBorder = (col - size < 0);\n        if (!touchesLeftBorder) {\n          total -= sums[row][col - size];\n        }\n\n        boolean touchesTopOrLeftBorder =\n          (touchesTopBorder || touchesLeftBorder);\n        if (!touchesTopOrLeftBorder) {\n          total += sums[row - size][col - size];\n        }\n\n        maxSubMatrixSum = Math.max(maxSubMatrixSum, total);\n      }\n    }\n\n    return maxSubMatrixSum;\n  }\n\n  public int[][] createSumMatrix(int[][] matrix) {\n    int[][] sums = new int[matrix.length][matrix[0].length];\n    sums[0][0] = matrix[0][0];\n\n    // Fill the first row.\n    for (int idx = 1; idx < matrix[0].length; idx++) {\n      sums[0][idx] = sums[0][idx - 1] + matrix[0][idx];\n    }\n\n    // Fill the first column.\n    for (int idx = 1; idx < matrix.length; idx++) {\n      sums[idx][0] = sums[idx - 1][0] + matrix[idx][0];\n    }\n\n    // Fill in the rest of the matrix.\n    for (int row = 1; row < matrix.length; row++) {\n      for (int col = 1; col < matrix[0].length; col++) {\n        sums[row][col] = sums[row - 1][col] + sums[row][col - 1]\n          - sums[row - 1][col - 1] + matrix[row][col];\n      }\n    }\n\n    return sums;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] matrix =\n      new int[][] {{5, 3, -1, 5}, {-7, 3, 7, 4}, {12, 8, 0, 0}, {1, -8, -8, 2}};\n    int size = 2;\n    int expected = 18;\n    var actual = new Program().maximumSumSubmatrix(matrix, size);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] matrix =\n      new int[][] {{5, 3, -1, 5}, {-7, 3, 7, 4}, {12, 8, 0, 0}, {1, -8, -8, 2}};\n    int size = 2;\n    int expected = 18;\n    var actual = new Program().maximumSumSubmatrix(matrix, size);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function maximumSumSubmatrix(matrix, size) {\n  // Write your code here.\n  return 0;\n}\n\n// Do not edit the line below.\nexports.maximumSumSubmatrix = maximumSumSubmatrix;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(w * h) time | O(w * h) space - where w is\n// the width of the matrix and h is the height\nfunction maximumSumSubmatrix(matrix, size) {\n  const sums = createSumMatrix(matrix);\n  let maxSubMatrixSum = -Infinity;\n\n  for (let row = size - 1; row < matrix.length; row++) {\n    for (let col = size - 1; col < matrix[row].length; col++) {\n      let total = sums[row][col];\n\n      const touchesTopBorder = row - size < 0;\n      if (!touchesTopBorder) total -= sums[row - size][col];\n\n      const touchesLeftBorder = col - size < 0;\n      if (!touchesLeftBorder) total -= sums[row][col - size];\n\n      const touchesTopOrLeftBorder = touchesTopBorder || touchesLeftBorder;\n      if (!touchesTopOrLeftBorder) total += sums[row - size][col - size];\n\n      maxSubMatrixSum = Math.max(maxSubMatrixSum, total);\n    }\n  }\n\n  return maxSubMatrixSum;\n}\n\nfunction createSumMatrix(matrix) {\n  const sums = [];\n  for (let row = 0; row < matrix.length; row++) {\n    sums.push([]);\n    for (let col = 0; col < matrix[row].length; col++) {\n      sums[row].push(0);\n    }\n  }\n  sums[0][0] = matrix[0][0];\n\n  // Fill the first row.\n  for (let idx = 1; idx < matrix[0].length; idx++) {\n    sums[0][idx] = sums[0][idx - 1] + matrix[0][idx];\n  }\n\n  // Fill the first column.\n  for (let idx = 1; idx < matrix.length; idx++) {\n    sums[idx][0] = sums[idx - 1][0] + matrix[idx][0];\n  }\n\n  // Fill the rest of the matrix.\n  for (let row = 1; row < matrix.length; row++) {\n    for (let col = 1; col < matrix[row].length; col++) {\n      sums[row][col] =\n        sums[row - 1][col] + sums[row][col - 1] - sums[row - 1][col - 1] + matrix[row][col];\n    }\n  }\n\n  return sums;\n}\n\n// Do not edit the line below.\nexports.maximumSumSubmatrix = maximumSumSubmatrix;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const matrix = [\n    [5, 3, -1, 5],\n    [-7, 3, 7, 4],\n    [12, 8, 0, 0],\n    [1, -8, -8, 2],\n  ];\n  const size = 2;\n  const expected = 18;\n  const actual = program.maximumSumSubmatrix(matrix, size);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const matrix = [\n    [5, 3, -1, 5],\n    [-7, 3, 7, 4],\n    [12, 8, 0, 0],\n    [1, -8, -8, 2],\n  ];\n  const size = 2;\n  const expected = 18;\n  const actual = program.maximumSumSubmatrix(matrix, size);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun maximumSumSubmatrix(matrix: List<List<Int>>, size: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(w * h) time | O(w * h) space - where w is\n// the width of the matrix and h is the height\nfun maximumSumSubmatrix(matrix: List<List<Int>>, size: Int): Int {\n    val sums = createSumMatrix(matrix)\n    var maxSubMatrixSum = Int.MIN_VALUE\n\n    for (row in size - 1 until matrix.size) {\n        for (col in size - 1 until matrix[row].size) {\n            var total = sums[row][col]\n\n            val touchesTopBorder = row - size < 0\n            if (!touchesTopBorder) total -= sums[row - size][col]\n\n            val touchesLeftBorder = col - size < 0\n            if (!touchesLeftBorder) total -= sums[row][col - size]\n\n            val touchesTopOrLeftBorder = touchesTopBorder || touchesLeftBorder\n            if (!touchesTopOrLeftBorder) total += sums[row - size][col - size]\n\n            maxSubMatrixSum = max(maxSubMatrixSum, total)\n        }\n    }\n\n    return maxSubMatrixSum\n}\n\nfun createSumMatrix(matrix: List<List<Int>>): List<List<Int>> {\n    val sums = List(matrix.size, { MutableList(matrix[0].size, { 0 }) })\n    sums[0][0] = matrix[0][0]\n\n    // Fill the first row.\n    for (idx in 1 until matrix[0].size) {\n        sums[0][idx] = sums[0][idx - 1] + matrix[0][idx]\n    }\n\n    // Fill the first column.\n    for (idx in 1 until matrix.size) {\n        sums[idx][0] = sums[idx - 1][0] + matrix[idx][0]\n    }\n\n    // Fill the rest of the matrix.\n    for (row in 1 until matrix.size) {\n        for (col in 1 until matrix[row].size) {\n            sums[row][col] = sums[row - 1][col] + sums[row][col - 1] - sums[row - 1][col - 1] + matrix[row][col]\n        }\n    }\n\n    return sums\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.maximumSumSubmatrix\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val matrix = listOf(\n            listOf(5, 3, -1, 5),\n            listOf(-7, 3, 7, 4),\n            listOf(12, 8, 0, 0),\n            listOf(1, -8, -8, 2),\n        )\n        val size = 2\n        val expected = 18\n        val output = maximumSumSubmatrix(matrix, size)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.maximumSumSubmatrix\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val matrix = listOf(\n            listOf(5, 3, -1, 5),\n            listOf(-7, 3, 7, 4),\n            listOf(12, 8, 0, 0),\n            listOf(1, -8, -8, 2),\n        )\n        val size = 2\n        val expected = 18\n        val output = maximumSumSubmatrix(matrix, size)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def maximumSumSubmatrix(matrix, size):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(w * h) time | O(w * h) space - where w is\n# the width of the matrix and h is the height\ndef maximumSumSubmatrix(matrix, size):\n    sums = createSumMatrix(matrix)\n    maxSubMatrixSum = float(\"-inf\")\n\n    for row in range(size - 1, len(matrix)):\n        for col in range(size - 1, len(matrix[row])):\n            total = sums[row][col]\n\n            touchesTopBorder = row - size < 0\n            if not touchesTopBorder:\n                total -= sums[row - size][col]\n\n            touchesLeftBorder = col - size < 0\n            if not touchesLeftBorder:\n                total -= sums[row][col - size]\n\n            touchesTopOrLeftBorder = touchesTopBorder or touchesLeftBorder\n            if not touchesTopOrLeftBorder:\n                total += sums[row - size][col - size]\n\n            maxSubMatrixSum = max(maxSubMatrixSum, total)\n\n    return maxSubMatrixSum\n\n\ndef createSumMatrix(matrix):\n    sums = [[0 for _ in range(len(matrix[row]))] for row in range(len(matrix))]\n    sums[0][0] = matrix[0][0]\n\n    # Fill the first row.\n    for idx in range(1, len(matrix[0])):\n        sums[0][idx] = sums[0][idx - 1] + matrix[0][idx]\n\n    # Fill the first column.\n    for idx in range(1, len(matrix)):\n        sums[idx][0] = sums[idx - 1][0] + matrix[idx][0]\n\n    # Fill the rest of the matrix.\n    for row in range(1, len(matrix)):\n        for col in range(1, len(matrix[row])):\n            sums[row][col] = (\n                sums[row - 1][col] + sums[row][col - 1] - sums[row - 1][col - 1] + matrix[row][col]\n            )\n\n    return sums\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        matrix = [[5, 3, -1, 5], [-7, 3, 7, 4], [12, 8, 0, 0], [1, -8, -8, 2]]\n        size = 2\n        expected = 18\n        actual = program.maximumSumSubmatrix(matrix, size)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        matrix = [[5, 3, -1, 5], [-7, 3, 7, 4], [12, 8, 0, 0], [1, -8, -8, 2]]\n        size = 2\n        expected = 18\n        actual = program.maximumSumSubmatrix(matrix, size)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def maximumSumSubmatrix(matrix, size)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def maximumSumSubmatrix(matrix, size)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maximumSumSubmatrix\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.maximumSumSubmatrix\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func maximumSumSubmatrix(_ matrix: [[Int]], _ size: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(w * h) time | O(w * h) space - where w is\n  // the width of the matrix and h is the height\n  func maximumSumSubmatrix(_ matrix: [[Int]], _ size: Int) -> Int {\n    var sums = createSumMatrix(matrix)\n    var maxSubMatrixSum = Int.min\n\n    for row in stride(from: size - 1, to: matrix.count, by: 1) {\n      for col in stride(from: size - 1, to: matrix[row].count, by: 1) {\n        var total = sums[row][col]\n\n        let touchesTopBorder = row - size < 0\n        if !touchesTopBorder {\n          total -= sums[row - size][col]\n        }\n\n        let touchesLeftBorder = col - size < 0\n        if !touchesLeftBorder {\n          total -= sums[row][col - size]\n        }\n\n        let touchesTopOrLeftBorder = touchesTopBorder || touchesLeftBorder\n        if !touchesTopOrLeftBorder {\n          total += sums[row - size][col - size]\n        }\n\n        maxSubMatrixSum = max(maxSubMatrixSum, total)\n      }\n    }\n\n    return maxSubMatrixSum\n  }\n\n  func createSumMatrix(_ matrix: [[Int]]) -> [[Int]] {\n    var sums = Array(repeating: Array(repeating: 0, count: matrix[0].count), count: matrix.count)\n    sums[0][0] = matrix[0][0]\n\n    // Fill the first row.\n    for idx in stride(from: 1, to: matrix[0].count, by: 1) {\n      sums[0][idx] = sums[0][idx - 1] + matrix[0][idx]\n    }\n\n    // Fill the first column.\n    for idx in stride(from: 1, to: matrix.count, by: 1) {\n      sums[idx][0] = sums[idx - 1][0] + matrix[idx][0]\n    }\n\n    // Fill the rest of the matrix.\n    for row in stride(from: 1, to: matrix.count, by: 1) {\n      for col in stride(from: 1, to: matrix[row].count, by: 1) {\n        sums[row][col] = sums[row - 1][col] + sums[row][col - 1] - sums[row - 1][col - 1] + matrix[row][col]\n      }\n    }\n    return sums\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var matrix = [\n        [5, 3, -1, 5],\n        [-7, 3, 7, 4],\n        [12, 8, 0, 0],\n        [1, -8, -8, 2],\n      ]\n      var size = 2\n      var expected = 18\n      var actual = Program().maximumSumSubmatrix(matrix, size)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var matrix = [\n        [5, 3, -1, 5],\n        [-7, 3, 7, 4],\n        [12, 8, 0, 0],\n        [1, -8, -8, 2],\n      ]\n      var size = 2\n      var expected = 18\n      var actual = Program().maximumSumSubmatrix(matrix, size)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function maximumSumSubmatrix(matrix: number[][], size: number) {\n  // Write your code here.\n  return 0;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(w * h) time | O(w * h) space - where w is\n// the width of the matrix and h is the height\nexport function maximumSumSubmatrix(matrix: number[][], size: number) {\n  const sums = createSumMatrix(matrix);\n  let maxSubMatrixSum = -Infinity;\n\n  for (let row = size - 1; row < matrix.length; row++) {\n    for (let col = size - 1; col < matrix[row].length; col++) {\n      let total = sums[row][col];\n\n      const touchesTopBorder = row - size < 0;\n      if (!touchesTopBorder) total -= sums[row - size][col];\n\n      const touchesLeftBorder = col - size < 0;\n      if (!touchesLeftBorder) total -= sums[row][col - size];\n\n      const touchesTopOrLeftBorder = touchesTopBorder || touchesLeftBorder;\n      if (!touchesTopOrLeftBorder) total += sums[row - size][col - size];\n\n      maxSubMatrixSum = Math.max(maxSubMatrixSum, total);\n    }\n  }\n\n  return maxSubMatrixSum;\n}\n\nfunction createSumMatrix(matrix: number[][]) {\n  const sums: number[][] = [];\n  for (let row = 0; row < matrix.length; row++) {\n    sums.push([]);\n    for (let col = 0; col < matrix[row].length; col++) {\n      sums[row].push(0);\n    }\n  }\n  sums[0][0] = matrix[0][0];\n\n  // Fill the first row.\n  for (let idx = 1; idx < matrix[0].length; idx++) {\n    sums[0][idx] = sums[0][idx - 1] + matrix[0][idx];\n  }\n\n  // Fill the first column.\n  for (let idx = 1; idx < matrix.length; idx++) {\n    sums[idx][0] = sums[idx - 1][0] + matrix[idx][0];\n  }\n\n  // Fill the rest of the matrix.\n  for (let row = 1; row < matrix.length; row++) {\n    for (let col = 1; col < matrix[row].length; col++) {\n      sums[row][col] =\n        sums[row - 1][col] + sums[row][col - 1] - sums[row - 1][col - 1] + matrix[row][col];\n    }\n  }\n\n  return sums;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const matrix = [\n    [5, 3, -1, 5],\n    [-7, 3, 7, 4],\n    [12, 8, 0, 0],\n    [1, -8, -8, 2],\n  ];\n  const size = 2;\n  const expected = 18;\n  const actual = program.maximumSumSubmatrix(matrix, size);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const matrix = [\n    [5, 3, -1, 5],\n    [-7, 3, 7, 4],\n    [12, 8, 0, 0],\n    [1, -8, -8, 2],\n  ];\n  const size = 2;\n  const expected = 18;\n  const actual = program.maximumSumSubmatrix(matrix, size);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "matrix",
      "example": [
        [
          5,
          3,
          -1,
          5
        ],
        [
          -7,
          3,
          7,
          4
        ],
        [
          12,
          8,
          0,
          0
        ],
        [
          1,
          -8,
          -8,
          2
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "type": "integer"
          },
          "minItems": 1,
          "type": "array"
        },
        "minItems": 1,
        "type": "array"
      }
    },
    {
      "name": "size",
      "example": 2,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "matrix": [
        [
          5,
          3,
          -1,
          5
        ],
        [
          -7,
          3,
          7,
          4
        ],
        [
          12,
          8,
          0,
          0
        ],
        [
          1,
          -8,
          -8,
          2
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ]
      ],
      "size": 3
    },
    {
      "matrix": [
        [
          2,
          4
        ],
        [
          5,
          6
        ],
        [
          -3,
          2
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ],
        [
          2,
          4,
          5,
          2,
          3
        ]
      ],
      "size": 4
    },
    {
      "matrix": [
        [
          1
        ]
      ],
      "size": 1
    },
    {
      "matrix": [
        [
          1,
          1
        ],
        [
          1,
          1
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          1,
          1,
          2,
          -1
        ],
        [
          1,
          1,
          2,
          -1
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "size": 5
    },
    {
      "matrix": [
        [
          2,
          1,
          1,
          1,
          1,
          4,
          -1,
          1,
          1,
          5
        ],
        [
          1,
          -1,
          1,
          1,
          1,
          1,
          -1,
          1,
          4,
          1
        ],
        [
          -50,
          12,
          -1,
          1,
          5,
          1,
          -1,
          1,
          1,
          1
        ],
        [
          -52,
          99,
          1,
          -1,
          1,
          1,
          -1,
          1,
          1,
          1
        ],
        [
          1,
          -10,
          -287,
          9,
          -1,
          1,
          -1,
          1,
          1,
          1
        ],
        [
          1,
          2,
          1,
          8,
          1,
          -1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          -1,
          1,
          1,
          1
        ]
      ],
      "size": 6
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ]
      ],
      "size": 3
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          -1,
          -10,
          -10,
          -4,
          -5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          -5,
          -4,
          -3,
          -10,
          -1
        ]
      ],
      "size": 1
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          -1,
          -10,
          -10,
          -4,
          -5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          -5,
          -4,
          -3,
          -10,
          -1
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ]
      ],
      "size": 4
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ]
      ],
      "size": 5
    },
    {
      "matrix": [
        [
          22,
          24,
          -9,
          23
        ],
        [
          12,
          10,
          -19,
          35
        ],
        [
          45,
          -20,
          -20,
          99
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          -100,
          200,
          -50,
          5
        ],
        [
          5,
          6,
          7,
          8
        ]
      ],
      "size": 3
    }
  ],
  "jsonTests": [
    {
      "matrix": [
        [
          5,
          3,
          -1,
          5
        ],
        [
          -7,
          3,
          7,
          4
        ],
        [
          12,
          8,
          0,
          0
        ],
        [
          1,
          -8,
          -8,
          2
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ]
      ],
      "size": 3
    },
    {
      "matrix": [
        [
          2,
          4
        ],
        [
          5,
          6
        ],
        [
          -3,
          2
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ],
        [
          2,
          4,
          5,
          2,
          3
        ]
      ],
      "size": 4
    },
    {
      "matrix": [
        [
          1
        ]
      ],
      "size": 1
    },
    {
      "matrix": [
        [
          1,
          1
        ],
        [
          1,
          1
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          1,
          1,
          2,
          -1
        ],
        [
          1,
          1,
          2,
          -1
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ],
      "size": 5
    },
    {
      "matrix": [
        [
          2,
          1,
          1,
          1,
          1,
          4,
          -1,
          1,
          1,
          5
        ],
        [
          1,
          -1,
          1,
          1,
          1,
          1,
          -1,
          1,
          4,
          1
        ],
        [
          -50,
          12,
          -1,
          1,
          5,
          1,
          -1,
          1,
          1,
          1
        ],
        [
          -52,
          99,
          1,
          -1,
          1,
          1,
          -1,
          1,
          1,
          1
        ],
        [
          1,
          -10,
          -287,
          9,
          -1,
          1,
          -1,
          1,
          1,
          1
        ],
        [
          1,
          2,
          1,
          8,
          1,
          -1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          -1,
          1,
          1,
          1
        ]
      ],
      "size": 6
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ],
        [
          -5,
          -4,
          -3,
          -2,
          -1
        ]
      ],
      "size": 3
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          -1,
          -10,
          -10,
          -4,
          -5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          -5,
          -4,
          -3,
          -10,
          -1
        ]
      ],
      "size": 1
    },
    {
      "matrix": [
        [
          -1,
          -2,
          -3,
          -4,
          -5
        ],
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          -1,
          -10,
          -10,
          -4,
          -5
        ],
        [
          5,
          5,
          5,
          5,
          5
        ],
        [
          -5,
          -4,
          -3,
          -10,
          -1
        ]
      ],
      "size": 2
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ]
      ],
      "size": 4
    },
    {
      "matrix": [
        [
          3,
          -4,
          6,
          -5,
          1
        ],
        [
          1,
          -2,
          8,
          -4,
          -2
        ],
        [
          3,
          -8,
          9,
          3,
          1
        ],
        [
          -7,
          3,
          4,
          2,
          7
        ],
        [
          -3,
          7,
          -5,
          7,
          -6
        ]
      ],
      "size": 5
    },
    {
      "matrix": [
        [
          22,
          24,
          -9,
          23
        ],
        [
          12,
          10,
          -19,
          35
        ],
        [
          45,
          -20,
          -20,
          99
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          -100,
          200,
          -50,
          5
        ],
        [
          5,
          6,
          7,
          8
        ]
      ],
      "size": 3
    }
  ],
  "changelog": []
}