{
  "uid": "middle-node",
  "testStrategy": "JSON",
  "name": "Middle Node",
  "version": 0,
  "releaseDate": "2023-04-08T00:00:00Z",
  "category": "Linked Lists",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 8919,
    "failureCount": 1097
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "762096781",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 439
  },
  "prompt": "<div class=\"html\">\n  <p>\n    You're given a Linked List with at least one node. Write a function\n    that returns the middle node of the Linked List. If there are two middle\n    nodes (i.e. an even length list), your function should return the second\n    of these nodes.\n  </p>\n\n  <p>\n    Each <span>LinkedList</span> node has an integer <span>value</span> as well as\n    a <span>next</span> node pointing to the next node in the list or to\n    <span>None</span> / <span>null</span> if it's the tail of the list.\n  </p>\n\n  <h3>Sample Input</h3>\n<pre><span class=\"CodeEditor-promptParameter\">linkedList</span> = 2 -> 7 -> 3 -> 5</pre>\n  <h3>Sample Output</h3>\n<pre>3 -> 5 <span class=\"CodeEditor-promptComment\">// The middle could be 7 or 3,\n// we return the second middle node</span></pre>\n</div>",
  "hints": [
    "<p>\n  The middle node of a Linked List will always be at index <span>length / 2</span>.\n</p>\n",
    "\n<p>\n  While the LinkedList class has no length, you can calculate it by simply\n  iterating through the entire list.\n</p>\n",
    "\n<p>\n  If you create a slow and a fast pointer, with the fast one iterating at twice\n  the speed, the slow one will be in the middle when the fast one reaches the\n  end.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the number of nodes in the linked list",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\n// This is an input struct. Do not edit.\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next = nullptr;\n\n  LinkedList(int value) { this->value = value; }\n};\n\nLinkedList* middleNode(LinkedList* linkedList) {\n  // Write your code here.\n  return nullptr;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// This is an input struct. Do not edit.\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next = nullptr;\n\n  LinkedList(int value) { this->value = value; }\n};\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nLinkedList* middleNode(LinkedList* linkedList) {\n  int count = 0;\n  LinkedList* currentNode = linkedList;\n  while (currentNode != nullptr) {\n    count++;\n    currentNode = currentNode->next;\n  }\n\n  LinkedList* middleNode = linkedList;\n  for (int i = 0; i < count / 2; i++) {\n    middleNode = middleNode->next;\n  }\n  return middleNode;\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// This is an input struct. Do not edit.\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next = nullptr;\n\n  LinkedList(int value) { this->value = value; }\n};\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nLinkedList* middleNode(LinkedList* linkedList) {\n  LinkedList* slowNode = linkedList;\n  LinkedList* fastNode = linkedList;\n  while (fastNode != nullptr && fastNode->next != nullptr) {\n    slowNode = slowNode->next;\n    fastNode = fastNode->next->next;\n  }\n\n  return slowNode;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      LinkedList* linkedList = new LinkedList(0);\n      linkedList->next = new LinkedList(1);\n      LinkedList* expected = new LinkedList(2);\n      linkedList->next->next = expected;\n      expected->next = new LinkedList(3);\n      auto actual = middleNode(linkedList);\n      assert(expected == actual);\n    });\n  }\n};",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      LinkedList* linkedList = new LinkedList(0);\n      linkedList->next = new LinkedList(1);\n      LinkedList* expected = new LinkedList(2);\n      linkedList->next->next = expected;\n      expected->next = new LinkedList(3);\n      auto actual = middleNode(linkedList);\n      assert(expected == actual);\n    });\n  }\n};"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      this.next = null;\n    }\n  }\n\n  public LinkedList MiddleNode(LinkedList linkedList) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      this.next = null;\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the linked list\n  public LinkedList MiddleNode(LinkedList linkedList) {\n    int count = 0;\n    LinkedList currentNode = linkedList;\n    while (currentNode != null) {\n      count++;\n      currentNode = currentNode.next;\n    }\n\n    LinkedList MiddleNode = linkedList;\n    for (int i = 0; i < count / 2; i++) {\n      MiddleNode = MiddleNode.next;\n    }\n    return MiddleNode;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      this.next = null;\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the linked list\n  public LinkedList MiddleNode(LinkedList linkedList) {\n    LinkedList slowNode = linkedList;\n    LinkedList fastNode = linkedList;\n    while (fastNode != null && fastNode.next != null) {\n      slowNode = slowNode.next;\n      fastNode = fastNode.next.next;\n    }\n\n    return slowNode;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.LinkedList linkedList = new Program.LinkedList(1);\n    Program.LinkedList curr = linkedList;\n    for (int i = 1; i < 4; i++) {\n      curr.next = new Program.LinkedList(i);\n      curr = curr.next;\n    }\n\n    List<int> expected = new List<int> { 2, 3 };\n    var actual = new Program().MiddleNode(linkedList);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, toList(actual)));\n  }\n\n  private List<int> toList(Program.LinkedList linkedList) {\n    List<int> list = new List<int>();\n    Program.LinkedList curr = linkedList;\n    while (curr != null) {\n      list.Add(curr.value);\n      curr = curr.next;\n    }\n    return list;\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.LinkedList linkedList = new Program.LinkedList(1);\n    Program.LinkedList curr = linkedList;\n    for (int i = 1; i < 4; i++) {\n      curr.next = new Program.LinkedList(i);\n      curr = curr.next;\n    }\n\n    List<int> expected = new List<int> { 2, 3 };\n    var actual = new Program().MiddleNode(linkedList);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, toList(actual)));\n  }\n\n  private List<int> toList(Program.LinkedList linkedList) {\n    List<int> list = new List<int>();\n    Program.LinkedList curr = linkedList;\n    while (curr != null) {\n      list.Add(curr.value);\n      curr = curr.next;\n    }\n    return list;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\n// This is an input struct. Do not edit.\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\nfunc MiddleNode(linkedList *LinkedList) *LinkedList {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// This is an input struct. Do not edit.\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nfunc MiddleNode(linkedList *LinkedList) *LinkedList {\n\tcount := 0\n\tcurrentNode := linkedList\n\n\tfor currentNode != nil {\n\t\tcount += 1\n\t\tcurrentNode = currentNode.Next\n\t}\n\n\tmiddleNode := linkedList\n\tfor i := 0; i < count/2; i++ {\n\t\tmiddleNode = middleNode.Next\n\t}\n\treturn middleNode\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// This is an input struct. Do not edit.\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nfunc MiddleNode(linkedList *LinkedList) *LinkedList {\n\tslowNode := linkedList\n\tfastNode := linkedList\n\tfor fastNode != nil && fastNode.Next != nil {\n\t\tslowNode = slowNode.Next\n\t\tfastNode = fastNode.Next.Next\n\t}\n\n\treturn slowNode\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tlinkedList := &LinkedList{Value: 0}\n\tlinkedList.Next = &LinkedList{Value: 1}\n\texpected := &LinkedList{Value: 2}\n\tlinkedList.Next.Next = expected\n\texpected.Next = &LinkedList{Value: 3}\n\tactual := MiddleNode(linkedList)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tlinkedList := &LinkedList{Value: 0}\n\tlinkedList.Next = &LinkedList{Value: 1}\n\texpected := &LinkedList{Value: 2}\n\tlinkedList.Next.Next = expected\n\texpected.Next = &LinkedList{Value: 3}\n\tactual := MiddleNode(linkedList)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  public static class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      this.next = null;\n    }\n  }\n\n  public LinkedList middleNode(LinkedList linkedList) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  public static class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      this.next = null;\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the linked list\n  public LinkedList middleNode(LinkedList linkedList) {\n    int count = 0;\n    LinkedList currentNode = linkedList;\n    while (currentNode != null) {\n      count++;\n      currentNode = currentNode.next;\n    }\n\n    LinkedList middleNode = linkedList;\n    for (int i = 0; i < count / 2; i++) {\n      middleNode = middleNode.next;\n    }\n    return middleNode;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  public static class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      this.next = null;\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the linked list\n  public LinkedList middleNode(LinkedList linkedList) {\n    LinkedList slowNode = linkedList;\n    LinkedList fastNode = linkedList;\n    while (fastNode != null && fastNode.next != null) {\n      slowNode = slowNode.next;\n      fastNode = fastNode.next.next;\n    }\n\n    return slowNode;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.LinkedList linkedList = new Program.LinkedList(0);\n    linkedList.next = new Program.LinkedList(1);\n    Program.LinkedList expected = new Program.LinkedList(2);\n    linkedList.next.next = expected;\n    expected.next = new Program.LinkedList(3);\n    var actual = new Program().middleNode(linkedList);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.LinkedList linkedList = new Program.LinkedList(0);\n    linkedList.next = new Program.LinkedList(1);\n    Program.LinkedList expected = new Program.LinkedList(2);\n    linkedList.next.next = expected;\n    expected.next = new Program.LinkedList(3);\n    var actual = new Program().middleNode(linkedList);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexports.LinkedList = LinkedList;\n\nfunction middleNode(linkedList) {\n  // Write your code here.\n  return null;\n}\n\n// Do not edit the line below.\nexports.middleNode = middleNode;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nfunction middleNode(linkedList) {\n  let count = 0;\n  let currentNode = linkedList;\n  while (currentNode !== null) {\n    count++;\n    currentNode = currentNode.next;\n  }\n\n  let middleNode = linkedList;\n  for (let i = 0; i < Math.floor(count / 2); i++) {\n    middleNode = middleNode.next;\n  }\n  return middleNode;\n}\n\n// Do not edit the lines below.\nexports.LinkedList = LinkedList;\nexports.middleNode = middleNode;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nfunction middleNode(linkedList) {\n  let slowNode = linkedList;\n  let fastNode = linkedList;\n  while (fastNode !== null && fastNode.next !== null) {\n    slowNode = slowNode.next;\n    fastNode = fastNode.next.next;\n  }\n\n  return slowNode;\n}\n\n// Do not edit the lines below.\nexports.LinkedList = LinkedList;\nexports.middleNode = middleNode;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const linkedList = new program.LinkedList(0);\n  linkedList.next = new program.LinkedList(1);\n  const expected = new program.LinkedList(2);\n  linkedList.next.next = expected;\n  expected.next = new program.LinkedList(3);\n  const actual = program.middleNode(linkedList);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const linkedList = new program.LinkedList(0);\n  linkedList.next = new program.LinkedList(1);\n  const expected = new program.LinkedList(2);\n  linkedList.next.next = expected;\n  expected.next = new program.LinkedList(3);\n  const actual = program.middleNode(linkedList);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\nfun middleNode(linkedList: LinkedList): LinkedList {\n    // Write your code here.\n    return LinkedList(-1)\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nfun middleNode(linkedList: LinkedList): LinkedList {\n    var count = 0\n    var currentNode: LinkedList? = linkedList\n    while (currentNode != null) {\n        count++\n        currentNode = currentNode.next\n    }\n\n    var middleNode = linkedList\n    for (i in 0 until count / 2) {\n        middleNode = middleNode.next!!\n    }\n    return middleNode\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nfun middleNode(linkedList: LinkedList): LinkedList {\n    var slowNode = linkedList\n    var fastNode: LinkedList? = linkedList\n    while (fastNode != null && fastNode.next != null) {\n        slowNode = slowNode.next!!\n        fastNode = fastNode.next!!.next\n    }\n\n    return slowNode\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.middleNode\nimport com.algoexpert.program.LinkedList as LinkedList\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val linkedList = LinkedList(0)\n        linkedList.next = LinkedList(1)\n        val expected = LinkedList(2)\n        linkedList.next!!.next = expected\n        expected.next = LinkedList(3)\n        val output = middleNode(linkedList)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.middleNode\nimport com.algoexpert.program.LinkedList as LinkedList\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val linkedList = LinkedList(0)\n        linkedList.next = LinkedList(1)\n        val expected = LinkedList(2)\n        linkedList.next!!.next = expected\n        expected.next = LinkedList(3)\n        val output = middleNode(linkedList)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is an input class. Do not edit.\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\ndef middleNode(linkedList):\n    # Write your code here.\n    return None\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input class. Do not edit.\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\n# O(n) time | O(1) space - where n is the number of nodes in the linked list\ndef middleNode(linkedList):\n    count = 0\n    currentNode = linkedList\n    while currentNode is not None:\n        count += 1\n        currentNode = currentNode.next\n\n    middleNode = linkedList\n    for _ in range(count // 2):\n        middleNode = middleNode.next\n    return middleNode\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input class. Do not edit.\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\n# O(n) time | O(1) space - where n is the number of nodes in the linked list\ndef middleNode(linkedList):\n    slowNode = linkedList\n    fastNode = linkedList\n    while fastNode and fastNode.next:\n        slowNode = slowNode.next\n        fastNode = fastNode.next.next\n\n    return slowNode\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        linkedList = program.LinkedList(0)\n        linkedList.next = program.LinkedList(1)\n        expected = program.LinkedList(2)\n        linkedList.next.next = expected\n        expected.next = program.LinkedList(3)\n        actual = program.middleNode(linkedList)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        linkedList = program.LinkedList(0)\n        linkedList.next = program.LinkedList(1)\n        expected = program.LinkedList(2)\n        linkedList.next.next = expected\n        expected.next = program.LinkedList(3)\n        actual = program.middleNode(linkedList)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "# This is an input struct. Do not edit.\nclass LinkedList\n    attr_accessor :value\n    attr_accessor :next\n\n    def initialize(value)\n        @value = value\n        @next = nil\n    end\nend\n\n\nclass Program\n    def middleNode(linkedList)\n        # Write your code here.\n        return nil\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass LinkedList\n    attr_accessor :value\n    attr_accessor :next\n\n    def initialize(value)\n        @value = value\n        @next = nil\n    end\nend\n\n\nclass Program\n    def middleNode(linkedList)\n        # Write your code here.\n        return nil\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.middleNode\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.middleNode\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class LinkedList: Hashable {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n    }\n\n    func hash(into hasher: inout Hasher) {\n      hasher.combine(ObjectIdentifier(self).hashValue)\n    }\n\n    static func == (left: LinkedList, right: LinkedList) -> Bool {\n      return left === right\n    }\n  }\n\n  func middleNode(_ linkedList: LinkedList) -> LinkedList? {\n    // Write your code here.\n    return LinkedList(value: -1)\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // This is an input class. Do not edit.\n  class LinkedList: Hashable {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n    }\n\n    func hash(into hasher: inout Hasher) {\n      hasher.combine(ObjectIdentifier(self).hashValue)\n    }\n\n    static func == (left: LinkedList, right: LinkedList) -> Bool {\n      return left === right\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the linked list\n  func middleNode(_ linkedList: LinkedList) -> LinkedList? {\n    var count = 0\n    var currentNode: LinkedList? = linkedList\n\n    while currentNode != nil {\n      count += 1\n      currentNode = currentNode!.next\n    }\n\n    var middleNode: LinkedList? = linkedList\n    for i in 0 ..< (count / 2) {\n      middleNode = middleNode!.next\n    }\n    return middleNode\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // This is an input class. Do not edit.\n  class LinkedList: Hashable {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n    }\n\n    func hash(into hasher: inout Hasher) {\n      hasher.combine(ObjectIdentifier(self).hashValue)\n    }\n\n    static func == (left: LinkedList, right: LinkedList) -> Bool {\n      return left === right\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the linked list\n  func middleNode(_ linkedList: LinkedList) -> LinkedList? {\n    var slowNode: LinkedList? = linkedList\n    var fastNode: LinkedList? = linkedList\n    while fastNode != nil && fastNode!.next != nil {\n      slowNode = slowNode!.next\n      fastNode = fastNode!.next!.next\n    }\n    return slowNode\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var linkedList = Program.LinkedList(value: 0)\n      linkedList.next = Program.LinkedList(value: 1)\n      var expected = Program.LinkedList(value: 2)\n      linkedList.next!.next = expected\n      expected.next = Program.LinkedList(value: 3)\n      var actual = Program().middleNode(linkedList)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var linkedList = Program.LinkedList(value: 0)\n      linkedList.next = Program.LinkedList(value: 1)\n      var expected = Program.LinkedList(value: 2)\n      linkedList.next!.next = expected\n      expected.next = Program.LinkedList(value: 3)\n      var actual = Program().middleNode(linkedList)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport function middleNode(linkedList: LinkedList) {\n  // Write your code here.\n  return null;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nexport function middleNode(linkedList: LinkedList) {\n  let count = 0;\n  let currentNode: LinkedList | null = linkedList;\n  while (currentNode !== null) {\n    count++;\n    currentNode = currentNode.next;\n  }\n\n  let middleNode = linkedList;\n  for (let i = 0; i < Math.floor(count / 2); i++) {\n    middleNode = middleNode.next!;\n  }\n  return middleNode;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the linked list\nexport function middleNode(linkedList: LinkedList) {\n  let slowNode = linkedList;\n  let fastNode: LinkedList | null = linkedList;\n  while (fastNode !== null && fastNode.next !== null) {\n    slowNode = slowNode.next!;\n    fastNode = fastNode.next.next;\n  }\n\n  return slowNode;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const linkedList = new program.LinkedList(0);\n  linkedList.next = new program.LinkedList(1);\n  const expected = new program.LinkedList(2);\n  linkedList.next.next = expected;\n  expected.next = new program.LinkedList(3);\n  const actual = program.middleNode(linkedList);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const linkedList = new program.LinkedList(0);\n  linkedList.next = new program.LinkedList(1);\n  const expected = new program.LinkedList(2);\n  linkedList.next.next = expected;\n  expected.next = new program.LinkedList(3);\n  const actual = program.middleNode(linkedList);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "linkedList",
      "example": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": null,
            "value": 1
          }
        ]
      },
      "schema": {
        "description": "A Singly Linked List is represented by a list of <span>nodes</span> and a <span>head</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>next</span> pointers and by the <span>head</span>.\n",
        "properties": {
          "head": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "next": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "next"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "head",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": null,
            "value": 1
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": null,
            "value": 3
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "5",
        "nodes": [
          {
            "id": "5",
            "next": "7",
            "value": 5
          },
          {
            "id": "7",
            "next": "9",
            "value": 7
          },
          {
            "id": "9",
            "next": null,
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": null,
            "value": 4
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": null,
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "10",
            "value": 9
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "3",
            "value": 1
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "9",
            "value": 5
          },
          {
            "id": "9",
            "next": "10",
            "value": 9
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "next": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "next": "3",
            "value": 1
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "next": "5-3",
            "value": 5
          },
          {
            "id": "5-3",
            "next": "5-4",
            "value": 5
          },
          {
            "id": "5-4",
            "next": "10",
            "value": 5
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "1-2",
            "value": 2
          },
          {
            "id": "1-2",
            "next": "4",
            "value": 1
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "next": "7",
            "value": 5
          },
          {
            "id": "7",
            "next": "10",
            "value": 7
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "next": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "next": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "next": "7",
            "value": 5
          },
          {
            "id": "7",
            "next": "10",
            "value": 7
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    }
  ],
  "jsonTests": [
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": null,
            "value": 1
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": null,
            "value": 3
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "5",
        "nodes": [
          {
            "id": "5",
            "next": "7",
            "value": 5
          },
          {
            "id": "7",
            "next": "9",
            "value": 7
          },
          {
            "id": "9",
            "next": null,
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": null,
            "value": 4
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": null,
            "value": 9
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "6",
            "value": 5
          },
          {
            "id": "6",
            "next": "7",
            "value": 6
          },
          {
            "id": "7",
            "next": "8",
            "value": 7
          },
          {
            "id": "8",
            "next": "9",
            "value": 8
          },
          {
            "id": "9",
            "next": "10",
            "value": 9
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "3",
            "value": 1
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "9",
            "value": 5
          },
          {
            "id": "9",
            "next": "10",
            "value": 9
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "next": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "next": "3",
            "value": 1
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "next": "5-3",
            "value": 5
          },
          {
            "id": "5-3",
            "next": "5-4",
            "value": 5
          },
          {
            "id": "5-4",
            "next": "10",
            "value": 5
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "1-2",
            "value": 2
          },
          {
            "id": "1-2",
            "next": "4",
            "value": 1
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "next": "7",
            "value": 5
          },
          {
            "id": "7",
            "next": "10",
            "value": 7
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    },
    {
      "linkedList": {
        "head": "1",
        "nodes": [
          {
            "id": "1",
            "next": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "next": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "next": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "next": "7",
            "value": 5
          },
          {
            "id": "7",
            "next": "10",
            "value": 7
          },
          {
            "id": "10",
            "next": null,
            "value": 10
          }
        ]
      }
    }
  ],
  "changelog": []
}