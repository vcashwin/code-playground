{
  "uid": "min-number-of-coins-for-change",
  "testStrategy": "JSON",
  "name": "Min Number Of Coins For Change",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 33201,
    "failureCount": 13152
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "225712463",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1007
  },
  "prompt": "<div class=\"html\">\n<p>\n  Given an array of positive integers representing coin denominations and a\n  single non-negative integer <span>n</span> representing a target amount of\n  money, write a function that returns the smallest number of coins needed to\n  make change for (to sum up to) that target amount using the given coin\n  denominations.\n</p>\n<p>\n  Note that you have access to an unlimited amount of coins. In other words, if\n  the denominations are <span>[1, 5, 10]</span>, you have access to an unlimited\n  amount of <span>1</span>s, <span>5</span>s, and <span>10</span>s.\n</p>\n<p>\n  If it's impossible to make change for the target amount, return\n  <span>-1</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">n</span> = 7\n<span class=\"CodeEditor-promptParameter\">denoms</span> = [1, 5, 10]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n3 <span class=\"CodeEditor-promptComment\">// 2x1 + 1x5</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building an array of the minimum number of coins needed to make change for all amounts between 0 and n inclusive. Note that no coins are needed to make change for 0: in order to make change for 0, you do not need to use any coins.\n</p>\n",
    "\n<p>\nBuild up the array mentioned in Hint #1 one coin denomination at a time. In other words, find the minimum number of coins needed to make change for all amounts between 0 and n with only one denomination, then with two, etc., until you use all denominations.\n</p>"
  ],
  "spaceTime": "O(nd) time | O(n) space - where n is the target amount and d is the number of coin denominations",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint minNumberOfCoinsForChange(int n, vector<int> denoms) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <climits>\n#include <vector>\nusing namespace std;\n\n// O(nd) time | O(n) space\nint minNumberOfCoinsForChange(int n, vector<int> denoms) {\n  vector<int> numOfCoins(n + 1, INT_MAX);\n  numOfCoins[0] = 0;\n  int toCompare = 0;\n  for (int denom : denoms) {\n    for (int amount = 0; amount < numOfCoins.size(); amount++) {\n      if (denom <= amount) {\n        if (numOfCoins[amount - denom] == INT_MAX) {\n          toCompare = numOfCoins[amount - denom];\n        } else {\n          toCompare = numOfCoins[amount - denom] + 1;\n        }\n        numOfCoins[amount] = min(numOfCoins[amount], toCompare);\n      }\n    }\n  }\n  return numOfCoins[n] != INT_MAX ? numOfCoins[n] : -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{1, 5, 10};\n      assert(minNumberOfCoinsForChange(7, input) == 3);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{1, 5, 10};\n      assert(minNumberOfCoinsForChange(7, input) == 3);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int MinNumberOfCoinsForChange(int n, int[] denoms) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nd) time | O(n) space\n  public static int MinNumberOfCoinsForChange(int n, int[] denoms) {\n    int[] numOfCoins = new int[n + 1];\n    Array.Fill(numOfCoins, Int32.MaxValue);\n    numOfCoins[0] = 0;\n    int toCompare = 0;\n    foreach (int denom in denoms) {\n      for (int amount = 0; amount < numOfCoins.Length; amount++) {\n        if (denom <= amount) {\n          if (numOfCoins[amount - denom] == Int32.MaxValue) {\n            toCompare = numOfCoins[amount - denom];\n          } else {\n            toCompare = numOfCoins[amount - denom] + 1;\n          }\n          numOfCoins[amount] = Math.Min(numOfCoins[amount], toCompare);\n        }\n      }\n    }\n    return numOfCoins[n] != Int32.MaxValue ? numOfCoins[n] : -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 1, 5, 10 };\n    Utils.AssertTrue(Program.MinNumberOfCoinsForChange(7, input) == 3);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 1, 5, 10 };\n    Utils.AssertTrue(Program.MinNumberOfCoinsForChange(7, input) == 3);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MinNumberOfCoinsForChange(n int, denoms []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\nfunc MinNumberOfCoinsForChange(n int, denoms []int) int {\n\tnumOfCoins := make([]int, n+1)\n\tfor i := range numOfCoins {\n\t\tnumOfCoins[i] = math.MaxInt32\n\t}\n\tnumOfCoins[0] = 0\n\tfor _, denom := range denoms {\n\t\tfor amount := range numOfCoins {\n\t\t\tif denom <= amount {\n\t\t\t\tnumOfCoins[amount] = min(numOfCoins[amount], numOfCoins[amount-denom]+1)\n\t\t\t}\n\t\t}\n\t}\n\tif numOfCoins[n] != math.MaxInt32 {\n\t\treturn numOfCoins[n]\n\t}\n\treturn -1\n}\n\nfunc min(arg1 int, rest ...int) int {\n\tcurr := arg1\n\tfor _, num := range rest {\n\t\tif num < curr {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{1, 5, 10}\n\tactual := MinNumberOfCoinsForChange(7, input)\n\trequire.Equal(t, 3, actual)\n}\n",
      "unitTests": "package main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{1, 5, 10}\n\tactual := MinNumberOfCoinsForChange(7, input)\n\trequire.Equal(t, 3, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int minNumberOfCoinsForChange(int n, int[] denoms) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.Arrays;\n\nclass Program {\n  // O(nd) time | O(n) space\n  public static int minNumberOfCoinsForChange(int n, int[] denoms) {\n    int[] numOfCoins = new int[n + 1];\n    Arrays.fill(numOfCoins, Integer.MAX_VALUE);\n    numOfCoins[0] = 0;\n    int toCompare = 0;\n    for (int denom : denoms) {\n      for (int amount = 0; amount < numOfCoins.length; amount++) {\n        if (denom <= amount) {\n          if (numOfCoins[amount - denom] == Integer.MAX_VALUE) {\n            toCompare = numOfCoins[amount - denom];\n          } else {\n            toCompare = numOfCoins[amount - denom] + 1;\n          }\n          numOfCoins[amount] = Math.min(numOfCoins[amount], toCompare);\n        }\n      }\n    }\n    return numOfCoins[n] != Integer.MAX_VALUE ? numOfCoins[n] : -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {1, 5, 10};\n    Utils.assertTrue(Program.minNumberOfCoinsForChange(7, input) == 3);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {1, 5, 10};\n    Utils.assertTrue(Program.minNumberOfCoinsForChange(7, input) == 3);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function minNumberOfCoinsForChange(n, denoms) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.minNumberOfCoinsForChange = minNumberOfCoinsForChange;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nd) time | O(n) space\nfunction minNumberOfCoinsForChange(n, denoms) {\n  const numOfCoins = new Array(n + 1).fill(Infinity);\n  numOfCoins[0] = 0;\n  for (const denom of denoms) {\n    for (let amount = 0; amount < numOfCoins.length; amount++) {\n      if (denom <= amount) {\n        numOfCoins[amount] = Math.min(numOfCoins[amount], numOfCoins[amount - denom] + 1);\n      }\n    }\n  }\n  return numOfCoins[n] !== Infinity ? numOfCoins[n] : -1;\n}\n\nexports.minNumberOfCoinsForChange = minNumberOfCoinsForChange;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfCoinsForChange(7, [1, 5, 10])).to.deep.equal(3);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfCoinsForChange(7, [1, 5, 10])).to.deep.equal(3);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun minNumberOfCoinsForChange(n: Int, denoms: List<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\n// O(nd) time | O(n) space\nfun minNumberOfCoinsForChange(n: Int, denoms: List<Int>): Int {\n    val numOfCoins = MutableList(n + 1) { Int.MAX_VALUE }\n    numOfCoins[0] = 0\n    var toCompare: Int\n    for (denom in denoms) {\n        for (amount in 0 until numOfCoins.size) {\n            if (denom <= amount) {\n                if (numOfCoins[amount - denom] == Int.MAX_VALUE) {\n                    toCompare = numOfCoins[amount - denom]\n                } else {\n                    toCompare = numOfCoins[amount - denom] + 1\n                }\n                numOfCoins[amount] = min(numOfCoins[amount], toCompare)\n            }\n        }\n    }\n    return if (numOfCoins[n] != Int.MAX_VALUE) numOfCoins[n] else -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.minNumberOfCoinsForChange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val denoms = listOf(1, 5, 10)\n        val output = minNumberOfCoinsForChange(7, denoms)\n        val expected = 3\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.minNumberOfCoinsForChange\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val denoms = listOf(1, 5, 10)\n        val output = minNumberOfCoinsForChange(7, denoms)\n        val expected = 3\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def minNumberOfCoinsForChange(n, denoms):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nd) time | O(n) space\ndef minNumberOfCoinsForChange(n, denoms):\n    numOfCoins = [float(\"inf\") for amount in range(n + 1)]\n    numOfCoins[0] = 0\n    for denom in denoms:\n        for amount in range(len(numOfCoins)):\n            if denom <= amount:\n                numOfCoins[amount] = min(numOfCoins[amount], numOfCoins[amount - denom] + 1)\n    return numOfCoins[n] if numOfCoins[n] != float(\"inf\") else -1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.minNumberOfCoinsForChange(7, [1, 5, 10]), 3)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.minNumberOfCoinsForChange(7, [1, 5, 10]), 3)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def minNumberOfCoinsForChange(n, denoms)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def minNumberOfCoinsForChange(n, denoms)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.minNumberOfCoinsForChange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.minNumberOfCoinsForChange\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func minimumNumberOfCoinsForChange(target: Int, denominations: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nd) time | O(n) space\n  func minimumNumberOfCoinsForChange(target: Int, denominations: [Int]) -> Int {\n    var numberOfCoins = Array(repeating: Int(Int16.max), count: target + 1)\n    numberOfCoins[0] = 0\n\n    for denomination in denominations {\n      for amount in 0 ..< numberOfCoins.count {\n        if denomination <= amount {\n          numberOfCoins[amount] = min(numberOfCoins[amount], 1 + numberOfCoins[amount - denomination])\n        }\n      }\n    }\n\n    return numberOfCoins[target] != Int(Int16.max) ? numberOfCoins[target] : -1\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(3, program.minimumNumberOfCoinsForChange(target: 7, denominations: [1, 5, 10]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(3, program.minimumNumberOfCoinsForChange(target: 7, denominations: [1, 5, 10]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function minNumberOfCoinsForChange(n: number, denoms: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nd) time | O(n) space\nexport function minNumberOfCoinsForChange(n: number, denoms: number[]) {\n  const numOfCoins: number[] = new Array(n + 1).fill(Infinity);\n  numOfCoins[0] = 0;\n  for (const denom of denoms) {\n    for (let amount = 0; amount < numOfCoins.length; amount++) {\n      if (denom <= amount) {\n        numOfCoins[amount] = Math.min(numOfCoins[amount], numOfCoins[amount - denom] + 1);\n      }\n    }\n  }\n  return numOfCoins[n] !== Infinity ? numOfCoins[n] : -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfCoinsForChange(7, [1, 5, 10])).to.deep.equal(3);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfCoinsForChange(7, [1, 5, 10])).to.deep.equal(3);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "n",
      "example": 7,
      "schema": {
        "minimum": 0,
        "type": "integer"
      }
    },
    {
      "name": "denoms",
      "example": [
        1,
        5,
        10
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "tests": [
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 7
    },
    {
      "denoms": [
        1,
        10,
        5
      ],
      "n": 7
    },
    {
      "denoms": [
        10,
        1,
        5
      ],
      "n": 7
    },
    {
      "denoms": [
        1,
        2,
        3
      ],
      "n": 0
    },
    {
      "denoms": [
        2,
        1
      ],
      "n": 3
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 4
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 10
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 11
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 24
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 25
    },
    {
      "denoms": [
        2,
        4
      ],
      "n": 7
    },
    {
      "denoms": [
        3,
        7
      ],
      "n": 7
    },
    {
      "denoms": [
        3,
        5
      ],
      "n": 9
    },
    {
      "denoms": [
        3,
        4,
        5
      ],
      "n": 9
    },
    {
      "denoms": [
        39,
        45,
        130,
        40,
        4,
        1
      ],
      "n": 135
    },
    {
      "denoms": [
        39,
        45,
        130,
        40,
        4,
        1,
        60,
        75
      ],
      "n": 135
    },
    {
      "denoms": [
        1,
        3,
        4
      ],
      "n": 10
    }
  ],
  "jsonTests": [
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 7
    },
    {
      "denoms": [
        1,
        10,
        5
      ],
      "n": 7
    },
    {
      "denoms": [
        10,
        1,
        5
      ],
      "n": 7
    },
    {
      "denoms": [
        1,
        2,
        3
      ],
      "n": 0
    },
    {
      "denoms": [
        2,
        1
      ],
      "n": 3
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 4
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 10
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 11
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 24
    },
    {
      "denoms": [
        1,
        5,
        10
      ],
      "n": 25
    },
    {
      "denoms": [
        2,
        4
      ],
      "n": 7
    },
    {
      "denoms": [
        3,
        7
      ],
      "n": 7
    },
    {
      "denoms": [
        3,
        5
      ],
      "n": 9
    },
    {
      "denoms": [
        3,
        4,
        5
      ],
      "n": 9
    },
    {
      "denoms": [
        39,
        45,
        130,
        40,
        4,
        1
      ],
      "n": 135
    },
    {
      "denoms": [
        39,
        45,
        130,
        40,
        4,
        1,
        60,
        75
      ],
      "n": 135
    },
    {
      "denoms": [
        1,
        3,
        4
      ],
      "n": 10
    }
  ],
  "changelog": []
}