{
  "uid": "min-number-of-jumps",
  "testStrategy": "JSON",
  "name": "Min Number Of Jumps",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 17851,
    "failureCount": 5288
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "224221528",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1556
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given a non-empty array of positive integers where each integer represents the\n  maximum number of steps you can take forward in the array. For example, if the\n  element at index <span>1</span> is <span>3</span>, you can go from index\n  <span>1</span> to index <span>2</span>, <span>3</span>, or <span>4</span>.\n</p>\n<p>\n  Write a function that returns the minimum number of jumps needed to reach the\n  final index.\n</p>\n<p>\n  Note that jumping from index <span>i</span> to index <span>i + x</span> always\n  constitutes one jump, no matter how large <span>x</span> is.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n4 <span class=\"CodeEditor-promptComment\">// 3 --> (4 or 2) --> (2 or 3) --> 7 --> 3</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nTry building an array of the minimum number of jumps needed to go from index 0 to all indices. Start at index 0 and progressively build up the array, using previously calculated values to find next ones.\n</p>\n",
    "\n<p>\nBuilding the array mentioned in Hint #1 should be feasible using two for loops. In an effort to optimize your algorithm, realize that at any point in the array you know the farthest index that you can reach as well as the number of steps that you have left until you must \"consume\" a jump.\n</p>\n",
    "\n<p>\nAfter initializing your maximum reach as well as your current number of steps to the value stored at index 0, you can easily update your maximum reach as you traverse the input array by simply comparing it to the value stored at each index. You can also remove one step from your current number of steps at each index, since moving from one index to the next uses up one step. When your steps reach zero, find a way to calculate how many steps you actually have left using the maximum reach and the index that you're at.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint minNumberOfJumps(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <climits>\n#include <vector>\nusing namespace std;\n\n// O(n^2) time | O(n) space\nint minNumberOfJumps(vector<int> array) {\n  vector<int> jumps(array.size(), INT_MAX);\n  jumps[0] = 0;\n  for (int i = 1; i < array.size(); i++) {\n    for (int j = 0; j < i; j++) {\n      if (array[j] >= i - j) {\n        jumps[i] = min(jumps[j] + 1, jumps[i]);\n      }\n    }\n  }\n  return jumps[jumps.size() - 1];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space\nint minNumberOfJumps(vector<int> array) {\n  if (array.size() == 1) {\n    return 0;\n  }\n  int jumps = 0;\n  int maxReach = array[0];\n  int steps = array[0];\n  for (int i = 1; i < array.size() - 1; i++) {\n    maxReach = max(maxReach, i + array[i]);\n    steps--;\n    if (steps == 0) {\n      jumps++;\n      steps = maxReach - i;\n    }\n  }\n  return jumps + 1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3};\n      assert(minNumberOfJumps(input) == 4);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input{3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3};\n      assert(minNumberOfJumps(input) == 4);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int MinNumberOfJumps(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n^2) time | O(n) space\n  public static int MinNumberOfJumps(int[] array) {\n    int[] jumps = new int[array.Length];\n    Array.Fill(jumps, Int32.MaxValue);\n    jumps[0] = 0;\n    for (int i = 1; i < array.Length; i++) {\n      for (int j = 0; j < i; j++) {\n        if (array[j] >= i - j) {\n          jumps[i] = Math.Min(jumps[j] + 1, jumps[i]);\n        }\n      }\n    }\n    return jumps[jumps.Length - 1];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static int MinNumberOfJumps(int[] array) {\n    if (array.Length == 1) {\n      return 0;\n    }\n    int jumps = 0;\n    int maxReach = array[0];\n    int steps = array[0];\n    for (int i = 1; i < array.Length - 1; i++) {\n      maxReach = Math.Max(maxReach, i + array[i]);\n      steps--;\n      if (steps == 0) {\n        jumps++;\n        steps = maxReach - i;\n      }\n    }\n    return jumps + 1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3 };\n    Utils.AssertTrue(Program.MinNumberOfJumps(input) == 4);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = { 3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3 };\n    Utils.AssertTrue(Program.MinNumberOfJumps(input) == 4);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MinNumberOfJumps(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(n) space\nfunc MinNumberOfJumps(array []int) int {\n\tjumps := make([]int, len(array))\n\tfor i := range jumps {\n\t\tjumps[i] = -1\n\t}\n\tjumps[0] = 0\n\tfor i := 1; i < len(array); i++ {\n\t\tfor j := 0; j < i; j++ {\n\t\t\tif array[j] >= i-j && (jumps[i] == -1 || jumps[j]+1 < jumps[i]) {\n\t\t\t\tjumps[i] = jumps[j] + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn jumps[len(array)-1]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space\nfunc MinNumberOfJumps(array []int) int {\n\tif len(array) == 1 {\n\t\treturn 0\n\t}\n\tjumps := 0\n\tmaxReach := array[0]\n\tsteps := array[0]\n\tfor i := 1; i < len(array)-1; i++ {\n\t\tif i+array[i] > maxReach {\n\t\t\tmaxReach = i + array[i]\n\t\t}\n\t\tsteps -= 1\n\t\tif steps == 0 {\n\t\t\tjumps += 1\n\t\t\tsteps = maxReach - i\n\t\t}\n\t}\n\treturn jumps + 1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 4\n\toutput := MinNumberOfJumps([]int{3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 4\n\toutput := MinNumberOfJumps([]int{3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int minNumberOfJumps(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.Arrays;\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static int minNumberOfJumps(int[] array) {\n    int[] jumps = new int[array.length];\n    Arrays.fill(jumps, Integer.MAX_VALUE);\n    jumps[0] = 0;\n    for (int i = 1; i < array.length; i++) {\n      for (int j = 0; j < i; j++) {\n        if (array[j] >= i - j) {\n          jumps[i] = Math.min(jumps[j] + 1, jumps[i]);\n        }\n      }\n    }\n    return jumps[jumps.length - 1];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int minNumberOfJumps(int[] array) {\n    if (array.length == 1) {\n      return 0;\n    }\n    int jumps = 0;\n    int maxReach = array[0];\n    int steps = array[0];\n    for (int i = 1; i < array.length - 1; i++) {\n      maxReach = Math.max(maxReach, i + array[i]);\n      steps--;\n      if (steps == 0) {\n        jumps++;\n        steps = maxReach - i;\n      }\n    }\n    return jumps + 1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3};\n    Utils.assertTrue(Program.minNumberOfJumps(input) == 4);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3};\n    Utils.assertTrue(Program.minNumberOfJumps(input) == 4);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function minNumberOfJumps(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.minNumberOfJumps = minNumberOfJumps;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction minNumberOfJumps(array) {\n  const jumps = new Array(array.length).fill(Infinity);\n  jumps[0] = 0;\n  for (let i = 1; i < array.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (array[j] >= i - j) {\n        jumps[i] = Math.min(jumps[j] + 1, jumps[i]);\n      }\n    }\n  }\n  return jumps[jumps.length - 1];\n}\n\nexports.minNumberOfJumps = minNumberOfJumps;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nfunction minNumberOfJumps(array) {\n  if (array.length === 1) return 0;\n  let jumps = 0;\n  let maxReach = array[0];\n  let steps = array[0];\n  for (let i = 1; i < array.length - 1; i++) {\n    maxReach = Math.max(maxReach, i + array[i]);\n    steps--;\n    if (steps === 0) {\n      jumps++;\n      steps = maxReach - i;\n    }\n  }\n  return jumps + 1;\n}\n\nexports.minNumberOfJumps = minNumberOfJumps;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfJumps([3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3])).to.deep.equal(4);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfJumps([3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3])).to.deep.equal(4);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun minNumberOfJumps(array: List<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\nfun minNumberOfJumps(array: List<Int>): Int {\n    val jumps = MutableList(array.size) { Int.MAX_VALUE }\n    jumps[0] = 0\n    for (i in 1 until array.size) {\n        for (j in 0 until i) {\n            if (array[j] >= i - j) {\n                jumps[i] = min(jumps[j] + 1, jumps[i])\n            }\n        }\n    }\n    return jumps[jumps.size - 1]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\nfun minNumberOfJumps(array: List<Int>): Int {\n    if (array.size == 1) {\n        return 0\n    }\n    var jumps = 0\n    var maxReach = array[0]\n    var steps = array[0]\n    for (i in 1 until array.size - 1) {\n        maxReach = max(maxReach, i + array[i])\n        steps--\n        if (steps == 0) {\n            jumps++\n            steps = maxReach - i\n        }\n    }\n    return jumps + 1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.minNumberOfJumps\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3)\n        val output = minNumberOfJumps(input)\n        val expected = 4\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.minNumberOfJumps\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3)\n        val output = minNumberOfJumps(input)\n        val expected = 4\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def minNumberOfJumps(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef minNumberOfJumps(array):\n    jumps = [float(\"inf\") for x in array]\n    jumps[0] = 0\n    for i in range(1, len(array)):\n        for j in range(0, i):\n            if array[j] >= i - j:\n                jumps[i] = min(jumps[j] + 1, jumps[i])\n    return jumps[-1]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space\ndef minNumberOfJumps(array):\n    if len(array) == 1:\n        return 0\n    jumps = 0\n    maxReach = array[0]\n    steps = array[0]\n    for i in range(1, len(array) - 1):\n        maxReach = max(maxReach, i + array[i])\n        steps -= 1\n        if steps == 0:\n            jumps += 1\n            steps = maxReach - i\n    return jumps + 1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.minNumberOfJumps([3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3]), 4)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.minNumberOfJumps([3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3]), 4)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def minNumberOfJumps(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def minNumberOfJumps(array)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def minNumberOfJumps(array)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.minNumberOfJumps\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.minNumberOfJumps\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func minNumberOfJumps(array: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space\n  func minNumberOfJumps(array: [Int]) -> Int {\n    var jumps = Array(repeating: Int.max, count: array.count)\n\n    jumps[0] = 0\n\n    for i in 0 ..< array.count {\n      for j in 0 ..< i {\n        if array[j] + j >= i {\n          jumps[i] = min(jumps[i], jumps[j] + 1)\n        }\n      }\n    }\n\n    return jumps[jumps.count - 1]\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  func minNumberOfJumps(array: [Int]) -> Int {\n    if array.count == 1 {\n      return 0\n    }\n\n    var jumps = 0\n    var steps = array[0]\n    var maximumReach = array[0]\n\n    for i in 1 ..< array.count - 1 {\n      maximumReach = max(maximumReach, array[i] + i)\n\n      steps -= 1\n\n      if steps == 0 {\n        jumps += 1\n\n        steps = maximumReach - i\n      }\n    }\n\n    return jumps + 1\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 9\") { () throws -> Void in\n      let output = program.minNumberOfJumps(array: [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3])\n      try assertEqual(4, output)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 9\") { () throws -> Void in\n      let output = program.minNumberOfJumps(array: [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3])\n      try assertEqual(4, output)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function minNumberOfJumps(array: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nexport function minNumberOfJumps(array: number[]) {\n  const jumps: number[] = new Array(array.length).fill(Infinity);\n  jumps[0] = 0;\n  for (let i = 1; i < array.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (array[j] >= i - j) {\n        jumps[i] = Math.min(jumps[j] + 1, jumps[i]);\n      }\n    }\n  }\n  return jumps[jumps.length - 1];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nexport function minNumberOfJumps(array: number[]) {\n  if (array.length === 1) return 0;\n  let jumps = 0;\n  let maxReach = array[0];\n  let steps = array[0];\n  for (let i = 1; i < array.length - 1; i++) {\n    maxReach = Math.max(maxReach, i + array[i]);\n    steps--;\n    if (steps === 0) {\n      jumps++;\n      steps = maxReach - i;\n    }\n  }\n  return jumps + 1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfJumps([3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3])).to.deep.equal(4);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.minNumberOfJumps([3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3])).to.deep.equal(4);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        1
      ]
    },
    {
      "array": [
        3,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        2,
        3,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        2,
        3,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        2,
        2,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        6,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        10,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        12,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        12,
        2,
        1,
        2,
        3,
        15,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        1
      ]
    },
    {
      "array": [
        3,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        2,
        3,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        2,
        3,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        1,
        2,
        2,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        6,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        4,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        10,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        12,
        2,
        1,
        2,
        3,
        7,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        3,
        12,
        2,
        1,
        2,
        3,
        15,
        1,
        1,
        1,
        3,
        2,
        3,
        2,
        1,
        1,
        1,
        1
      ]
    }
  ],
  "changelog": []
}