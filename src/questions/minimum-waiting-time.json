{
  "uid": "minimum-waiting-time",
  "testStrategy": "JSON",
  "name": "Minimum Waiting Time",
  "version": 0,
  "releaseDate": "2021-01-19T00:00:00Z",
  "category": "Greedy Algorithms",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 48798,
    "failureCount": 13129
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "497547733",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 926
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given a non-empty array of positive integers representing the amounts\n  of time that specific queries take to execute. Only one query can be executed\n  at a time, but the queries can be executed in any order.\n</p>\n<p>\n  A query's <b>waiting time</b> is defined as the amount of time that it must\n  wait before its execution starts. In other words, if a query is executed\n  second, then its waiting time is the duration of the first query; if a query\n  is executed third, then its waiting time is the sum of the durations of the\n  first two queries.\n</p>\n<p>\n  Write a function that returns the minimum amount of total waiting time for all\n  of the queries. For example, if you're given the queries of durations\n  <span>[1, 4, 5]</span>, then the total waiting time if the queries were\n  executed in the order of <span>[5, 1, 4]</span> would be\n  <span>(0) + (5) + (5 + 1) = 11</span>. The first query of duration\n  <span>5</span> would be executed immediately, so its waiting time would be\n  <span>0</span>, the second query of duration <span>1</span> would have to wait\n  <span>5</span> seconds (the duration of the first query) to be executed, and\n  the last query would have to wait the duration of the first two queries before\n  being executed.\n</p>\n<p>Note: you're allowed to mutate the input array.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">queries</span> = [3, 2, 1, 2, 6]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n17\n</pre>\n</div>",
  "hints": [
    "<p>\nEven though you don't need to return the actual order in which the queries will be executed to minimize the total waiting time, it's important to determine what this order should be. Start by doing so.\n</p>\n",
    "\n<p>\nCan you solve this problem with constant space? What advantage does being able to mutate the input array provide?\n</p>\n",
    "\n<p>\nSort the input array in place, and execute the shortest queries in their sorted order. This should allow you to calculate the minimum waiting time. \n</p>\n",
    "\n<p>\nCreate a variable to store the total waiting time, and iterate through the sorted input array. At each iteration, multiply the number of queries left by the duration of the current query, and add that to the total waiting time.\n</p>"
  ],
  "spaceTime": "O(nlogn) time | O(1) space - where n is the number of queries",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint minimumWaitingTime(vector<int> queries) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(nlogn) time | O(1) space - where n is the number of queries\nint minimumWaitingTime(vector<int> queries) {\n  sort(queries.begin(), queries.end());\n\n  int totalWaitingTime = 0;\n  for (int idx = 0; idx < queries.size(); idx++) {\n    int duration = queries[idx];\n    int queriesLeft = queries.size() - (idx + 1);\n    totalWaitingTime += duration * queriesLeft;\n  }\n\n  return totalWaitingTime;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> queries = {3, 2, 1, 2, 6};\n      int expected = 17;\n      auto actual = minimumWaitingTime(queries);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> queries = {3, 2, 1, 2, 6};\n      int expected = 17;\n      auto actual = minimumWaitingTime(queries);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int MinimumWaitingTime(int[] queries) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Linq;\n\npublic class Program {\n  // O(nlogn) time | O(1) space - where n is the number of queries\n  public int MinimumWaitingTime(int[] queries) {\n    Array.Sort(queries);\n\n    int totalWaitingTime = 0;\n    for (int idx = 0; idx < queries.Length; idx++) {\n      int duration = queries[idx];\n      int queriesLeft = queries.Length - (idx + 1);\n      totalWaitingTime += duration * queriesLeft;\n    }\n\n    return totalWaitingTime;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] queries = new int[] { 3, 2, 1, 2, 6 };\n    int expected = 17;\n    var actual = new Program().MinimumWaitingTime(queries);\n    Utils.AssertTrue(actual == expected);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] queries = new int[] { 3, 2, 1, 2, 6 };\n    int expected = 17;\n    var actual = new Program().MinimumWaitingTime(queries);\n    Utils.AssertTrue(actual == expected);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MinimumWaitingTime(queries []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"sort\"\n)\n\n// O(nlogn) time | O(1) space - where n is the number of queries\nfunc MinimumWaitingTime(queries []int) int {\n\tsort.Ints(queries)\n\n\ttotalWaitingTime := 0\n\tfor idx, duration := range queries {\n\t\tqueriesLeft := len(queries) - (idx + 1)\n\t\ttotalWaitingTime += duration * queriesLeft\n\t}\n\n\treturn totalWaitingTime\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tqueries := []int{3, 2, 1, 2, 6}\n\texpected := 17\n\tactual := MinimumWaitingTime(queries)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tqueries := []int{3, 2, 1, 2, 6}\n\texpected := 17\n\tactual := MinimumWaitingTime(queries)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int minimumWaitingTime(int[] queries) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlogn) time | O(1) space - where n is the number of queries\n  public int minimumWaitingTime(int[] queries) {\n    Arrays.sort(queries);\n\n    int totalWaitingTime = 0;\n    for (int idx = 0; idx < queries.length; idx++) {\n      int duration = queries[idx];\n      int queriesLeft = queries.length - (idx + 1);\n      totalWaitingTime += duration * queriesLeft;\n    }\n\n    return totalWaitingTime;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] queries = new int[] {3, 2, 1, 2, 6};\n    int expected = 17;\n    var actual = new Program().minimumWaitingTime(queries);\n    Utils.assertTrue(actual == expected);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] queries = new int[] {3, 2, 1, 2, 6};\n    int expected = 17;\n    var actual = new Program().minimumWaitingTime(queries);\n    Utils.assertTrue(actual == expected);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function minimumWaitingTime(queries) {\n  // Write your code here.\n  return 0;\n}\n\n// Do not edit the line below.\nexports.minimumWaitingTime = minimumWaitingTime;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlogn) time | O(1) space - where n is the number of queries\nfunction minimumWaitingTime(queries) {\n  queries.sort((a, b) => a - b);\n\n  let totalWaitingTime = 0;\n  for (let idx = 0; idx < queries.length; idx++) {\n    const duration = queries[idx];\n    const queriesLeft = queries.length - (idx + 1);\n    totalWaitingTime += duration * queriesLeft;\n  }\n\n  return totalWaitingTime;\n}\n\n// Do not edit the line below.\nexports.minimumWaitingTime = minimumWaitingTime;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const queries = [3, 2, 1, 2, 6];\n  const expected = 17;\n  const actual = program.minimumWaitingTime(queries);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const queries = [3, 2, 1, 2, 6];\n  const expected = 17;\n  const actual = program.minimumWaitingTime(queries);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun minimumWaitingTime(queries: MutableList<Int>): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nlogn) time | O(1) space - where n is the number of queries\nfun minimumWaitingTime(queries: MutableList<Int>): Int {\n    queries.sort()\n\n    var totalWaitingTime = 0\n    for (idx in 0 until queries.size) {\n        val duration = queries[idx]\n        val queriesLeft = queries.size - (idx + 1)\n        totalWaitingTime += duration * queriesLeft\n    }\n\n    return totalWaitingTime\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.minimumWaitingTime\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val queries = mutableListOf(3, 2, 1, 2, 6)\n        val expected = 17\n        val output = minimumWaitingTime(queries)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.minimumWaitingTime\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val queries = mutableListOf(3, 2, 1, 2, 6)\n        val expected = 17\n        val output = minimumWaitingTime(queries)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def minimumWaitingTime(queries):\n    # Write your code here.\n    return 0\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlogn) time | O(1) space - where n is the number of queries\ndef minimumWaitingTime(queries):\n    queries.sort()\n\n    totalWaitingTime = 0\n    for idx, duration in enumerate(queries):\n        queriesLeft = len(queries) - (idx + 1)\n        totalWaitingTime += duration * queriesLeft\n\n    return totalWaitingTime\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        queries = [3, 2, 1, 2, 6]\n        expected = 17\n        actual = program.minimumWaitingTime(queries)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        queries = [3, 2, 1, 2, 6]\n        expected = 17\n        actual = program.minimumWaitingTime(queries)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def minimumWaitingTime(queries)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def minimumWaitingTime(queries)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.minimumWaitingTime\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.minimumWaitingTime\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func minimumWaitingTime(_ queries: inout [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlogn) time | O(1) space - where n is the number of queries\n  func minimumWaitingTime(_ queries: inout [Int]) -> Int {\n    queries.sort()\n\n    var totalWaitingTime = 0\n    for (idx, duration) in queries.enumerated() {\n      let queriesLeft = queries.count - (idx + 1)\n      totalWaitingTime += duration * queriesLeft\n    }\n\n    return totalWaitingTime\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var queries = [3, 2, 1, 2, 6]\n      var expected = 17\n      var actual = Program().minimumWaitingTime(&queries)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var queries = [3, 2, 1, 2, 6]\n      var expected = 17\n      var actual = Program().minimumWaitingTime(&queries)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function minimumWaitingTime(queries: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlogn) time | O(1) space - where n is the number of queries\nexport function minimumWaitingTime(queries: number[]) {\n  queries.sort((a, b) => a - b);\n\n  let totalWaitingTime = 0;\n  for (let idx = 0; idx < queries.length; idx++) {\n    const duration = queries[idx];\n    const queriesLeft = queries.length - (idx + 1);\n    totalWaitingTime += duration * queriesLeft;\n  }\n\n  return totalWaitingTime;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const queries = [3, 2, 1, 2, 6];\n  const expected = 17;\n  const actual = program.minimumWaitingTime(queries);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const queries = [3, 2, 1, 2, 6];\n  const expected = 17;\n  const actual = program.minimumWaitingTime(queries);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "queries",
      "example": [
        3,
        2,
        1,
        2,
        6
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "queries": [
        3,
        2,
        1,
        2,
        6
      ]
    },
    {
      "queries": [
        2,
        1,
        1,
        1
      ]
    },
    {
      "queries": [
        1,
        2,
        4,
        5,
        2,
        1
      ]
    },
    {
      "queries": [
        25,
        30,
        2,
        1
      ]
    },
    {
      "queries": [
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "queries": [
        7,
        9,
        2,
        3
      ]
    },
    {
      "queries": [
        4,
        3,
        1,
        1,
        3,
        2,
        1,
        8
      ]
    },
    {
      "queries": [
        2
      ]
    },
    {
      "queries": [
        7
      ]
    },
    {
      "queries": [
        8,
        9
      ]
    },
    {
      "queries": [
        1,
        9
      ]
    },
    {
      "queries": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "queries": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "queries": [
        1,
        1,
        1,
        4,
        5,
        6,
        8,
        1,
        1,
        2,
        1
      ]
    },
    {
      "queries": [
        17,
        4,
        3
      ]
    }
  ],
  "jsonTests": [
    {
      "queries": [
        3,
        2,
        1,
        2,
        6
      ]
    },
    {
      "queries": [
        2,
        1,
        1,
        1
      ]
    },
    {
      "queries": [
        1,
        2,
        4,
        5,
        2,
        1
      ]
    },
    {
      "queries": [
        25,
        30,
        2,
        1
      ]
    },
    {
      "queries": [
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "queries": [
        7,
        9,
        2,
        3
      ]
    },
    {
      "queries": [
        4,
        3,
        1,
        1,
        3,
        2,
        1,
        8
      ]
    },
    {
      "queries": [
        2
      ]
    },
    {
      "queries": [
        7
      ]
    },
    {
      "queries": [
        8,
        9
      ]
    },
    {
      "queries": [
        1,
        9
      ]
    },
    {
      "queries": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "queries": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "queries": [
        1,
        1,
        1,
        4,
        5,
        6,
        8,
        1,
        1,
        2,
        1
      ]
    },
    {
      "queries": [
        17,
        4,
        3
      ]
    }
  ],
  "changelog": []
}