{
  "uid": "missingNumbers",
  "testStrategy": "JSON",
  "name": "Missing Numbers",
  "version": 0,
  "releaseDate": "2023-04-08T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 6270,
    "failureCount": 780
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "786465405",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 1069
  },
  "prompt": "<div class=\"html\">\n  <p>\n    You're given an unordered list of unique integers <span>nums</span> in the\n    range <span>[1, n]</span>, where <span>n</span> represents the length of\n    <span>nums + 2</span>. This means that two numbers in this range are missing\n    from the list.\n  </p>\n\n  <p>\n    Write a function that takes in this list and returns a new list with the two\n    missing numbers, sorted numerically.\n  </p>\n\n  <h3>Sample Input</h3>\n  <pre><span class=\"CodeEditor-promptParameter\">nums</span> = [1, 4, 3]</pre>\n  <h3>Sample Output</h3>\n  <pre>[2, 5] <span class=\"CodeEditor-promptComment\"> // n is 5, meaning the completed list should be [1, 2, 3, 4, 5]</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  How would you solve this problem if there was only one missing number? Can\n  that solution be applied to this problem with two missing numbers?\n</p>\n",
    "\n<p>\n  To efficiently find a single missing number, you can sum up all of the values\n  in the array as well as sum up all of the values in the expected array (i.e.\n  in the range [1, n]). The difference between these values is the missing\n  number.\n</p>\n",
    "\n<p>\n  Using the same logic as for a single missing number, you can find the total\n  of the two missing numbers. How can you then find which numbers these are?\n</p>\n",
    "\n<p>\n  If you take an average of the two missing numbers, one of the missing numbers\n  must be less than that average, and one must be greater than the average.\n</p>\n",
    "\n<p>\n  Since we know there is one missing number on each side of the average, we can\n  treat each side of the list as its own problem to find one missing number in\n  that list.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nvector<int> missingNumbers(vector<int> nums) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_set>\n\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input array\nvector<int> missingNumbers(vector<int> nums) {\n  unordered_set<int> includedNums;\n  for (auto num : nums) {\n    includedNums.insert(num);\n  }\n\n  vector<int> solution = {-1, -1};\n  for (int num = 1; num < nums.size() + 3; num++) {\n    if (!includedNums.count(num)) {\n      if (solution[0] == -1) {\n        solution[0] = num;\n      } else {\n        solution[1] = num;\n        break;\n      }\n    }\n  }\n\n  return solution;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the input array\nvector<int> missingNumbers(vector<int> nums) {\n  int total = 0;\n  for (int i = 1; i < nums.size() + 3; i++) {\n    total += i;\n  }\n\n  for (auto num : nums) {\n    total -= num;\n  }\n\n  int averageMissingValue = total / 2;\n  int foundFirstHalf = 0;\n  int foundSecondHalf = 0;\n  for (auto num : nums) {\n    if (num <= averageMissingValue) {\n      foundFirstHalf += num;\n    } else {\n      foundSecondHalf += num;\n    }\n  }\n\n  int expectedFirstHalf = 0;\n  for (int i = 1; i <= averageMissingValue; i++) {\n    expectedFirstHalf += i;\n  }\n\n  int expectedSecondHalf = 0;\n  for (int i = averageMissingValue + 1; i < nums.size() + 3; i++) {\n    expectedSecondHalf += i;\n  }\n\n  return {\n    expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf};\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the input array\nvector<int> missingNumbers(vector<int> nums) {\n  int solutionXOR = 0;\n  for (int i = 0; i < nums.size() + 3; i++) {\n    solutionXOR ^= i;\n    if (i < nums.size()) {\n      solutionXOR ^= nums[i];\n    }\n  }\n\n  vector<int> solution(2, 0);\n  int setBit = solutionXOR & -solutionXOR;\n  for (int i = 0; i < nums.size() + 3; i++) {\n    if ((i & setBit) == 0) {\n      solution[0] ^= i;\n    } else {\n      solution[1] ^= i;\n    }\n\n    if (i < nums.size()) {\n      if ((nums[i] & setBit) == 0) {\n        solution[0] ^= nums[i];\n      } else {\n        solution[1] ^= nums[i];\n      }\n    }\n  }\n\n  sort(solution.begin(), solution.end());\n  return solution;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {4, 5, 1, 3};\n      vector<int> expected = {2, 6};\n      auto actual = missingNumbers(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {4, 5, 1, 3};\n      vector<int> expected = {2, 6};\n      auto actual = missingNumbers(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int[] MissingNumbers(int[] nums) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] MissingNumbers(int[] nums) {\n    HashSet<int> includedNums = new HashSet<int>();\n    foreach (var num in nums) {\n      includedNums.Add(num);\n    }\n\n    int[] solution = new int[] { -1, -1 };\n    for (int num = 1; num < nums.Length + 3; num++) {\n      if (!includedNums.Contains(num)) {\n        if (solution[0] == -1) {\n          solution[0] = num;\n        } else {\n          solution[1] = num;\n        }\n      }\n    }\n\n    return solution;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public int[] MissingNumbers(int[] nums) {\n    int total = 0;\n    for (int i = 1; i < nums.Length + 3; i++) {\n      total += i;\n    }\n\n    foreach (var num in nums) {\n      total -= num;\n    }\n\n    int averageMissingValue = total / 2;\n    int foundFirstHalf = 0;\n    int foundSecondHalf = 0;\n    foreach (var num in nums) {\n      if (num <= averageMissingValue) {\n        foundFirstHalf += num;\n      } else {\n        foundSecondHalf += num;\n      }\n    }\n\n    int expectedFirstHalf = 0;\n    for (int i = 1; i <= averageMissingValue; i++) {\n      expectedFirstHalf += i;\n    }\n    int expectedSecondHalf = 0;\n    for (int i = averageMissingValue + 1; i < nums.Length + 3; i++) {\n      expectedSecondHalf += i;\n    }\n\n    return new int[] {\n      expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf\n    };\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public int[] MissingNumbers(int[] nums) {\n    int solutionXOR = 0;\n    for (int i = 0; i < nums.Length + 3; i++) {\n      solutionXOR ^= i;\n      if (i < nums.Length) {\n        solutionXOR ^= nums[i];\n      }\n    }\n\n    int[] solution = new int[2];\n    int setBit = solutionXOR & -solutionXOR;\n    for (int i = 0; i < nums.Length + 3; i++) {\n      if ((i & setBit) == 0) {\n        solution[0] ^= i;\n      } else {\n        solution[1] ^= i;\n      }\n\n      if (i < nums.Length) {\n        if ((nums[i] & setBit) == 0) {\n          solution[0] ^= nums[i];\n        } else {\n          solution[1] ^= nums[i];\n        }\n      }\n    }\n\n    Array.Sort(solution);\n    return solution;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 4, 5, 1, 3 };\n    var expected = new int[] { 2, 6 };\n    var actual = new Program().MissingNumbers(input);\n    Utils.AssertTrue(expected.Length == actual.Length);\n    for (int i = 0; i < expected.Length; i++) {\n      Utils.AssertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 4, 5, 1, 3 };\n    var expected = new int[] { 2, 6 };\n    var actual = new Program().MissingNumbers(input);\n    Utils.AssertTrue(expected.Length == actual.Length);\n    for (int i = 0; i < expected.Length; i++) {\n      Utils.AssertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc MissingNumbers(nums []int) []int {\n\t// Write your code here.\n\treturn []int{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunc MissingNumbers(nums []int) []int {\n\tincludedNums := map[int]bool{}\n\tfor _, num := range nums {\n\t\tincludedNums[num] = true\n\t}\n\n\tsolution := make([]int, 0)\n\tfor num := 1; num < len(nums)+3; num++ {\n\t\tif !includedNums[num] {\n\t\t\tsolution = append(solution, num)\n\t\t}\n\t}\n\n\treturn solution\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunc MissingNumbers(nums []int) []int {\n\ttotal := sum(arrayFromAToB(1, len(nums)+3))\n\n\tfor _, num := range nums {\n\t\ttotal -= num\n\t}\n\n\taverageMissingValue := total / 2\n\tfoundFirstHalf := 0\n\tfoundSecondHalf := 0\n\tfor _, num := range nums {\n\t\tif num <= averageMissingValue {\n\t\t\tfoundFirstHalf += num\n\t\t} else {\n\t\t\tfoundSecondHalf += num\n\t\t}\n\t}\n\n\texpectedFirstHalf := sum(arrayFromAToB(1, averageMissingValue+1))\n\texpectedSecondHalf := sum(arrayFromAToB(averageMissingValue+1, len(nums)+3))\n\n\treturn []int{expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf}\n}\n\nfunc arrayFromAToB(a, b int) []int {\n\tarray := make([]int, 0)\n\tfor num := a; num < b; num++ {\n\t\tarray = append(array, num)\n\t}\n\treturn array\n}\n\nfunc sum(array []int) int {\n\ttotal := 0\n\tfor _, num := range array {\n\t\ttotal += num\n\t}\n\treturn total\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunc MissingNumbers(nums []int) []int {\n\tsolutionXOR := 0\n\tfor i := 0; i < len(nums)+3; i++ {\n\t\tsolutionXOR ^= i\n\t\tif i < len(nums) {\n\t\t\tsolutionXOR ^= nums[i]\n\t\t}\n\t}\n\n\tsolution := []int{0, 0}\n\tsetBit := solutionXOR & -solutionXOR\n\tfor i := 0; i < len(nums)+3; i++ {\n\t\tif (i & setBit) == 0 {\n\t\t\tsolution[0] ^= i\n\t\t} else {\n\t\t\tsolution[1] ^= i\n\t\t}\n\n\t\tif i < len(nums) {\n\t\t\tif (nums[i] & setBit) == 0 {\n\t\t\t\tsolution[0] ^= nums[i]\n\t\t\t} else {\n\t\t\t\tsolution[1] ^= nums[i]\n\t\t\t}\n\t\t}\n\t}\n\n\tif solution[0] > solution[1] {\n\t\tsolution[0], solution[1] = solution[1], solution[0]\n\t}\n\treturn solution\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{4, 5, 1, 3}\n\texpected := []int{2, 6}\n\tactual := MissingNumbers(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{4, 5, 1, 3}\n\texpected := []int{2, 6}\n\tactual := MissingNumbers(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int[] missingNumbers(int[] nums) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] missingNumbers(int[] nums) {\n    HashSet<Integer> includedNums = new HashSet<Integer>();\n    for (int num : nums) {\n      includedNums.add(num);\n    }\n\n    int[] solution = new int[] {-1, -1};\n    for (int num = 1; num < nums.length + 3; num++) {\n      if (!includedNums.contains(num)) {\n        if (solution[0] == -1) {\n          solution[0] = num;\n        } else {\n          solution[1] = num;\n        }\n      }\n    }\n\n    return solution;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public int[] missingNumbers(int[] nums) {\n    int total = 0;\n    for (int i = 1; i < nums.length + 3; i++) {\n      total += i;\n    }\n\n    for (int num : nums) {\n      total -= num;\n    }\n\n    int averageMissingValue = total / 2;\n    int foundFirstHalf = 0;\n    int foundSecondHalf = 0;\n    for (int num : nums) {\n      if (num <= averageMissingValue) {\n        foundFirstHalf += num;\n      } else {\n        foundSecondHalf += num;\n      }\n    }\n\n    int expectedFirstHalf = 0;\n    for (int i = 1; i <= averageMissingValue; i++) {\n      expectedFirstHalf += i;\n    }\n    int expectedSecondHalf = 0;\n    for (int i = averageMissingValue + 1; i < nums.length + 3; i++) {\n      expectedSecondHalf += i;\n    }\n\n    return new int[] {\n      expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf};\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public int[] missingNumbers(int[] nums) {\n    int solutionXOR = 0;\n    for (int i = 0; i < nums.length + 3; i++) {\n      solutionXOR ^= i;\n      if (i < nums.length) {\n        solutionXOR ^= nums[i];\n      }\n    }\n\n    int[] solution = new int[2];\n    int setBit = solutionXOR & -solutionXOR;\n    for (int i = 0; i < nums.length + 3; i++) {\n      if ((i & setBit) == 0) {\n        solution[0] ^= i;\n      } else {\n        solution[1] ^= i;\n      }\n\n      if (i < nums.length) {\n        if ((nums[i] & setBit) == 0) {\n          solution[0] ^= nums[i];\n        } else {\n          solution[1] ^= nums[i];\n        }\n      }\n    }\n\n    Arrays.sort(solution);\n    return solution;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {4, 5, 1, 3};\n    var expected = new int[] {2, 6};\n    var actual = new Program().missingNumbers(input);\n    Utils.assertTrue(expected.length == actual.length);\n    for (int i = 0; i < expected.length; i++) {\n      Utils.assertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {4, 5, 1, 3};\n    var expected = new int[] {2, 6};\n    var actual = new Program().missingNumbers(input);\n    Utils.assertTrue(expected.length == actual.length);\n    for (int i = 0; i < expected.length; i++) {\n      Utils.assertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function missingNumbers(nums) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.missingNumbers = missingNumbers;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction missingNumbers(nums) {\n  const includedNums = new Set(nums);\n\n  const solution = [];\n  for (let num = 1; num < nums.length + 3; num++) {\n    if (!includedNums.has(num)) {\n      solution.push(num);\n    }\n  }\n\n  return solution;\n}\n\n// Do not edit the line below.\nexports.missingNumbers = missingNumbers;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction missingNumbers(nums) {\n  let total = sum(arrayFromAToB(1, nums.length + 3));\n\n  for (const num of nums) {\n    total -= num;\n  }\n\n  const averageMissingValue = Math.floor(total / 2);\n  let foundFirstHalf = 0;\n  let foundSecondHalf = 0;\n  for (const num of nums) {\n    if (num <= averageMissingValue) {\n      foundFirstHalf += num;\n    } else {\n      foundSecondHalf += num;\n    }\n  }\n\n  const expectedFirstHalf = sum(arrayFromAToB(1, averageMissingValue + 1));\n  const expectedSecondHalf = sum(arrayFromAToB(averageMissingValue + 1, nums.length + 3));\n\n  return [expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf];\n}\n\nconst arrayFromAToB = (a, b) => {\n  const array = [];\n  for (let num = a; num < b; num++) {\n    array.push(num);\n  }\n  return array;\n};\n\nconst sum = array => array.reduce((a, b) => a + b);\n\n// Do not edit the line below.\nexports.missingNumbers = missingNumbers;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction missingNumbers(nums) {\n  let solutionXOR = 0;\n  for (let i = 0; i < nums.length + 3; i++) {\n    solutionXOR ^= i;\n    if (i < nums.length) {\n      solutionXOR ^= nums[i];\n    }\n  }\n\n  const solution = [0, 0];\n  const setBit = solutionXOR & -solutionXOR;\n  for (let i = 0; i < nums.length + 3; i++) {\n    if ((i & setBit) === 0) {\n      solution[0] ^= i;\n    } else {\n      solution[1] ^= i;\n    }\n\n    if (i < nums.length) {\n      if ((nums[i] & setBit) === 0) {\n        solution[0] ^= nums[i];\n      } else {\n        solution[1] ^= nums[i];\n      }\n    }\n  }\n\n  solution.sort((a, b) => a - b);\n  return solution;\n}\n\n// Do not edit the line below.\nexports.missingNumbers = missingNumbers;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [4, 5, 1, 3];\n  const expected = [2, 6];\n  const actual = program.missingNumbers(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [4, 5, 1, 3];\n  const expected = [2, 6];\n  const actual = program.missingNumbers(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun missingNumbers(nums: MutableList<Int>): List<Int> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the input array\nfun missingNumbers(nums: MutableList<Int>): List<Int> {\n    val includedNums = nums.toSet()\n\n    val solution = mutableListOf<Int>()\n    for (num in 1 until nums.size + 3) {\n        if (!includedNums.contains(num)) {\n            solution.add(num)\n        }\n    }\n\n    return solution\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the input array\nfun missingNumbers(nums: MutableList<Int>): List<Int> {\n    var total = arrayFromAToB(1, nums.size + 3).sum()\n\n    for (num in nums) {\n        total -= num\n    }\n\n    val averageMissingValue = total / 2\n    var foundFirstHalf = 0\n    var foundSecondHalf = 0\n    for (num in nums) {\n        if (num <= averageMissingValue) {\n            foundFirstHalf += num\n        } else {\n            foundSecondHalf += num\n        }\n    }\n\n    val expectedFirstHalf = arrayFromAToB(1, averageMissingValue + 1).sum()\n    val expectedSecondHalf = arrayFromAToB(averageMissingValue + 1, nums.size + 3).sum()\n\n    return listOf(expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf)\n}\n\nfun arrayFromAToB(a: Int, b: Int): List<Int> {\n    val array = mutableListOf<Int>()\n    for (num in a until b) {\n        array.add(num)\n    }\n    return array\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the input array\nfun missingNumbers(nums: MutableList<Int>): List<Int> {\n    var solutionXOR = 0\n    for (i in 0 until nums.size + 3) {\n        solutionXOR = solutionXOR xor i\n        if (i < nums.size) {\n            solutionXOR = solutionXOR xor nums[i]\n        }\n    }\n\n    val solution = mutableListOf(0, 0)\n    val setBit = solutionXOR and -solutionXOR\n    for (i in 0 until nums.size + 3) {\n        if ((i and setBit) == 0) {\n            solution[0] = solution[0] xor i\n        } else {\n            solution[1] = solution[1] xor i\n        }\n\n        if (i < nums.size) {\n            if ((nums[i] and setBit) == 0) {\n                solution[0] = solution[0] xor nums[i]\n            } else {\n                solution[1] = solution[1] xor nums[i]\n            }\n        }\n    }\n\n    solution.sort()\n    return solution\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.missingNumbers\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(4, 5, 1, 3)\n        val expected = listOf(2, 6)\n        val output = missingNumbers(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.missingNumbers\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(4, 5, 1, 3)\n        val expected = listOf(2, 6)\n        val output = missingNumbers(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def missingNumbers(nums):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef missingNumbers(nums):\n    includedNums = set(nums)\n\n    solution = []\n    for num in range(1, len(nums) + 3):\n        if not num in includedNums:\n            solution.append(num)\n\n    return solution\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef missingNumbers(nums):\n    total = sum(range(1, len(nums) + 3))\n    for num in nums:\n        total -= num\n\n    averageMissingValue = total // 2\n    foundFirstHalf = 0\n    foundSecondHalf = 0\n    for num in nums:\n        if num <= averageMissingValue:\n            foundFirstHalf += num\n        else:\n            foundSecondHalf += num\n\n    expectedFirstHalf = sum(range(1, averageMissingValue + 1))\n    expectedSecondHalf = sum(range(averageMissingValue + 1, len(nums) + 3))\n\n    return [expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef missingNumbers(nums):\n    solutionXOR = 0\n    for i in range(0, len(nums) + 3):\n        solutionXOR ^= i\n        if i < len(nums):\n            solutionXOR ^= nums[i]\n\n    solution = [0, 0]\n    setBit = solutionXOR & -solutionXOR\n    for i in range(0, len(nums) + 3):\n        if i & setBit == 0:\n            solution[0] ^= i\n        else:\n            solution[1] ^= i\n\n        if i < len(nums):\n            if nums[i] & setBit == 0:\n                solution[0] ^= nums[i]\n            else:\n                solution[1] ^= nums[i]\n\n    return sorted(solution)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [4, 5, 1, 3]\n        expected = [2, 6]\n        actual = program.missingNumbers(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [4, 5, 1, 3]\n        expected = [2, 6]\n        actual = program.missingNumbers(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "\nclass Program\n    def missingNumbers(nums)\n        # Write your code here.\n        return []\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n\nclass Program\n    def missingNumbers(nums)\n        # Write your code here.\n        return []\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.missingNumbers\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.missingNumbers\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func missingNumbers(_ nums: [Int]) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  func missingNumbers(_ nums: [Int]) -> [Int] {\n    var includedNums = Set<Int>(nums)\n\n    var solution = [Int]()\n    for num in 1 ..< (nums.count + 3) {\n      if !includedNums.contains(num) {\n        solution.append(num)\n      }\n    }\n\n    return solution\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  func missingNumbers(_ nums: [Int]) -> [Int] {\n    var total = sum(arrayFromAToB(1, nums.count + 3))\n\n    for num in nums {\n      total -= num\n    }\n\n    let averageMissingValue = total / 2\n    var foundFirstHalf = 0\n    var foundSecondHalf = 0\n    for num in nums {\n      if num <= averageMissingValue {\n        foundFirstHalf += num\n      } else {\n        foundSecondHalf += num\n      }\n    }\n\n    let expectedFirstHalf = sum(arrayFromAToB(1, averageMissingValue + 1))\n    let expectedSecondHalf = sum(arrayFromAToB(averageMissingValue + 1, nums.count + 3))\n\n    return [expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf]\n  }\n\n  func arrayFromAToB(_ a: Int, _ b: Int) -> [Int] {\n    var array = [Int]()\n    for num in a ..< b {\n      array.append(num)\n    }\n    return array\n  }\n\n  func sum(_ array: [Int]) -> Int {\n    return array.reduce(0, +)\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  func missingNumbers(_ nums: [Int]) -> [Int] {\n    var solutionXOR = 0\n    for i in 0 ..< (nums.count + 3) {\n      solutionXOR ^= i\n      if i < nums.count {\n        solutionXOR ^= nums[i]\n      }\n    }\n\n    var solution = [0, 0]\n    let setBit = solutionXOR & -solutionXOR\n    for i in 0 ..< (nums.count + 3) {\n      if (i & setBit) == 0 {\n        solution[0] ^= i\n      } else {\n        solution[1] ^= i\n      }\n\n      if i < nums.count {\n        if (nums[i] & setBit) == 0 {\n          solution[0] ^= nums[i]\n        } else {\n          solution[1] ^= nums[i]\n        }\n      }\n    }\n\n    if solution[0] > solution[1] {\n      solution = [solution[1], solution[0]]\n    }\n    return solution\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [4, 5, 1, 3]\n      var expected = [2, 6]\n      var actual = Program().missingNumbers(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [4, 5, 1, 3]\n      var expected = [2, 6]\n      var actual = Program().missingNumbers(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function missingNumbers(nums: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function missingNumbers(nums: number[]) {\n  const includedNums = new Set(nums);\n\n  const solution: number[] = [];\n  for (let num = 1; num < nums.length + 3; num++) {\n    if (!includedNums.has(num)) {\n      solution.push(num);\n    }\n  }\n\n  return solution;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function missingNumbers(nums: number[]) {\n  let total = sum(arrayFromAToB(1, nums.length + 3));\n\n  for (const num of nums) {\n    total -= num;\n  }\n\n  const averageMissingValue = Math.floor(total / 2);\n  let foundFirstHalf = 0;\n  let foundSecondHalf = 0;\n  for (const num of nums) {\n    if (num <= averageMissingValue) {\n      foundFirstHalf += num;\n    } else {\n      foundSecondHalf += num;\n    }\n  }\n\n  const expectedFirstHalf = sum(arrayFromAToB(1, averageMissingValue + 1));\n  const expectedSecondHalf = sum(arrayFromAToB(averageMissingValue + 1, nums.length + 3));\n\n  return [expectedFirstHalf - foundFirstHalf, expectedSecondHalf - foundSecondHalf];\n}\n\nconst arrayFromAToB = (a: number, b: number) => {\n  const array: number[] = [];\n  for (let num = a; num < b; num++) {\n    array.push(num);\n  }\n  return array;\n};\n\nconst sum = (array: number[]) => array.reduce((a, b) => a + b);\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function missingNumbers(nums: number[]) {\n  let solutionXOR = 0;\n  for (let i = 0; i < nums.length + 3; i++) {\n    solutionXOR ^= i;\n    if (i < nums.length) {\n      solutionXOR ^= nums[i];\n    }\n  }\n\n  const solution = [0, 0];\n  const setBit = solutionXOR & -solutionXOR;\n  for (let i = 0; i < nums.length + 3; i++) {\n    if ((i & setBit) === 0) {\n      solution[0] ^= i;\n    } else {\n      solution[1] ^= i;\n    }\n\n    if (i < nums.length) {\n      if ((nums[i] & setBit) === 0) {\n        solution[0] ^= nums[i];\n      } else {\n        solution[1] ^= nums[i];\n      }\n    }\n  }\n\n  solution.sort((a, b) => a - b);\n  return solution;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [4, 5, 1, 3];\n  const expected = [2, 6];\n  const actual = program.missingNumbers(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [4, 5, 1, 3];\n  const expected = [2, 6];\n  const actual = program.missingNumbers(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "nums",
      "example": [],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minimum": 1,
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "tests": [
    {
      "nums": []
    },
    {
      "nums": [
        1
      ]
    },
    {
      "nums": [
        2
      ]
    },
    {
      "nums": [
        3
      ]
    },
    {
      "nums": [
        1,
        3
      ]
    },
    {
      "nums": [
        3,
        1
      ]
    },
    {
      "nums": [
        1,
        2,
        3
      ]
    },
    {
      "nums": [
        3,
        2,
        1
      ]
    },
    {
      "nums": [
        3,
        1,
        2
      ]
    },
    {
      "nums": [
        3,
        4,
        5
      ]
    },
    {
      "nums": [
        4,
        5,
        3
      ]
    },
    {
      "nums": [
        1,
        3,
        4,
        5
      ]
    },
    {
      "nums": [
        4,
        5,
        1,
        3
      ]
    },
    {
      "nums": [
        1,
        2,
        4,
        5,
        7
      ]
    },
    {
      "nums": [
        1,
        2,
        7,
        5,
        4
      ]
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ]
    },
    {
      "nums": [
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "nums": [
        3,
        5,
        1,
        2,
        4,
        7,
        6
      ]
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        20,
        21,
        22
      ]
    },
    {
      "nums": [
        3,
        5,
        7,
        8,
        1,
        10,
        11,
        2,
        4,
        13,
        17,
        22,
        18,
        21,
        16,
        20,
        6,
        9,
        15,
        12
      ]
    },
    {
      "nums": [
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ]
    },
    {
      "nums": [
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ]
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ]
    },
    {
      "nums": [
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    }
  ],
  "jsonTests": [
    {
      "nums": []
    },
    {
      "nums": [
        1
      ]
    },
    {
      "nums": [
        2
      ]
    },
    {
      "nums": [
        3
      ]
    },
    {
      "nums": [
        1,
        3
      ]
    },
    {
      "nums": [
        3,
        1
      ]
    },
    {
      "nums": [
        1,
        2,
        3
      ]
    },
    {
      "nums": [
        3,
        2,
        1
      ]
    },
    {
      "nums": [
        3,
        1,
        2
      ]
    },
    {
      "nums": [
        3,
        4,
        5
      ]
    },
    {
      "nums": [
        4,
        5,
        3
      ]
    },
    {
      "nums": [
        1,
        3,
        4,
        5
      ]
    },
    {
      "nums": [
        4,
        5,
        1,
        3
      ]
    },
    {
      "nums": [
        1,
        2,
        4,
        5,
        7
      ]
    },
    {
      "nums": [
        1,
        2,
        7,
        5,
        4
      ]
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ]
    },
    {
      "nums": [
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "nums": [
        3,
        5,
        1,
        2,
        4,
        7,
        6
      ]
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        20,
        21,
        22
      ]
    },
    {
      "nums": [
        3,
        5,
        7,
        8,
        1,
        10,
        11,
        2,
        4,
        13,
        17,
        22,
        18,
        21,
        16,
        20,
        6,
        9,
        15,
        12
      ]
    },
    {
      "nums": [
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ]
    },
    {
      "nums": [
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ]
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ]
    },
    {
      "nums": [
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    }
  ],
  "changelog": []
}