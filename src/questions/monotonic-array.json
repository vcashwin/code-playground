{
  "uid": "monotonic-array",
  "testStrategy": "JSON",
  "name": "Monotonic Array",
  "version": 0,
  "releaseDate": "2020-03-29T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 66903,
    "failureCount": 24106
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "400775043",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1303
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns a boolean\n  representing whether the array is monotonic.\n</p>\n<p>\n  An array is said to be monotonic if its elements, from left to right, are\n  entirely non-increasing or entirely non-decreasing.\n</p>\n<p>\n  Non-increasing elements aren't necessarily exclusively decreasing; they simply\n  don't increase. Similarly, non-decreasing elements aren't necessarily\n  exclusively increasing; they simply don't decrease.\n</p>\n<p>Note that empty arrays and arrays of one element are monotonic.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n</div>",
  "hints": [
    "<p>\nYou can solve this question by iterating through the input array from left to right once.\n</p>\n",
    "\n<p>\nTry iterating through the input array from left to right, in search of two adjacent integers that can indicate whether the array is trending upward or downward. Once you've found the tentative trend of the array, at each element thereafter, compare the element to the previous one; if this comparison breaks the previously identified trend, the array isn't monotonic.\n</p>\n",
    "\n<p>\nAlternatively, you can start by assuming that the array is both entirely non-decreasing and entirely non-increasing. As you iterate through each element, perform a check to see if you can invalidate one or both of your assumptions.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool isMonotonic(vector<int> array) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nbool breaksDirection(int direction, int previousInt, int currentInt) {\n  int difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}\n\n// O(n) time | O(1) space - where n is the length of the array\nbool isMonotonic(vector<int> array) {\n  if (array.size() <= 2) return true;\n\n  int direction = array[1] - array[0];\n  for (int i = 2; i < array.size(); i++) {\n    if (direction == 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n\n    if (breaksDirection(direction, array[i - 1], array[i])) return false;\n  }\n\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the array\nbool isMonotonic(vector<int> array) {\n  bool is_non_decreasing = true;\n  bool is_non_increasing = true;\n  for (int i = 1; i < array.size(); i++) {\n    if (array[i] < array[i - 1]) {\n      is_non_decreasing = false;\n    }\n    if (array[i] > array[i - 1]) {\n      is_non_increasing = false;\n    }\n  }\n  return is_non_decreasing || is_non_increasing;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static bool IsMonotonic(int[] array) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static bool IsMonotonic(int[] array) {\n    if (array.Length <= 2) return true;\n\n    var direction = array[1] - array[0];\n    for (int i = 2; i < array.Length; i++) {\n      if (direction == 0) {\n        direction = array[i] - array[i - 1];\n        continue;\n      }\n\n      if (breaksDirection(direction, array[i - 1], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static bool breaksDirection(int direction, int previous, int current) {\n    var difference = current - previous;\n    if (direction > 0) return difference < 0;\n    return difference > 0;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static bool IsMonotonic(int[] array) {\n    var isNonDecreasing = true;\n    var isNonIncreasing = true;\n    for (int i = 1; i < array.Length; i++) {\n      if (array[i] < array[i - 1]) {\n        isNonDecreasing = false;\n      }\n      if (array[i] > array[i - 1]) {\n        isNonIncreasing = false;\n      }\n    }\n\n    return isNonDecreasing || isNonIncreasing;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var array = new int[] { -1, -5, -10, -1100, -1100, -1101, -1102, -9001 };\n    var expected = true;\n    var actual = Program.IsMonotonic(array);\n    Utils.AssertEquals(expected, actual);\n  }\n}",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var array = new int[] { -1, -5, -10, -1100, -1100, -1101, -1102, -9001 };\n    var expected = true;\n    var actual = Program.IsMonotonic(array);\n    Utils.AssertEquals(expected, actual);\n  }\n}"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc IsMonotonic(array []int) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc IsMonotonic(array []int) bool {\n\tif len(array) <= 2 {\n\t\treturn true\n\t}\n\n\tdirection := array[1] - array[0]\n\tfor i := 2; i < len(array); i++ {\n\t\tif direction == 0 {\n\t\t\tdirection = array[i] - array[i-1]\n\t\t\tcontinue\n\t\t}\n\n\t\tif breaksDirection(direction, array[i-1], array[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc breaksDirection(direction, previousInt, currentInt int) bool {\n\tdifference := currentInt - previousInt\n\tif direction > 0 {\n\t\treturn difference < 0\n\t}\n\treturn difference > 0\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc IsMonotonic(array []int) bool {\n\tisNonDecreasing := true\n\tisNonIncreasing := true\n\tfor i := 1; i < len(array); i++ {\n\t\tif array[i] < array[i-1] {\n\t\t\tisNonDecreasing = false\n\t\t}\n\t\tif array[i] > array[i-1] {\n\t\t\tisNonIncreasing = false\n\t\t}\n\t}\n\n\treturn isNonDecreasing || isNonIncreasing\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{-1, -5, -10, -1100, -1100, -1101, -1102, -9001}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n",
      "unitTests": "package main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{-1, -5, -10, -1100, -1100, -1101, -1102, -9001}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static boolean isMonotonic(int[] array) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static boolean isMonotonic(int[] array) {\n    if (array.length <= 2) return true;\n\n    var direction = array[1] - array[0];\n    for (int i = 2; i < array.length; i++) {\n      if (direction == 0) {\n        direction = array[i] - array[i - 1];\n        continue;\n      }\n\n      if (breaksDirection(direction, array[i - 1], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean breaksDirection(\n    int direction, int previous, int current\n  ) {\n    var difference = current - previous;\n    if (direction > 0) return difference < 0;\n    return difference > 0;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static boolean isMonotonic(int[] array) {\n    var isNonDecreasing = true;\n    var isNonIncreasing = true;\n    for (int i = 1; i < array.length; i++) {\n      if (array[i] < array[i - 1]) {\n        isNonDecreasing = false;\n      }\n      if (array[i] > array[i - 1]) {\n        isNonIncreasing = false;\n      }\n    }\n\n    return isNonDecreasing || isNonIncreasing;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var array = new int[] {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n    var expected = true;\n    var actual = Program.isMonotonic(array);\n    Utils.assertEquals(expected, actual);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    var array = new int[] {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n    var expected = true;\n    var actual = Program.isMonotonic(array);\n    Utils.assertEquals(expected, actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function isMonotonic(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.isMonotonic = isMonotonic;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction isMonotonic(array) {\n  if (array.length <= 2) return true;\n\n  let direction = array[1] - array[0];\n  for (let i = 2; i < array.length; i++) {\n    if (direction === 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, array[i - 1], array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  const difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}\n\nexports.isMonotonic = isMonotonic;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction isMonotonic(array) {\n  let isNonDecreasing = true;\n  let isNonIncreasing = true;\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) isNonDecreasing = false;\n    if (array[i] > array[i - 1]) isNonIncreasing = false;\n  }\n\n  return isNonDecreasing || isNonIncreasing;\n}\n\nexports.isMonotonic = isMonotonic;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const expected = true;\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const expected = true;\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun isMonotonic(array: List<Int>): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the array\nfun isMonotonic(array: List<Int>): Boolean {\n    if (array.size <= 2) return true\n\n    var direction = array[1] - array[0]\n    for (i in 2 until array.size) {\n        if (direction == 0) {\n            direction = array[i] - array[i - 1]\n            continue\n        }\n        if (breaksDirection(direction, array[i - 1], array[i])) {\n            return false\n        }\n    }\n\n    return true\n}\n\nfun breaksDirection(direction: Int, previousInt: Int, currentInt: Int): Boolean {\n    val difference = currentInt - previousInt\n    if (direction > 0) return difference < 0\n    return difference > 0\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the array\nfun isMonotonic(array: List<Int>): Boolean {\n    var isNonDecreasing = true\n    var isNonIncreasing = true\n    for (i in 1 until array.size) {\n        if (array[i] < array[i - 1]) isNonDecreasing = false\n        if (array[i] > array[i - 1]) isNonIncreasing = false\n    }\n\n    return isNonDecreasing || isNonIncreasing\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.isMonotonic as isMonotonic\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf<Int>(-1, -5, -10, -1100, -1100, -1101, -1102, -9001)\n        val expected = true\n        val actual = isMonotonic(array)\n        assert(actual == expected)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.isMonotonic as isMonotonic\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf<Int>(-1, -5, -10, -1100, -1100, -1101, -1102, -9001)\n        val expected = true\n        val actual = isMonotonic(array)\n        assert(actual == expected)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def isMonotonic(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef isMonotonic(array):\n    if len(array) <= 2:\n        return True\n\n    direction = array[1] - array[0]\n    for i in range(2, len(array)):\n        if direction == 0:\n            direction = array[i] - array[i - 1]\n            continue\n        if breaksDirection(direction, array[i - 1], array[i]):\n            return False\n\n    return True\n\n\ndef breaksDirection(direction, previousInt, currentInt):\n    difference = currentInt - previousInt\n    if direction > 0:\n        return difference < 0\n    return difference > 0\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef isMonotonic(array):\n    isNonDecreasing = True\n    isNonIncreasing = True\n    for i in range(1, len(array)):\n        if array[i] < array[i - 1]:\n            isNonDecreasing = False\n        if array[i] > array[i - 1]:\n            isNonIncreasing = False\n\n    return isNonDecreasing or isNonIncreasing\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n        expected = True\n        actual = program.isMonotonic(array)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n        expected = True\n        actual = program.isMonotonic(array)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def isMonotonic(array)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def isMonotonic(array)\n    # Write your code here.\n    return false\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def isMonotonic(array)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.isMonotonic\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.isMonotonic\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func isMonotonic(array: [Int]) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func isMonotonic(array: [Int]) -> Bool {\n    if array.count <= 2 {\n      return true\n    }\n\n    var direction = array[1] - array[0]\n    for i in 2 ..< array.count {\n      if direction == 0 {\n        direction = array[i] - array[i - 1]\n        continue\n      }\n\n      if breaksDirection(direction: direction, previousInt: array[i - 1], currentInt: array[i]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  func breaksDirection(direction: Int, previousInt: Int, currentInt: Int) -> Bool {\n    let difference = currentInt - previousInt\n    if direction > 0 {\n      return difference < 0\n    }\n    return difference > 0\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func isMonotonic(array: [Int]) -> Bool {\n    if array.count <= 2 {\n      return true\n    }\n\n    var isNonDecreasing = true\n    var isNonIncreasing = true\n    for i in 1 ..< array.count {\n      if array[i] < array[i - 1] {\n        isNonDecreasing = false\n      }\n      if array[i] > array[i - 1] {\n        isNonIncreasing = false\n      }\n    }\n\n    return isNonDecreasing || isNonIncreasing\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function isMonotonic(array: number[]) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function isMonotonic(array: number[]) {\n  if (array.length <= 2) return true;\n\n  let direction = array[1] - array[0];\n  for (let i = 2; i < array.length; i++) {\n    if (direction === 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, array[i - 1], array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction breaksDirection(direction: number, previousInt: number, currentInt: number) {\n  const difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function isMonotonic(array: number[]) {\n  let isNonDecreasing = true;\n  let isNonIncreasing = true;\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) isNonDecreasing = false;\n    if (array[i] > array[i - 1]) isNonIncreasing = false;\n  }\n\n  return isNonDecreasing || isNonIncreasing;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const expected = true;\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const expected = true;\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        -1,
        -5,
        -10,
        -1100,
        -1100,
        -1101,
        -1102,
        -9001
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -1100,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        5,
        10,
        1100,
        1101,
        1102,
        9001
      ]
    },
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -900,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": [
        1,
        2,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        8,
        7,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        8,
        8,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -5,
        -5,
        -6,
        -7,
        -8,
        -7,
        -9,
        -10,
        -11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -5,
        -5,
        -6,
        -7,
        -8,
        -8,
        -9,
        -10,
        -11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ]
    },
    {
      "array": [
        1,
        2,
        -1,
        -2,
        -5
      ]
    },
    {
      "array": [
        -1,
        -5,
        10
      ]
    },
    {
      "array": [
        2,
        2,
        2,
        1,
        4,
        5
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        2,
        3,
        4,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        3,
        2,
        1
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -1100,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        5,
        10,
        1100,
        1101,
        1102,
        9001
      ]
    },
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -900,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": [
        1,
        2,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        8,
        7,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        8,
        8,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -5,
        -5,
        -6,
        -7,
        -8,
        -7,
        -9,
        -10,
        -11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -5,
        -5,
        -6,
        -7,
        -8,
        -8,
        -9,
        -10,
        -11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ]
    },
    {
      "array": [
        1,
        2,
        -1,
        -2,
        -5
      ]
    },
    {
      "array": [
        -1,
        -5,
        10
      ]
    },
    {
      "array": [
        2,
        2,
        2,
        1,
        4,
        5
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        2,
        3,
        4,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        3,
        2,
        1
      ]
    }
  ],
  "changelog": []
}