{
  "uid": "next-greater-element",
  "testStrategy": "JSON",
  "name": "Next Greater Element",
  "version": 0,
  "releaseDate": "2021-05-17T00:00:00Z",
  "category": "Stacks",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 13217,
    "failureCount": 2090
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "539929196",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 2236
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers and returns a new array\n  containing, at each index, the next element in the input array that's greater\n  than the element at that index in the input array.\n</p>\n<p>\n  In other words, your function should return a new array where\n  <span>outputArray[i]</span> is the next element in the input array that's\n  greater than <span>inputArray[i]</span>. If there's no such next greater\n  element for a particular index, the value at that index in the output array\n  should be <span>-1</span>. For example, given <span>array = [1, 2]</span>,\n  your function should return <span>[2, -1]</span>.\n</p>\n<p>\n  Additionally, your function should treat the input array as a\n  <b>circular</b> array. A circular array wraps around itself as if it were\n  connected end-to-end. So the next index after the last index in a circular\n  array is the first index. This means that, for our problem, given\n  <span>array = [0, 0, 5, 0, 0, 3, 0, 0]</span>, the next greater element after\n  <span>3</span> is <span>5</span>, since the array is circular.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [2, 5, -3, -4, 6, 7, 2]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[5, 6, 6, 6, 7, -1, 5]\n</pre>\n</div>",
  "hints": [
    "<p>\n  Solving this problem in <span>O(n^2)</span> time, where <span>n</span> is the\n  length of the array, is straightforward. Can you solve it with a better time\n  complexity?\n</p>\n",
    "\n<p>\n  How can a stack allow you to solve this problem in <span>O(n)</span> time?\n</p>\n",
    "\n<p>\n  There are a couple of ways to solve this problem in linear time with a stack.\n  One approach is to push onto the stack the indices of elements for which you\n  haven't yet found the next greater element. If you go with this index\n  approach, you need to loop through the array twice (since it's circular) and\n  compare the value of the current element in the array to the one represented\n  by the index on top of the stack. If the element on the top of the stack is\n  smaller than the current element, then the current element is next greater\n  element for the top-of-stack element, and you can pop the index off the top of\n  the stack and use it to store the current element in the correct position in\n  your result array. You then continue to pop elements off the top of the stack\n  until the current element is no longer greater than the top-of-stack element.\n  At this point, you add the index of the current element to the top of the\n  stack, and you continue iterating through the array, repeating the same\n  process.\n</p>\n",
    "\n<p>\n  The approach discussed in Hint #3 assumes that you loop through the array from\n  left to right. You could loop through the array backwards using a very similar\n  approach, storing the actual values of elements on the stack rather than their\n  indices. See the Conceptual Overview section of this question's video\n  explanation for a more in-depth explanation.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> nextGreaterElement(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the array\nvector<int> nextGreaterElement(vector<int> array) {\n  vector<int> result(array.size(), -1);\n  vector<int> stack;\n\n  for (int idx = 0; idx < 2 * array.size(); idx++) {\n    int circularIdx = idx % array.size();\n\n    while (stack.size() > 0 &&\n           array[stack[stack.size() - 1]] < array[circularIdx]) {\n      int top = stack.back();\n      stack.pop_back();\n      result[top] = array[circularIdx];\n    }\n\n    stack.push_back(circularIdx);\n  }\n\n  return result;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the array\nvector<int> nextGreaterElement(vector<int> array) {\n  vector<int> result(array.size(), -1);\n  vector<int> stack;\n\n  for (int idx = 2 * array.size() - 1; idx > -1; idx--) {\n    int circularIdx = idx % array.size();\n\n    while (stack.size() > 0) {\n      if (stack[stack.size() - 1] <= array[circularIdx]) {\n        stack.pop_back();\n      } else {\n        result[circularIdx] = stack[stack.size() - 1];\n        break;\n      }\n    }\n\n    stack.push_back(array[circularIdx]);\n  }\n\n  return result;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {2, 5, -3, -4, 6, 7, 2};\n      vector<int> expected = {5, 6, 6, 6, 7, -1, 5};\n      auto actual = nextGreaterElement(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {2, 5, -3, -4, 6, 7, 2};\n      vector<int> expected = {5, 6, 6, 6, 7, -1, 5};\n      auto actual = nextGreaterElement(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int[] NextGreaterElement(int[] array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the array\n  public int[] NextGreaterElement(int[] array) {\n    int[] result = new int[array.Length];\n    Array.Fill(result, -1);\n\n    Stack<int> stack = new Stack<int>();\n\n    for (int idx = 0; idx < 2 * array.Length; idx++) {\n      int circularIdx = idx % array.Length;\n\n      while (stack.Count > 0 && array[stack.Peek()] < array[circularIdx]) {\n        int top = stack.Pop();\n        result[top] = array[circularIdx];\n      }\n\n      stack.Push(circularIdx);\n    }\n\n    return result;\n  }\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the array\n  public int[] NextGreaterElement(int[] array) {\n    int[] result = new int[array.Length];\n    Array.Fill(result, -1);\n\n    Stack<int> stack = new Stack<int>();\n\n    for (int idx = 2 * array.Length - 1; idx >= 0; idx--) {\n      int circularIdx = idx % array.Length;\n\n      while (stack.Count > 0) {\n        if (stack.Peek() <= array[circularIdx]) {\n          stack.Pop();\n        } else {\n          result[circularIdx] = stack.Peek();\n          break;\n        }\n      }\n\n      stack.Push(array[circularIdx]);\n    }\n\n    return result;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = new int[] { 2, 5, -3, -4, 6, 7, 2 };\n    int[] expected = new int[] { 5, 6, 6, 6, 7, -1, 5 };\n    int[] actual = new Program().NextGreaterElement(input);\n    Utils.AssertTrue(expected.SequenceEqual(actual));\n  }\n}\n",
      "unitTests": "using System;\nusing System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] input = new int[] { 2, 5, -3, -4, 6, 7, 2 };\n    int[] expected = new int[] { 5, 6, 6, 6, 7, -1, 5 };\n    int[] actual = new Program().NextGreaterElement(input);\n    Utils.AssertTrue(expected.SequenceEqual(actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc NextGreaterElement(array []int) []int {\n\t// Write your code here.\n\treturn []int{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the array\nfunc NextGreaterElement(array []int) []int {\n\tresult := make([]int, 0)\n\tfor range array {\n\t\tresult = append(result, -1)\n\t}\n\tstack := make([]int, 0)\n\n\tfor idx := 0; idx < 2*len(array); idx++ {\n\t\tcircularIdx := idx % len(array)\n\n\t\tfor len(stack) > 0 && array[stack[len(stack)-1]] < array[circularIdx] {\n\t\t\tvar top int\n\t\t\ttop, stack = stack[len(stack)-1], stack[:len(stack)-1]\n\t\t\tresult[top] = array[circularIdx]\n\t\t}\n\n\t\tstack = append(stack, circularIdx)\n\t}\n\n\treturn result\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the array\nfunc NextGreaterElement(array []int) []int {\n\tresult := make([]int, 0)\n\tfor range array {\n\t\tresult = append(result, -1)\n\t}\n\tstack := make([]int, 0)\n\n\tfor idx := 2*len(array) - 1; idx >= 0; idx-- {\n\t\tcircularIdx := idx % len(array)\n\n\t\tfor len(stack) > 0 {\n\t\t\tif stack[len(stack)-1] <= array[circularIdx] {\n\t\t\t\tstack = stack[:len(stack)-1]\n\t\t\t} else {\n\t\t\t\tresult[circularIdx] = stack[len(stack)-1]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tstack = append(stack, array[circularIdx])\n\t}\n\n\treturn result\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 5, -3, -4, 6, 7, 2}\n\texpected := []int{5, 6, 6, 6, 7, -1, 5}\n\tactual := NextGreaterElement(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 5, -3, -4, 6, 7, 2}\n\texpected := []int{5, 6, 6, 6, 7, -1, 5}\n\tactual := NextGreaterElement(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int[] nextGreaterElement(int[] array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the array\n  public int[] nextGreaterElement(int[] array) {\n    int[] result = new int[array.length];\n    Arrays.fill(result, -1);\n\n    Stack<Integer> stack = new Stack<Integer>();\n\n    for (int idx = 0; idx < 2 * array.length; idx++) {\n      int circularIdx = idx % array.length;\n\n      while (stack.size() > 0 && array[stack.peek()] < array[circularIdx]) {\n        int top = stack.pop();\n        result[top] = array[circularIdx];\n      }\n\n      stack.push(circularIdx);\n    }\n\n    return result;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the array\n  public int[] nextGreaterElement(int[] array) {\n    int[] result = new int[array.length];\n    Arrays.fill(result, -1);\n\n    Stack<Integer> stack = new Stack<Integer>();\n\n    for (int idx = 2 * array.length - 1; idx >= 0; idx--) {\n      int circularIdx = idx % array.length;\n\n      while (stack.size() > 0) {\n        if (stack.peek() <= array[circularIdx]) {\n          stack.pop();\n        } else {\n          result[circularIdx] = stack.peek();\n          break;\n        }\n      }\n\n      stack.push(array[circularIdx]);\n    }\n\n    return result;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = new int[] {2, 5, -3, -4, 6, 7, 2};\n    int[] expected = new int[] {5, 6, 6, 6, 7, -1, 5};\n    int[] actual = new Program().nextGreaterElement(input);\n    assert (expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = new int[] {2, 5, -3, -4, 6, 7, 2};\n    int[] expected = new int[] {5, 6, 6, 6, 7, -1, 5};\n    int[] actual = new Program().nextGreaterElement(input);\n    assert (expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function nextGreaterElement(array) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.nextGreaterElement = nextGreaterElement;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the array\nfunction nextGreaterElement(array) {\n  const result = new Array(array.length).fill(-1);\n  const stack = [];\n\n  for (let idx = 0; idx < 2 * array.length; idx++) {\n    const circularIdx = idx % array.length;\n\n    while (stack.length > 0 && array[stack[stack.length - 1]] < array[circularIdx]) {\n      const top = stack.pop();\n      result[top] = array[circularIdx];\n    }\n\n    stack.push(circularIdx);\n  }\n\n  return result;\n}\n\n// Do not edit the line below.\nexports.nextGreaterElement = nextGreaterElement;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the array\nfunction nextGreaterElement(array) {\n  const result = new Array(array.length).fill(-1);\n  const stack = [];\n\n  for (let idx = 2 * array.length - 1; idx > -1; idx--) {\n    const circularIdx = idx % array.length;\n\n    while (stack.length > 0) {\n      if (stack[stack.length - 1] <= array[circularIdx]) {\n        stack.pop();\n      } else {\n        result[circularIdx] = stack[stack.length - 1];\n        break;\n      }\n    }\n\n    stack.push(array[circularIdx]);\n  }\n\n  return result;\n}\n\n// Do not edit the line below.\nexports.nextGreaterElement = nextGreaterElement;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [2, 5, -3, -4, 6, 7, 2];\n  const expected = [5, 6, 6, 6, 7, -1, 5];\n  const actual = program.nextGreaterElement(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [2, 5, -3, -4, 6, 7, 2];\n  const expected = [5, 6, 6, 6, 7, -1, 5];\n  const actual = program.nextGreaterElement(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun nextGreaterElement(array: MutableList<Int>): MutableList<Int> {\n    // Write your code here.\n    return mutableListOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the array\nfun nextGreaterElement(array: List<Int>): List<Int> {\n    val result = MutableList(array.size) { -1 }\n    val stack = mutableListOf<Int>()\n\n    for (idx in 0 until 2 * array.size) {\n        val circularIdx = idx % array.size\n\n        while (stack.size > 0 && array[stack[stack.size - 1]] < array[circularIdx]) {\n            val top = stack.removeAt(stack.size - 1)\n            result[top] = array[circularIdx]\n        }\n\n        stack.add(circularIdx)\n    }\n\n    return result\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the array\nfun nextGreaterElement(array: List<Int>): List<Int> {\n    val result = MutableList(array.size) { -1 }\n    val stack = mutableListOf<Int>()\n\n    for (idx in 2 * array.size - 1 downTo 0) {\n        val circularIdx = idx % array.size\n\n        while (stack.size > 0) {\n            if (stack[stack.size - 1] <= array[circularIdx]) {\n                stack.removeAt(stack.size - 1)\n            } else {\n                result[circularIdx] = stack[stack.size - 1]\n                break\n            }\n        }\n\n        stack.add(array[circularIdx])\n    }\n\n    return result\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.nextGreaterElement\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(2, 5, -3, -4, 6, 7, 2)\n        val expected = listOf(5, 6, 6, 6, 7, -1, 5)\n        val output = nextGreaterElement(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.nextGreaterElement\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(2, 5, -3, -4, 6, 7, 2)\n        val expected = listOf(5, 6, 6, 6, 7, -1, 5)\n        val output = nextGreaterElement(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def nextGreaterElement(array):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the array\ndef nextGreaterElement(array):\n    result = [-1] * len(array)\n    stack = []\n\n    for idx in range(2 * len(array)):\n        circularIdx = idx % len(array)\n\n        while len(stack) > 0 and array[stack[len(stack) - 1]] < array[circularIdx]:\n            top = stack.pop()\n            result[top] = array[circularIdx]\n\n        stack.append(circularIdx)\n\n    return result\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the array\ndef nextGreaterElement(array):\n    result = [-1] * len(array)\n    stack = []\n\n    for idx in range(2 * len(array) - 1, -1, -1):\n        circularIdx = idx % len(array)\n\n        while len(stack) > 0:\n            if stack[len(stack) - 1] <= array[circularIdx]:\n                stack.pop()\n            else:\n                result[circularIdx] = stack[len(stack) - 1]\n                break\n\n        stack.append(array[circularIdx])\n\n    return result\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 5, -3, -4, 6, 7, 2]\n        expected = [5, 6, 6, 6, 7, -1, 5]\n        actual = program.nextGreaterElement(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 5, -3, -4, 6, 7, 2]\n        expected = [5, 6, 6, 6, 7, -1, 5]\n        actual = program.nextGreaterElement(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def nextGreaterElement(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def nextGreaterElement(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.nextGreaterElement\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.nextGreaterElement\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func nextGreaterElement(_ array: [Int]) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the array\n  func nextGreaterElement(_ array: [Int]) -> [Int] {\n    var result = Array(repeating: -1, count: array.count)\n    var stack = [Int]()\n\n    for idx in stride(from: 0, to: 2 * array.count, by: 1) {\n      let circularIdx = idx % array.count\n\n      while stack.count > 0, array[stack[stack.count - 1]] < array[circularIdx] {\n        let top = stack.popLast()!\n        result[top] = array[circularIdx]\n      }\n\n      stack.append(circularIdx)\n    }\n    return result\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the array\n  func nextGreaterElement(_ array: [Int]) -> [Int] {\n    var result = Array(repeating: -1, count: array.count)\n    var stack = [Int]()\n\n    for idx in stride(from: 2 * array.count - 1, through: 0, by: -1) {\n      let circularIdx = idx % array.count\n\n      while stack.count > 0 {\n        if stack[stack.count - 1] <= array[circularIdx] {\n          stack.popLast()\n        } else {\n          result[circularIdx] = stack[stack.count - 1]\n          break\n        }\n      }\n\n      stack.append(array[circularIdx])\n    }\n    return result\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [2, 5, -3, -4, 6, 7, 2]\n      var expected = [5, 6, 6, 6, 7, -1, 5]\n      var actual = Program().nextGreaterElement(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [2, 5, -3, -4, 6, 7, 2]\n      var expected = [5, 6, 6, 6, 7, -1, 5]\n      var actual = Program().nextGreaterElement(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function nextGreaterElement(array: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the array\nexport function nextGreaterElement(array: number[]) {\n  const result = new Array(array.length).fill(-1);\n  const stack: number[] = [];\n\n  for (let idx = 0; idx < 2 * array.length; idx++) {\n    const circularIdx = idx % array.length;\n\n    while (stack.length > 0 && array[stack[stack.length - 1]] < array[circularIdx]) {\n      const top = stack.pop()!;\n      result[top] = array[circularIdx];\n    }\n\n    stack.push(circularIdx);\n  }\n\n  return result;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the array\nexport function nextGreaterElement(array: number[]) {\n  const result = new Array(array.length).fill(-1);\n  const stack = [];\n\n  for (let idx = 2 * array.length - 1; idx > -1; idx--) {\n    const circularIdx = idx % array.length;\n\n    while (stack.length > 0) {\n      if (stack[stack.length - 1] <= array[circularIdx]) {\n        stack.pop();\n      } else {\n        result[circularIdx] = stack[stack.length - 1];\n        break;\n      }\n    }\n\n    stack.push(array[circularIdx]);\n  }\n\n  return result;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [2, 5, -3, -4, 6, 7, 2];\n  const expected = [5, 6, 6, 6, 7, -1, 5];\n  const actual = program.nextGreaterElement(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [2, 5, -3, -4, 6, 7, 2];\n  const expected = [5, 6, 6, 6, 7, -1, 5];\n  const actual = program.nextGreaterElement(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        2,
        5,
        -3,
        -4,
        6,
        7,
        2
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        2,
        5,
        -3,
        -4,
        6,
        7,
        2
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        6,
        4,
        5,
        7,
        2,
        1,
        3
      ]
    },
    {
      "array": [
        1,
        0,
        1,
        0,
        1,
        0,
        1
      ]
    },
    {
      "array": [
        5,
        6,
        1,
        3,
        1,
        -2,
        -1,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        5,
        6,
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        12
      ]
    },
    {
      "array": [
        12,
        4
      ]
    },
    {
      "array": [
        -9,
        0,
        -5,
        1,
        3,
        -2,
        18,
        2,
        5,
        18
      ]
    },
    {
      "array": [
        2,
        6,
        7,
        2,
        2,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        4,
        -8,
        -7,
        6,
        2,
        17,
        2,
        -8,
        9,
        0,
        2
      ]
    },
    {
      "array": [
        -8,
        -1,
        -1,
        -2,
        -4,
        -5,
        -6,
        0,
        -9,
        -91,
        -2,
        8
      ]
    },
    {
      "array": []
    }
  ],
  "jsonTests": [
    {
      "array": [
        2,
        5,
        -3,
        -4,
        6,
        7,
        2
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        6,
        4,
        5,
        7,
        2,
        1,
        3
      ]
    },
    {
      "array": [
        1,
        0,
        1,
        0,
        1,
        0,
        1
      ]
    },
    {
      "array": [
        5,
        6,
        1,
        3,
        1,
        -2,
        -1,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": [
        5,
        6,
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        12
      ]
    },
    {
      "array": [
        12,
        4
      ]
    },
    {
      "array": [
        -9,
        0,
        -5,
        1,
        3,
        -2,
        18,
        2,
        5,
        18
      ]
    },
    {
      "array": [
        2,
        6,
        7,
        2,
        2,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        4,
        -8,
        -7,
        6,
        2,
        17,
        2,
        -8,
        9,
        0,
        2
      ]
    },
    {
      "array": [
        -8,
        -1,
        -1,
        -2,
        -4,
        -5,
        -6,
        0,
        -9,
        -91,
        -2,
        8
      ]
    },
    {
      "array": []
    }
  ],
  "changelog": []
}