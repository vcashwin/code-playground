{
  "uid": "number-of-binary-tree-topologies",
  "testStrategy": "JSON",
  "name": "Number Of Binary Tree Topologies",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Recursion",
  "difficulty": 4,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 5229,
    "failureCount": 1355
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "262809662",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2030
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-negative integer <span>n</span> and\n  returns the number of possible Binary Tree topologies that can be created with\n  exactly n nodes.\n</p>\n<p>\n  A Binary Tree topology is defined as any Binary Tree configuration,\n  irrespective of node values. For instance, there exist only two Binary Tree\n  topologies when <span>n</span> is equal to <span>2</span>: a root node with a\n  left node, and a root node with a right node.\n</p>\n<p>\n  Note that when <span>n</span> is equal to <span>0</span>, there's one topology\n  that can be created: the <span>None</span> / <span>null</span> node.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">n</span> = 3\n</pre>\n<h3>Sample Output</h3>\n<pre>\n5\n</pre>\n</div>",
  "hints": [
    "<p>\nEvery Binary Tree topology of n nodes where n is greater than 0 must have a root node and an amount of nodes on both of its sides totaling n - 1. For instance, one such topology could have a root node, n - 3 nodes in its left subtree, and 2 nodes in its right subtree. Another one could have a root node, 4 nodes in its left subtree, and n - 3 nodes in its right subtree. How many distinct Binary Tree topologies with a root node, a left subtree of x nodes, and a right subtree of n - 1 - x nodes are there?\n</p>\n",
    "\n<p>\nConsider a Binary Tree topology of n nodes with a root node, x nodes in its left subtree, and n - 1 - x nodes in its right subtree, and call this topology T1. This is one of possibly many topologies of n nodes. Realize that for every distinct topology T-Lk of x nodes (i.e. for every distinct topology of T1's left subtree) there is a corresponding, distinct topology of as many nodes as T1. Similarly, for every distinct topology T-Rk of n - 1 - x nodes (i.e. for every distinct topology of T1's right subtree) there is a corresponding, distinct topology of as many nodes as T1. In fact, every unique combination of left and right topologies T-Lk and T-Rk forms a distinct topology of as many nodes as T1, and this is true for every x between 0 and n - 1. Realizing this, can you implement a recursive algorithm that solves this problem?\n</p>\n",
    "\n<p>\nIterate through every number x between 0 and n - 1 inclusive; at every number x, recursively calculate the number of distinct topologies of x nodes and multiply that by the number of distinct topologies of n - 1 - x nodes. Sum all of the products that you calculate to find the total number of distinct topologies of n nodes.\n</p>\n",
    "\n<p>\nCan you improve the recursive algorithm mentioned in Hints #2 and #3 by using a caching system (memoization)? Can you implement the algorithm iteratively? Is there any advantage to doing so?\n</p>"
  ],
  "spaceTime": "O(n^2) time | O(n) space - where n is the input number",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint numberOfBinaryTreeTopologies(int n) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\nint numberOfBinaryTreeTopologies(int n) {\n  if (n == 0) {\n    return 1;\n  }\n  int numberOfTrees = 0;\n  for (int leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n    int rightTreeSize = n - 1 - leftTreeSize;\n    int numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize);\n    int numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize);\n    numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n  }\n  return numberOfTrees;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_map>\nusing namespace std;\n\nint helper(int n, unordered_map<int, int>* cache);\n\n// O(n^2) time | O(n) space\nint numberOfBinaryTreeTopologies(int n) {\n  unordered_map<int, int> cache{{0, 1}};\n  return helper(n, &cache);\n}\n\nint helper(int n, unordered_map<int, int>* cache) {\n  if (cache->find(n) != cache->end()) {\n    return cache->at(n);\n  }\n  int numberOfTrees = 0;\n  for (int leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n    int rightTreeSize = n - 1 - leftTreeSize;\n    int numberOfLeftTrees = helper(leftTreeSize, cache);\n    int numberOfRightTrees = helper(rightTreeSize, cache);\n    numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n  }\n  cache->insert({n, numberOfTrees});\n  return numberOfTrees;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(n^2) time | O(n) space\nint numberOfBinaryTreeTopologies(int n) {\n  vector<int> cache{1};\n  for (int m = 1; m < n + 1; m++) {\n    int numberOfTrees = 0;\n    for (int leftTreeSize = 0; leftTreeSize < m; leftTreeSize++) {\n      int rightTreeSize = m - 1 - leftTreeSize;\n      int numberOfLeftTrees = cache[leftTreeSize];\n      int numberOfRightTrees = cache[rightTreeSize];\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    cache.push_back(numberOfTrees);\n  }\n  return cache[n];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(numberOfBinaryTreeTopologies(3) == 5);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(numberOfBinaryTreeTopologies(3) == 5);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int NumberOfBinaryTreeTopologies(int n) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\n  public static int NumberOfBinaryTreeTopologies(int n) {\n    if (n == 0) {\n      return 1;\n    }\n    int numberOfTrees = 0;\n    for (int leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n      int rightTreeSize = n - 1 - leftTreeSize;\n      int numberOfLeftTrees = NumberOfBinaryTreeTopologies(leftTreeSize);\n      int numberOfRightTrees = NumberOfBinaryTreeTopologies(rightTreeSize);\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    return numberOfTrees;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^2) time | O(n) space\n  public static int NumberOfBinaryTreeTopologies(int n) {\n    Dictionary<int, int> cache = new Dictionary<int, int>();\n    cache.Add(0, 1);\n    return NumberOfBinaryTreeTopologies(n, cache);\n  }\n\n  public static int NumberOfBinaryTreeTopologies(\n    int n, Dictionary<int, int> cache\n  ) {\n    if (cache.ContainsKey(n)) {\n      return cache[n];\n    }\n    int numberOfTrees = 0;\n    for (int leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n      int rightTreeSize = n - 1 - leftTreeSize;\n      int numberOfLeftTrees = NumberOfBinaryTreeTopologies(leftTreeSize, cache);\n      int numberOfRightTrees =\n        NumberOfBinaryTreeTopologies(rightTreeSize, cache);\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    cache.Add(n, numberOfTrees);\n    return numberOfTrees;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^2) time | O(n) space\n  public static int NumberOfBinaryTreeTopologies(int n) {\n    List<int> cache = new List<int>();\n    cache.Add(1);\n    for (int m = 1; m < n + 1; m++) {\n      int numberOfTrees = 0;\n      for (int leftTreeSize = 0; leftTreeSize < m; leftTreeSize++) {\n        int rightTreeSize = m - 1 - leftTreeSize;\n        int numberOfLeftTrees = cache[leftTreeSize];\n        int numberOfRightTrees = cache[rightTreeSize];\n        numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n      }\n      cache.Add(numberOfTrees);\n    }\n    return cache[n];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.NumberOfBinaryTreeTopologies(3) == 5);\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.NumberOfBinaryTreeTopologies(3) == 5);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc NumberOfBinaryTreeTopologies(n int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\nfunc NumberOfBinaryTreeTopologies(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tnumberOfTrees := 0\n\tfor leftTreeSize := 0; leftTreeSize < n; leftTreeSize++ {\n\t\trightTreeSize := n - 1 - leftTreeSize\n\t\tnumberOfLeftTrees := NumberOfBinaryTreeTopologies(leftTreeSize)\n\t\tnumberOfRightTrees := NumberOfBinaryTreeTopologies(rightTreeSize)\n\t\tnumberOfTrees += numberOfLeftTrees * numberOfRightTrees\n\t}\n\treturn numberOfTrees\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(n) space\nfunc NumberOfBinaryTreeTopologies(n int) int {\n\treturn helper(n, map[int]int{0: 1})\n}\n\nfunc helper(n int, cache map[int]int) int {\n\tif val, found := cache[n]; found {\n\t\treturn val\n\t}\n\tnumberOfTrees := 0\n\tfor leftTreeSize := 0; leftTreeSize < n; leftTreeSize++ {\n\t\trightTreeSize := n - 1 - leftTreeSize\n\t\tnumberOfLeftTrees := helper(leftTreeSize, cache)\n\t\tnumberOfRightTrees := helper(rightTreeSize, cache)\n\t\tnumberOfTrees += numberOfLeftTrees * numberOfRightTrees\n\t}\n\tcache[n] = numberOfTrees\n\treturn numberOfTrees\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(n) space\nfunc NumberOfBinaryTreeTopologies(n int) int {\n\tcache := []int{1}\n\tfor m := 1; m < n+1; m++ {\n\t\tnumberOfTrees := 0\n\t\tfor leftTreeSize := 0; leftTreeSize < m; leftTreeSize++ {\n\t\t\trightTreeSize := m - 1 - leftTreeSize\n\t\t\tnumberOfLeftTrees := cache[leftTreeSize]\n\t\t\tnumberOfRightTrees := cache[rightTreeSize]\n\t\t\tnumberOfTrees += numberOfLeftTrees * numberOfRightTrees\n\t\t}\n\t\tcache = append(cache, numberOfTrees)\n\t}\n\treturn cache[n]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 5\n\toutput := NumberOfBinaryTreeTopologies(3)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 5\n\toutput := NumberOfBinaryTreeTopologies(3)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int numberOfBinaryTreeTopologies(int n) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\n  public static int numberOfBinaryTreeTopologies(int n) {\n    if (n == 0) {\n      return 1;\n    }\n    int numberOfTrees = 0;\n    for (int leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n      int rightTreeSize = n - 1 - leftTreeSize;\n      int numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize);\n      int numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize);\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    return numberOfTrees;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static int numberOfBinaryTreeTopologies(int n) {\n    Map<Integer, Integer> cache = new HashMap<Integer, Integer>();\n    cache.put(0, 1);\n    return numberOfBinaryTreeTopologies(n, cache);\n  }\n\n  public static int numberOfBinaryTreeTopologies(\n    int n, Map<Integer, Integer> cache\n  ) {\n    if (cache.containsKey(n)) {\n      return cache.get(n);\n    }\n    int numberOfTrees = 0;\n    for (int leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n      int rightTreeSize = n - 1 - leftTreeSize;\n      int numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize, cache);\n      int numberOfRightTrees =\n        numberOfBinaryTreeTopologies(rightTreeSize, cache);\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    cache.put(n, numberOfTrees);\n    return numberOfTrees;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static int numberOfBinaryTreeTopologies(int n) {\n    List<Integer> cache = new ArrayList<Integer>();\n    cache.add(1);\n    for (int m = 1; m < n + 1; m++) {\n      int numberOfTrees = 0;\n      for (int leftTreeSize = 0; leftTreeSize < m; leftTreeSize++) {\n        int rightTreeSize = m - 1 - leftTreeSize;\n        int numberOfLeftTrees = cache.get(leftTreeSize);\n        int numberOfRightTrees = cache.get(rightTreeSize);\n        numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n      }\n      cache.add(numberOfTrees);\n    }\n    return cache.get(n);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.numberOfBinaryTreeTopologies(3) == 5);\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.numberOfBinaryTreeTopologies(3) == 5);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function numberOfBinaryTreeTopologies(n) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.numberOfBinaryTreeTopologies = numberOfBinaryTreeTopologies;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\nfunction numberOfBinaryTreeTopologies(n) {\n  if (n === 0) return 1;\n  let numberOfTrees = 0;\n  for (let leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n    const rightTreeSize = n - 1 - leftTreeSize;\n    const numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize);\n    const numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize);\n    numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n  }\n  return numberOfTrees;\n}\n\nexports.numberOfBinaryTreeTopologies = numberOfBinaryTreeTopologies;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction numberOfBinaryTreeTopologies(n, cache = {0: 1}) {\n  if (n in cache) return cache[n];\n  let numberOfTrees = 0;\n  for (let leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n    const rightTreeSize = n - 1 - leftTreeSize;\n    const numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize, cache);\n    const numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize, cache);\n    numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n  }\n  cache[n] = numberOfTrees;\n  return numberOfTrees;\n}\n\nexports.numberOfBinaryTreeTopologies = numberOfBinaryTreeTopologies;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction numberOfBinaryTreeTopologies(n) {\n  const cache = [1];\n  for (let m = 1; m < n + 1; m++) {\n    let numberOfTrees = 0;\n    for (let leftTreeSize = 0; leftTreeSize < m; leftTreeSize++) {\n      const rightTreeSize = m - 1 - leftTreeSize;\n      const numberOfLeftTrees = cache[leftTreeSize];\n      const numberOfRightTrees = cache[rightTreeSize];\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    cache.push(numberOfTrees);\n  }\n  return cache[n];\n}\n\nexports.numberOfBinaryTreeTopologies = numberOfBinaryTreeTopologies;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfBinaryTreeTopologies(3)).to.deep.equal(5);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfBinaryTreeTopologies(3)).to.deep.equal(5);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun numberOfBinaryTreeTopologies(n: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\nfun numberOfBinaryTreeTopologies(n: Int): Int {\n    if (n == 0) {\n        return 1\n    }\n    var numberOfTrees = 0\n    for (leftTreeSize in 0 until n) {\n        val rightTreeSize = n - 1 - leftTreeSize\n        val numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize)\n        val numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize)\n        numberOfTrees += numberOfLeftTrees * numberOfRightTrees\n    }\n    return numberOfTrees\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space\nfun numberOfBinaryTreeTopologies(n: Int): Int {\n    val cache = mutableMapOf<Int, Int>()\n    cache[0] = 1\n    return numberOfBinaryTreeTopologies(n, cache)\n}\n\nfun numberOfBinaryTreeTopologies(n: Int, cache: MutableMap<Int, Int>): Int {\n    if (cache.contains(n)) {\n        return cache[n]!!\n    }\n\n    var numberOfTrees = 0\n    for (leftTreeSize in 0 until n) {\n        val rightTreeSize = n - 1 - leftTreeSize\n        val numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize, cache)\n        val numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize, cache)\n        numberOfTrees += numberOfLeftTrees * numberOfRightTrees\n    }\n    cache[n] = numberOfTrees\n    return numberOfTrees\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space\nfun numberOfBinaryTreeTopologies(n: Int): Int {\n    val cache = mutableListOf<Int>(1)\n    for (m in 1 until n + 1) {\n        var numberOfTrees = 0\n        for (leftTreeSize in 0 until m) {\n            val rightTreeSize = m - 1 - leftTreeSize\n            val numberOfLeftTrees = cache[leftTreeSize]\n            val numberOfRightTrees = cache[rightTreeSize]\n            numberOfTrees += numberOfLeftTrees * numberOfRightTrees\n        }\n        cache.add(numberOfTrees)\n    }\n    return cache[n]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.numberOfBinaryTreeTopologies\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = numberOfBinaryTreeTopologies(3)\n        assert(output == 5)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.numberOfBinaryTreeTopologies\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = numberOfBinaryTreeTopologies(3)\n        assert(output == 5)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def numberOfBinaryTreeTopologies(n):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\ndef numberOfBinaryTreeTopologies(n):\n    if n == 0:\n        return 1\n    numberOfTrees = 0\n    for leftTreeSize in range(n):\n        rightTreeSize = n - 1 - leftTreeSize\n        numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize)\n        numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize)\n        numberOfTrees += numberOfLeftTrees * numberOfRightTrees\n    return numberOfTrees\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef numberOfBinaryTreeTopologies(n, cache={0: 1}):\n    if n in cache:\n        return cache[n]\n    numberOfTrees = 0\n    for leftTreeSize in range(n):\n        rightTreeSize = n - 1 - leftTreeSize\n        numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize, cache)\n        numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize, cache)\n        numberOfTrees += numberOfLeftTrees * numberOfRightTrees\n    cache[n] = numberOfTrees\n    return numberOfTrees\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef numberOfBinaryTreeTopologies(n):\n    cache = [1]\n    for m in range(1, n + 1):\n        numberOfTrees = 0\n        for leftTreeSize in range(m):\n            rightTreeSize = m - 1 - leftTreeSize\n            numberOfLeftTrees = cache[leftTreeSize]\n            numberOfRightTrees = cache[rightTreeSize]\n            numberOfTrees += numberOfLeftTrees * numberOfRightTrees\n        cache.append(numberOfTrees)\n    return cache[n]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.numberOfBinaryTreeTopologies(3), 5)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.numberOfBinaryTreeTopologies(3), 5)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def numberOfBinaryTreeTopologies(n)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfBinaryTreeTopologies(n)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfBinaryTreeTopologies(n)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfBinaryTreeTopologies(n)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numberOfBinaryTreeTopologies\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numberOfBinaryTreeTopologies\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func numberOfBinaryTreeTopologies(_ n: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Upper Bound: (O(n * (2n)!)/(n!(n + 1)!)) time | O(n) space\n  func numberOfBinaryTreeTopologies(_ n: Int) -> Int {\n    if n == 0 {\n      return 1\n    }\n\n    var numberOfTopologies = 0\n\n    for leftTreeSize in 0 ..< n {\n      let rightTreeSize = n - 1 - leftTreeSize\n\n      let leftNumberOfTopologies = numberOfBinaryTreeTopologies(leftTreeSize)\n      let rightNumberOfTopologies = numberOfBinaryTreeTopologies(rightTreeSize)\n      numberOfTopologies += leftNumberOfTopologies * rightNumberOfTopologies\n    }\n\n    return numberOfTopologies\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space\n  func numberOfBinaryTreeTopologies(_ n: Int) -> Int {\n    var cache = [0: 1]\n    return numberOfBinaryTreeTopologiesHelper(n, &cache)\n  }\n\n  func numberOfBinaryTreeTopologiesHelper(_ n: Int, _ cache: inout [Int: Int]) -> Int {\n    if let cachedValue = cache[n] {\n      return cachedValue\n    }\n\n    var numberOfTopologies = 0\n\n    for leftTreeSize in 0 ..< n {\n      let rightTreeSize = n - 1 - leftTreeSize\n\n      let leftNumberOfTopologies = numberOfBinaryTreeTopologiesHelper(leftTreeSize, &cache)\n      let rightNumberOfTopologies = numberOfBinaryTreeTopologiesHelper(rightTreeSize, &cache)\n      numberOfTopologies += leftNumberOfTopologies * rightNumberOfTopologies\n    }\n\n    cache[n] = numberOfTopologies\n    return numberOfTopologies\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(1) space\n  func numberOfBinaryTreeTopologies(_ n: Int) -> Int {\n    var cache = [1]\n\n    for currentMax in stride(from: 1, through: n, by: 1) {\n      var numberOfTopologies = 0\n\n      for leftTreeSize in stride(from: 0, to: currentMax, by: 1) {\n        let rightTreeSize = currentMax - 1 - leftTreeSize\n\n        let leftNumberOfTopologies = cache[leftTreeSize]\n        let rightNumberOfTopologies = cache[rightTreeSize]\n        numberOfTopologies += leftNumberOfTopologies * rightNumberOfTopologies\n      }\n\n      cache.append(numberOfTopologies)\n    }\n\n    return cache[n]\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(5, program.numberOfBinaryTreeTopologies(3))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(5, program.numberOfBinaryTreeTopologies(3))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function numberOfBinaryTreeTopologies(n: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Upper Bound: O((n*(2n)!)/(n!(n+1)!)) time | O(n) space\nexport function numberOfBinaryTreeTopologies(n: number) {\n  if (n === 0) return 1;\n  let numberOfTrees = 0;\n  for (let leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n    const rightTreeSize = n - 1 - leftTreeSize;\n    const numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize);\n    const numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize);\n    numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n  }\n  return numberOfTrees;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface Cache {\n  [key: number]: number;\n}\n\n// O(n^2) time | O(n) space\nexport function numberOfBinaryTreeTopologies(n: number, cache: Cache = {0: 1}) {\n  if (n in cache) return cache[n];\n  let numberOfTrees = 0;\n  for (let leftTreeSize = 0; leftTreeSize < n; leftTreeSize++) {\n    const rightTreeSize = n - 1 - leftTreeSize;\n    const numberOfLeftTrees = numberOfBinaryTreeTopologies(leftTreeSize, cache);\n    const numberOfRightTrees = numberOfBinaryTreeTopologies(rightTreeSize, cache);\n    numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n  }\n  cache[n] = numberOfTrees;\n  return numberOfTrees;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space\nexport function numberOfBinaryTreeTopologies(n: number) {\n  const cache = [1];\n  for (let m = 1; m < n + 1; m++) {\n    let numberOfTrees = 0;\n    for (let leftTreeSize = 0; leftTreeSize < m; leftTreeSize++) {\n      const rightTreeSize = m - 1 - leftTreeSize;\n      const numberOfLeftTrees = cache[leftTreeSize];\n      const numberOfRightTrees = cache[rightTreeSize];\n      numberOfTrees += numberOfLeftTrees * numberOfRightTrees;\n    }\n    cache.push(numberOfTrees);\n  }\n  return cache[n];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfBinaryTreeTopologies(3)).to.deep.equal(5);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.numberOfBinaryTreeTopologies(3)).to.deep.equal(5);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "n",
      "example": 3,
      "schema": {
        "minimum": 0,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "n": 3
    },
    {
      "n": 0
    },
    {
      "n": 1
    },
    {
      "n": 2
    },
    {
      "n": 4
    },
    {
      "n": 5
    },
    {
      "n": 6
    },
    {
      "n": 7
    },
    {
      "n": 8
    },
    {
      "n": 9
    },
    {
      "n": 10
    },
    {
      "n": 11
    }
  ],
  "jsonTests": [
    {
      "n": 3
    },
    {
      "n": 0
    },
    {
      "n": 1
    },
    {
      "n": 2
    },
    {
      "n": 4
    },
    {
      "n": 5
    },
    {
      "n": 6
    },
    {
      "n": 7
    },
    {
      "n": 8
    },
    {
      "n": 9
    },
    {
      "n": 10
    },
    {
      "n": 11
    }
  ],
  "changelog": []
}