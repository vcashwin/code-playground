{
  "uid": "number-of-ways-to-traverse-graph",
  "testStrategy": "JSON",
  "name": "Number Of Ways To Traverse Graph",
  "version": 0,
  "releaseDate": "2021-02-20T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 21050,
    "failureCount": 4424
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "513948499",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1810
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given two positive integers representing the width and height of a\n  grid-shaped, rectangular graph. Write a function that returns the number of\n  ways to reach the bottom right corner of the graph when starting at the top\n  left corner. Each move you take must either go down or right. In other words,\n  you can never move up or left in the graph.\n</p>\n<p>\n  For example, given the graph illustrated below, with\n  <span>width = 2</span> and <span>height = 3</span>, there are three ways to\n  reach the bottom right corner when starting at the top left corner:\n</p>\n<pre>\n _ _\n|_|_|\n|_|_|\n|_|_|\n</pre>\n<ol>\n  <li>Down, Down, Right</li>\n  <li>Right, Down, Down</li>\n  <li>Down, Right, Down</li>\n</ol>\n<p>\n  Note: you may assume that <span>width * height >= 2</span>. In other words,\n  the graph will never be a 1x1 grid.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">width</span> = 4\n<span class=\"CodeEditor-promptParameter\">height</span> = 3\n</pre>\n<h3>Sample Output</h3>\n<pre>\n10\n</pre>\n</div>",
  "hints": [
    "<p>\n  Think recursively. How many positions in the graph can access the bottom right\n  corner of the graph? In other words, what positions do you need to reach\n  before you can reach the bottom right corner?\n</p>\n",
    "\n<p>\n  The number of ways to reach any position in the graph is equal to the number\n  of ways to reach the position directly above it plus the number of ways to\n  reach the position directly to its left. This is because you can only travel\n  down and right.\n</p>\n",
    "\n<p>\n  Using the information in Hints #1 and #2, can you come up with an efficient\n  way to solve this problem that doesn't repeatedly perform the same work? What\n  does a dynamic-programming implementation look like?\n</p>\n",
    "\n<p>\n  To efficiency solve this problem, simply loop through the entire graph, column\n  by column, row by row, and calculate the number of ways to reach each\n  position. If you're on the top or left edge of the graph, there's only one way\n  to reach your position. If you're anywhere else in the graph, the number of\n  ways to reach your position is the number of ways to reach the position\n  directly above it plus the number of ways to reach the position directly to\n  its left (which you've already calculated and should be storing). Every time\n  you calculate the number of ways to reach a position, store the answer so that\n  you can use it later in the calculation of other positions.\n</p>"
  ],
  "spaceTime": "O(n + m) time | O(1) space - where n is the width of the graph and m is the height",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nint numberOfWaysToTraverseGraph(int width, int height) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// O(2^(n + m)) time | O(n + m) space - where n\n// is the width of the graph and m is the height\nint numberOfWaysToTraverseGraph(int width, int height) {\n  if (width == 1 || height == 1) return 1;\n\n  return numberOfWaysToTraverseGraph(width - 1, height) +\n         numberOfWaysToTraverseGraph(width, height - 1);\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n * m) time | O(n * m) space - where n\n// is the width of the graph and m is the height\nint numberOfWaysToTraverseGraph(int width, int height) {\n  vector<vector<int>> numberOfWays;\n  for (int i = 0; i < height + 1; i++) {\n    numberOfWays.push_back(vector<int>{});\n    for (int j = 0; j < width + 1; j++) {\n      numberOfWays[i].push_back(0);\n    }\n  }\n\n  for (int widthIdx = 1; widthIdx < width + 1; widthIdx++) {\n    for (int heightIdx = 1; heightIdx < height + 1; heightIdx++) {\n      if (widthIdx == 1 || heightIdx == 1) {\n        numberOfWays[heightIdx][widthIdx] = 1;\n      } else {\n        int waysLeft = numberOfWays[heightIdx][widthIdx - 1];\n        int waysUp = numberOfWays[heightIdx - 1][widthIdx];\n        numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp;\n      }\n    }\n  }\n\n  return numberOfWays[height][width];\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nint factorial(int num);\n\n// O(n + m) time | O(1) space - where n is\n// the width of the graph and m is the height\nint numberOfWaysToTraverseGraph(int width, int height) {\n  int xDistanceToCorner = width - 1;\n  int yDistanceToCorner = height - 1;\n\n  // The number of permutations of right and down movements\n  // is the number of ways to reach the bottom right corner.\n  int numerator = factorial(xDistanceToCorner + yDistanceToCorner);\n  int denominator = factorial(xDistanceToCorner) * factorial(yDistanceToCorner);\n  return int(numerator / denominator);\n}\n\nint factorial(int num) {\n  int result = 1;\n\n  for (int n = 2; n < num + 1; n++) {\n    result *= n;\n  }\n\n  return result;\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto width = 4;\n      auto height = 3;\n      auto expected = 10;\n      auto actual = numberOfWaysToTraverseGraph(width, height);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto width = 4;\n      auto height = 3;\n      auto expected = 10;\n      auto actual = numberOfWaysToTraverseGraph(width, height);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int NumberOfWaysToTraverseGraph(int width, int height) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(2^(n + m)) time | O(n + m) space - where n\n  // is the width of the graph and m is the height\n  public int NumberOfWaysToTraverseGraph(int width, int height) {\n    if (width == 1 || height == 1) {\n      return 1;\n    }\n\n    return NumberOfWaysToTraverseGraph(width - 1, height) +\n           NumberOfWaysToTraverseGraph(width, height - 1);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n * m) time | O(n * m) space - where n\n  // is the width of the graph and m is the height\n  public int NumberOfWaysToTraverseGraph(int width, int height) {\n    int[,] numberOfWays = new int[height + 1, width + 1];\n\n    for (int widthIdx = 1; widthIdx < width + 1; widthIdx++) {\n      for (int heightIdx = 1; heightIdx < height + 1; heightIdx++) {\n        if (widthIdx == 1 || heightIdx == 1) {\n          numberOfWays[heightIdx, widthIdx] = 1;\n        } else {\n          int waysLeft = numberOfWays[heightIdx, widthIdx - 1];\n          int waysUp = numberOfWays[heightIdx - 1, widthIdx];\n          numberOfWays[heightIdx, widthIdx] = waysLeft + waysUp;\n        }\n      }\n    }\n\n    return numberOfWays[height, width];\n  }\n}",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n + m) time | O(1) space - where n is\n  // the width of the graph and m is the height\n  public int NumberOfWaysToTraverseGraph(int width, int height) {\n    int xDistanceToCorner = width - 1;\n    int yDistanceToCorner = height - 1;\n\n    // The number of permutations of right and down movements\n    // is the number of ways to reach the bottom right corner.\n    int numerator = factorial(xDistanceToCorner + yDistanceToCorner);\n    int denominator =\n      factorial(xDistanceToCorner) * factorial(yDistanceToCorner);\n    return numerator / denominator;\n  }\n\n  public int factorial(int num) {\n    int result = 1;\n\n    for (int n = 2; n < num + 1; n++) {\n      result *= n;\n    }\n\n    return result;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int width = 4;\n    int height = 3;\n    int expected = 10;\n    var actual = new Program().NumberOfWaysToTraverseGraph(width, height);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int width = 4;\n    int height = 3;\n    int expected = 10;\n    var actual = new Program().NumberOfWaysToTraverseGraph(width, height);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc NumberOfWaysToTraverseGraph(width int, height int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(2^(n + m)) time | O(n + m) space - where n\n// is the width of the graph and m is the height\nfunc NumberOfWaysToTraverseGraph(width int, height int) int {\n\tif width == 1 || height == 1 {\n\t\treturn 1\n\t}\n\n\treturn NumberOfWaysToTraverseGraph(width-1, height) + NumberOfWaysToTraverseGraph(width, height-1)\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n * m) time | O(n * m) space - where n\n// is the width of the graph and m is the height\nfunc NumberOfWaysToTraverseGraph(width int, height int) int {\n\tnumberOfWays := make([][]int, height+1)\n\tfor i := range numberOfWays {\n\t\tnumberOfWays[i] = make([]int, width+1)\n\t}\n\n\tfor widthIdx := 1; widthIdx < width+1; widthIdx++ {\n\t\tfor heightIdx := 1; heightIdx < height+1; heightIdx++ {\n\t\t\tif widthIdx == 1 || heightIdx == 1 {\n\t\t\t\tnumberOfWays[heightIdx][widthIdx] = 1\n\t\t\t} else {\n\t\t\t\twaysLeft := numberOfWays[heightIdx][widthIdx-1]\n\t\t\t\twaysUp := numberOfWays[heightIdx-1][widthIdx]\n\t\t\t\tnumberOfWays[heightIdx][widthIdx] = waysLeft + waysUp\n\t\t\t}\n\t\t}\n\t}\n\n\treturn numberOfWays[height][width]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n + m) time | O(1) space - where n is\n// the width of the graph and m is the height\nfunc NumberOfWaysToTraverseGraph(width int, height int) int {\n\txDistanceToCorner := width - 1\n\tyDistanceToCorner := height - 1\n\n\t// The number of permutations of right and down movements\n\t// is the number of ways to reach the bottom right corner.\n\tnumerator := factorial(xDistanceToCorner + yDistanceToCorner)\n\tdenominator := factorial(xDistanceToCorner) * factorial(yDistanceToCorner)\n\treturn numerator / denominator\n}\n\nfunc factorial(num int) int {\n\tresult := 1\n\tfor n := 2; n < num+1; n++ {\n\t\tresult *= n\n\t}\n\treturn result\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\twidth := 4\n\theight := 3\n\texpected := 10\n\tactual := NumberOfWaysToTraverseGraph(width, height)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\twidth := 4\n\theight := 3\n\texpected := 10\n\tactual := NumberOfWaysToTraverseGraph(width, height)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int numberOfWaysToTraverseGraph(int width, int height) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(2^(n + m)) time | O(n + m) space - where n\n  // is the width of the graph and m is the height\n  public int numberOfWaysToTraverseGraph(int width, int height) {\n    if (width == 1 || height == 1) {\n      return 1;\n    }\n\n    return numberOfWaysToTraverseGraph(width - 1, height)\n      + numberOfWaysToTraverseGraph(width, height - 1);\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n * m) time | O(n * m) space - where n\n  // is the width of the graph and m is the height\n  public int numberOfWaysToTraverseGraph(int width, int height) {\n    int[][] numberOfWays = new int[height + 1][width + 1];\n\n    for (int widthIdx = 1; widthIdx < width + 1; widthIdx++) {\n      for (int heightIdx = 1; heightIdx < height + 1; heightIdx++) {\n        if (widthIdx == 1 || heightIdx == 1) {\n          numberOfWays[heightIdx][widthIdx] = 1;\n        } else {\n          int waysLeft = numberOfWays[heightIdx][widthIdx - 1];\n          int waysUp = numberOfWays[heightIdx - 1][widthIdx];\n          numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp;\n        }\n      }\n    }\n\n    return numberOfWays[height][width];\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n + m) time | O(1) space - where n is\n  // the width of the graph and m is the height\n  public int numberOfWaysToTraverseGraph(int width, int height) {\n    int xDistanceToCorner = width - 1;\n    int yDistanceToCorner = height - 1;\n\n    // The number of permutations of right and down movements\n    // is the number of ways to reach the bottom right corner.\n    int numerator = factorial(xDistanceToCorner + yDistanceToCorner);\n    int denominator =\n      factorial(xDistanceToCorner) * factorial(yDistanceToCorner);\n    return numerator / denominator;\n  }\n\n  public int factorial(int num) {\n    int result = 1;\n\n    for (int n = 2; n < num + 1; n++) {\n      result *= n;\n    }\n\n    return result;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int width = 4;\n    int height = 3;\n    int expected = 10;\n    var actual = new Program().numberOfWaysToTraverseGraph(width, height);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int width = 4;\n    int height = 3;\n    int expected = 10;\n    var actual = new Program().numberOfWaysToTraverseGraph(width, height);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function numberOfWaysToTraverseGraph(width, height) {\n  // Write your code here.\n  return 0;\n}\n\n// Do not edit the line below.\nexports.numberOfWaysToTraverseGraph = numberOfWaysToTraverseGraph;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(2^(n + m)) time | O(n + m) space - where n\n// is the width of the graph and m is the height\nfunction numberOfWaysToTraverseGraph(width, height) {\n  if (width === 1 || height === 1) return 1;\n\n  return (\n    numberOfWaysToTraverseGraph(width - 1, height) + numberOfWaysToTraverseGraph(width, height - 1)\n  );\n}\n\n// Do not edit the line below.\nexports.numberOfWaysToTraverseGraph = numberOfWaysToTraverseGraph;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n * m) time | O(n * m) space - where n\n// is the width of the graph and m is the height\nfunction numberOfWaysToTraverseGraph(width, height) {\n  const numberOfWays = [];\n  for (let i = 0; i < height + 1; i++) {\n    numberOfWays.push([]);\n    for (let j = 0; j < width + 1; j++) {\n      numberOfWays[i].push(0);\n    }\n  }\n\n  for (let widthIdx = 1; widthIdx < width + 1; widthIdx++) {\n    for (let heightIdx = 1; heightIdx < height + 1; heightIdx++) {\n      if (widthIdx === 1 || heightIdx === 1) {\n        numberOfWays[heightIdx][widthIdx] = 1;\n      } else {\n        const waysLeft = numberOfWays[heightIdx][widthIdx - 1];\n        const waysUp = numberOfWays[heightIdx - 1][widthIdx];\n        numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp;\n      }\n    }\n  }\n\n  return numberOfWays[height][width];\n}\n\n// Do not edit the line below.\nexports.numberOfWaysToTraverseGraph = numberOfWaysToTraverseGraph;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(1) space - where n is\n// the width of the graph and m is the height\nfunction numberOfWaysToTraverseGraph(width, height) {\n  const xDistanceToCorner = width - 1;\n  const yDistanceToCorner = height - 1;\n\n  // The number of permutations of right and down movements\n  // is the number of ways to reach the bottom right corner.\n  const numerator = factorial(xDistanceToCorner + yDistanceToCorner);\n  const denominator = factorial(xDistanceToCorner) * factorial(yDistanceToCorner);\n  return Math.floor(numerator / denominator);\n}\n\nfunction factorial(num) {\n  let result = 1;\n\n  for (let n = 2; n < num + 1; n++) {\n    result *= n;\n  }\n\n  return result;\n}\n\n// Do not edit the line below.\nexports.numberOfWaysToTraverseGraph = numberOfWaysToTraverseGraph;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const width = 4;\n  const height = 3;\n  const expected = 10;\n  const actual = program.numberOfWaysToTraverseGraph(width, height);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const width = 4;\n  const height = 3;\n  const expected = 10;\n  const actual = program.numberOfWaysToTraverseGraph(width, height);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun numberOfWaysToTraverseGraph(width: Int, height: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(2^(n + m)) time | O(n + m) space - where n\n// is the width of the graph and m is the height\nfun numberOfWaysToTraverseGraph(width: Int, height: Int): Int {\n    if (width == 1 || height == 1) return 1\n\n    return numberOfWaysToTraverseGraph(width - 1, height) + numberOfWaysToTraverseGraph(width, height - 1)\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n * m) time | O(n * m) space - where n\n// is the width of the graph and m is the height\nfun numberOfWaysToTraverseGraph(width: Int, height: Int): Int {\n    val numberOfWays = MutableList(height + 1) { MutableList(width + 1) { 0 } }\n\n    for (widthIdx in 1 until width + 1) {\n        for (heightIdx in 1 until height + 1) {\n            if (widthIdx == 1 || heightIdx == 1) {\n                numberOfWays[heightIdx][widthIdx] = 1\n            } else {\n                val waysLeft = numberOfWays[heightIdx][widthIdx - 1]\n                val waysUp = numberOfWays[heightIdx - 1][widthIdx]\n                numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp\n            }\n        }\n    }\n\n    return numberOfWays[height][width]\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n + m) time | O(1) space - where n is\n// the width of the graph and m is the height\nfun numberOfWaysToTraverseGraph(width: Int, height: Int): Int {\n    val xDistanceToCorner = width - 1\n    val yDistanceToCorner = height - 1\n\n    // The number of permutations of right and down movements\n    // is the number of ways to reach the bottom right corner.\n    val numerator = factorial(xDistanceToCorner + yDistanceToCorner)\n    val denominator = factorial(xDistanceToCorner) * factorial(yDistanceToCorner)\n    return numerator / denominator\n}\n\nfun factorial(num: Int): Int {\n    var result = 1\n\n    for (n in 2 until num + 1) {\n        result *= n\n    }\n\n    return result\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.numberOfWaysToTraverseGraph\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val width = 4\n        val height = 3\n        val expected = 10\n        val output = numberOfWaysToTraverseGraph(width, height)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.numberOfWaysToTraverseGraph\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val width = 4\n        val height = 3\n        val expected = 10\n        val output = numberOfWaysToTraverseGraph(width, height)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def numberOfWaysToTraverseGraph(width, height):\n    # Write your code here.\n    return 0\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(2^(n + m)) time | O(n + m) space - where n\n# is the width of the graph and m is the height\ndef numberOfWaysToTraverseGraph(width, height):\n    if width == 1 or height == 1:\n        return 1\n\n    return numberOfWaysToTraverseGraph(width - 1, height) + numberOfWaysToTraverseGraph(\n        width, height - 1\n    )\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n * m) time | O(n * m) space - where n\n# is the width of the graph and m is the height\ndef numberOfWaysToTraverseGraph(width, height):\n    numberOfWays = [[0 for _ in range(width + 1)] for _ in range(height + 1)]\n\n    for widthIdx in range(1, width + 1):\n        for heightIdx in range(1, height + 1):\n            if widthIdx == 1 or heightIdx == 1:\n                numberOfWays[heightIdx][widthIdx] = 1\n            else:\n                waysLeft = numberOfWays[heightIdx][widthIdx - 1]\n                waysUp = numberOfWays[heightIdx - 1][widthIdx]\n                numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp\n\n    return numberOfWays[height][width]\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n + m) time | O(1) space - where n is\n# the width of the graph and m is the height\ndef numberOfWaysToTraverseGraph(width, height):\n    xDistanceToCorner = width - 1\n    yDistanceToCorner = height - 1\n\n    # The number of permutations of right and down movements\n    # is the number of ways to reach the bottom right corner.\n    numerator = factorial(xDistanceToCorner + yDistanceToCorner)\n    denominator = factorial(xDistanceToCorner) * factorial(yDistanceToCorner)\n    return numerator // denominator\n\n\ndef factorial(num):\n    result = 1\n\n    for n in range(2, num + 1):\n        result *= n\n\n    return result\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        width = 4\n        height = 3\n        expected = 10\n        actual = program.numberOfWaysToTraverseGraph(width, height)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        width = 4\n        height = 3\n        expected = 10\n        actual = program.numberOfWaysToTraverseGraph(width, height)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def numberOfWaysToTraverseGraph(width, height)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfWaysToTraverseGraph(width, height)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfWaysToTraverseGraph(width, height)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def numberOfWaysToTraverseGraph(width, height)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numberOfWaysToTraverseGraph\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.numberOfWaysToTraverseGraph\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func numberOfWaysToTraverseGraph(_ width: Int, _ height: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(2^(n + m)) time | O(n + m) space - where n\n  // is the width of the graph and m is the height\n  func numberOfWaysToTraverseGraph(_ width: Int, _ height: Int) -> Int {\n    if width == 1 || height == 1 {\n      return 1\n    }\n\n    return numberOfWaysToTraverseGraph(width - 1, height) + numberOfWaysToTraverseGraph(width, height - 1)\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n * m) time | O(n * m) space - where n\n  // is the width of the graph and m is the height\n  func numberOfWaysToTraverseGraph(_ width: Int, _ height: Int) -> Int {\n    var numberOfWays = Array(repeating: [Int](), count: height + 1)\n    for i in 0 ..< numberOfWays.count {\n      numberOfWays[i] = Array(repeating: 0, count: width + 1)\n    }\n\n    for widthIdx in stride(from: 1, to: width + 1, by: 1) {\n      for heightIdx in stride(from: 1, to: height + 1, by: 1) {\n        if widthIdx == 1 || heightIdx == 1 {\n          numberOfWays[heightIdx][widthIdx] = 1\n        } else {\n          let waysLeft = numberOfWays[heightIdx][widthIdx - 1]\n          let waysUp = numberOfWays[heightIdx - 1][widthIdx]\n          numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp\n        }\n      }\n    }\n\n    return numberOfWays[height][width]\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n + m) time | O(1) space - where n is\n  // the width of the graph and m is the height\n  func numberOfWaysToTraverseGraph(_ width: Int, _ height: Int) -> Int {\n    let xDistanceToCorner = width - 1\n    let yDistanceToCorner = height - 1\n\n    // The number of permutations of right and down movements\n    // is the number of ways to reach the bottom right corner.\n    let numerator = factorial(xDistanceToCorner + yDistanceToCorner)\n    let denominator = factorial(xDistanceToCorner) * factorial(yDistanceToCorner)\n    return numerator / denominator\n  }\n\n  func factorial(_ num: Int) -> Int {\n    var result = 1\n    for n in stride(from: 2, to: num + 1, by: 1) {\n      result *= n\n    }\n    return result\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let width = 4\n      let height = 3\n      let expected = 10\n      var actual = Program().numberOfWaysToTraverseGraph(width, height)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let width = 4\n      let height = 3\n      let expected = 10\n      var actual = Program().numberOfWaysToTraverseGraph(width, height)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function numberOfWaysToTraverseGraph(width: number, height: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(2^(n + m)) time | O(n + m) space - where n\n// is the width of the graph and m is the height\nexport function numberOfWaysToTraverseGraph(width: number, height: number): number {\n  if (width === 1 || height === 1) return 1;\n\n  return (\n    numberOfWaysToTraverseGraph(width - 1, height) + numberOfWaysToTraverseGraph(width, height - 1)\n  );\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n * m) time | O(n * m) space - where n\n// is the width of the graph and m is the height\nexport function numberOfWaysToTraverseGraph(width: number, height: number) {\n  const numberOfWays: number[][] = [];\n  for (let i = 0; i < height + 1; i++) {\n    numberOfWays.push([]);\n    for (let j = 0; j < width + 1; j++) {\n      numberOfWays[i].push(0);\n    }\n  }\n\n  for (let widthIdx = 1; widthIdx < width + 1; widthIdx++) {\n    for (let heightIdx = 1; heightIdx < height + 1; heightIdx++) {\n      if (widthIdx === 1 || heightIdx === 1) {\n        numberOfWays[heightIdx][widthIdx] = 1;\n      } else {\n        const waysLeft = numberOfWays[heightIdx][widthIdx - 1];\n        const waysUp = numberOfWays[heightIdx - 1][widthIdx];\n        numberOfWays[heightIdx][widthIdx] = waysLeft + waysUp;\n      }\n    }\n  }\n\n  return numberOfWays[height][width];\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n + m) time | O(1) space - where n is\n// the width of the graph and m is the height\nexport function numberOfWaysToTraverseGraph(width: number, height: number) {\n  const xDistanceToCorner = width - 1;\n  const yDistanceToCorner = height - 1;\n\n  // The number of permutations of right and down movements\n  // is the number of ways to reach the bottom right corner.\n  const numerator = factorial(xDistanceToCorner + yDistanceToCorner);\n  const denominator = factorial(xDistanceToCorner) * factorial(yDistanceToCorner);\n  return Math.floor(numerator / denominator);\n}\n\nfunction factorial(num: number) {\n  let result = 1;\n\n  for (let n = 2; n < num + 1; n++) {\n    result *= n;\n  }\n\n  return result;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const width = 4;\n  const height = 3;\n  const expected = 10;\n  const actual = program.numberOfWaysToTraverseGraph(width, height);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const width = 4;\n  const height = 3;\n  const expected = 10;\n  const actual = program.numberOfWaysToTraverseGraph(width, height);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "width",
      "example": 4,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    },
    {
      "name": "height",
      "example": 3,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "height": 3,
      "width": 4
    },
    {
      "height": 2,
      "width": 3
    },
    {
      "height": 3,
      "width": 2
    },
    {
      "height": 5,
      "width": 5
    },
    {
      "height": 6,
      "width": 5
    },
    {
      "height": 5,
      "width": 7
    },
    {
      "height": 2,
      "width": 10
    },
    {
      "height": 2,
      "width": 11
    },
    {
      "height": 9,
      "width": 5
    },
    {
      "height": 7,
      "width": 6
    },
    {
      "height": 5,
      "width": 8
    },
    {
      "height": 2,
      "width": 2
    },
    {
      "height": 1,
      "width": 2
    },
    {
      "height": 2,
      "width": 1
    },
    {
      "height": 3,
      "width": 3
    }
  ],
  "jsonTests": [
    {
      "height": 3,
      "width": 4
    },
    {
      "height": 2,
      "width": 3
    },
    {
      "height": 3,
      "width": 2
    },
    {
      "height": 5,
      "width": 5
    },
    {
      "height": 6,
      "width": 5
    },
    {
      "height": 5,
      "width": 7
    },
    {
      "height": 2,
      "width": 10
    },
    {
      "height": 2,
      "width": 11
    },
    {
      "height": 9,
      "width": 5
    },
    {
      "height": 7,
      "width": 6
    },
    {
      "height": 5,
      "width": 8
    },
    {
      "height": 2,
      "width": 2
    },
    {
      "height": 1,
      "width": 2
    },
    {
      "height": 2,
      "width": 1
    },
    {
      "height": 3,
      "width": 3
    }
  ],
  "changelog": []
}