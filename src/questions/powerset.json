{
  "uid": "powerset",
  "testStrategy": "JSON",
  "name": "Powerset",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Recursion",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 26959,
    "failureCount": 6845
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "227400775",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 756
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of unique integers and returns its\n  powerset.\n</p>\n<p>\n  The powerset <span>P(X)</span> of a set <span>X</span> is the set of all\n  subsets of <span>X</span>. For example, the powerset of <span>[1,2]</span> is\n  <span>[[], [1], [2], [1,2]]</span>.\n</p>\n<p>\n  Note that the sets in the powerset do not need to be in any particular order.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 2, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n</pre>\n</div>",
  "hints": [
    "<p>\nTry thinking about the base cases. What is the powerset of the empty set? What is the powerset of sets of length 1?\n</p>\n",
    "\n<p>\nIf you were to take the input set X and add an element to it, how would the resulting powerset change?\n</p>\n",
    "\n<p>\nCan you solve this problem recursively? Can you solve it iteratively? What are the advantages and disadvantages of using either approach?\n</p>"
  ],
  "spaceTime": "O(n*2^n) time | O(n*2^n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> powerset(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> powersetHelper(vector<int>& array, int idx);\n\n// O(n*2^n) time | O(n*2^n) space\nvector<vector<int>> powerset(vector<int> array) {\n  return powersetHelper(array, array.size() - 1);\n}\n\nvector<vector<int>> powersetHelper(vector<int>& array, int idx) {\n  if (idx < 0) {\n    return vector<vector<int>>{{}};\n  }\n  int ele = array[idx];\n  vector<vector<int>> subsets = powersetHelper(array, idx - 1);\n  int length = subsets.size();\n  for (int i = 0; i < length; i++) {\n    vector<int> currentSubset = subsets[i];\n    vector<int> newSubset = currentSubset;\n    newSubset.push_back(ele);\n    subsets.push_back(newSubset);\n  }\n  return subsets;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n*2^n) time | O(n*2^n) space\nvector<vector<int>> powerset(vector<int> array) {\n  vector<vector<int>> subsets = {{}};\n  for (int ele : array) {\n    int length = subsets.size();\n    for (int i = 0; i < length; i++) {\n      vector<int> currentSubset = subsets[i];\n      currentSubset.push_back(ele);\n      subsets.push_back(currentSubset);\n    }\n  }\n  return subsets;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\n#include <algorithm>\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> output = powerset({1, 2, 3});\n      for (int i = 0; i < output.size(); i++) {\n        sort(output[i].begin(), output[i].end());\n      }\n      assert(output.size() == 8);\n      vector<vector<int>>::iterator it =\n        find(output.begin(), output.end(), vector<int>{});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{2});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{3});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1, 2});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1, 3});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{2, 3});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1, 2, 3});\n      assert(it != output.end());\n    });\n  }\n};\n",
      "unitTests": "#include <algorithm>\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> output = powerset({1, 2, 3});\n      for (int i = 0; i < output.size(); i++) {\n        sort(output[i].begin(), output[i].end());\n      }\n      assert(output.size() == 8);\n      vector<vector<int>>::iterator it =\n        find(output.begin(), output.end(), vector<int>{});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{2});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{3});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1, 2});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1, 3});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{2, 3});\n      assert(it != output.end());\n      it = find(output.begin(), output.end(), vector<int>{1, 2, 3});\n      assert(it != output.end());\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static List<List<int> > Powerset(List<int> array) {\n    // Write your code here.\n    return new List<List<int> >();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n*2^n) time | O(n*2^n) space\n  public static List<List<int> > Powerset(List<int> array) {\n    return Powerset(array, array.Count - 1);\n  }\n\n  public static List<List<int> > Powerset(List<int> array, int idx) {\n    if (idx < 0) {\n      List<List<int> > emptySet = new List<List<int> >();\n      emptySet.Add(new List<int>());\n      return emptySet;\n    }\n    int ele = array[idx];\n    List<List<int> > subsets = Powerset(array, idx - 1);\n    int length = subsets.Count;\n    for (int i = 0; i < length; i++) {\n      List<int> currentSubset = new List<int>(subsets[i]);\n      currentSubset.Add(ele);\n      subsets.Add(currentSubset);\n    }\n    return subsets;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n*2^n) time | O(n*2^n) space\n  public static List<List<int> > Powerset(List<int> array) {\n    List<List<int> > subsets = new List<List<int> >();\n    subsets.Add(new List<int>());\n    foreach (int ele in array) {\n      int length = subsets.Count;\n      for (int i = 0; i < length; i++) {\n        List<int> currentSubset = new List<int>(subsets[i]);\n        currentSubset.Add(ele);\n        subsets.Add(currentSubset);\n      }\n    }\n    return subsets;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<List<int> > output = Program.Powerset(new List<int>() { 1, 2, 3 });\n    Utils.AssertTrue(output.Count == 8);\n    Utils.AssertTrue(Contains(output, new int[] {}));\n    Utils.AssertTrue(Contains(output, new int[] { 1 }));\n    Utils.AssertTrue(Contains(output, new int[] { 2 }));\n    Utils.AssertTrue(Contains(output, new int[] { 1, 2 }));\n    Utils.AssertTrue(Contains(output, new int[] { 3 }));\n    Utils.AssertTrue(Contains(output, new int[] { 1, 3 }));\n    Utils.AssertTrue(Contains(output, new int[] { 2, 3 }));\n    Utils.AssertTrue(Contains(output, new int[] { 1, 2, 3 }));\n  }\n\n  public bool Contains(List<List<int> > arr1, int[] arr2) {\n    foreach (List<int> subArr in arr1) {\n      subArr.Sort();\n      if (compare(subArr, arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public bool compare(List<int> arr1, int[] arr2) {\n    if (arr1.Count != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Count; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<List<int> > output = Program.Powerset(new List<int>() { 1, 2, 3 });\n    Utils.AssertTrue(output.Count == 8);\n    Utils.AssertTrue(Contains(output, new int[] {}));\n    Utils.AssertTrue(Contains(output, new int[] { 1 }));\n    Utils.AssertTrue(Contains(output, new int[] { 2 }));\n    Utils.AssertTrue(Contains(output, new int[] { 1, 2 }));\n    Utils.AssertTrue(Contains(output, new int[] { 3 }));\n    Utils.AssertTrue(Contains(output, new int[] { 1, 3 }));\n    Utils.AssertTrue(Contains(output, new int[] { 2, 3 }));\n    Utils.AssertTrue(Contains(output, new int[] { 1, 2, 3 }));\n  }\n\n  public bool Contains(List<List<int> > arr1, int[] arr2) {\n    foreach (List<int> subArr in arr1) {\n      subArr.Sort();\n      if (compare(subArr, arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public bool compare(List<int> arr1, int[] arr2) {\n    if (arr1.Count != arr2.Length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.Count; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc Powerset(array []int) [][]int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n*2^n) time | O(n*2^n) space\nfunc Powerset(array []int) [][]int {\n\treturn powerset(array, len(array)-1)\n}\n\nfunc powerset(array []int, index int) [][]int {\n\tif index < 0 {\n\t\treturn [][]int{{}}\n\t}\n\tsubsets := powerset(array, index-1)\n\tele := array[index]\n\tlength := len(subsets)\n\tfor i := 0; i < length; i++ {\n\t\tcurrentSubset := subsets[i]\n\t\tnewsubset := append([]int{}, currentSubset...)\n\t\tnewsubset = append(newsubset, ele)\n\t\tsubsets = append(subsets, newsubset)\n\t}\n\treturn subsets\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n*2^n) time | O(n*2^n) space\nfunc Powerset(array []int) [][]int {\n\tsubsets := [][]int{{}}\n\tfor _, ele := range array {\n\t\tlength := len(subsets)\n\t\tfor i := 0; i < length; i++ {\n\t\t\tcurrentSubset := subsets[i]\n\t\t\tnewsubset := append([]int{}, currentSubset...)\n\t\t\tnewsubset = append(newsubset, ele)\n\t\t\tsubsets = append(subsets, newsubset)\n\t\t}\n\t}\n\treturn subsets\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := Powerset([]int{1, 2, 3})\n\trequire.Contains(t, output, []int{})\n\trequire.Contains(t, output, []int{1})\n\trequire.Contains(t, output, []int{2})\n\trequire.Contains(t, output, []int{1, 2})\n\trequire.Contains(t, output, []int{3})\n\trequire.Contains(t, output, []int{1, 3})\n\trequire.Contains(t, output, []int{2, 3})\n\trequire.Contains(t, output, []int{1, 2, 3})\n\trequire.Len(t, output, 8)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := Powerset([]int{1, 2, 3})\n\trequire.Contains(t, output, []int{})\n\trequire.Contains(t, output, []int{1})\n\trequire.Contains(t, output, []int{2})\n\trequire.Contains(t, output, []int{1, 2})\n\trequire.Contains(t, output, []int{3})\n\trequire.Contains(t, output, []int{1, 3})\n\trequire.Contains(t, output, []int{2, 3})\n\trequire.Contains(t, output, []int{1, 2, 3})\n\trequire.Len(t, output, 8)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static List<List<Integer>> powerset(List<Integer> array) {\n    // Write your code here.\n    return new ArrayList<List<Integer>>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n*2^n) time | O(n*2^n) space\n  public static List<List<Integer>> powerset(List<Integer> array) {\n    return powerset(array, array.size() - 1);\n  }\n\n  public static List<List<Integer>> powerset(List<Integer> array, int idx) {\n    if (idx < 0) {\n      List<List<Integer>> emptySet = new ArrayList<List<Integer>>();\n      emptySet.add(new ArrayList<Integer>());\n      return emptySet;\n    }\n    int ele = array.get(idx);\n    List<List<Integer>> subsets = powerset(array, idx - 1);\n    int length = subsets.size();\n    for (int i = 0; i < length; i++) {\n      List<Integer> currentSubset = new ArrayList<Integer>(subsets.get(i));\n      currentSubset.add(ele);\n      subsets.add(currentSubset);\n    }\n    return subsets;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n*2^n) time | O(n*2^n) space\n  public static List<List<Integer>> powerset(List<Integer> array) {\n    List<List<Integer>> subsets = new ArrayList<List<Integer>>();\n    subsets.add(new ArrayList<Integer>());\n    for (Integer ele : array) {\n      int length = subsets.size();\n      for (int i = 0; i < length; i++) {\n        List<Integer> currentSubset = new ArrayList<Integer>(subsets.get(i));\n        currentSubset.add(ele);\n        subsets.add(currentSubset);\n      }\n    }\n    return subsets;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<List<Integer>> output =\n      Program.powerset(new ArrayList<Integer>(Arrays.asList(1, 2, 3)));\n    Utils.assertTrue(output.size() == 8);\n    Utils.assertTrue(contains(output, new int[] {}));\n    Utils.assertTrue(contains(output, new int[] {1}));\n    Utils.assertTrue(contains(output, new int[] {2}));\n    Utils.assertTrue(contains(output, new int[] {1, 2}));\n    Utils.assertTrue(contains(output, new int[] {3}));\n    Utils.assertTrue(contains(output, new int[] {1, 3}));\n    Utils.assertTrue(contains(output, new int[] {2, 3}));\n    Utils.assertTrue(contains(output, new int[] {1, 2, 3}));\n  }\n\n  public boolean contains(List<List<Integer>> arr1, int[] arr2) {\n    for (List<Integer> subArr : arr1) {\n      Collections.sort(subArr);\n      if (compare(subArr, arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public boolean compare(List<Integer> arr1, int[] arr2) {\n    if (arr1.size() != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.size(); i++) {\n      if (arr1.get(i) != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<List<Integer>> output =\n      Program.powerset(new ArrayList<Integer>(Arrays.asList(1, 2, 3)));\n    Utils.assertTrue(output.size() == 8);\n    Utils.assertTrue(contains(output, new int[] {}));\n    Utils.assertTrue(contains(output, new int[] {1}));\n    Utils.assertTrue(contains(output, new int[] {2}));\n    Utils.assertTrue(contains(output, new int[] {1, 2}));\n    Utils.assertTrue(contains(output, new int[] {3}));\n    Utils.assertTrue(contains(output, new int[] {1, 3}));\n    Utils.assertTrue(contains(output, new int[] {2, 3}));\n    Utils.assertTrue(contains(output, new int[] {1, 2, 3}));\n  }\n\n  public boolean contains(List<List<Integer>> arr1, int[] arr2) {\n    for (List<Integer> subArr : arr1) {\n      Collections.sort(subArr);\n      if (compare(subArr, arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public boolean compare(List<Integer> arr1, int[] arr2) {\n    if (arr1.size() != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.size(); i++) {\n      if (arr1.get(i) != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function powerset(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.powerset = powerset;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n*2^n) time | O(n*2^n) space\nfunction powerset(array, idx = null) {\n  if (idx === null) {\n    idx = array.length - 1;\n  }\n  if (idx < 0) {\n    return [[]];\n  }\n  const ele = array[idx];\n  const subsets = powerset(array, idx - 1);\n  const length = subsets.length;\n  for (let i = 0; i < length; i++) {\n    const currentSubset = subsets[i];\n    subsets.push(currentSubset.concat(ele));\n  }\n  return subsets;\n}\n\nexports.powerset = powerset;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n*2^n) time | O(n*2^n) space\nfunction powerset(array) {\n  const subsets = [[]];\n  for (const ele of array) {\n    const length = subsets.length;\n    for (let i = 0; i < length; i++) {\n      const currentSubset = subsets[i];\n      subsets.push(currentSubset.concat(ele));\n    }\n  }\n  return subsets;\n}\n\nexports.powerset = powerset;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nfunction sortAndStringify(array) {\n  return array.sort((a, b) => a - b).join(',');\n}\n\nit('Test Case #1', function () {\n  const output = program.powerset([1, 2, 3]).map(sortAndStringify);\n  chai.expect(output.length === 8).to.be.true;\n  chai.expect(output).to.include('');\n  chai.expect(output).to.include('1');\n  chai.expect(output).to.include('2');\n  chai.expect(output).to.include('1,2');\n  chai.expect(output).to.include('3');\n  chai.expect(output).to.include('1,3');\n  chai.expect(output).to.include('2,3');\n  chai.expect(output).to.include('1,2,3');\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nfunction sortAndStringify(array) {\n  return array.sort((a, b) => a - b).join(',');\n}\n\nit('Test Case #1', function () {\n  const output = program.powerset([1, 2, 3]).map(sortAndStringify);\n  chai.expect(output.length === 8).to.be.true;\n  chai.expect(output).to.include('');\n  chai.expect(output).to.include('1');\n  chai.expect(output).to.include('2');\n  chai.expect(output).to.include('1,2');\n  chai.expect(output).to.include('3');\n  chai.expect(output).to.include('1,3');\n  chai.expect(output).to.include('2,3');\n  chai.expect(output).to.include('1,2,3');\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun powerset(array: List<Int>): List<List<Int>> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n*2^n) time | O(n*2^n) space\nfun powerset(array: List<Int>): List<List<Int>> {\n    return powerset(array, array.size - 1)\n}\n\nfun powerset(array: List<Int>, idx: Int): MutableList<List<Int>> {\n    if (idx < 0) {\n        val emptySet = listOf<Int>()\n        return mutableListOf(emptySet)\n    }\n    val ele = array[idx]\n    val subsets = powerset(array, idx - 1)\n    val length = subsets.size\n    for (i in 0 until length) {\n        val currentSubset = subsets[i].toMutableList()\n        currentSubset.add(ele)\n        subsets.add(currentSubset)\n    }\n    return subsets\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n*2^n) time | O(n*2^n) space\nfun powerset(array: List<Int>): List<List<Int>> {\n    val subsets = mutableListOf(listOf<Int>())\n    for (ele in array) {\n        val length = subsets.size\n        for (i in 0 until length) {\n            val currentSubset = subsets[i].toMutableList()\n            currentSubset.add(ele)\n            subsets.add(currentSubset)\n        }\n    }\n    return subsets\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.powerset\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = powerset(listOf(1, 2, 3))\n        assert(output.size == 8)\n        assert(output.contains(listOf<Int>()))\n        assert(output.contains(listOf<Int>(1)))\n        assert(output.contains(listOf<Int>(2)))\n        assert(output.contains(listOf<Int>(3)))\n        assert(output.contains(listOf<Int>(1, 2)))\n        assert(output.contains(listOf<Int>(1, 3)))\n        assert(output.contains(listOf<Int>(2, 3)))\n        assert(output.contains(listOf<Int>(1, 2, 3)))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.powerset\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val output = powerset(listOf(1, 2, 3))\n        assert(output.size == 8)\n        assert(output.contains(listOf<Int>()))\n        assert(output.contains(listOf<Int>(1)))\n        assert(output.contains(listOf<Int>(2)))\n        assert(output.contains(listOf<Int>(3)))\n        assert(output.contains(listOf<Int>(1, 2)))\n        assert(output.contains(listOf<Int>(1, 3)))\n        assert(output.contains(listOf<Int>(2, 3)))\n        assert(output.contains(listOf<Int>(1, 2, 3)))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def powerset(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n*2^n) time | O(n*2^n) space\ndef powerset(array, idx=None):\n    if idx is None:\n        idx = len(array) - 1\n    if idx < 0:\n        return [[]]\n    ele = array[idx]\n    subsets = powerset(array, idx - 1)\n    for i in range(len(subsets)):\n        currentSubset = subsets[i]\n        subsets.append(currentSubset + [ele])\n    return subsets\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n*2^n) time | O(n*2^n) space\ndef powerset(array):\n    subsets = [[]]\n    for ele in array:\n        for i in range(len(subsets)):\n            currentSubset = subsets[i]\n            subsets.append(currentSubset + [ele])\n    return subsets\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        output = list(map(lambda x: set(x), program.powerset([1, 2, 3])))\n        self.assertTrue(len(output) == 8)\n        self.assertTrue(set([]) in output)\n        self.assertTrue(set([1]) in output)\n        self.assertTrue(set([2]) in output)\n        self.assertTrue(set([1, 2]) in output)\n        self.assertTrue(set([3]) in output)\n        self.assertTrue(set([1, 3]) in output)\n        self.assertTrue(set([2, 3]) in output)\n        self.assertTrue(set([1, 2, 3]) in output)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        output = list(map(lambda x: set(x), program.powerset([1, 2, 3])))\n        self.assertTrue(len(output) == 8)\n        self.assertTrue(set([]) in output)\n        self.assertTrue(set([1]) in output)\n        self.assertTrue(set([2]) in output)\n        self.assertTrue(set([1, 2]) in output)\n        self.assertTrue(set([3]) in output)\n        self.assertTrue(set([1, 3]) in output)\n        self.assertTrue(set([2, 3]) in output)\n        self.assertTrue(set([1, 2, 3]) in output)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def powerset(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def powerset(array)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def powerset(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.powerset\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.powerset\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func powerset(array: [Int], index: Int? = nil) -> [[Int]] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n * 2^n) time | O(n * 2^n) space\n  func powerset(array: [Int], index: Int? = nil) -> [[Int]] {\n    var index = index\n\n    if index == nil {\n      index = array.count - 1\n    }\n\n    if index! < 0 {\n      return [[]]\n    }\n\n    let element = array[index!]\n    var subsets = powerset(array: array, index: index! - 1)\n    let length = subsets.count\n\n    for i in 0 ..< length {\n      let currentSubset = subsets[i]\n      subsets.append(currentSubset + [element])\n    }\n\n    return subsets\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n * 2^n) time | O(n * 2^n) space\n  func powerset(array: [Int]) -> [[Int]] {\n    var subsets: [[Int]] = [[]]\n\n    for element in array {\n      for subset in subsets {\n        subsets.append(subset + [element])\n      }\n    }\n    return subsets\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var fourthTest = program.powerset(array: [1, 2, 3])\n      var fourthTestStringified = sortAndStringify(array: fourthTest)\n      try assertEqual(8, fourthTestStringified.count)\n      try assert(fourthTestStringified.contains(\"\"))\n      try assert(fourthTestStringified.contains(\"1\"))\n      try assert(fourthTestStringified.contains(\"2\"))\n      try assert(fourthTestStringified.contains(\"1, 2\"))\n      try assert(fourthTestStringified.contains(\"3\"))\n      try assert(fourthTestStringified.contains(\"1, 3\"))\n      try assert(fourthTestStringified.contains(\"2, 3\"))\n      try assert(fourthTestStringified.contains(\"1, 2, 3\"))\n    }\n  }\n\n  func sortAndStringify(array: [[Int]]) -> [String] {\n    var result = [String]()\n\n    for var set in array {\n      set = set.sorted()\n\n      var string = String()\n\n      for item in set {\n        string.append(\"\\(item)\")\n\n        if item != set.last {\n          string.append(\", \")\n        }\n      }\n\n      result.append(string)\n    }\n\n    return result\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var fourthTest = program.powerset(array: [1, 2, 3])\n      var fourthTestStringified = sortAndStringify(array: fourthTest)\n      try assertEqual(8, fourthTestStringified.count)\n      try assert(fourthTestStringified.contains(\"\"))\n      try assert(fourthTestStringified.contains(\"1\"))\n      try assert(fourthTestStringified.contains(\"2\"))\n      try assert(fourthTestStringified.contains(\"1, 2\"))\n      try assert(fourthTestStringified.contains(\"3\"))\n      try assert(fourthTestStringified.contains(\"1, 3\"))\n      try assert(fourthTestStringified.contains(\"2, 3\"))\n      try assert(fourthTestStringified.contains(\"1, 2, 3\"))\n    }\n  }\n\n  func sortAndStringify(array: [[Int]]) -> [String] {\n    var result = [String]()\n\n    for var set in array {\n      set = set.sorted()\n\n      var string = String()\n\n      for item in set {\n        string.append(\"\\(item)\")\n\n        if item != set.last {\n          string.append(\", \")\n        }\n      }\n\n      result.append(string)\n    }\n\n    return result\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function powerset(array: number[]) {\n  // Write your code here.\n  return [[-1]];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n*2^n) time | O(n*2^n) space\nexport function powerset(array: number[], idx: number | null = null): number[][] {\n  if (idx === null) {\n    idx = array.length - 1;\n  }\n  if (idx < 0) {\n    return [[]];\n  }\n  const ele = array[idx];\n  const subsets = powerset(array, idx - 1);\n  const length = subsets.length;\n  for (let i = 0; i < length; i++) {\n    const currentSubset = subsets[i];\n    subsets.push(currentSubset.concat(ele));\n  }\n  return subsets;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n*2^n) time | O(n*2^n) space\nexport function powerset(array: number[]) {\n  const subsets: number[][] = [[]];\n  for (const ele of array) {\n    const length = subsets.length;\n    for (let i = 0; i < length; i++) {\n      const currentSubset = subsets[i];\n      subsets.push(currentSubset.concat(ele));\n    }\n  }\n  return subsets;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nfunction sortAndStringify(array: number[]) {\n  return array.sort((a, b) => a - b).join(',');\n}\n\nit('Test Case #1', function () {\n  const output = program.powerset([1, 2, 3]).map(sortAndStringify);\n  chai.expect(output.length === 8).to.be.true;\n  chai.expect(output).to.include('');\n  chai.expect(output).to.include('1');\n  chai.expect(output).to.include('2');\n  chai.expect(output).to.include('1,2');\n  chai.expect(output).to.include('3');\n  chai.expect(output).to.include('1,3');\n  chai.expect(output).to.include('2,3');\n  chai.expect(output).to.include('1,2,3');\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nfunction sortAndStringify(array: number[]) {\n  return array.sort((a, b) => a - b).join(',');\n}\n\nit('Test Case #1', function () {\n  const output = program.powerset([1, 2, 3]).map(sortAndStringify);\n  chai.expect(output.length === 8).to.be.true;\n  chai.expect(output).to.include('');\n  chai.expect(output).to.include('1');\n  chai.expect(output).to.include('2');\n  chai.expect(output).to.include('1,2');\n  chai.expect(output).to.include('3');\n  chai.expect(output).to.include('1,3');\n  chai.expect(output).to.include('2,3');\n  chai.expect(output).to.include('1,2,3');\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        2,
        3
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6
      ]
    }
  ],
  "changelog": []
}