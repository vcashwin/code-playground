{
  "uid": "quickselect",
  "testStrategy": "JSON",
  "name": "Quickselect",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Searching",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 10565,
    "failureCount": 2853
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "249381541",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1638
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of distinct integers as well as an\n  integer <span>k</span> and that returns the kth smallest integer in that array.\n</p>\n<p>The function should do this in linear time, on average.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [8, 5, 2, 9, 7, 6, 3]\n<span class=\"CodeEditor-promptParameter\">k</span> = 3\n</pre>\n<h3>Sample Output</h3>\n<pre>\n5\n</pre>\n</div>",
  "hints": [
    "<p>\nThe Quick Sort sorting algorithm works by picking a \"pivot\" number from an array, positioning every other number in the array in sorted order with respect to the pivot (all smaller numbers to the pivot's left; all bigger numbers to the pivot's right), and then repeating the same two steps on both sides of the pivot until the entire array is sorted. Apply the technique used in Quick Sort until the pivot element gets positioned in the kth place in the array, at which point you'll have found the answer to the problem.\n</p>\n",
    "\n<p>\nPick a random number from the input array (the first number, for instance) and let that number be the pivot. Iterate through the rest of the array using two pointers, one starting at the left extremity of the array and progressively moving to the right, and the other one starting at the right extremity of the array and progressively moving to the left. As you iterate through the array, compare the left and right pointer numbers to the pivot. If the left number is greater than the pivot and the right number is less than the pivot, swap them; this will effectively sort these numbers with respect to the pivot at the end of the iteration. If the left number is ever less than or equal to the pivot, increment the left pointer; similarly, if the right number is ever greater than or equal to the pivot, decrement the right pointer. Do this until the pointers pass each other, at which point swapping the pivot with the right number should position the pivot in its final, sorted position, where every number to its left is smaller and every number to its right is greater. If the pivot is in the kth position, you're done; if it isn't, figure out if the kth smallest number is located to the left or to the right of the pivot.\n</p>\n",
    "\n<p>\nRepeat the process mentioned in Hint #2 on the side of the kth smallest number, and keep on repeating the process thereafter until you find the answer. What is the time complexity of this algorithm?\n</p>"
  ],
  "spaceTime": "Best: O(n) time | O(1) space - where n is the length of the input array\nAverage: O(n) time | O(1) space - where n is the length of the input array\nWorst: O(n^2) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint quickselect(vector<int> array, int k) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint quickselectHelper(\n  vector<int> array, int startIdx, int endIdx, int position\n);\n\n// Best: O(n) time | O(1) space\n// Average: O(n) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nint quickselect(vector<int> array, int k) {\n  int position = k - 1;\n  return quickselectHelper(array, 0, array.size() - 1, position);\n}\n\nint quickselectHelper(\n  vector<int> array, int startIdx, int endIdx, int position\n) {\n  while (true) {\n    if (startIdx > endIdx) {\n      perror(\n        \"Your Algorithm should never \"\n        \"arrive here!\"\n      );\n      exit(1);\n    }\n    int pivotIdx = startIdx;\n    int leftIdx = startIdx + 1;\n    int rightIdx = endIdx;\n    while (leftIdx <= rightIdx) {\n      if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n        swap(array[leftIdx], array[rightIdx]);\n      }\n      if (array[leftIdx] <= array[pivotIdx]) {\n        leftIdx++;\n      }\n      if (array[rightIdx] >= array[pivotIdx]) {\n        rightIdx--;\n      }\n    }\n    swap(array[pivotIdx], array[rightIdx]);\n    if (rightIdx == position) {\n      return array[rightIdx];\n    } else if (rightIdx < position) {\n      startIdx = rightIdx + 1;\n    } else {\n      endIdx = rightIdx - 1;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(quickselect({8, 5, 2, 9, 7, 6, 3}, 3) == 5);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(quickselect({8, 5, 2, 9, 7, 6, 3}, 3) == 5);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int Quickselect(int[] array, int k) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // Best: O(n) time | O(1) space\n  // Average: O(n) time | O(1) space\n  // Worst: O(n^2) time | O(1) space\n  public static int Quickselect(int[] array, int k) {\n    int position = k - 1;\n    return Quickselect(array, 0, array.Length - 1, position);\n  }\n\n  public static int Quickselect(\n    int[] array, int startIdx, int endIdx, int position\n  ) {\n    while (true) {\n      if (startIdx > endIdx) {\n        throw new Exception(\"Your Algorithm should never arrive here!\");\n      }\n      int pivotIdx = startIdx;\n      int leftIdx = startIdx + 1;\n      int rightIdx = endIdx;\n      while (leftIdx <= rightIdx) {\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n          swap(leftIdx, rightIdx, array);\n        }\n        if (array[leftIdx] <= array[pivotIdx]) {\n          leftIdx++;\n        }\n        if (array[rightIdx] >= array[pivotIdx]) {\n          rightIdx--;\n        }\n      }\n      swap(pivotIdx, rightIdx, array);\n      if (rightIdx == position) {\n        return array[rightIdx];\n      } else if (rightIdx < position) {\n        startIdx = rightIdx + 1;\n      } else {\n        endIdx = rightIdx - 1;\n      }\n    }\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.Quickselect(new int[] { 8, 5, 2, 9, 7, 6, 3 }, 3) == 5\n    );\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.Quickselect(new int[] { 8, 5, 2, 9, 7, 6, 3 }, 3) == 5\n    );\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc Quickselect(array []int, k int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// Best: O(n) time | O(1) space\n// Average: O(n) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nfunc Quickselect(array []int, k int) int {\n\treturn helper(array, 0, len(array)-1, k-1)\n}\n\nfunc helper(array []int, start, end int, position int) int {\n\tfor {\n\t\tif start > end {\n\t\t\tpanic(\"This should never happen!\")\n\t\t}\n\t\tpivot, left, right := start, start+1, end\n\t\tfor left <= right {\n\t\t\tif array[left] > array[right] && array[right] < array[pivot] {\n\t\t\t\tswap(left, right, array)\n\t\t\t}\n\t\t\tif array[left] <= array[pivot] {\n\t\t\t\tleft += 1\n\t\t\t}\n\t\t\tif array[right] >= array[pivot] {\n\t\t\t\tright -= 1\n\t\t\t}\n\t\t}\n\t\tswap(pivot, right, array)\n\t\tif right == position {\n\t\t\treturn array[right]\n\t\t} else if right < position {\n\t\t\tstart = right + 1\n\t\t} else {\n\t\t\tend = right - 1\n\t\t}\n\t}\n}\n\nfunc swap(one, two int, array []int) {\n\tarray[one], array[two] = array[two], array[one]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 5\n\toutput := Quickselect([]int{8, 5, 2, 9, 7, 6, 3}, 3)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 5\n\toutput := Quickselect([]int{8, 5, 2, 9, 7, 6, 3}, 3)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int quickselect(int[] array, int k) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Best: O(n) time | O(1) space\n  // Average: O(n) time | O(1) space\n  // Worst: O(n^2) time | O(1) space\n  public static int quickselect(int[] array, int k) {\n    int position = k - 1;\n    return quickselect(array, 0, array.length - 1, position);\n  }\n\n  public static int quickselect(\n    int[] array, int startIdx, int endIdx, int position\n  ) {\n    while (true) {\n      if (startIdx > endIdx) {\n        throw new RuntimeException(\"Your Algorithm should never arrive here!\");\n      }\n      int pivotIdx = startIdx;\n      int leftIdx = startIdx + 1;\n      int rightIdx = endIdx;\n      while (leftIdx <= rightIdx) {\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n          swap(leftIdx, rightIdx, array);\n        }\n        if (array[leftIdx] <= array[pivotIdx]) {\n          leftIdx++;\n        }\n        if (array[rightIdx] >= array[pivotIdx]) {\n          rightIdx--;\n        }\n      }\n      swap(pivotIdx, rightIdx, array);\n      if (rightIdx == position) {\n        return array[rightIdx];\n      } else if (rightIdx < position) {\n        startIdx = rightIdx + 1;\n      } else {\n        endIdx = rightIdx - 1;\n      }\n    }\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.quickselect(new int[] {8, 5, 2, 9, 7, 6, 3}, 3) == 5\n    );\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.quickselect(new int[] {8, 5, 2, 9, 7, 6, 3}, 3) == 5\n    );\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function quickselect(array, k) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.quickselect = quickselect;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Best: O(n) time | O(1) space\n// Average: O(n) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nfunction quickselect(array, k) {\n  const position = k - 1;\n  return quickselectHelper(array, 0, array.length - 1, position);\n}\n\nfunction quickselectHelper(array, startIdx, endIdx, position) {\n  while (true) {\n    if (startIdx > endIdx) {\n      throw new Error('Your algorithm should never arrive here!');\n    }\n    const pivotIdx = startIdx;\n    let leftIdx = startIdx + 1;\n    let rightIdx = endIdx;\n    while (leftIdx <= rightIdx) {\n      if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n        swap(leftIdx, rightIdx, array);\n      }\n      if (array[leftIdx] <= array[pivotIdx]) {\n        leftIdx++;\n      }\n      if (array[rightIdx] >= array[pivotIdx]) {\n        rightIdx--;\n      }\n    }\n    swap(pivotIdx, rightIdx, array);\n    if (rightIdx === position) {\n      return array[rightIdx];\n    } else if (rightIdx < position) {\n      startIdx = rightIdx + 1;\n    } else {\n      endIdx = rightIdx - 1;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexports.quickselect = quickselect;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.quickselect([8, 5, 2, 9, 7, 6, 3], 3)).to.deep.equal(5);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.quickselect([8, 5, 2, 9, 7, 6, 3], 3)).to.deep.equal(5);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun quickselect(array: MutableList<Int>, k: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// Best: O(n) time | O(1) space\n// Average: O(n) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nfun quickselect(array: MutableList<Int>, k: Int): Int {\n    val position = k - 1\n    return quickselectHelper(array, 0, array.size - 1, position)\n}\n\nfun quickselectHelper(array: MutableList<Int>, startIdx: Int, endIdx: Int, position: Int): Int {\n    var newStartIdx = startIdx\n    var newEndIdx = endIdx\n    while (true) {\n        if (newStartIdx > newEndIdx) {\n            throw Exception(\"Your algorithm should never arrive here!\")\n        }\n        val pivotIdx = newStartIdx\n        var leftIdx = newStartIdx + 1\n        var rightIdx = newEndIdx\n        while (leftIdx <= rightIdx) {\n            if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n                swap(leftIdx, rightIdx, array)\n            }\n            if (array[leftIdx] <= array[pivotIdx]) {\n                leftIdx++\n            }\n            if (array[rightIdx] >= array[pivotIdx]) {\n                rightIdx--\n            }\n        }\n        swap(pivotIdx, rightIdx, array)\n        if (rightIdx === position) {\n            return array[rightIdx]\n        } else if (rightIdx < position) {\n            newStartIdx = rightIdx + 1\n        } else {\n            newEndIdx = rightIdx - 1\n        }\n    }\n}\n\nfun swap(i: Int, j: Int, array: MutableList<Int>) {\n    val temp = array[j]\n    array[j] = array[i]\n    array[i] = temp\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.quickselect as quickselect\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(quickselect(mutableListOf(8, 5, 2, 9, 5, 6, 3), 3) == 5)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.quickselect as quickselect\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(quickselect(mutableListOf(8, 5, 2, 9, 5, 6, 3), 3) == 5)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def quickselect(array, k):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# Best: O(n) time | O(1) space\n# Average: O(n) time | O(1) space\n# Worst: O(n^2) time | O(1) space\ndef quickselect(array, k):\n    position = k - 1\n    return quickselectHelper(array, 0, len(array) - 1, position)\n\n\ndef quickselectHelper(array, startIdx, endIdx, position):\n    while True:\n        if startIdx > endIdx:\n            raise Exception(\"Your algorithm should never arrive here!\")\n        pivotIdx = startIdx\n        leftIdx = startIdx + 1\n        rightIdx = endIdx\n        while leftIdx <= rightIdx:\n            if array[leftIdx] > array[pivotIdx] and array[rightIdx] < array[pivotIdx]:\n                swap(leftIdx, rightIdx, array)\n            if array[leftIdx] <= array[pivotIdx]:\n                leftIdx += 1\n            if array[rightIdx] >= array[pivotIdx]:\n                rightIdx -= 1\n        swap(pivotIdx, rightIdx, array)\n        if rightIdx == position:\n            return array[rightIdx]\n        elif rightIdx < position:\n            startIdx = rightIdx + 1\n        else:\n            endIdx = rightIdx - 1\n\n\ndef swap(one, two, array):\n    array[one], array[two] = array[two], array[one]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.quickselect([8, 5, 2, 9, 7, 6, 3], 3), 5)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.quickselect([8, 5, 2, 9, 7, 6, 3], 3), 5)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def quickselect(array, k)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def quickselect(array, k)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.quickselect\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.quickselect\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func quickSelect(_ array: [Int], _ k: Int) -> Int? {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // Best: O(n) time | O(1) space\n  // Average: O(n) time | O(1) space\n  // Worst: O(n^2) time | O(1) space\n  func quickSelect(_ array: [Int], _ k: Int) -> Int? {\n    let position = k - 1\n    var startIndex = 0\n    var endIndex = array.count - 1\n    var variableArray = array\n\n    return quickSelectHelper(&variableArray, &startIndex, &endIndex, position)\n  }\n\n  func quickSelectHelper(_ array: inout [Int], _ startIndex: inout Int, _ endIndex: inout Int, _ position: Int) -> Int {\n    while true {\n      let pivotIndex = startIndex\n      var leftPointer = startIndex + 1\n      var rightPointer = endIndex\n\n      while leftPointer <= rightPointer {\n        if array[leftPointer] > array[pivotIndex], array[rightPointer] < array[pivotIndex] {\n          swap(&array, leftPointer, rightPointer)\n        }\n\n        if array[leftPointer] <= array[pivotIndex] {\n          leftPointer += 1\n        }\n\n        if array[rightPointer] >= array[pivotIndex] {\n          rightPointer -= 1\n        }\n      }\n\n      swap(&array, pivotIndex, rightPointer)\n\n      if rightPointer == position {\n        return array[rightPointer]\n      } else if rightPointer < position {\n        startIndex = rightPointer + 1\n      } else {\n        endIndex = rightPointer - 1\n      }\n    }\n  }\n\n  func swap(_ array: inout [Int], _ leftPointer: Int, _ rightPointer: Int) {\n    let temp = array[leftPointer]\n\n    array[leftPointer] = array[rightPointer]\n    array[rightPointer] = temp\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(5, program.quickSelect([8, 5, 2, 9, 7, 6, 3], 3))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(5, program.quickSelect([8, 5, 2, 9, 7, 6, 3], 3))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function quickselect(array: number[], k: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// Best: O(n) time | O(1) space\n// Average: O(n) time | O(1) space\n// Worst: O(n^2) time | O(1) space\nexport function quickselect(array: number[], k: number) {\n  const position = k - 1;\n  return quickselectHelper(array, 0, array.length - 1, position);\n}\n\nfunction quickselectHelper(array: number[], startIdx: number, endIdx: number, position: number) {\n  while (true) {\n    if (startIdx > endIdx) {\n      throw new Error('Your algorithm should never arrive here!');\n    }\n    const pivotIdx = startIdx;\n    let leftIdx = startIdx + 1;\n    let rightIdx = endIdx;\n    while (leftIdx <= rightIdx) {\n      if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n        swap(leftIdx, rightIdx, array);\n      }\n      if (array[leftIdx] <= array[pivotIdx]) {\n        leftIdx++;\n      }\n      if (array[rightIdx] >= array[pivotIdx]) {\n        rightIdx--;\n      }\n    }\n    swap(pivotIdx, rightIdx, array);\n    if (rightIdx === position) {\n      return array[rightIdx];\n    } else if (rightIdx < position) {\n      startIdx = rightIdx + 1;\n    } else {\n      endIdx = rightIdx - 1;\n    }\n  }\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.quickselect([8, 5, 2, 9, 7, 6, 3], 3)).to.deep.equal(5);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.quickselect([8, 5, 2, 9, 7, 6, 3], 3)).to.deep.equal(5);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        8,
        5,
        2,
        9,
        7,
        6,
        3
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    {
      "name": "k",
      "example": 3,
      "schema": {
        "minimum": 1,
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        7,
        6,
        3
      ],
      "k": 3
    },
    {
      "array": [
        1
      ],
      "k": 1
    },
    {
      "array": [
        43,
        24,
        37
      ],
      "k": 1
    },
    {
      "array": [
        43,
        24,
        37
      ],
      "k": 2
    },
    {
      "array": [
        43,
        24,
        37
      ],
      "k": 3
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 1
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 2
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 3
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 4
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 5
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 6
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 7
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 8
    },
    {
      "array": [
        102,
        41,
        58,
        81,
        2,
        -5,
        1000,
        10021,
        181,
        -14515,
        25,
        15
      ],
      "k": 5
    },
    {
      "array": [
        102,
        41,
        58,
        81,
        2,
        -5,
        1000,
        10021,
        181,
        -14515,
        25,
        15
      ],
      "k": 4
    },
    {
      "array": [
        102,
        41,
        58,
        81,
        2,
        -5,
        1000,
        10021,
        181,
        -14515,
        25,
        15
      ],
      "k": 9
    },
    {
      "array": [
        1,
        3,
        71,
        123,
        124,
        156,
        814,
        1294,
        10024,
        110000,
        985181,
        55516151
      ],
      "k": 12
    },
    {
      "array": [
        1,
        3,
        71,
        123,
        124,
        156,
        814,
        1294,
        10024,
        110000,
        985181,
        55516151
      ],
      "k": 4
    }
  ],
  "jsonTests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        7,
        6,
        3
      ],
      "k": 3
    },
    {
      "array": [
        1
      ],
      "k": 1
    },
    {
      "array": [
        43,
        24,
        37
      ],
      "k": 1
    },
    {
      "array": [
        43,
        24,
        37
      ],
      "k": 2
    },
    {
      "array": [
        43,
        24,
        37
      ],
      "k": 3
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 1
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 2
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 3
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 4
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 5
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 6
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 7
    },
    {
      "array": [
        8,
        3,
        2,
        5,
        1,
        7,
        4,
        6
      ],
      "k": 8
    },
    {
      "array": [
        102,
        41,
        58,
        81,
        2,
        -5,
        1000,
        10021,
        181,
        -14515,
        25,
        15
      ],
      "k": 5
    },
    {
      "array": [
        102,
        41,
        58,
        81,
        2,
        -5,
        1000,
        10021,
        181,
        -14515,
        25,
        15
      ],
      "k": 4
    },
    {
      "array": [
        102,
        41,
        58,
        81,
        2,
        -5,
        1000,
        10021,
        181,
        -14515,
        25,
        15
      ],
      "k": 9
    },
    {
      "array": [
        1,
        3,
        71,
        123,
        124,
        156,
        814,
        1294,
        10024,
        110000,
        985181,
        55516151
      ],
      "k": 12
    },
    {
      "array": [
        1,
        3,
        71,
        123,
        124,
        156,
        814,
        1294,
        10024,
        110000,
        985181,
        55516151
      ],
      "k": 4
    }
  ],
  "changelog": []
}