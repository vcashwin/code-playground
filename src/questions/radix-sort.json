{
  "uid": "radix-sort",
  "testStrategy": "JSON",
  "name": "Radix Sort",
  "version": 0,
  "releaseDate": "2021-04-14T00:00:00Z",
  "category": "Sorting",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 3901,
    "failureCount": 903
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "533928233",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1908
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of non-negative integers and returns a\n  sorted version of that array. Use the Radix Sort algorithm to sort the array.\n</p>\n<p>\n  If you're unfamiliar with Radix Sort, we recommend watching the Conceptual\n  Overview section of this question's video explanation before starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [8762, 654, 3008, 345, 87, 65, 234, 12, 2]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[2, 12, 65, 87, 234, 345, 654, 3008, 8762]\n</pre>\n</div>",
  "hints": [
    "<p>\n  Radix Sort sorts numbers by looking only at one of their digits at a time. It\n  first sorts all of the given numbers by their ones' column, then by their\n  tens' column, then by their hundreds' column, and so on and so forth until\n  they're fully sorted.\n</p>\n",
    "\n<p>\n  Radix Sort uses an intermediary sorting algorithm to sort numbers one digits'\n  column at a time. The goal of Radix Sort is to perform a more efficient sort\n  than popular sorting algorithms like Merge Sort or Quick Sort for inputs that\n  are well suited to be sorted by their individual digits' columns. With this in\n  mind, what intermediary sorting algorithm should we use with Radix Sort? Keep\n  in mind that this sorting algorithm will run multiple times, sorting one\n  digits' column at a time.\n</p>\n",
    "\n<p>\n  The most popular sorting algorithm to use with Radix Sort is Counting Sort.\n  Counting Sort takes advantage of the fact that we know the range of possible\n  values that we need to sort. When sorting numbers, we know that we only need\n  to sort digits, which will always be in the range <span>0-9</span>. Therefore,\n  we can count how many times these digits occur and use those counts to\n  populate a new sorted array. We'll perform counting sort multiple times, once\n  for each digits' column that we're sorting, starting with the ones' column. We\n  need to ensure that our counting sort performs a stable sort, so that we don't\n  lose information from previous iterations of sorting. Counting sort runs in\n  <span>O(n)</span> time, which means that we might have a much more efficient\n  sorting algorithm if the largest number in our input contains few digits. See\n  the Conceptual Overview section of this question's video explanation for a\n  more in-depth explanation.\n</p>"
  ],
  "spaceTime": "O(d * (n + b)) time | O(n + b) space - where n is the length of the input array, d is the max number of digits, and b is the base of the numbering system used",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> radixSort(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nvoid countingSort(vector<int>& array, int digit);\nint myPow(int base, int exponent);\n\n// O(d * (n + b)) time | O(n + b) space - where n is the length of the input\n// array, d is the max number of digits, and b is the base of the numbering\n// system used\nvector<int> radixSort(vector<int> array) {\n  if (array.size() == 0) return array;\n\n  int maxNumber = *max_element(array.begin(), array.end());\n\n  int digit = 0;\n  while (maxNumber / (myPow(10, digit)) > 0) {\n    countingSort(array, digit);\n    digit++;\n  }\n\n  return array;\n}\n\nvoid countingSort(vector<int>& array, int digit) {\n  vector<int> sortedArray(array.size(), 0);\n  vector<int> countArray(10, 0);\n\n  int digitColumn = myPow(10, digit);\n  for (auto num : array) {\n    int countIndex = num / digitColumn % 10;\n    countArray[countIndex]++;\n  }\n\n  for (int idx = 1; idx < 10; idx++) {\n    countArray[idx] += countArray[idx - 1];\n  }\n\n  for (int idx = array.size() - 1; idx > -1; idx--) {\n    int countIndex = array[idx] / digitColumn % 10;\n    countArray[countIndex]--;\n    int sortedIndex = countArray[countIndex];\n    sortedArray[sortedIndex] = array[idx];\n  }\n\n  for (int idx = 0; idx < array.size(); idx++) {\n    array[idx] = sortedArray[idx];\n  }\n}\n\nint myPow(int base, int exponent) {\n  int result = 1;\n  for (int i = 1; i <= exponent; i++) result *= base;\n  return result;\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {8762, 654, 3008, 345, 87, 65, 234, 12, 2};\n      vector<int> expected = {2, 12, 65, 87, 234, 345, 654, 3008, 8762};\n      vector<int> actual = radixSort(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {8762, 654, 3008, 345, 87, 65, 234, 12, 2};\n      vector<int> expected = {2, 12, 65, 87, 234, 345, 654, 3008, 8762};\n      vector<int> actual = radixSort(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<int> RadixSort(List<int> array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class Program {\n  // O(d * (n + b)) time | O(n + b) space - where n is the length of the input\n  // array, d is the max number of digits, and b is the base of the numbering\n  // system used\n  public List<int> RadixSort(List<int> array) {\n    if (array.Count == 0) {\n      return array;\n    }\n\n    int maxNumber = array.Max();\n\n    int digit = 0;\n    while ((maxNumber / Math.Pow(10, digit)) > 0) {\n      countingSort(array, digit);\n      digit += 1;\n    }\n\n    return array;\n  }\n\n  public void countingSort(List<int> array, int digit) {\n    int[] sortedArray = new int[array.Count];\n    int[] countArray = new int[10];\n\n    int digitColumn = (int)Math.Pow(10, digit);\n    foreach (var num in array) {\n      int countIndex = (num / digitColumn) % 10;\n      countArray[countIndex] += 1;\n    }\n\n    for (int idx = 1; idx < 10; idx++) {\n      countArray[idx] += countArray[idx - 1];\n    }\n\n    for (int idx = array.Count - 1; idx > -1; idx--) {\n      int countIndex = (array[idx] / digitColumn) % 10;\n      countArray[countIndex] -= 1;\n      int sortedIndex = countArray[countIndex];\n      sortedArray[sortedIndex] = array[idx];\n    }\n\n    for (int idx = 0; idx < array.Count; idx++) {\n      array[idx] = sortedArray[idx];\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> input =\n      new List<int> { 8762, 654, 3008, 345, 87, 65, 234, 12, 2 };\n    List<int> expected =\n      new List<int> { 2, 12, 65, 87, 234, 345, 654, 3008, 8762 };\n    var actual = new Program().RadixSort(input);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> input =\n      new List<int> { 8762, 654, 3008, 345, 87, 65, 234, 12, 2 };\n    List<int> expected =\n      new List<int> { 2, 12, 65, 87, 234, 345, 654, 3008, 8762 };\n    var actual = new Program().RadixSort(input);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc RadixSort(array []int) []int {\n\t// Write your code here.\n\treturn []int{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(d * (n + b)) time | O(n + b) space - where n is the length of the input array,\n// d is the max number of digits, and b is the base of the numbering system used\nfunc RadixSort(array []int) []int {\n\tif len(array) == 0 {\n\t\treturn array\n\t}\n\n\tmaxNumber := max(array)\n\n\tdigit := 0\n\tfor maxNumber/pow(10, digit) > 0 {\n\t\tcountingSort(array, digit)\n\t\tdigit += 1\n\t}\n\n\treturn array\n}\n\nfunc countingSort(array []int, digit int) {\n\tsortedArray := make([]int, len(array))\n\tcountArray := []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n\n\tdigitColumn := pow(10, digit)\n\tfor _, num := range array {\n\t\tcountIndex := (num / digitColumn) % 10\n\t\tcountArray[countIndex] += 1\n\t}\n\n\tfor idx := 1; idx < 10; idx++ {\n\t\tcountArray[idx] += countArray[idx-1]\n\t}\n\n\tfor idx := len(array) - 1; idx >= 0; idx-- {\n\t\tcountIndex := (array[idx] / digitColumn) % 10\n\t\tcountArray[countIndex] -= 1\n\t\tsortedIndex := countArray[countIndex]\n\t\tsortedArray[sortedIndex] = array[idx]\n\t}\n\n\tfor idx := range array {\n\t\tarray[idx] = sortedArray[idx]\n\t}\n}\n\nfunc max(array []int) int {\n\tcurrentMax := array[0]\n\tfor _, element := range array {\n\t\tif currentMax < element {\n\t\t\tcurrentMax = element\n\t\t}\n\t}\n\treturn currentMax\n}\n\nfunc pow(a int, power int) int {\n\tvar result = 1\n\tfor i := 0; i < power; i++ {\n\t\tresult *= a\n\t}\n\treturn result\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{8762, 654, 3008, 345, 87, 65, 234, 12, 2}\n\texpected := []int{2, 12, 65, 87, 234, 345, 654, 3008, 8762}\n\tactual := RadixSort(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{8762, 654, 3008, 345, 87, 65, 234, 12, 2}\n\texpected := []int{2, 12, 65, 87, 234, 345, 654, 3008, 8762}\n\tactual := RadixSort(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<Integer> radixSort(ArrayList<Integer> array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(d * (n + b)) time | O(n + b) space - where n is the length of the input\n  // array, d is the max number of digits, and b is the base of the numbering\n  // system used\n  public ArrayList<Integer> radixSort(ArrayList<Integer> array) {\n    if (array.size() == 0) {\n      return array;\n    }\n\n    int maxNumber = Collections.max(array);\n\n    int digit = 0;\n    while ((maxNumber / Math.pow(10, digit)) > 0) {\n      countingSort(array, digit);\n      digit += 1;\n    }\n\n    return array;\n  }\n\n  public void countingSort(ArrayList<Integer> array, int digit) {\n    int[] sortedArray = new int[array.size()];\n    int[] countArray = new int[10];\n\n    int digitColumn = (int) Math.pow(10, digit);\n    for (int num : array) {\n      int countIndex = (num / digitColumn) % 10;\n      countArray[countIndex] += 1;\n    }\n\n    for (int idx = 1; idx < 10; idx++) {\n      countArray[idx] += countArray[idx - 1];\n    }\n\n    for (int idx = array.size() - 1; idx > -1; idx--) {\n      int countIndex = (array.get(idx) / digitColumn) % 10;\n      countArray[countIndex] -= 1;\n      int sortedIndex = countArray[countIndex];\n      sortedArray[sortedIndex] = array.get(idx);\n    }\n\n    for (int idx = 0; idx < array.size(); idx++) {\n      array.set(idx, sortedArray[idx]);\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    ArrayList<Integer> input =\n      new ArrayList(Arrays.asList(8762, 654, 3008, 345, 87, 65, 234, 12, 2));\n    ArrayList<Integer> expected =\n      new ArrayList(Arrays.asList(2, 12, 65, 87, 234, 345, 654, 3008, 8762));\n    var actual = new Program().radixSort(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    ArrayList<Integer> input =\n      new ArrayList(Arrays.asList(8762, 654, 3008, 345, 87, 65, 234, 12, 2));\n    ArrayList<Integer> expected =\n      new ArrayList(Arrays.asList(2, 12, 65, 87, 234, 345, 654, 3008, 8762));\n    var actual = new Program().radixSort(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function radixSort(array) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.radixSort = radixSort;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(d * (n + b)) time | O(n + b) space - where n is the length of the input array,\n// d is the max number of digits, and b is the base of the numbering system used\nfunction radixSort(array) {\n  if (array.length === 0) return array;\n\n  const maxNumber = Math.max(...array);\n\n  let digit = 0;\n  while (maxNumber / 10 ** digit > 0) {\n    countingSort(array, digit);\n    digit++;\n  }\n\n  return array;\n}\n\nfunction countingSort(array, digit) {\n  const sortedArray = new Array(array.length).fill(0);\n  const countArray = new Array(10).fill(0);\n\n  const digitColumn = 10 ** digit;\n  for (const num of array) {\n    const countIndex = Math.floor(num / digitColumn) % 10;\n    countArray[countIndex]++;\n  }\n\n  for (let idx = 1; idx < 10; idx++) {\n    countArray[idx] += countArray[idx - 1];\n  }\n\n  for (let idx = array.length - 1; idx > -1; idx--) {\n    const countIndex = Math.floor(array[idx] / digitColumn) % 10;\n    countArray[countIndex]--;\n    const sortedIndex = countArray[countIndex];\n    sortedArray[sortedIndex] = array[idx];\n  }\n\n  for (let idx = 0; idx < array.length; idx++) {\n    array[idx] = sortedArray[idx];\n  }\n}\n\n// Do not edit the line below.\nexports.radixSort = radixSort;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2];\n  const expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762];\n  const actual = program.radixSort(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2];\n  const expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762];\n  const actual = program.radixSort(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun radixSort(array: MutableList<Int>): MutableList<Int> {\n    // Write your code here.\n    return mutableListOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.pow\n\n// O(d * (n + b)) time | O(n + b) space - where n is the length of the input array,\n// d is the max number of digits, and b is the base of the numbering system used\nfun radixSort(array: MutableList<Int>): MutableList<Int> {\n    if (array.size == 0) return array\n\n    val maxNumber = array.max()!!\n\n    var digit = 0\n    while (maxNumber / 10.0.pow(digit).toInt() > 0) {\n        countingSort(array, digit)\n        digit += 1\n    }\n\n    return array\n}\n\nfun countingSort(array: MutableList<Int>, digit: Int) {\n    val sortedArray = Array(array.size) { 0 }\n    val countArray = Array(10) { 0 }\n\n    val digitColumn = 10.0.pow(digit).toInt()\n    for (num in array) {\n        val countIndex = (num / digitColumn) % 10\n        countArray[countIndex] += 1\n    }\n\n    for (idx in 1 until 10) {\n        countArray[idx] += countArray[idx - 1]\n    }\n\n    for (idx in array.size - 1 downTo 0) {\n        val countIndex = (array[idx] / digitColumn) % 10\n        countArray[countIndex] -= 1\n        val sortedIndex = countArray[countIndex]\n        sortedArray[sortedIndex] = array[idx]\n    }\n\n    for (idx in 0 until array.size) {\n        array[idx] = sortedArray[idx]\n    }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.radixSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(8762, 654, 3008, 345, 87, 65, 234, 12, 2)\n        val expected = mutableListOf(2, 12, 65, 87, 234, 345, 654, 3008, 8762)\n        val output = radixSort(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.radixSort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(8762, 654, 3008, 345, 87, 65, 234, 12, 2)\n        val expected = mutableListOf(2, 12, 65, 87, 234, 345, 654, 3008, 8762)\n        val output = radixSort(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def radixSort(array):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(d * (n + b)) time | O(n + b) space - where n is the length of the input array,\n# d is the max number of digits, and b is the base of the numbering system used\ndef radixSort(array):\n    if len(array) == 0:\n        return array\n\n    maxNumber = max(array)\n\n    digit = 0\n    while maxNumber / 10**digit > 0:\n        countingSort(array, digit)\n        digit += 1\n\n    return array\n\n\ndef countingSort(array, digit):\n    sortedArray = [0] * len(array)\n    countArray = [0] * 10\n\n    digitColumn = 10**digit\n    for num in array:\n        countIndex = (num // digitColumn) % 10\n        countArray[countIndex] += 1\n\n    for idx in range(1, 10):\n        countArray[idx] += countArray[idx - 1]\n\n    for idx in range(len(array) - 1, -1, -1):\n        countIndex = (array[idx] // digitColumn) % 10\n        countArray[countIndex] -= 1\n        sortedIndex = countArray[countIndex]\n        sortedArray[sortedIndex] = array[idx]\n\n    for idx in range(len(array)):\n        array[idx] = sortedArray[idx]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2]\n        expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762]\n        actual = program.radixSort(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2]\n        expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762]\n        actual = program.radixSort(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def radixSort(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def radixSort(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.radixSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.radixSort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func radixSort(_ array: inout [Int]) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(d * (n + b)) time | O(n + b) space - where n is the length of the input array,\n  // d is the max number of digits, and b is the base of the numbering system used\n  func radixSort(_ array: inout [Int]) -> [Int] {\n    if array.count == 0 {\n      return array\n    }\n\n    let maxNumber = array.max()!\n\n    var digit = 0\n    while (maxNumber / pow(10, digit)) > 0 {\n      countingSort(&array, digit)\n      digit += 1\n    }\n\n    return array\n  }\n\n  func countingSort(_ array: inout [Int], _ digit: Int) {\n    var sortedArray = Array(repeating: 0, count: array.count)\n    var countArray = Array(repeating: 0, count: 10)\n\n    let digitColumn = pow(10, digit)\n    for num in array {\n      let countIndex = (num / digitColumn) % 10\n      countArray[countIndex] += 1\n    }\n\n    for idx in stride(from: 1, to: 10, by: 1) {\n      countArray[idx] += countArray[idx - 1]\n    }\n\n    for idx in stride(from: array.count - 1, through: 0, by: -1) {\n      let countIndex = (array[idx] / digitColumn) % 10\n      countArray[countIndex] -= 1\n      let sortedIndex = countArray[countIndex]\n      sortedArray[sortedIndex] = array[idx]\n    }\n\n    for idx in 0 ..< array.count {\n      array[idx] = sortedArray[idx]\n    }\n  }\n\n  func pow(_ a: Int, _ power: Int) -> Int {\n    var result = 1\n    for i in 0 ..< power {\n      result *= a\n    }\n    return result\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2]\n      var expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762]\n      var actual = Program().radixSort(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2]\n      var expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762]\n      var actual = Program().radixSort(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function radixSort(array: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(d * (n + b)) time | O(n + b) space - where n is the length of the input array,\n// d is the max number of digits, and b is the base of the numbering system used\nexport function radixSort(array: number[]) {\n  if (array.length === 0) return array;\n\n  const maxNumber = Math.max(...array);\n\n  let digit = 0;\n  while (maxNumber / 10 ** digit > 0) {\n    countingSort(array, digit);\n    digit++;\n  }\n\n  return array;\n}\n\nfunction countingSort(array: number[], digit: number) {\n  const sortedArray = new Array(array.length).fill(0);\n  const countArray = new Array(10).fill(0);\n\n  const digitColumn = 10 ** digit;\n  for (const num of array) {\n    const countIndex = Math.floor(num / digitColumn) % 10;\n    countArray[countIndex]++;\n  }\n\n  for (let idx = 1; idx < 10; idx++) {\n    countArray[idx] += countArray[idx - 1];\n  }\n\n  for (let idx = array.length - 1; idx > -1; idx--) {\n    const countIndex = Math.floor(array[idx] / digitColumn) % 10;\n    countArray[countIndex]--;\n    const sortedIndex = countArray[countIndex];\n    sortedArray[sortedIndex] = array[idx];\n  }\n\n  for (let idx = 0; idx < array.length; idx++) {\n    array[idx] = sortedArray[idx];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2];\n  const expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762];\n  const actual = program.radixSort(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8762, 654, 3008, 345, 87, 65, 234, 12, 2];\n  const expected = [2, 12, 65, 87, 234, 345, 654, 3008, 8762];\n  const actual = program.radixSort(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        8762,
        654,
        3008,
        345,
        87,
        65,
        234,
        12,
        2
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        8762,
        654,
        3008,
        345,
        87,
        65,
        234,
        12,
        2
      ]
    },
    {
      "array": [
        2,
        12,
        65,
        87,
        234,
        345,
        654,
        3008,
        8762
      ]
    },
    {
      "array": [
        111,
        11,
        11,
        1,
        0
      ]
    },
    {
      "array": [
        12,
        123,
        456,
        986,
        2,
        3,
        34,
        543,
        97654,
        34200
      ]
    },
    {
      "array": [
        4,
        44,
        444,
        888,
        88,
        33,
        3,
        22,
        2222,
        1111,
        1234
      ]
    },
    {
      "array": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        100
      ]
    },
    {
      "array": [
        10000,
        100001,
        10001,
        10101,
        101,
        11,
        100,
        10,
        1,
        0
      ]
    },
    {
      "array": [
        34,
        56,
        7373,
        2321,
        3421,
        8272,
        232,
        23892831,
        230983,
        2312,
        7878,
        87,
        234,
        23,
        332,
        4556
      ]
    },
    {
      "array": [
        10,
        87,
        2321,
        3221,
        2312,
        7632,
        6542,
        3223,
        231,
        2342,
        321,
        9,
        1,
        323,
        421,
        325,
        65,
        789,
        4002
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        22,
        11,
        3,
        33,
        0,
        0,
        0,
        21,
        21,
        21,
        1,
        11,
        111
      ]
    },
    {
      "array": [
        8,
        4,
        5,
        34,
        234,
        987,
        444,
        23,
        21,
        8,
        1,
        0
      ]
    },
    {
      "array": [
        1,
        11
      ]
    },
    {
      "array": [
        1,
        11,
        1,
        11,
        101,
        9,
        99,
        432,
        441
      ]
    },
    {
      "array": [
        1000,
        100,
        10,
        1,
        10,
        100,
        1000,
        10001,
        10201,
        1001,
        0,
        1,
        1
      ]
    },
    {
      "array": [
        9,
        109,
        908,
        876,
        1099,
        190,
        290,
        999,
        9999
      ]
    },
    {
      "array": [
        0,
        999999,
        234892,
        10000009,
        89892,
        782731,
        891932,
        92012,
        1892193,
        181730,
        785239,
        2314451,
        1231421,
        812723
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        8762,
        654,
        3008,
        345,
        87,
        65,
        234,
        12,
        2
      ]
    },
    {
      "array": [
        2,
        12,
        65,
        87,
        234,
        345,
        654,
        3008,
        8762
      ]
    },
    {
      "array": [
        111,
        11,
        11,
        1,
        0
      ]
    },
    {
      "array": [
        12,
        123,
        456,
        986,
        2,
        3,
        34,
        543,
        97654,
        34200
      ]
    },
    {
      "array": [
        4,
        44,
        444,
        888,
        88,
        33,
        3,
        22,
        2222,
        1111,
        1234
      ]
    },
    {
      "array": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        100
      ]
    },
    {
      "array": [
        10000,
        100001,
        10001,
        10101,
        101,
        11,
        100,
        10,
        1,
        0
      ]
    },
    {
      "array": [
        34,
        56,
        7373,
        2321,
        3421,
        8272,
        232,
        23892831,
        230983,
        2312,
        7878,
        87,
        234,
        23,
        332,
        4556
      ]
    },
    {
      "array": [
        10,
        87,
        2321,
        3221,
        2312,
        7632,
        6542,
        3223,
        231,
        2342,
        321,
        9,
        1,
        323,
        421,
        325,
        65,
        789,
        4002
      ]
    },
    {
      "array": [
        0,
        1,
        2,
        22,
        11,
        3,
        33,
        0,
        0,
        0,
        21,
        21,
        21,
        1,
        11,
        111
      ]
    },
    {
      "array": [
        8,
        4,
        5,
        34,
        234,
        987,
        444,
        23,
        21,
        8,
        1,
        0
      ]
    },
    {
      "array": [
        1,
        11
      ]
    },
    {
      "array": [
        1,
        11,
        1,
        11,
        101,
        9,
        99,
        432,
        441
      ]
    },
    {
      "array": [
        1000,
        100,
        10,
        1,
        10,
        100,
        1000,
        10001,
        10201,
        1001,
        0,
        1,
        1
      ]
    },
    {
      "array": [
        9,
        109,
        908,
        876,
        1099,
        190,
        290,
        999,
        9999
      ]
    },
    {
      "array": [
        0,
        999999,
        234892,
        10000009,
        89892,
        782731,
        891932,
        92012,
        1892193,
        181730,
        785239,
        2314451,
        1231421,
        812723
      ]
    }
  ],
  "changelog": []
}