{
  "uid": "run-length-encoding",
  "testStrategy": "JSON",
  "name": "Run-Length Encoding",
  "version": 0,
  "releaseDate": "2020-11-16T00:00:00Z",
  "category": "Strings",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 47439,
    "failureCount": 18194
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "471872605",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1257
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty string and returns its run-length\n  encoding.\n</p>\n<p>\n  From Wikipedia, \"run-length encoding is a form of lossless data compression in\n  which runs of data are stored as a single data value and count, rather than as\n  the original run.\" For this problem, a run of data is any sequence of\n  consecutive, identical characters. So the run <span>\"AAA\"</span> would be\n  run-length-encoded as <span>\"3A\"</span>.\n</p>\n<p>\n  To make things more complicated, however, the input string can contain all\n  sorts of special characters, including numbers. And since encoded data must be\n  decodable, this means that we can't naively run-length-encode long runs. For\n  example, the run <span>\"AAAAAAAAAAAA\"</span> (12 <span>A</span>s), can't\n  naively be encoded as <span>\"12A\"</span>, since this string can be decoded as\n  either <span>\"AAAAAAAAAAAA\"</span> or <span>\"1AA\"</span>. Thus, long runs (runs\n  of 10 or more characters) should be encoded in a split fashion; the\n  aforementioned run should be encoded as <span>\"9A3A\"</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"AAAAAAAAAAAAABBCCCCDD\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"9A4A2B4C2D\"\n</pre>\n</div>",
  "hints": [
    "<p>\nTraverse the input string and count the length of each run. As you traverse the string, what should you do when you reach a run of length 9 or the end of a run?\n</p>\n",
    "\n<p>\nWhen you reach a run of length 9 or the end of a run, store the computed count for the run as well as its character (you'll likely need a list for these computed counts and characters), and reset the count to 1 before continuing to traverse the string.\n</p>\n",
    "\n<p>\nMake sure that your solution correctly handles the last run in the string.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input string",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nstring runLengthEncoding(string str) {\n  // Write your code here.\n  return \"\";\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\n\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input string\nstring runLengthEncoding(string str) {\n  // The input string is guaranteed to be non-empty,\n  // so our first run will be of at least length 1.\n  vector<char> encodedStringCharacters;\n  int currentRunLength = 1;\n\n  for (int i = 1; i < str.size(); i++) {\n    char currentCharacter = str[i];\n    char previousCharacter = str[i - 1];\n\n    if (currentCharacter != previousCharacter || currentRunLength == 9) {\n      encodedStringCharacters.push_back(to_string(currentRunLength)[0]);\n      encodedStringCharacters.push_back(previousCharacter);\n      currentRunLength = 0;\n    }\n\n    currentRunLength++;\n  }\n\n  // Handle the last run.\n  encodedStringCharacters.push_back(to_string(currentRunLength)[0]);\n  encodedStringCharacters.push_back(str[str.size() - 1]);\n\n  string encodedString(\n    encodedStringCharacters.begin(), encodedStringCharacters.end()\n  );\n  return encodedString;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = \"AAAAAAAAAAAAABBCCCCDD\";\n      auto expected = \"9A4A2B4C2D\";\n      auto actual = runLengthEncoding(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = \"AAAAAAAAAAAAABBCCCCDD\";\n      auto expected = \"9A4A2B4C2D\";\n      auto actual = runLengthEncoding(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public string RunLengthEncoding(string str) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\nusing System.Text;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input string\n  public string RunLengthEncoding(string str) {\n    // The input string is guaranteed to be non-empty,\n    // so our first run will be of at least length 1.\n    StringBuilder encodedStringChars = new StringBuilder();\n    int currentRunLength = 1;\n\n    for (int i = 1; i < str.Length; i++) {\n      char currentChar = str[i];\n      char previousChar = str[i - 1];\n\n      if ((currentChar != previousChar) || (currentRunLength == 9)) {\n        encodedStringChars.Append(currentRunLength.ToString());\n        encodedStringChars.Append(previousChar);\n        currentRunLength = 0;\n      }\n\n      currentRunLength += 1;\n    }\n\n    // Handle the last run.\n    encodedStringChars.Append(currentRunLength.ToString());\n    encodedStringChars.Append(str[str.Length - 1]);\n\n    return encodedStringChars.ToString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = \"AAAAAAAAAAAAABBCCCCDD\";\n    var expected = \"9A4A2B4C2D\";\n    var actual = new Program().RunLengthEncoding(input);\n    Utils.AssertTrue(expected.Equals(actual));\n  }\n}",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = \"AAAAAAAAAAAAABBCCCCDD\";\n    var expected = \"9A4A2B4C2D\";\n    var actual = new Program().RunLengthEncoding(input);\n    Utils.AssertTrue(expected.Equals(actual));\n  }\n}"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc RunLengthEncoding(str string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"strconv\"\n)\n\n// O(n) time | O(n) space - where n is the length of the input string\nfunc RunLengthEncoding(str string) string {\n\t// The input string is guaranteed to be non-empty,\n\t// so our first run will be of at least length 1.\n\tencodedStringCharacters := []byte{}\n\tcurrentRunLength := 1\n\n\tfor i := 1; i < len(str); i++ {\n\t\tcurrentCharacter := str[i]\n\t\tpreviousCharacter := str[i-1]\n\n\t\tif currentCharacter != previousCharacter || currentRunLength == 9 {\n\t\t\tencodedStringCharacters = append(encodedStringCharacters, strconv.Itoa(currentRunLength)[0])\n\t\t\tencodedStringCharacters = append(encodedStringCharacters, previousCharacter)\n\t\t\tcurrentRunLength = 0\n\t\t}\n\n\t\tcurrentRunLength++\n\t}\n\n\t// Handle the last run.\n\tencodedStringCharacters = append(encodedStringCharacters, strconv.Itoa(currentRunLength)[0])\n\tencodedStringCharacters = append(encodedStringCharacters, str[len(str)-1])\n\treturn string(encodedStringCharacters)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"AAAAAAAAAAAAABBCCCCDD\"\n\texpected := \"9A4A2B4C2D\"\n\tactual := RunLengthEncoding(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"AAAAAAAAAAAAABBCCCCDD\"\n\texpected := \"9A4A2B4C2D\"\n\tactual := RunLengthEncoding(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public String runLengthEncoding(String string) {\n    // Write your code here.\n    return \"\";\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input string\n  public String runLengthEncoding(String string) {\n    // The input string is guaranteed to be non-empty,\n    // so our first run will be of at least length 1.\n    StringBuilder encodedStringCharacters = new StringBuilder();\n    int currentRunLength = 1;\n\n    for (int i = 1; i < string.length(); i++) {\n      char currentCharacter = string.charAt(i);\n      char previousCharacter = string.charAt(i - 1);\n\n      if ((currentCharacter != previousCharacter) || (currentRunLength == 9)) {\n        encodedStringCharacters.append(Integer.toString(currentRunLength));\n        encodedStringCharacters.append(previousCharacter);\n        currentRunLength = 0;\n      }\n\n      currentRunLength += 1;\n    }\n\n    // Handle the last run.\n    encodedStringCharacters.append(Integer.toString(currentRunLength));\n    encodedStringCharacters.append(string.charAt(string.length() - 1));\n\n    return encodedStringCharacters.toString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = \"AAAAAAAAAAAAABBCCCCDD\";\n    var expected = \"9A4A2B4C2D\";\n    var actual = new Program().runLengthEncoding(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = \"AAAAAAAAAAAAABBCCCCDD\";\n    var expected = \"9A4A2B4C2D\";\n    var actual = new Program().runLengthEncoding(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function runLengthEncoding(string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.runLengthEncoding = runLengthEncoding;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input string\nfunction runLengthEncoding(string) {\n  // The input string is guaranteed to be non-empty,\n  // so our first run will be of at least length 1.\n  const encodedStringCharacters = [];\n  let currentRunLength = 1;\n\n  for (let i = 1; i < string.length; i++) {\n    const currentCharacter = string[i];\n    const previousCharacter = string[i - 1];\n\n    if (currentCharacter !== previousCharacter || currentRunLength === 9) {\n      encodedStringCharacters.push(currentRunLength.toString());\n      encodedStringCharacters.push(previousCharacter);\n      currentRunLength = 0;\n    }\n\n    currentRunLength++;\n  }\n\n  // Handle the last run.\n  encodedStringCharacters.push(currentRunLength.toString());\n  encodedStringCharacters.push(string[string.length - 1]);\n\n  return encodedStringCharacters.join('');\n}\n\nexports.runLengthEncoding = runLengthEncoding;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const string = 'AAAAAAAAAAAAABBCCCCDD';\n  const expected = '9A4A2B4C2D';\n  const actual = program.runLengthEncoding(string);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const string = 'AAAAAAAAAAAAABBCCCCDD';\n  const expected = '9A4A2B4C2D';\n  const actual = program.runLengthEncoding(string);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun runLengthEncoding(string: String): String {\n    // Write your code here.\n    return string\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the input string\nfun runLengthEncoding(string: String): String {\n    // The input string is guaranteed to be non-empty,\n    // so our first run will be of at least length 1.\n    val encodedStringCharacters = mutableListOf<Char>()\n    var currentRunLength = 1\n\n    for (i in 1 until string.length) {\n        val currentCharacter = string[i]\n        val previousCharacter = string[i - 1]\n\n        if (currentCharacter != previousCharacter || currentRunLength == 9) {\n            encodedStringCharacters.add(currentRunLength.toString()[0])\n            encodedStringCharacters.add(previousCharacter)\n            currentRunLength = 0\n        }\n\n        currentRunLength++\n    }\n\n    // Handle the last run.\n    encodedStringCharacters.add(currentRunLength.toString()[0])\n    encodedStringCharacters.add(string[string.length - 1])\n\n    return encodedStringCharacters.joinToString(\"\")\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.runLengthEncoding\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"AAAAAAAAAAAAABBCCCCDD\"\n        val expected = \"9A4A2B4C2D\"\n        val output = runLengthEncoding(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.runLengthEncoding\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"AAAAAAAAAAAAABBCCCCDD\"\n        val expected = \"9A4A2B4C2D\"\n        val output = runLengthEncoding(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def runLengthEncoding(string):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input string\ndef runLengthEncoding(string):\n    # The input string is guaranteed to be non-empty,\n    # so our first run will be of at least length 1.\n    encodedStringCharacters = []\n    currentRunLength = 1\n\n    for i in range(1, len(string)):\n        currentCharacter = string[i]\n        previousCharacter = string[i - 1]\n\n        if currentCharacter != previousCharacter or currentRunLength == 9:\n            encodedStringCharacters.append(str(currentRunLength))\n            encodedStringCharacters.append(previousCharacter)\n            currentRunLength = 0\n\n        currentRunLength += 1\n\n    # Handle the last run.\n    encodedStringCharacters.append(str(currentRunLength))\n    encodedStringCharacters.append(string[len(string) - 1])\n\n    return \"\".join(encodedStringCharacters)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        string = \"AAAAAAAAAAAAABBCCCCDD\"\n        expected = \"9A4A2B4C2D\"\n        actual = program.runLengthEncoding(string)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        string = \"AAAAAAAAAAAAABBCCCCDD\"\n        expected = \"9A4A2B4C2D\"\n        actual = program.runLengthEncoding(string)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def runLengthEncoding(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def runLengthEncoding(string)\n    # Write your code here.\n    return \"\"\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.runLengthEncoding\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.runLengthEncoding\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func runLengthEncoding(_ string: String) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input string\n  func runLengthEncoding(_ string: String) -> String {\n    // The input string is guaranteed to be non-empty,\n    // so our first run will be of at least length 1.\n    var encodedStringCharacters = [Character]()\n    var currentRunLength = 1\n\n    let indexedString = Array(string)\n    for i in stride(from: 1, to: string.count, by: 1) {\n      let currentCharacter = indexedString[i]\n      let previousCharacter = indexedString[i - 1]\n\n      if currentCharacter != previousCharacter || currentRunLength == 9 {\n        encodedStringCharacters.append(Array(String(currentRunLength))[0])\n        encodedStringCharacters.append(previousCharacter)\n        currentRunLength = 0\n      }\n\n      currentRunLength += 1\n    }\n\n    // Handle the last run.\n    encodedStringCharacters.append(Array(String(currentRunLength))[0])\n    encodedStringCharacters.append(indexedString[string.count - 1])\n    return String(encodedStringCharacters)\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = \"AAAAAAAAAAAAABBCCCCDD\"\n      var expected = \"9A4A2B4C2D\"\n      var actual = Program().runLengthEncoding(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = \"AAAAAAAAAAAAABBCCCCDD\"\n      var expected = \"9A4A2B4C2D\"\n      var actual = Program().runLengthEncoding(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function runLengthEncoding(string: string) {\n  // Write your code here.\n  return string;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input string\nexport function runLengthEncoding(string: string) {\n  // The input string is guaranteed to be non-empty,\n  // so our first run will be of at least length 1.\n  const encodedStringCharacters: string[] = [];\n  let currentRunLength = 1;\n\n  for (let i = 1; i < string.length; i++) {\n    const currentCharacter = string[i];\n    const previousCharacter = string[i - 1];\n\n    if (currentCharacter !== previousCharacter || currentRunLength === 9) {\n      encodedStringCharacters.push(currentRunLength.toString());\n      encodedStringCharacters.push(previousCharacter);\n      currentRunLength = 0;\n    }\n\n    currentRunLength++;\n  }\n\n  // Handle the last run.\n  encodedStringCharacters.push(currentRunLength.toString());\n  encodedStringCharacters.push(string[string.length - 1]);\n\n  return encodedStringCharacters.join('');\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const string = 'AAAAAAAAAAAAABBCCCCDD';\n  const expected = '9A4A2B4C2D';\n  const actual = program.runLengthEncoding(string);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const string = 'AAAAAAAAAAAAABBCCCCDD';\n  const expected = '9A4A2B4C2D';\n  const actual = program.runLengthEncoding(string);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "AAAAAAAAAAAAABBCCCCDD",
      "schema": {
        "minLength": 1,
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "AAAAAAAAAAAAABBCCCCDD"
    },
    {
      "string": "aA"
    },
    {
      "string": "122333"
    },
    {
      "string": "************^^^^^^^$$$$$$%%%%%%%!!!!!!AAAAAAAAAAAAAAAAAAAA"
    },
    {
      "string": "aAaAaaaaaAaaaAAAABbbbBBBB"
    },
    {
      "string": "                          "
    },
    {
      "string": "1  222 333    444  555"
    },
    {
      "string": "1A2BB3CCC4DDDD"
    },
    {
      "string": "........______=========AAAA   AAABBBB   BBB"
    },
    {
      "string": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "string": "        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "string": " "
    },
    {
      "string": "[(aaaaaaa,bbbbbbb,ccccc,dddddd)]"
    },
    {
      "string": ";;;;;;;;;;;;''''''''''''''''''''1233333332222211112222111s"
    },
    {
      "string": "AAAAAAAAAAAAABBCCCCDDDDDDDDDDD"
    }
  ],
  "jsonTests": [
    {
      "string": "AAAAAAAAAAAAABBCCCCDD"
    },
    {
      "string": "aA"
    },
    {
      "string": "122333"
    },
    {
      "string": "************^^^^^^^$$$$$$%%%%%%%!!!!!!AAAAAAAAAAAAAAAAAAAA"
    },
    {
      "string": "aAaAaaaaaAaaaAAAABbbbBBBB"
    },
    {
      "string": "                          "
    },
    {
      "string": "1  222 333    444  555"
    },
    {
      "string": "1A2BB3CCC4DDDD"
    },
    {
      "string": "........______=========AAAA   AAABBBB   BBB"
    },
    {
      "string": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "string": "        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "string": " "
    },
    {
      "string": "[(aaaaaaa,bbbbbbb,ccccc,dddddd)]"
    },
    {
      "string": ";;;;;;;;;;;;''''''''''''''''''''1233333332222211112222111s"
    },
    {
      "string": "AAAAAAAAAAAAABBCCCCDDDDDDDDDDD"
    }
  ],
  "changelog": []
}