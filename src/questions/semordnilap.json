{
  "uid": "semordnilap",
  "testStrategy": "JSON",
  "name": "Semordnilap",
  "version": 0,
  "releaseDate": "2022-12-15T00:00:00Z",
  "category": "Strings",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 10363,
    "failureCount": 1268
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "762837862",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 368
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a list of unique strings and returns a list of\n  semordnilap pairs.\n</p>\n<p>\n  A semordnilap pair is defined as a set of different strings where the reverse\n  of one word is the same as the forward version of the other. For example the\n  words \"diaper\" and \"repaid\" are a semordnilap pair, as are the words\n  \"palindromes\" and \"semordnilap\".\n</p>\n<p>\n  The order of the returned pairs and the order of the strings within each pair\n  does not matter.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">words</span> = [\"diaper\", \"abc\", \"test\", \"cba\", \"repaid\"]\n</pre>\n<h3>Sample Output</h3>\n<pre>[[\"diaper\", \"repaid\"], [\"abc\", \"cba\"]]</pre>\n</div>",
  "hints": [
    "<p>\n  It can be helpful to convert the input array into a set, so that you can\n  check if a word exists in the list in constant time.\n</p>\n",
    "\n<p>\n  After creating the set of words, try iterating through the original array. For\n  each word, can you check if its semordnilap pair is in the word list?\n</p>"
  ],
  "spaceTime": "O(n * m) time | O(n * m) space - where n is the number of words and m is the length of the longest word",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nvector<vector<string>> semordnilap(vector<string> words) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <unordered_set>\nusing namespace std;\n\n// O(n * m) time | O(n * m) space - where n is the number of words and\n// m is the length of the longest word\nvector<vector<string>> semordnilap(vector<string> words) {\n  unordered_set<string> wordsSet(words.begin(), words.end());\n  vector<vector<string>> semordnilapPairs;\n\n  for (string word : words) {\n    string reversedWord = word;\n    reverse(reversedWord.begin(), reversedWord.end());\n    if (wordsSet.find(reversedWord) != wordsSet.end() && reversedWord != word) {\n      semordnilapPairs.push_back({word, reversedWord});\n      wordsSet.erase(word);\n      wordsSet.erase(reversedWord);\n    }\n  }\n\n  return semordnilapPairs;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<string> input = {\"desserts\", \"stressed\", \"hello\"};\n      vector<vector<string>> expected = {{\"desserts\", \"stressed\"}};\n      auto actual = semordnilap(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<string> input = {\"desserts\", \"stressed\", \"hello\"};\n      vector<vector<string>> expected = {{\"desserts\", \"stressed\"}};\n      auto actual = semordnilap(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<List<string> > Semordnilap(string[] words) {\n    // Write your code here.\n    return new List<List<string> >();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System.Text;\nusing System;\n\npublic class Program {\n  // O(n * m) time | O(n * m) space - where n is the number of words and\n  // m is the length of the longest word\n  public List<List<string> > Semordnilap(string[] words) {\n    HashSet<string> wordsSet = new HashSet<string>(words);\n    List<List<string> > semordnilapPairs = new List<List<string> >();\n\n    foreach (var word in words) {\n      char[] chars = word.ToCharArray();\n      Array.Reverse(chars);\n      string reverse = new string(chars);\n      if (wordsSet.Contains(reverse) && !reverse.Equals(word)) {\n        List<string> semordnilapPair = new List<string> { word, reverse };\n        semordnilapPairs.Add(semordnilapPair);\n        wordsSet.Remove(word);\n        wordsSet.Remove(reverse);\n      }\n    }\n\n    return semordnilapPairs;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new string[] { \"desserts\", \"stressed\", \"hello\" };\n    List<List<string> > expected = new List<List<string> >();\n    List<string> pair = new List<string> { \"desserts\", \"stressed\" };\n    expected.Add(pair);\n    var actual = new Program().Semordnilap(input);\n    Utils.AssertTrue(expected.Count == actual.Count);\n    for (var i = 0; i < expected.Count; i++) {\n      Utils.AssertTrue(Enumerable.SequenceEqual(expected[i], actual[i]));\n    }\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new string[] { \"desserts\", \"stressed\", \"hello\" };\n    List<List<string> > expected = new List<List<string> >();\n    List<string> pair = new List<string> { \"desserts\", \"stressed\" };\n    expected.Add(pair);\n    var actual = new Program().Semordnilap(input);\n    Utils.AssertTrue(expected.Count == actual.Count);\n    for (var i = 0; i < expected.Count; i++) {\n      Utils.AssertTrue(Enumerable.SequenceEqual(expected[i], actual[i]));\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc Semordnilap(words []string) [][]string {\n\t// Write your code here.\n\treturn [][]string{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n * m) time | O(n * m) space - where n is the number of words and\n// m is the length of the longest word\nfunc Semordnilap(words []string) [][]string {\n\twordSet := map[string]bool{}\n\tfor _, word := range words {\n\t\twordSet[word] = true\n\t}\n\n\tsemordnilapPairs := [][]string{}\n\tfor _, word := range words {\n\t\treverse := reverse(word)\n\t\tif _, reverseInSet := wordSet[reverse]; reverseInSet && reverse != word {\n\t\t\tsemordnilapPairs = append(semordnilapPairs, []string{word, reverse})\n\t\t\tdelete(wordSet, word)\n\t\t\tdelete(wordSet, reverse)\n\t\t}\n\t}\n\treturn semordnilapPairs\n}\n\nfunc reverse(s string) string {\n\treversed := []byte{}\n\tfor i := len(s) - 1; i >= 0; i-- {\n\t\treversed = append(reversed, s[i])\n\t}\n\treturn string(reversed)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []string{\"desserts\", \"stressed\", \"hello\"}\n\texpected := [][]string{{\"desserts\", \"stressed\"}}\n\tactual := Semordnilap(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []string{\"desserts\", \"stressed\", \"hello\"}\n\texpected := [][]string{{\"desserts\", \"stressed\"}}\n\tactual := Semordnilap(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<ArrayList<String>> semordnilap(String[] words) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n * m) time | O(n * m) space - where n is the number of words and\n  // m is the length of the longest word\n  public ArrayList<ArrayList<String>> semordnilap(String[] words) {\n    HashSet<String> wordsSet = new HashSet<String>(Arrays.asList(words));\n    ArrayList<ArrayList<String>> semordnilapPairs =\n      new ArrayList<ArrayList<String>>();\n\n    for (String word : words) {\n      String reverse = new StringBuilder(word).reverse().toString();\n      if (wordsSet.contains(reverse) && !reverse.equals(word)) {\n        ArrayList<String> semordnilapPair = new ArrayList<String>();\n        semordnilapPair.add(word);\n        semordnilapPair.add(reverse);\n        semordnilapPairs.add(semordnilapPair);\n        wordsSet.remove(word);\n        wordsSet.remove(reverse);\n      }\n    }\n\n    return semordnilapPairs;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new String[] {\"desserts\", \"stressed\", \"hello\"};\n    ArrayList<ArrayList<String>> expected = new ArrayList<ArrayList<String>>();\n    ArrayList<String> pair = new ArrayList<String>();\n    pair.add(\"desserts\");\n    pair.add(\"stressed\");\n    expected.add(pair);\n    var actual = new Program().semordnilap(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new String[] {\"desserts\", \"stressed\", \"hello\"};\n    ArrayList<ArrayList<String>> expected = new ArrayList<ArrayList<String>>();\n    ArrayList<String> pair = new ArrayList<String>();\n    pair.add(\"desserts\");\n    pair.add(\"stressed\");\n    expected.add(pair);\n    var actual = new Program().semordnilap(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function semordnilap(words) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.semordnilap = semordnilap;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n * m) time | O(n * m) space - where n is the number of words and\n// m is the length of the longest word\nfunction semordnilap(words) {\n  const wordsSet = new Set(words);\n  const semordnilapPairs = [];\n\n  for (const word of words) {\n    const reverse = word.split('').reverse().join('');\n    if (wordsSet.has(reverse) && reverse !== word) {\n      semordnilapPairs.push([word, reverse]);\n      wordsSet.delete(word);\n      wordsSet.delete(reverse);\n    }\n  }\n\n  return semordnilapPairs;\n}\n\n// Do not edit the line below.\nexports.semordnilap = semordnilap;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = ['desserts', 'stressed', 'hello'];\n  const expected = [['desserts', 'stressed']];\n  const actual = program.semordnilap(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = ['desserts', 'stressed', 'hello'];\n  const expected = [['desserts', 'stressed']];\n  const actual = program.semordnilap(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun semordnilap(words: List<String>): List<List<String>> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n * m) time | O(n * m) space - where n is the number of words and\n// m is the length of the longest word\nfun semordnilap(words: List<String>): List<List<String>> {\n    val wordsSet = words.toMutableSet()\n    val semordnilapPairs = mutableListOf<List<String>>()\n\n    for (word in words) {\n        val reverse = word.reversed()\n        if (wordsSet.contains(reverse) && reverse != word) {\n            semordnilapPairs.add(listOf(word, reverse))\n            wordsSet.remove(word)\n            wordsSet.remove(reverse)\n        }\n    }\n\n    return semordnilapPairs\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.semordnilap\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(\"desserts\", \"stressed\", \"hello\")\n        val expected = listOf(listOf(\"desserts\", \"stressed\"))\n        val output = semordnilap(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.semordnilap\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(\"desserts\", \"stressed\", \"hello\")\n        val expected = listOf(listOf(\"desserts\", \"stressed\"))\n        val output = semordnilap(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def semordnilap(words):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n * m) time | O(n * m) space - where n is the number of words and\n# m is the length of the longest word\ndef semordnilap(words):\n    wordsSet = set(words)\n    semordnilapPairs = []\n\n    for word in words:\n        reverse = word[::-1]\n        if reverse in wordsSet and reverse != word:\n            semordnilapPairs.append([word, reverse])\n            wordsSet.remove(word)\n            wordsSet.remove(reverse)\n\n    return semordnilapPairs\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [\"desserts\", \"stressed\", \"hello\"]\n        expected = [[\"desserts\", \"stressed\"]]\n        actual = program.semordnilap(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [\"desserts\", \"stressed\", \"hello\"]\n        expected = [[\"desserts\", \"stressed\"]]\n        actual = program.semordnilap(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "\nclass Program\n    def semordnilap(words)\n        # Write your code here.\n        return []\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n\nclass Program\n    def semordnilap(words)\n        # Write your code here.\n        return []\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.semordnilap\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.semordnilap\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func semordnilap(_ words: [String]) -> [[String]] {\n    // Write your code here.\n    return [[String]]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n * m) time | O(n * m) space - where n is the number of words and\n  // m is the length of the longest word\n  func semordnilap(_ words: [String]) -> [[String]] {\n    var wordSet = Set<String>()\n    for word in words {\n      wordSet.insert(word)\n    }\n\n    var semordnilapPairs = [[String]]()\n    for word in words {\n      let reverse = String(word.reversed())\n      if wordSet.contains(reverse) && reverse != word {\n        semordnilapPairs.append([word, reverse])\n        wordSet.remove(word)\n        wordSet.remove(reverse)\n      }\n    }\n    return semordnilapPairs\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [\"desserts\", \"stressed\", \"hello\"]\n      var expected = [[\"desserts\", \"stressed\"]]\n      var actual = Program().semordnilap(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [\"desserts\", \"stressed\", \"hello\"]\n      var expected = [[\"desserts\", \"stressed\"]]\n      var actual = Program().semordnilap(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function semordnilap(words: string[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n * m) time | O(n * m) space - where n is the number of words and\n// m is the length of the longest word\nexport function semordnilap(words: string[]) {\n  const wordsSet = new Set(words);\n  const semordnilapPairs: [string, string][] = [];\n\n  for (const word of words) {\n    const reverse = word.split('').reverse().join('');\n    if (wordsSet.has(reverse) && reverse !== word) {\n      semordnilapPairs.push([word, reverse]);\n      wordsSet.delete(word);\n      wordsSet.delete(reverse);\n    }\n  }\n\n  return semordnilapPairs;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = ['desserts', 'stressed', 'hello'];\n  const expected = [['desserts', 'stressed']];\n  const actual = program.semordnilap(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = ['desserts', 'stressed', 'hello'];\n  const expected = [['desserts', 'stressed']];\n  const actual = program.semordnilap(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "words",
      "example": [],
      "schema": {
        "items": {
          "type": "string"
        },
        "minItems": 0,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "words": []
    },
    {
      "words": [
        "aaa",
        "bbbb"
      ]
    },
    {
      "words": [
        "dog",
        "god"
      ]
    },
    {
      "words": [
        "dog",
        "hello",
        "god"
      ]
    },
    {
      "words": [
        "dog",
        "desserts",
        "god",
        "stressed"
      ]
    },
    {
      "words": [
        "dog",
        "hello",
        "desserts",
        "test",
        "god",
        "stressed"
      ]
    },
    {
      "words": [
        "abcde",
        "edcba",
        "edbc",
        "edb",
        "cbde",
        "abc"
      ]
    },
    {
      "words": [
        "abcde",
        "bcd",
        "dcb",
        "edcba",
        "aaa"
      ]
    },
    {
      "words": [
        "abcdefghijk",
        "aaa",
        "hello",
        "racecar",
        "kjihgfedcba"
      ]
    },
    {
      "words": [
        "liver",
        "dog",
        "hello",
        "desserts",
        "evil",
        "test",
        "god",
        "stressed",
        "racecar",
        "palindromes",
        "semordnilap",
        "abcd",
        "live"
      ]
    }
  ],
  "jsonTests": [
    {
      "words": []
    },
    {
      "words": [
        "aaa",
        "bbbb"
      ]
    },
    {
      "words": [
        "dog",
        "god"
      ]
    },
    {
      "words": [
        "dog",
        "hello",
        "god"
      ]
    },
    {
      "words": [
        "dog",
        "desserts",
        "god",
        "stressed"
      ]
    },
    {
      "words": [
        "dog",
        "hello",
        "desserts",
        "test",
        "god",
        "stressed"
      ]
    },
    {
      "words": [
        "abcde",
        "edcba",
        "edbc",
        "edb",
        "cbde",
        "abc"
      ]
    },
    {
      "words": [
        "abcde",
        "bcd",
        "dcb",
        "edcba",
        "aaa"
      ]
    },
    {
      "words": [
        "abcdefghijk",
        "aaa",
        "hello",
        "racecar",
        "kjihgfedcba"
      ]
    },
    {
      "words": [
        "liver",
        "dog",
        "hello",
        "desserts",
        "evil",
        "test",
        "god",
        "stressed",
        "racecar",
        "palindromes",
        "semordnilap",
        "abcd",
        "live"
      ]
    }
  ],
  "changelog": []
}