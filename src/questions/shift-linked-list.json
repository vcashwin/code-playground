{
  "uid": "shift-linked-list",
  "testStrategy": "JSON",
  "name": "Shift Linked List",
  "version": 0,
  "releaseDate": "2020-05-11T00:00:00Z",
  "category": "Linked Lists",
  "difficulty": 3,
  "acl": {
    "isFree": true,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 17268,
    "failureCount": 10451
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "414931645",
    "duration": 0,
    "annotations": [
      {
        "title": "Typo",
        "content": "Line 4 is missing \".next\" on \"listTail\": \"while listTail.next is not None",
        "start": 1489,
        "end": 1495
      }
    ],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1396
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in the head of a Singly Linked List and an integer\n  <span>k</span>, shifts the list in place (i.e., doesn't create a brand new\n  list) by k positions, and returns its new head.\n</p>\n<p>\n  Shifting a Linked List means moving its nodes forward or backward and wrapping\n  them around the list where appropriate. For example, shifting a Linked List\n  forward by one position would make its tail become the new head of the linked\n  list.\n</p>\n<p>\n  Whether nodes are moved forward or backward is determined by whether\n  <span>k</span> is positive or negative.\n</p>\n<p>\n  Each <span>LinkedList</span> node has an integer <span>value</span> as well as\n  a <span>next</span> node pointing to the next node in the list or to\n  <span>None</span> / <span>null</span> if it's the tail of the list.\n</p>\n<p>\n  You can assume that the input Linked List will always have at least one node;\n  in other words, the head will never be <span>None</span> / <span>null</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">head</span> = 0 -> 1 -> 2 -> 3 -> 4 -> 5 <span class=\"CodeEditor-promptComment\">// the head node with value 0</span>\n<span class=\"CodeEditor-promptParameter\">k</span> = 2\n</pre>\n<h3>Sample Output</h3>\n<pre>\n4 -> 5 -> 0 -> 1 -> 2 -> 3 <span class=\"CodeEditor-promptComment\">// the new head node with value 4</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nPutting aside the cases where k is a negative integer, where k is 0, or where k is larger than the length of the linked list, what does shifting the linked list by k positions entail exactly?\n</p>\n",
    "\n<p>\nPutting aside the cases mentioned in Hint #1, shifting the linked list by k positions means moving the last k nodes in the linked list to the front of the linked list. What nodes in the linked list will you actually need to mutate?\n</p>\n",
    "\n<p>\nThere are four nodes that really matter in this entire process: the original tail of the linked list, which will point to the original head of the linked list, the original head of the linked list, which will be pointed to by the original tail of the linked list, the new tail of the linked list, and the new head of the linked list. Note that the new head is the node that the new tail points to in the original, unshifted linked list.\n</p>\n",
    "\n<p>\nYou can find the original tail of the linked list by simply traversing the linked list, starting at the original head of the linked list that you're given. You can find the new tail of the linked list by moving k positions from the original tail if k is positive (which means moving to the (lengthOfList - k)th position in the list, and you can easily count the length of the list as you traverse it to find its original tail). You can access the new head of the linked list once you've found its new tail, since it's the new tail's original next node. How will you handle the trickier values of k?\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the number of nodes in the Linked List",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": "linkedlist",
    "outputType": "linkedlist"
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next;\n\n  LinkedList(int value) {\n    this->value = value;\n    next = nullptr;\n  }\n};\n\nLinkedList* shiftLinkedList(LinkedList* head, int k) {\n  // Write your code here.\n  return nullptr;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nclass LinkedList {\n public:\n  int value;\n  LinkedList* next;\n\n  LinkedList(int value) {\n    this->value = value;\n    next = nullptr;\n  }\n};\n\n// O(n) time | O(1) space - where n is the number of nodes in the Linked List\nLinkedList* shiftLinkedList(LinkedList* head, int k) {\n  int listLength = 1;\n  LinkedList* listTail = head;\n  while (listTail->next != nullptr) {\n    listTail = listTail->next;\n    listLength++;\n  }\n\n  int offset = abs(k) % listLength;\n  if (offset == 0) return head;\n  int newTailPosition = k > 0 ? listLength - offset : offset;\n  LinkedList* newTail = head;\n  for (int i = 1; i < newTailPosition; i++) {\n    newTail = newTail->next;\n  }\n\n  LinkedList* newHead = newTail->next;\n  newTail->next = nullptr;\n  listTail->next = head;\n  return newHead;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nvector<int> linkedListToArray(LinkedList* head) {\n  vector<int> array{};\n  auto current = head;\n  while (current != nullptr) {\n    array.push_back(current->value);\n    current = current->next;\n  }\n  return array;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto head = new LinkedList(0);\n      head->next = new LinkedList(1);\n      head->next->next = new LinkedList(2);\n      head->next->next->next = new LinkedList(3);\n      head->next->next->next->next = new LinkedList(4);\n      head->next->next->next->next->next = new LinkedList(5);\n      auto result = shiftLinkedList(head, 2);\n      auto array = linkedListToArray(result);\n\n      vector<int> expected{4, 5, 0, 1, 2, 3};\n      assert(expected == array);\n    });\n  }\n};\n",
      "unitTests": "vector<int> linkedListToArray(LinkedList* head) {\n  vector<int> array{};\n  auto current = head;\n  while (current != nullptr) {\n    array.push_back(current->value);\n    current = current->next;\n  }\n  return array;\n}\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto head = new LinkedList(0);\n      head->next = new LinkedList(1);\n      head->next->next = new LinkedList(2);\n      head->next->next->next = new LinkedList(3);\n      head->next->next->next->next = new LinkedList(4);\n      head->next->next->next->next->next = new LinkedList(5);\n      auto result = shiftLinkedList(head, 2);\n      auto array = linkedListToArray(result);\n\n      vector<int> expected{4, 5, 0, 1, 2, 3};\n      assert(expected == array);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static LinkedList ShiftLinkedList(LinkedList head, int k) {\n    // Write your code here.\n    return null;\n  }\n\n  public class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      next = null;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the number of nodes in the Linked List\n  public static LinkedList ShiftLinkedList(LinkedList head, int k) {\n    int listLength = 1;\n    LinkedList listTail = head;\n    while (listTail.next != null) {\n      listTail = listTail.next;\n      listLength++;\n    }\n\n    int offset = Math.Abs(k) % listLength;\n    if (offset == 0) return head;\n    int newTailPosition = k > 0 ? listLength - offset : offset;\n    LinkedList newTail = head;\n    for (int i = 1; i < newTailPosition; i++) {\n      newTail = newTail.next;\n    }\n\n    LinkedList newHead = newTail.next;\n    newTail.next = null;\n    listTail.next = head;\n    return newHead;\n  }\n\n  public class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      next = null;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  public List<int> linkedListToArray(Program.LinkedList head) {\n    var array = new List<int>();\n    var current = head;\n    while (current != null) {\n      array.Add(current.value);\n      current = current.next;\n    }\n    return array;\n  }\n\n  [Test]\n  public void TestCase1() {\n    var head = new Program.LinkedList(0);\n    head.next = new Program.LinkedList(1);\n    head.next.next = new Program.LinkedList(2);\n    head.next.next.next = new Program.LinkedList(3);\n    head.next.next.next.next = new Program.LinkedList(4);\n    head.next.next.next.next.next = new Program.LinkedList(5);\n    var result = Program.ShiftLinkedList(head, 2);\n    var array = this.linkedListToArray(result);\n\n    var expected = new List<int> { 4, 5, 0, 1, 2, 3 };\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, array));\n  }\n}\n",
      "unitTests": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  public List<int> linkedListToArray(Program.LinkedList head) {\n    var array = new List<int>();\n    var current = head;\n    while (current != null) {\n      array.Add(current.value);\n      current = current.next;\n    }\n    return array;\n  }\n\n  [Test]\n  public void TestCase1() {\n    var head = new Program.LinkedList(0);\n    head.next = new Program.LinkedList(1);\n    head.next.next = new Program.LinkedList(2);\n    head.next.next.next = new Program.LinkedList(3);\n    head.next.next.next.next = new Program.LinkedList(4);\n    head.next.next.next.next.next = new Program.LinkedList(5);\n    var result = Program.ShiftLinkedList(head, 2);\n    var array = this.linkedListToArray(result);\n\n    var expected = new List<int> { 4, 5, 0, 1, 2, 3 };\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, array));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\nfunc ShiftLinkedList(head *LinkedList, k int) *LinkedList {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype LinkedList struct {\n\tValue int\n\tNext  *LinkedList\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the Linked List\nfunc ShiftLinkedList(head *LinkedList, k int) *LinkedList {\n\tlistLength := 1\n\tlistTail := head\n\tfor listTail.Next != nil {\n\t\tlistTail = listTail.Next\n\t\tlistLength += 1\n\t}\n\n\toffset := abs(k) % listLength\n\tif offset == 0 {\n\t\treturn head\n\t}\n\n\tnewTailPosition := listLength - offset\n\tif k <= 0 {\n\t\tnewTailPosition = offset\n\t}\n\n\tnewTail := head\n\tfor i := 1; i < newTailPosition; i++ {\n\t\tnewTail = newTail.Next\n\t}\n\n\tnewHead := newTail.Next\n\tnewTail.Next = nil\n\tlistTail.Next = head\n\treturn newHead\n}\n\nfunc abs(k int) int {\n\tif k > 0 {\n\t\treturn k\n\t}\n\treturn -k\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc newLinkedList(n int) *LinkedList { return &LinkedList{Value: n} }\n\nfunc linkedListToArray(head *LinkedList) []int {\n\tarray := []int{}\n\tcurrent := head\n\tfor current != nil {\n\t\tarray = append(array, current.Value)\n\t\tcurrent = current.Next\n\t}\n\treturn array\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\thead := newLinkedList(0)\n\thead.Next = newLinkedList(1)\n\thead.Next.Next = newLinkedList(2)\n\thead.Next.Next.Next = newLinkedList(3)\n\thead.Next.Next.Next.Next = newLinkedList(4)\n\thead.Next.Next.Next.Next.Next = newLinkedList(5)\n\tresult := ShiftLinkedList(head, 2)\n\tarray := linkedListToArray(result)\n\n\texpected := []int{4, 5, 0, 1, 2, 3}\n\trequire.Equal(t, expected, array)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc newLinkedList(n int) *LinkedList { return &LinkedList{Value: n} }\n\nfunc linkedListToArray(head *LinkedList) []int {\n\tarray := []int{}\n\tcurrent := head\n\tfor current != nil {\n\t\tarray = append(array, current.Value)\n\t\tcurrent = current.Next\n\t}\n\treturn array\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\thead := newLinkedList(0)\n\thead.Next = newLinkedList(1)\n\thead.Next.Next = newLinkedList(2)\n\thead.Next.Next.Next = newLinkedList(3)\n\thead.Next.Next.Next.Next = newLinkedList(4)\n\thead.Next.Next.Next.Next.Next = newLinkedList(5)\n\tresult := ShiftLinkedList(head, 2)\n\tarray := linkedListToArray(result)\n\n\texpected := []int{4, 5, 0, 1, 2, 3}\n\trequire.Equal(t, expected, array)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static LinkedList shiftLinkedList(LinkedList head, int k) {\n    // Write your code here.\n    return null;\n  }\n\n  static class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      next = null;\n    }\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the number of nodes in the Linked List\n  public static LinkedList shiftLinkedList(LinkedList head, int k) {\n    int listLength = 1;\n    LinkedList listTail = head;\n    while (listTail.next != null) {\n      listTail = listTail.next;\n      listLength++;\n    }\n\n    int offset = Math.abs(k) % listLength;\n    if (offset == 0) return head;\n    int newTailPosition = k > 0 ? listLength - offset : offset;\n    LinkedList newTail = head;\n    for (int i = 1; i < newTailPosition; i++) {\n      newTail = newTail.next;\n    }\n\n    LinkedList newHead = newTail.next;\n    newTail.next = null;\n    listTail.next = head;\n    return newHead;\n  }\n\n  static class LinkedList {\n    public int value;\n    public LinkedList next;\n\n    public LinkedList(int value) {\n      this.value = value;\n      next = null;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  public List<Integer> linkedListToArray(Program.LinkedList head) {\n    var array = new ArrayList<Integer>();\n    var current = head;\n    while (current != null) {\n      array.add(current.value);\n      current = current.next;\n    }\n    return array;\n  }\n\n  @Test\n  public void TestCase1() {\n    var head = new Program.LinkedList(0);\n    head.next = new Program.LinkedList(1);\n    head.next.next = new Program.LinkedList(2);\n    head.next.next.next = new Program.LinkedList(3);\n    head.next.next.next.next = new Program.LinkedList(4);\n    head.next.next.next.next.next = new Program.LinkedList(5);\n    var result = Program.shiftLinkedList(head, 2);\n    var array = this.linkedListToArray(result);\n\n    var expected = Arrays.asList(new Integer[] {4, 5, 0, 1, 2, 3});\n    Utils.assertTrue(expected.equals(array));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  public List<Integer> linkedListToArray(Program.LinkedList head) {\n    var array = new ArrayList<Integer>();\n    var current = head;\n    while (current != null) {\n      array.add(current.value);\n      current = current.next;\n    }\n    return array;\n  }\n\n  @Test\n  public void TestCase1() {\n    var head = new Program.LinkedList(0);\n    head.next = new Program.LinkedList(1);\n    head.next.next = new Program.LinkedList(2);\n    head.next.next.next = new Program.LinkedList(3);\n    head.next.next.next.next = new Program.LinkedList(4);\n    head.next.next.next.next.next = new Program.LinkedList(5);\n    var result = Program.shiftLinkedList(head, 2);\n    var array = this.linkedListToArray(result);\n\n    var expected = Arrays.asList(new Integer[] {4, 5, 0, 1, 2, 3});\n    Utils.assertTrue(expected.equals(array));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is the class of the input linked list.\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nfunction shiftLinkedList(head, k) {\n  // Write your code here.\n}\n\n// Do not edit the lines below.\nexports.LinkedList = LinkedList;\nexports.shiftLinkedList = shiftLinkedList;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is the class of the input linked list.\nclass LinkedList {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the Linked List\nfunction shiftLinkedList(head, k) {\n  let listLength = 1;\n  let listTail = head;\n  while (listTail.next !== null) {\n    listTail = listTail.next;\n    listLength++;\n  }\n\n  const offset = Math.abs(k) % listLength;\n  if (offset === 0) return head;\n\n  const newTailPosition = k > 0 ? listLength - offset : offset;\n  let newTail = head;\n  for (let i = 1; i < newTailPosition; i++) {\n    newTail = newTail.next;\n  }\n\n  const newHead = newTail.next;\n  newTail.next = null;\n  listTail.next = head;\n  return newHead;\n}\n\nexports.LinkedList = LinkedList;\nexports.shiftLinkedList = shiftLinkedList;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nconst {LinkedList} = program;\n\nfunction linkedListToArray(head) {\n  const array = [];\n  let current = head;\n  while (current) {\n    array.push(current.value);\n    current = current.next;\n  }\n  return array;\n}\n\nit('Test Case #1', function () {\n  const head = new LinkedList(0);\n  head.next = new LinkedList(1);\n  head.next.next = new LinkedList(2);\n  head.next.next.next = new LinkedList(3);\n  head.next.next.next.next = new LinkedList(4);\n  head.next.next.next.next.next = new LinkedList(5);\n  const result = program.shiftLinkedList(head, 2);\n  const array = linkedListToArray(result);\n\n  var expected = [4, 5, 0, 1, 2, 3];\n  chai.expect(array).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nconst {LinkedList} = program;\n\nfunction linkedListToArray(head) {\n  const array = [];\n  let current = head;\n  while (current) {\n    array.push(current.value);\n    current = current.next;\n  }\n  return array;\n}\n\nit('Test Case #1', function () {\n  const head = new LinkedList(0);\n  head.next = new LinkedList(1);\n  head.next.next = new LinkedList(2);\n  head.next.next.next = new LinkedList(3);\n  head.next.next.next.next = new LinkedList(4);\n  head.next.next.next.next.next = new LinkedList(5);\n  const result = program.shiftLinkedList(head, 2);\n  const array = linkedListToArray(result);\n\n  var expected = [4, 5, 0, 1, 2, 3];\n  chai.expect(array).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\nfun shiftLinkedList(head: LinkedList, k: Int): LinkedList {\n    // Write your code here.\n    return head\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\n\nopen class LinkedList(value: Int) {\n    var value = value\n    var next: LinkedList? = null\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the Linked List\nfun shiftLinkedList(head: LinkedList, k: Int): LinkedList {\n    var listLength = 1\n    var listTail = head\n    while (listTail.next != null) {\n        listTail = listTail.next!!\n        listLength++\n    }\n\n    val offset = abs(k) % listLength\n    if (offset == 0) return head\n    val newTailPosition = if (k > 0) listLength - offset else offset\n    var newTail = head\n    for (i in 1 until newTailPosition) {\n        newTail = newTail.next!!\n    }\n\n    val newHead = newTail.next!!\n    newTail.next = null\n    listTail.next = head\n    return newHead\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.LinkedList as LinkedList\nimport com.algoexpert.program.shiftLinkedList as shiftLinkedList\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        var linkedList = LinkedList(0)\n        addAll(linkedList, listOf(1, 2, 3, 4, 5))\n\n        var result = getNodeValuesInArray(shiftLinkedList(linkedList, 2))\n        var expected = listOf(4, 5, 0, 1, 2, 3)\n\n        assert(result == expected)\n    }\n}\n\nfun addAll(ll: LinkedList, values: List<Int>) {\n    var current = ll\n    for (value in values) {\n        val newLL = LinkedList(value)\n        current.next = newLL\n        current = newLL\n    }\n}\n\nfun getNodeValuesInArray(linkedList: LinkedList): List<Int> {\n    var values = mutableListOf<Int>()\n    var current: LinkedList? = linkedList\n    while (current != null) {\n        values.add(current.value)\n        current = current.next\n    }\n    return values\n}\n",
      "unitTests": "import com.algoexpert.program.LinkedList as LinkedList\nimport com.algoexpert.program.shiftLinkedList as shiftLinkedList\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        var linkedList = LinkedList(0)\n        addAll(linkedList, listOf(1, 2, 3, 4, 5))\n\n        var result = getNodeValuesInArray(shiftLinkedList(linkedList, 2))\n        var expected = listOf(4, 5, 0, 1, 2, 3)\n\n        assert(result == expected)\n    }\n}\n\nfun addAll(ll: LinkedList, values: List<Int>) {\n    var current = ll\n    for (value in values) {\n        val newLL = LinkedList(value)\n        current.next = newLL\n        current = newLL\n    }\n}\n\nfun getNodeValuesInArray(linkedList: LinkedList): List<Int> {\n    var values = mutableListOf<Int>()\n    var current: LinkedList? = linkedList\n    while (current != null) {\n        values.add(current.value)\n        current = current.next\n    }\n    return values\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is the class of the input linked list.\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\ndef shiftLinkedList(head, k):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is the class of the input linked list.\nclass LinkedList:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\n# O(n) time | O(1) space - where n is the number of nodes in the Linked List\ndef shiftLinkedList(head, k):\n    listLength = 1\n    listTail = head\n    while listTail.next is not None:\n        listTail = listTail.next\n        listLength += 1\n\n    offset = abs(k) % listLength\n    if offset == 0:\n        return head\n\n    newTailPosition = listLength - offset if k > 0 else offset\n    newTail = head\n    for i in range(1, newTailPosition):\n        newTail = newTail.next\n\n    newHead = newTail.next\n    newTail.next = None\n    listTail.next = head\n    return newHead\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\ndef linkedListToArray(head):\n    array = []\n    current = head\n    while current is not None:\n        array.append(current.value)\n        current = current.next\n    return array\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        head = program.LinkedList(0)\n        head.next = program.LinkedList(1)\n        head.next.next = program.LinkedList(2)\n        head.next.next.next = program.LinkedList(3)\n        head.next.next.next.next = program.LinkedList(4)\n        head.next.next.next.next.next = program.LinkedList(5)\n        result = program.shiftLinkedList(head, 2)\n        array = linkedListToArray(result)\n\n        expected = [4, 5, 0, 1, 2, 3]\n        self.assertEqual(expected, array)\n",
      "unitTests": "import program\nimport unittest\n\n\ndef linkedListToArray(head):\n    array = []\n    current = head\n    while current is not None:\n        array.append(current.value)\n        current = current.next\n    return array\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        head = program.LinkedList(0)\n        head.next = program.LinkedList(1)\n        head.next.next = program.LinkedList(2)\n        head.next.next.next = program.LinkedList(3)\n        head.next.next.next.next = program.LinkedList(4)\n        head.next.next.next.next.next = program.LinkedList(5)\n        result = program.shiftLinkedList(head, 2)\n        array = linkedListToArray(result)\n\n        expected = [4, 5, 0, 1, 2, 3]\n        self.assertEqual(expected, array)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "# This is an input struct. Do not edit.\nclass LinkedList\n  attr_accessor :value\n  attr_accessor :next\n\n  def initialize(value)\n    @value = value\n    @next = nil\n  end\nend\n\nclass Program\n  def shiftLinkedList(linkedList, k)\n    # Write your code here.\n    return nil\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass LinkedList\n  attr_accessor :value\n  attr_accessor :next\n\n  def initialize(value)\n    @value = value\n    @next = nil\n  end\nend\n\nclass Program\n  def shiftLinkedList(linkedList, k)\n    # Write your code here.\n    return nil\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.shiftLinkedList\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.shiftLinkedList\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  class LinkedList {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n      next = nil\n    }\n  }\n\n  static func shiftLinkedList(_ head: LinkedList, _ k: Int) -> LinkedList? {\n    // Write your code here.\n    return nil\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  class LinkedList {\n    var value: Int\n    var next: LinkedList?\n\n    init(value: Int) {\n      self.value = value\n      next = nil\n    }\n  }\n\n  // O(n) time | O(1) space - where n is the number of nodes in the Linked List\n  static func shiftLinkedList(_ head: LinkedList, _ k: Int) -> LinkedList? {\n    var listLength = 1\n    var listTail = head\n\n    while let next = listTail.next {\n      listTail = next\n      listLength += 1\n    }\n\n    var offset = abs(k) % listLength\n    if offset == 0 {\n      return head\n    }\n\n    var newTailPosition = listLength - offset\n    if k <= 0 {\n      newTailPosition = offset\n    }\n\n    var newTail: LinkedList = head\n    for i in 1 ..< newTailPosition {\n      newTail = newTail.next!\n    }\n\n    var newHead = newTail.next\n    newTail.next = nil\n    listTail.next = head\n    return newHead\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nfunc linkedListToArray(_ head: Program.LinkedList?) -> [Int] {\n  var array = [Int]()\n  var current = head\n  while let c = current {\n    array.append(c.value)\n    current = c.next\n  }\n  return array\n}\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let head = Program.LinkedList(value: 0)\n      head.next = Program.LinkedList(value: 1)\n      head.next!.next = Program.LinkedList(value: 2)\n      head.next!.next!.next = Program.LinkedList(value: 3)\n      head.next!.next!.next!.next = Program.LinkedList(value: 4)\n      head.next!.next!.next!.next!.next = Program.LinkedList(value: 5)\n      let result = Program.shiftLinkedList(head, 2)\n      let array = linkedListToArray(result)\n\n      let expected = [4, 5, 0, 1, 2, 3]\n      try assertEqual(expected, array)\n    }\n  }\n}\n",
      "unitTests": "func linkedListToArray(_ head: Program.LinkedList?) -> [Int] {\n  var array = [Int]()\n  var current = head\n  while let c = current {\n    array.append(c.value)\n    current = c.next\n  }\n  return array\n}\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let head = Program.LinkedList(value: 0)\n      head.next = Program.LinkedList(value: 1)\n      head.next!.next = Program.LinkedList(value: 2)\n      head.next!.next!.next = Program.LinkedList(value: 3)\n      head.next!.next!.next!.next = Program.LinkedList(value: 4)\n      head.next!.next!.next!.next!.next = Program.LinkedList(value: 5)\n      let result = Program.shiftLinkedList(head, 2)\n      let array = linkedListToArray(result)\n\n      let expected = [4, 5, 0, 1, 2, 3]\n      try assertEqual(expected, array)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is the class of the input linked list.\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nexport function shiftLinkedList(head: LinkedList, k: number) {\n  // Write your code here.\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is the class of the input linked list.\nexport class LinkedList {\n  value: number;\n  next: LinkedList | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\n// O(n) time | O(1) space - where n is the number of nodes in the Linked List\nexport function shiftLinkedList(head: LinkedList, k: number) {\n  let listLength = 1;\n  let listTail: LinkedList = head;\n  while (listTail.next !== null) {\n    listTail = listTail.next;\n    listLength++;\n  }\n\n  const offset = Math.abs(k) % listLength;\n  if (offset === 0) return head;\n\n  const newTailPosition = k > 0 ? listLength - offset : offset;\n  let newTail: LinkedList | null = head;\n  for (let i = 1; i < newTailPosition; i++) {\n    newTail = newTail!.next;\n  }\n\n  const newHead = newTail!.next;\n  newTail!.next = null;\n  listTail.next = head;\n  return newHead;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\ntype LinkedList = program.LinkedList;\nconst {LinkedList} = program;\n\nfunction linkedListToArray(head: LinkedList | null) {\n  const array: number[] = [];\n  let current: LinkedList | null = head;\n  while (current) {\n    array.push(current.value);\n    current = current.next;\n  }\n  return array;\n}\n\nit('Test Case #1', function () {\n  const head = new LinkedList(0);\n  head.next = new LinkedList(1);\n  head.next.next = new LinkedList(2);\n  head.next.next.next = new LinkedList(3);\n  head.next.next.next.next = new LinkedList(4);\n  head.next.next.next.next.next = new LinkedList(5);\n  const result = program.shiftLinkedList(head, 2);\n  const array = linkedListToArray(result);\n\n  var expected = [4, 5, 0, 1, 2, 3];\n  chai.expect(array).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\ntype LinkedList = program.LinkedList;\nconst {LinkedList} = program;\n\nfunction linkedListToArray(head: LinkedList | null) {\n  const array: number[] = [];\n  let current: LinkedList | null = head;\n  while (current) {\n    array.push(current.value);\n    current = current.next;\n  }\n  return array;\n}\n\nit('Test Case #1', function () {\n  const head = new LinkedList(0);\n  head.next = new LinkedList(1);\n  head.next.next = new LinkedList(2);\n  head.next.next.next = new LinkedList(3);\n  head.next.next.next.next = new LinkedList(4);\n  head.next.next.next.next.next = new LinkedList(5);\n  const result = program.shiftLinkedList(head, 2);\n  const array = linkedListToArray(result);\n\n  var expected = [4, 5, 0, 1, 2, 3];\n  chai.expect(array).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "linkedList",
      "example": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      },
      "schema": {
        "description": "A Singly Linked List is represented by a list of <span>nodes</span> and a <span>head</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>next</span> pointers and by the <span>head</span>.\n",
        "properties": {
          "head": {
            "type": "string"
          },
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "next": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "next"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "head",
          "nodes"
        ],
        "type": "object"
      }
    },
    {
      "name": "k",
      "example": 2,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "k": 2,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 0,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 1,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 3,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 4,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 5,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 6,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 8,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 14,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 18,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -1,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -2,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -3,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -4,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -5,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -6,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -8,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -14,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -18,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 2,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "4",
            "value": 1
          },
          {
            "id": "2",
            "next": null,
            "value": 2
          },
          {
            "id": "3",
            "next": "5",
            "value": 3
          },
          {
            "id": "4",
            "next": "3",
            "value": 4
          },
          {
            "id": "5",
            "next": "2",
            "value": 5
          }
        ]
      }
    }
  ],
  "jsonTests": [
    {
      "k": 2,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 0,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 1,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 3,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 4,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 5,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 6,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 8,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 14,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 18,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -1,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -2,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -3,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -4,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -5,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -6,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -8,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -14,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": -18,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "2",
            "value": 1
          },
          {
            "id": "2",
            "next": "3",
            "value": 2
          },
          {
            "id": "3",
            "next": "4",
            "value": 3
          },
          {
            "id": "4",
            "next": "5",
            "value": 4
          },
          {
            "id": "5",
            "next": null,
            "value": 5
          }
        ]
      }
    },
    {
      "k": 2,
      "linkedList": {
        "head": "0",
        "nodes": [
          {
            "id": "0",
            "next": "1",
            "value": 0
          },
          {
            "id": "1",
            "next": "4",
            "value": 1
          },
          {
            "id": "2",
            "next": null,
            "value": 2
          },
          {
            "id": "3",
            "next": "5",
            "value": 3
          },
          {
            "id": "4",
            "next": "3",
            "value": 4
          },
          {
            "id": "5",
            "next": "2",
            "value": 5
          }
        ]
      }
    }
  ],
  "changelog": []
}