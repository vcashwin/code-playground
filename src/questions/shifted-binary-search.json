{
  "uid": "shifted-binary-search",
  "testStrategy": "JSON",
  "name": "Shifted Binary Search",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Searching",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 13560,
    "failureCount": 4099
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "226676392",
    "duration": 0,
    "annotations": [
      {
        "title": "Important Note",
        "content": "The numbers must be distinct. See the notes below video for details.",
        "start": 61,
        "end": 67
      }
    ],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 1100
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a sorted array of distinct integers as well as a target\n  integer. The caveat is that the integers in the array have been shifted by\n  some amount; in other words, they've been moved to the left or to the right by\n  one or more positions. For example, <span>[1, 2, 3, 4]</span> might have\n  turned into <span>[3, 4, 1, 2]</span>.\n</p>\n<p>\n  The function should use a variation of the Binary Search algorithm to\n  determine if the target integer is contained in the array and should return\n  its index if it is, otherwise <span>-1</span>.\n</p>\n<p>\n  If you're unfamiliar with Binary Search, we recommend watching the Conceptual\n  Overview section of the Binary Search question's video explanation before\n  starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [45, 61, 71, 72, 73, 0, 1, 21, 33, 37]\n<span class=\"CodeEditor-promptParameter\">target</span> = 33\n</pre>\n<h3>Sample Output</h3>\n<pre>8</pre>\n</div>",
  "hints": [
    "<p>\nThe Binary Search algorithm involves a left pointer and a right pointer and using those pointers to find the middle number in an array. Unlike with a normal sorted array however, you cannot simply find the middle number of the array and compare it to the target here, because the shift could lead you in the wrong direction. Instead, realize that whenever you find the middle number in the array, the following two scenarios are possible (assuming the middle number is not equal to the target number, in which case you're done): either the left-pointer number is smaller than or equal to the middle number, or it is bigger. Figure out a way to eliminate half of the array depending on the scenario.\n</p>\n",
    "\n<p>\nIn the scenario where the left-pointer number is smaller than or equal to the middle number, two other scenarios can arise: either the target number is smaller than the middle number and greater than or equal to the left-pointer number, or it's not. In the first scenario, the right half of the array can be eliminated; in the second scenario, the left half can be eliminated. Figure out the scenarios that can arise if the left-pointer number is greater than the middle number and apply whatever logic you come up with recursively until you find the target number or until you run out of numbers in the array.\n</p>\n",
    "\n<p>\nCan you implement this algorithm iteratively? Are there any advantages to doing so?\n</p>"
  ],
  "spaceTime": "O(log(n)) time | O(1) space - where n is the length of the input array",
  "notes": "<div class=\"html\">\n<p>\n  The numbers in the input array must be distinct in order for this algorithm to\n  work all the time. The sample array in the video, which has a repeated\n  <span>45</span>, happens to work fine, but this is an exception—not the rule.\n</p>\n<p>\n  To understand why the numbers must be distinct, consider the following inputs:\n</p>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [45, 33, 45, 45, 45]\n<span class=\"CodeEditor-promptParameter\">target</span> = 33\n</pre>\n<p>\n  With these inputs, our first binary-search step would have the following\n  indices:\n</p>\n<pre>\n<span class=\"CodeEditor-promptParameter\">leftIdx</span> = 0 <span class=\"CodeEditor-promptComment\">// 45</span>\n<span class=\"CodeEditor-promptParameter\">middleIdx</span> = 2 <span class=\"CodeEditor-promptComment\">// 45</span>\n<span class=\"CodeEditor-promptParameter\">rightIdx</span> = 4 <span class=\"CodeEditor-promptComment\">// 45</span>\n</pre>\n<p>\n  We would then compare the left <span>45</span> to the middle\n  <span>45</span> and conclude that the left half of the array was sorted, since\n  <span>45 <= 45</span>.\n</p>\n<p>\n  This would be incorrect, since the left subarray\n  <span>[45, 33, 45]</span> clearly isn't sorted.\n</p>\n<p>\n  This would lead our algorithm down the wrong path, and our function would end\n  up returning <span>-1</span>, which would be incorrect.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint shiftedBinarySearch(vector<int> array, int target) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint shiftedBinarySearch(vector<int> array, int target);\nint shiftedBinarySearchHelper(\n  vector<int> array, int target, int left, int right\n);\n\n// O(log(n)) time | O(log(n)) space\nint shiftedBinarySearch(vector<int> array, int target) {\n  return shiftedBinarySearchHelper(array, target, 0, array.size() - 1);\n}\n\nint shiftedBinarySearchHelper(\n  vector<int> array, int target, int left, int right\n) {\n  if (left > right) {\n    return -1;\n  }\n  int middle = (left + right) / 2;\n  int potentialMatch = array[middle];\n  int leftNum = array[left];\n  int rightNum = array[right];\n  if (target == potentialMatch) {\n    return middle;\n  } else if (leftNum <= potentialMatch) {\n    if (target < potentialMatch && target >= leftNum) {\n      return shiftedBinarySearchHelper(array, target, left, middle - 1);\n    } else {\n      return shiftedBinarySearchHelper(array, target, middle + 1, right);\n    }\n  } else {\n    if (target > potentialMatch && target <= rightNum) {\n      return shiftedBinarySearchHelper(array, target, middle + 1, right);\n    } else {\n      return shiftedBinarySearchHelper(array, target, left, middle - 1);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint shiftedBinarySearch(vector<int> array, int target);\nint shiftedBinarySearchHelper(\n  vector<int> array, int target, int left, int right\n);\n\n// O(log(n)) time | O(1) space\nint shiftedBinarySearch(vector<int> array, int target) {\n  return shiftedBinarySearchHelper(array, target, 0, array.size() - 1);\n}\n\nint shiftedBinarySearchHelper(\n  vector<int> array, int target, int left, int right\n) {\n  while (left <= right) {\n    int middle = (left + right) / 2;\n    int potentialMatch = array[middle];\n    int leftNum = array[left];\n    int rightNum = array[right];\n    if (target == potentialMatch) {\n      return middle;\n    } else if (leftNum <= potentialMatch) {\n      if (target < potentialMatch && target >= leftNum) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    } else {\n      if (target > potentialMatch && target <= rightNum) {\n        left = middle + 1;\n      } else {\n        right = middle - 1;\n      }\n    }\n  }\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        shiftedBinarySearch({45, 61, 71, 72, 73, 0, 1, 21, 33, 37}, 33) == 8\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n        shiftedBinarySearch({45, 61, 71, 72, 73, 0, 1, 21, 33, 37}, 33) == 8\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int ShiftedBinarySearch(int[] array, int target) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(log(n)) time | O(log(n)) space\n  public static int ShiftedBinarySearch(int[] array, int target) {\n    return ShiftedBinarySearch(array, target, 0, array.Length - 1);\n  }\n\n  public static int ShiftedBinarySearch(\n    int[] array, int target, int left, int right\n  ) {\n    if (left > right) {\n      return -1;\n    }\n    int middle = (left + right) / 2;\n    int potentialMatch = array[middle];\n    int leftNum = array[left];\n    int rightNum = array[right];\n    if (target == potentialMatch) {\n      return middle;\n    } else if (leftNum <= potentialMatch) {\n      if (target < potentialMatch && target >= leftNum) {\n        return ShiftedBinarySearch(array, target, left, middle - 1);\n      } else {\n        return ShiftedBinarySearch(array, target, middle + 1, right);\n      }\n    } else {\n      if (target > potentialMatch && target <= rightNum) {\n        return ShiftedBinarySearch(array, target, middle + 1, right);\n      } else {\n        return ShiftedBinarySearch(array, target, left, middle - 1);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(log(n)) time | O(1) space\n  public static int ShiftedBinarySearch(int[] array, int target) {\n    return ShiftedBinarySearch(array, target, 0, array.Length - 1);\n  }\n\n  public static int ShiftedBinarySearch(\n    int[] array, int target, int left, int right\n  ) {\n    while (left <= right) {\n      int middle = (left + right) / 2;\n      int potentialMatch = array[middle];\n      int leftNum = array[left];\n      int rightNum = array[right];\n      if (target == potentialMatch) {\n        return middle;\n      } else if (leftNum <= potentialMatch) {\n        if (target < potentialMatch && target >= leftNum) {\n          right = middle - 1;\n        } else {\n          left = middle + 1;\n        }\n      } else {\n        if (target > potentialMatch && target <= rightNum) {\n          left = middle + 1;\n        } else {\n          right = middle - 1;\n        }\n      }\n    }\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.ShiftedBinarySearch(\n        new int[] { 45, 61, 71, 72, 73, 0, 1, 21, 33, 37 }, 33\n      ) == 8\n    );\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(\n      Program.ShiftedBinarySearch(\n        new int[] { 45, 61, 71, 72, 73, 0, 1, 21, 33, 37 }, 33\n      ) == 8\n    );\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ShiftedBinarySearch(array []int, target int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(log(n)) time | O(log(n)) space\nfunc ShiftedBinarySearch(array []int, target int) int {\n\treturn helper(array, target, 0, len(array)-1)\n}\n\nfunc helper(array []int, target int, left int, right int) int {\n\tif left > right {\n\t\treturn -1\n\t}\n\tmiddle := (left + right) / 2\n\tpotentialMatch := array[middle]\n\tleftNum, rightNum := array[left], array[right]\n\tnewleft, newright := middle+1, right\n\tif target == potentialMatch {\n\t\treturn middle\n\t} else if leftNum <= potentialMatch {\n\t\tif target < potentialMatch && target >= leftNum {\n\t\t\tnewleft, newright = left, middle-1\n\t\t}\n\t} else {\n\t\tif !(target > potentialMatch && target <= rightNum) {\n\t\t\tnewleft, newright = left, middle-1\n\t\t}\n\t}\n\treturn helper(array, target, newleft, newright)\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(log(n)) time | O(1) space\nfunc ShiftedBinarySearch(array []int, target int) int {\n\treturn helper(array, target, 0, len(array)-1)\n}\n\nfunc helper(array []int, target int, left int, right int) int {\n\tfor left <= right {\n\t\tmiddle := (left + right) / 2\n\t\tpotentialMatch := array[middle]\n\t\tleftnum, rightnum := array[left], array[right]\n\t\tif target == potentialMatch {\n\t\t\treturn middle\n\t\t} else if leftnum <= potentialMatch {\n\t\t\tif target < potentialMatch && target >= leftnum {\n\t\t\t\tright = middle - 1\n\t\t\t} else {\n\t\t\t\tleft = middle + 1\n\t\t\t}\n\t\t} else {\n\t\t\tif target > potentialMatch && target <= rightnum {\n\t\t\t\tleft = middle + 1\n\t\t\t} else {\n\t\t\t\tright = middle - 1\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 8\n\toutput := ShiftedBinarySearch([]int{45, 61, 71, 72, 73, 0, 1, 21, 33, 37}, 33)\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 8\n\toutput := ShiftedBinarySearch([]int{45, 61, 71, 72, 73, 0, 1, 21, 33, 37}, 33)\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int shiftedBinarySearch(int[] array, int target) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(log(n)) space\n  public static int shiftedBinarySearch(int[] array, int target) {\n    return shiftedBinarySearch(array, target, 0, array.length - 1);\n  }\n\n  public static int shiftedBinarySearch(\n    int[] array, int target, int left, int right\n  ) {\n    if (left > right) {\n      return -1;\n    }\n    int middle = (left + right) / 2;\n    int potentialMatch = array[middle];\n    int leftNum = array[left];\n    int rightNum = array[right];\n    if (target == potentialMatch) {\n      return middle;\n    } else if (leftNum <= potentialMatch) {\n      if (target < potentialMatch && target >= leftNum) {\n        return shiftedBinarySearch(array, target, left, middle - 1);\n      } else {\n        return shiftedBinarySearch(array, target, middle + 1, right);\n      }\n    } else {\n      if (target > potentialMatch && target <= rightNum) {\n        return shiftedBinarySearch(array, target, middle + 1, right);\n      } else {\n        return shiftedBinarySearch(array, target, left, middle - 1);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(1) space\n  public static int shiftedBinarySearch(int[] array, int target) {\n    return shiftedBinarySearch(array, target, 0, array.length - 1);\n  }\n\n  public static int shiftedBinarySearch(\n    int[] array, int target, int left, int right\n  ) {\n    while (left <= right) {\n      int middle = (left + right) / 2;\n      int potentialMatch = array[middle];\n      int leftNum = array[left];\n      int rightNum = array[right];\n      if (target == potentialMatch) {\n        return middle;\n      } else if (leftNum <= potentialMatch) {\n        if (target < potentialMatch && target >= leftNum) {\n          right = middle - 1;\n        } else {\n          left = middle + 1;\n        }\n      } else {\n        if (target > potentialMatch && target <= rightNum) {\n          left = middle + 1;\n        } else {\n          right = middle - 1;\n        }\n      }\n    }\n    return -1;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.shiftedBinarySearch(\n        new int[] {45, 61, 71, 72, 73, 0, 1, 21, 33, 37}, 33\n      )\n      == 8\n    );\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(\n      Program.shiftedBinarySearch(\n        new int[] {45, 61, 71, 72, 73, 0, 1, 21, 33, 37}, 33\n      )\n      == 8\n    );\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function shiftedBinarySearch(array, target) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.shiftedBinarySearch = shiftedBinarySearch;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(log(n)) space\nfunction shiftedBinarySearch(array, target) {\n  return shiftedBinarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction shiftedBinarySearchHelper(array, target, left, right) {\n  if (left > right) return -1;\n  const middle = Math.floor((left + right) / 2);\n  const potentialMatch = array[middle];\n  const leftNum = array[left];\n  const rightNum = array[right];\n  if (target === potentialMatch) {\n    return middle;\n  } else if (leftNum <= potentialMatch) {\n    if (target < potentialMatch && target >= leftNum) {\n      return shiftedBinarySearchHelper(array, target, left, middle - 1);\n    } else {\n      return shiftedBinarySearchHelper(array, target, middle + 1, right);\n    }\n  } else {\n    if (target > potentialMatch && target <= rightNum) {\n      return shiftedBinarySearchHelper(array, target, middle + 1, right);\n    } else {\n      return shiftedBinarySearchHelper(array, target, left, middle - 1);\n    }\n  }\n}\n\nexports.shiftedBinarySearch = shiftedBinarySearch;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(1) space\nfunction shiftedBinarySearch(array, target) {\n  return shiftedBinarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction shiftedBinarySearchHelper(array, target, left, right) {\n  while (left <= right) {\n    const middle = Math.floor((left + right) / 2);\n    const potentialMatch = array[middle];\n    const leftNum = array[left];\n    const rightNum = array[right];\n    if (target === potentialMatch) {\n      return middle;\n    } else if (leftNum <= potentialMatch) {\n      if (target < potentialMatch && target >= leftNum) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    } else {\n      if (target > potentialMatch && target <= rightNum) {\n        left = middle + 1;\n      } else {\n        right = middle - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nexports.shiftedBinarySearch = shiftedBinarySearch;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33))\n    .to.deep.equal(8);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33))\n    .to.deep.equal(8);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun shiftedBinarySearch(array: List<Int>, target: Int): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(log(n)) time | O(log(n)) space\nfun shiftedBinarySearch(array: List<Int>, target: Int): Int {\n    return shiftedBinarySearch(array, target, 0, array.size - 1)\n}\n\nfun shiftedBinarySearch(array: List<Int>, target: Int, left: Int, right: Int): Int {\n    if (left > right) {\n        return -1\n    }\n    val middle = (left + right) / 2\n    val potentialMatch = array[middle]\n    val leftNum = array[left]\n    val rightNum = array[right]\n    if (target == potentialMatch) {\n        return middle\n    } else if (leftNum <= potentialMatch) {\n        if (target < potentialMatch && target >= leftNum) {\n            return shiftedBinarySearch(array, target, left, middle - 1)\n        } else {\n            return shiftedBinarySearch(array, target, middle + 1, right)\n        }\n    } else {\n        if (target > potentialMatch && target <= rightNum) {\n            return shiftedBinarySearch(array, target, middle + 1, right)\n        } else {\n            return shiftedBinarySearch(array, target, left, middle - 1)\n        }\n    }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(log(n)) time | O(1) space\nfun shiftedBinarySearch(array: List<Int>, target: Int): Int {\n    return shiftedBinarySearch(array, target, 0, array.size - 1)\n}\n\nfun shiftedBinarySearch(array: List<Int>, target: Int, leftStart: Int, rightStart: Int): Int {\n    var left = leftStart\n    var right = rightStart\n    while (left <= right) {\n        val middle = (left + right) / 2\n        val potentialMatch = array[middle]\n        val leftNum = array[left]\n        val rightNum = array[right]\n        if (target == potentialMatch) {\n            return middle\n        } else if (leftNum <= potentialMatch) {\n            if (target < potentialMatch && target >= leftNum) {\n                right = middle - 1\n            } else {\n                left = middle + 1\n            }\n        } else {\n            if (target > potentialMatch && target <= rightNum) {\n                left = middle + 1\n            } else {\n                right = middle - 1\n            }\n        }\n    }\n    return -1\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.shiftedBinarySearch\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(45, 61, 71, 72, 73, 0, 1, 21, 33, 37)\n        assert(shiftedBinarySearch(input, 33) == 8)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.shiftedBinarySearch\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(45, 61, 71, 72, 73, 0, 1, 21, 33, 37)\n        assert(shiftedBinarySearch(input, 33) == 8)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def shiftedBinarySearch(array, target):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(log(n)) time | O(log(n)) space\ndef shiftedBinarySearch(array, target):\n    return shiftedBinarySearchHelper(array, target, 0, len(array) - 1)\n\n\ndef shiftedBinarySearchHelper(array, target, left, right):\n    if left > right:\n        return -1\n    middle = (left + right) // 2\n    potentialMatch = array[middle]\n    leftNum = array[left]\n    rightNum = array[right]\n    if target == potentialMatch:\n        return middle\n    elif leftNum <= potentialMatch:\n        if target < potentialMatch and target >= leftNum:\n            return shiftedBinarySearchHelper(array, target, left, middle - 1)\n        else:\n            return shiftedBinarySearchHelper(array, target, middle + 1, right)\n    else:\n        if target > potentialMatch and target <= rightNum:\n            return shiftedBinarySearchHelper(array, target, middle + 1, right)\n        else:\n            return shiftedBinarySearchHelper(array, target, left, middle - 1)\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(log(n)) time | O(1) space\ndef shiftedBinarySearch(array, target):\n    return shiftedBinarySearchHelper(array, target, 0, len(array) - 1)\n\n\ndef shiftedBinarySearchHelper(array, target, left, right):\n    while left <= right:\n        middle = (left + right) // 2\n        potentialMatch = array[middle]\n        leftNum = array[left]\n        rightNum = array[right]\n        if target == potentialMatch:\n            return middle\n        elif leftNum <= potentialMatch:\n            if target < potentialMatch and target >= leftNum:\n                right = middle - 1\n            else:\n                left = middle + 1\n        else:\n            if target > potentialMatch and target <= rightNum:\n                left = middle + 1\n            else:\n                right = middle - 1\n    return -1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33), 8)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33), 8)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def shiftedBinarySearch(array, target)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def shiftedBinarySearch(array, target)\n    # Write your code here.\n    return -1\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def shiftedBinarySearch(array, target)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.shiftedBinarySearch\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.shiftedBinarySearch\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func shiftedBinarySearch(_ array: [Int], _ target: Int) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(log(n)) space\n  func shiftedBinarySearch(_ array: [Int], _ target: Int) -> Int {\n    return shiftedBinarySearchHelper(array, target, 0, array.count - 1)\n  }\n\n  func shiftedBinarySearchHelper(_ array: [Int], _ target: Int, _ leftPointer: Int, _ rightPointer: Int) -> Int {\n    if leftPointer > rightPointer {\n      return -1\n    }\n\n    let middle = (leftPointer + rightPointer) / 2\n    let potentialMatch = array[middle]\n    let leftNumber = array[leftPointer]\n    let rightNumber = array[rightPointer]\n\n    if target == potentialMatch {\n      return middle\n    } else if leftNumber < potentialMatch {\n      if target < potentialMatch, target >= leftNumber {\n        return shiftedBinarySearchHelper(array, target, leftPointer, middle - 1)\n      } else {\n        return shiftedBinarySearchHelper(array, target, middle + 1, rightPointer)\n      }\n    } else {\n      if target <= rightNumber, target > potentialMatch {\n        return shiftedBinarySearchHelper(array, target, middle + 1, rightPointer)\n      } else {\n        return shiftedBinarySearchHelper(array, target, leftPointer, middle - 1)\n      }\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(log(n)) time | O(1) space\n  func shiftedBinarySearch(_ array: [Int], _ target: Int) -> Int {\n    var leftPointer = 0\n    var rightPointer = array.count - 1\n\n    return shiftedBinarySearchHelper(array, target, &leftPointer, &rightPointer)\n  }\n\n  func shiftedBinarySearchHelper(_ array: [Int], _ target: Int, _ leftPointer: inout Int, _ rightPointer: inout Int) -> Int {\n    while leftPointer <= rightPointer {\n      let middle = (leftPointer + rightPointer) / 2\n      let potentialMatch = array[middle]\n      let leftNumber = array[leftPointer]\n      let rightNumber = array[rightPointer]\n\n      if target == potentialMatch {\n        return middle\n      } else if leftNumber < potentialMatch {\n        if target < potentialMatch, target >= leftNumber {\n          rightPointer = middle - 1\n        } else {\n          leftPointer = middle + 1\n        }\n      } else {\n        if target <= rightNumber, target > potentialMatch {\n          leftPointer = middle + 1\n        } else {\n          rightPointer = middle - 1\n        }\n      }\n    }\n\n    return -1\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(8, program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(8, program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function shiftedBinarySearch(array: number[], target: number) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(log(n)) space\nexport function shiftedBinarySearch(array: number[], target: number) {\n  return shiftedBinarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction shiftedBinarySearchHelper(\n  array: number[],\n  target: number,\n  left: number,\n  right: number,\n): number {\n  if (left > right) return -1;\n  const middle = Math.floor((left + right) / 2);\n  const potentialMatch = array[middle];\n  const leftNum = array[left];\n  const rightNum = array[right];\n  if (target === potentialMatch) {\n    return middle;\n  } else if (leftNum <= potentialMatch) {\n    if (target < potentialMatch && target >= leftNum) {\n      return shiftedBinarySearchHelper(array, target, left, middle - 1);\n    } else {\n      return shiftedBinarySearchHelper(array, target, middle + 1, right);\n    }\n  } else {\n    if (target > potentialMatch && target <= rightNum) {\n      return shiftedBinarySearchHelper(array, target, middle + 1, right);\n    } else {\n      return shiftedBinarySearchHelper(array, target, left, middle - 1);\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(log(n)) time | O(1) space\nexport function shiftedBinarySearch(array: number[], target: number) {\n  return shiftedBinarySearchHelper(array, target, 0, array.length - 1);\n}\n\nfunction shiftedBinarySearchHelper(array: number[], target: number, left: number, right: number) {\n  while (left <= right) {\n    const middle = Math.floor((left + right) / 2);\n    const potentialMatch = array[middle];\n    const leftNum = array[left];\n    const rightNum = array[right];\n    if (target === potentialMatch) {\n      return middle;\n    } else if (leftNum <= potentialMatch) {\n      if (target < potentialMatch && target >= leftNum) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    } else {\n      if (target > potentialMatch && target <= rightNum) {\n        left = middle + 1;\n      } else {\n        right = middle - 1;\n      }\n    }\n  }\n  return -1;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33))\n    .to.deep.equal(8);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.shiftedBinarySearch([45, 61, 71, 72, 73, 0, 1, 21, 33, 37], 33))\n    .to.deep.equal(8);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    {
      "name": "target",
      "example": 33,
      "schema": {
        "type": "integer"
      }
    }
  ],
  "tests": [
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 33
    },
    {
      "array": [
        5,
        23,
        111,
        1
      ],
      "target": 111
    },
    {
      "array": [
        111,
        1,
        5,
        23
      ],
      "target": 5
    },
    {
      "array": [
        23,
        111,
        1,
        5
      ],
      "target": 35
    },
    {
      "array": [
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37,
        45
      ],
      "target": 33
    },
    {
      "array": [
        72,
        73,
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71
      ],
      "target": 72
    },
    {
      "array": [
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37,
        45,
        61
      ],
      "target": 73
    },
    {
      "array": [
        73,
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72
      ],
      "target": 70
    },
    {
      "array": [
        33,
        37,
        45,
        61,
        71,
        72,
        73,
        355,
        0,
        1,
        21
      ],
      "target": 355
    },
    {
      "array": [
        33,
        37,
        45,
        61,
        71,
        72,
        73,
        355,
        0,
        1,
        21
      ],
      "target": 354
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 45
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 61
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 71
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 72
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 73
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 0
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 1
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 21
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 37
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 38
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 0
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 1
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 21
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 33
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 37
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 45
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 61
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 71
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 72
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 73
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 38
    }
  ],
  "jsonTests": [
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 33
    },
    {
      "array": [
        5,
        23,
        111,
        1
      ],
      "target": 111
    },
    {
      "array": [
        111,
        1,
        5,
        23
      ],
      "target": 5
    },
    {
      "array": [
        23,
        111,
        1,
        5
      ],
      "target": 35
    },
    {
      "array": [
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37,
        45
      ],
      "target": 33
    },
    {
      "array": [
        72,
        73,
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71
      ],
      "target": 72
    },
    {
      "array": [
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37,
        45,
        61
      ],
      "target": 73
    },
    {
      "array": [
        73,
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72
      ],
      "target": 70
    },
    {
      "array": [
        33,
        37,
        45,
        61,
        71,
        72,
        73,
        355,
        0,
        1,
        21
      ],
      "target": 355
    },
    {
      "array": [
        33,
        37,
        45,
        61,
        71,
        72,
        73,
        355,
        0,
        1,
        21
      ],
      "target": 354
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 45
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 61
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 71
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 72
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 73
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 0
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 1
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 21
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 37
    },
    {
      "array": [
        45,
        61,
        71,
        72,
        73,
        0,
        1,
        21,
        33,
        37
      ],
      "target": 38
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 0
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 1
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 21
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 33
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 37
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 45
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 61
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 71
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 72
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 73
    },
    {
      "array": [
        0,
        1,
        21,
        33,
        37,
        45,
        61,
        71,
        72,
        73
      ],
      "target": 38
    }
  ],
  "changelog": []
}