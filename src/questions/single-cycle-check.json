{
  "uid": "single-cycle-check",
  "testStrategy": "JSON",
  "name": "Single Cycle Check",
  "version": 0,
  "releaseDate": "2019-05-04T00:00:00Z",
  "category": "Graphs",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 35877,
    "failureCount": 14149
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "330773483",
    "duration": 0,
    "annotations": [
      {
        "title": "Exception",
        "content": "In Python, nextIdx will always be positive. See notes below video.",
        "start": 1229,
        "end": 1235
      }
    ],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 727
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given an array of integers where each integer represents a jump of its\n  value in the array. For instance, the integer <span>2</span> represents a jump\n  of two indices forward in the array; the integer <span>-3</span> represents a\n  jump of three indices backward in the array.\n</p>\n<p>\n  If a jump spills past the array's bounds, it wraps over to the other side. For\n  instance, a jump of <span>-1</span> at index <span>0</span> brings us to the last index in\n  the array. Similarly, a jump of <span>1</span> at the last index in the array brings us to\n  index <span>0</span>.\n</p>\n<p>\n  Write a function that returns a boolean representing whether the jumps in the\n  array form a single cycle. A single cycle occurs if, starting at any index in\n  the array and following the jumps, every element in the array is visited\n  exactly once before landing back on the starting index.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [2, 3, 1, -4, -4, 2]\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n</div>",
  "hints": [
    "<p>\nIn order to check if the input array has a single cycle, you have to jump through all of the elements in the array. Could you keep a counter, jump through elements in the array, and stop once you've jumped through as many elements as are contained in the array?\n</p>\n",
    "\n<p>\nAssume the input array has length n. If you start at index 0 and jump through n elements, what are the simplest conditions that you can check to see if the array doesn't have a single cycle?\n</p>\n",
    "\n<p>\nGiven Hint #2, there are 2 conditions that need to be met for the input array to have a single cycle. First, the starting element (in this case, the element at index 0) cannot be jumped through more than once, at the very beginning, so long as you haven't jumped through all of the other elements in the array. Second, the (n + 1)th element you jump through, where n is the length of the array, must be the first element you visited: the element at index 0 in this case.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "<div class=\"html\">\n<p>\n  In the video explanation of this question, we explain that we need to handle\n  negative values for the <span>nextIdx</span> calculated in our helper method.\n</p>\n<pre>\nnextIdx = (currentIdx + jump) % len(array)\nreturn nextIdx if nextIdx >= 0 else nextIdx + len(array)\n</pre>\n<p>\n  In most programming languages, this is necessary because, if\n  <span>currentIdx + jump</span> is negative, then\n  <span>(currentIdx + jump) % len(array)</span> will also be negative.\n</p>\n<p>\n  In Python, however, \"the modulo operator always yields a result with the same\n  sign as its second operand (or zero)\"\n  <a\n    class=\"Link Link--ae\"\n    href=\"https://docs.python.org/3.3/reference/expressions.html#binary-arithmetic-operations\"\n    target=\"_blank\"\n    >[Python Docs]</a\n  >. In other words, in Python, the modulo operation to compute the\n  <span>nextIdx</span> will always return a number with the sign of\n  <span>len(array)</span>, which is naturally positive.\n</p>\n<p>\n  More specifically, the modulo operator in Python behaves as follows when used\n  with a negative first operand:\n</p>\n<pre>\n-x % y == -(x % y) + y\n</pre>\n<p>\n  The Python modulo operator effectively does, by default, what we do in our\n  code to handle negative values.\n</p>\n<p>\n  Thus, in Python, we can just return\n  <span>(currentIdx + jump) % len(array)</span> for the <span>nextIdx</span>,\n  without needing to handle negative values.\n</p>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool hasSingleCycle(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nint getNextIdx(int currentIdx, vector<int> array);\n\n// O(n) time | O(1) space - where n is the length of the input array\nbool hasSingleCycle(vector<int> array) {\n  int numElementsVisited = 0;\n  int currentIdx = 0;\n  while (numElementsVisited < array.size()) {\n    if (numElementsVisited > 0 && currentIdx == 0) return false;\n    numElementsVisited++;\n    currentIdx = getNextIdx(currentIdx, array);\n  }\n  return currentIdx == 0;\n}\n\nint getNextIdx(int currentIdx, vector<int> array) {\n  int jump = array[currentIdx];\n  int nextIdx = (currentIdx + jump) % (int)array.size();\n  return nextIdx >= 0 ? nextIdx : nextIdx + array.size();\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(hasSingleCycle({2, 3, 1, -4, -4, 2}) == true);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(hasSingleCycle({2, 3, 1, -4, -4, 2}) == true);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static bool HasSingleCycle(int[] array) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npublic class Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public static bool HasSingleCycle(int[] array) {\n    int numElementsVisited = 0;\n    int currentIdx = 0;\n    while (numElementsVisited < array.Length) {\n      if (numElementsVisited > 0 && currentIdx == 0) return false;\n      numElementsVisited++;\n      currentIdx = getNextIdx(currentIdx, array);\n    }\n    return currentIdx == 0;\n  }\n\n  public static int getNextIdx(int currentIdx, int[] array) {\n    int jump = array[currentIdx];\n    int nextIdx = (currentIdx + jump) % array.Length;\n    return nextIdx >= 0 ? nextIdx : nextIdx + array.Length;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.HasSingleCycle(new int[] { 2, 3, 1, -4, -4, 2 }));\n  }\n}\n",
      "unitTests": "public class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Utils.AssertTrue(Program.HasSingleCycle(new int[] { 2, 3, 1, -4, -4, 2 }));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc HasSingleCycle(array []int) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunc HasSingleCycle(array []int) bool {\n\tnumElementsVisited := 0\n\tcurrentIdx := 0\n\tfor numElementsVisited < len(array) {\n\t\tif numElementsVisited > 0 && currentIdx == 0 {\n\t\t\treturn false\n\t\t}\n\t\tnumElementsVisited++\n\t\tcurrentIdx = getNextIdx(currentIdx, array)\n\t}\n\treturn currentIdx == 0\n}\n\nfunc getNextIdx(currentIdx int, array []int) int {\n\tjump := array[currentIdx]\n\tnextIdx := (currentIdx + jump) % len(array)\n\tif nextIdx >= 0 {\n\t\treturn nextIdx\n\t}\n\treturn nextIdx + len(array)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 3, 1, -4, -4, 2}\n\toutput := HasSingleCycle(input)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{2, 3, 1, -4, -4, 2}\n\toutput := HasSingleCycle(input)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static boolean hasSingleCycle(int[] array) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the input array\n  public static boolean hasSingleCycle(int[] array) {\n    int numElementsVisited = 0;\n    int currentIdx = 0;\n    while (numElementsVisited < array.length) {\n      if (numElementsVisited > 0 && currentIdx == 0) return false;\n      numElementsVisited++;\n      currentIdx = getNextIdx(currentIdx, array);\n    }\n    return currentIdx == 0;\n  }\n\n  public static int getNextIdx(int currentIdx, int[] array) {\n    int jump = array[currentIdx];\n    int nextIdx = (currentIdx + jump) % array.length;\n    return nextIdx >= 0 ? nextIdx : nextIdx + array.length;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.hasSingleCycle(new int[] {2, 3, 1, -4, -4, 2}));\n  }\n}\n",
      "unitTests": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.hasSingleCycle(new int[] {2, 3, 1, -4, -4, 2}));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function hasSingleCycle(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.hasSingleCycle = hasSingleCycle;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction hasSingleCycle(array) {\n  let numElementsVisited = 0;\n  let currentIdx = 0;\n  while (numElementsVisited < array.length) {\n    if (numElementsVisited > 0 && currentIdx === 0) return false;\n    numElementsVisited++;\n    currentIdx = getNextIdx(currentIdx, array);\n  }\n  return currentIdx === 0;\n}\n\nfunction getNextIdx(currentIdx, array) {\n  const jump = array[currentIdx];\n  const nextIdx = (currentIdx + jump) % array.length;\n  return nextIdx >= 0 ? nextIdx : nextIdx + array.length;\n}\n\nexports.hasSingleCycle = hasSingleCycle;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.hasSingleCycle([2, 3, 1, -4, -4, 2])).to.deep.equal(true);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.hasSingleCycle([2, 3, 1, -4, -4, 2])).to.deep.equal(true);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun hasSingleCycle(array: List<Int>): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(1) space - where n is the length of the input array\nfun hasSingleCycle(array: List<Int>): Boolean {\n    var numElementsVisited = 0\n    var currentIdx = 0\n    while (numElementsVisited < array.size) {\n        if (numElementsVisited > 0 && currentIdx == 0) return false\n        numElementsVisited++\n        currentIdx = getNextIdx(currentIdx, array)\n    }\n    return currentIdx == 0\n}\n\nfun getNextIdx(currentIdx: Int, array: List<Int>): Int {\n    val jump = array[currentIdx]\n    val nextIdx = (currentIdx + jump) % array.size\n    return if (nextIdx >= 0) nextIdx else nextIdx + array.size\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.hasSingleCycle as hasSingleCycle\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(hasSingleCycle(listOf(2, 3, 1, -4, -4, 2)))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.hasSingleCycle as hasSingleCycle\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        assert(hasSingleCycle(listOf(2, 3, 1, -4, -4, 2)))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def hasSingleCycle(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef hasSingleCycle(array):\n    numElementsVisited = 0\n    currentIdx = 0\n    while numElementsVisited < len(array):\n        if numElementsVisited > 0 and currentIdx == 0:\n            return False\n        numElementsVisited += 1\n        currentIdx = getNextIdx(currentIdx, array)\n    return currentIdx == 0\n\n\ndef getNextIdx(currentIdx, array):\n    jump = array[currentIdx]\n    nextIdx = (currentIdx + jump) % len(array)\n    return nextIdx if nextIdx >= 0 else nextIdx + len(array)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.hasSingleCycle([2, 3, 1, -4, -4, 2]), True)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.hasSingleCycle([2, 3, 1, -4, -4, 2]), True)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def hasSingleCycle(array)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def hasSingleCycle(array)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.hasSingleCycle\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.hasSingleCycle\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func hasSingleCycle(array: [Int]) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  func hasSingleCycle(array: [Int]) -> Bool {\n    var currentIndex = 0\n    var numberOfElementsVisited = 0\n\n    var innerArray = array\n    while numberOfElementsVisited < array.count {\n      if currentIndex == 0, numberOfElementsVisited > 0 {\n        return false\n      }\n\n      numberOfElementsVisited += 1\n      currentIndex = getNextIndex(&currentIndex, array: &innerArray)\n    }\n\n    return currentIndex == 0\n  }\n\n  func getNextIndex(_ currentIndex: inout Int, array: inout [Int]) -> Int {\n    let jump = array[currentIndex]\n    let nextIndex = (jump + currentIndex) % array.count\n\n    if nextIndex >= 0 {\n      return nextIndex\n    } else {\n      return nextIndex + array.count\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.hasSingleCycle(array: [2, 3, 1, -4, -4, 2]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.hasSingleCycle(array: [2, 3, 1, -4, -4, 2]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function hasSingleCycle(array: number[]) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function hasSingleCycle(array: number[]) {\n  let numElementsVisited = 0;\n  let currentIdx = 0;\n  while (numElementsVisited < array.length) {\n    if (numElementsVisited > 0 && currentIdx === 0) return false;\n    numElementsVisited++;\n    currentIdx = getNextIdx(currentIdx, array);\n  }\n  return currentIdx === 0;\n}\n\nfunction getNextIdx(currentIdx: number, array: number[]) {\n  const jump = array[currentIdx];\n  const nextIdx = (currentIdx + jump) % array.length;\n  return nextIdx >= 0 ? nextIdx : nextIdx + array.length;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.hasSingleCycle([2, 3, 1, -4, -4, 2])).to.deep.equal(true);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.hasSingleCycle([2, 3, 1, -4, -4, 2])).to.deep.equal(true);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        2,
        3,
        1,
        -4,
        -4,
        2
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        2,
        3,
        1,
        -4,
        -4,
        2
      ]
    },
    {
      "array": [
        2,
        2,
        -1
      ]
    },
    {
      "array": [
        2,
        2,
        2
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        -1,
        2,
        2
      ]
    },
    {
      "array": [
        0,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        0,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        5,
        6,
        -5,
        -2,
        -5,
        -12,
        -2,
        -1,
        2,
        -6,
        1,
        1,
        2,
        -5,
        2
      ]
    },
    {
      "array": [
        3,
        5,
        5,
        -5,
        -2,
        -5,
        -12,
        -2,
        -1,
        2,
        -6,
        1,
        1,
        2,
        -5,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        -2,
        3,
        7,
        8,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        -2,
        3,
        7,
        8,
        -8
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        -2,
        3,
        7,
        8,
        -26
      ]
    },
    {
      "array": [
        10,
        11,
        -6,
        -23,
        -2,
        3,
        88,
        908,
        -26
      ]
    },
    {
      "array": [
        10,
        11,
        -6,
        -23,
        -2,
        3,
        88,
        909,
        -26
      ]
    },
    {
      "array": [
        1,
        -1,
        1,
        -1
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        2,
        3,
        1,
        -4,
        -4,
        2
      ]
    },
    {
      "array": [
        2,
        2,
        -1
      ]
    },
    {
      "array": [
        2,
        2,
        2
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        -1,
        2,
        2
      ]
    },
    {
      "array": [
        0,
        1,
        1,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        0,
        1,
        1
      ]
    },
    {
      "array": [
        1,
        1,
        1,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        5,
        6,
        -5,
        -2,
        -5,
        -12,
        -2,
        -1,
        2,
        -6,
        1,
        1,
        2,
        -5,
        2
      ]
    },
    {
      "array": [
        3,
        5,
        5,
        -5,
        -2,
        -5,
        -12,
        -2,
        -1,
        2,
        -6,
        1,
        1,
        2,
        -5,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        -2,
        3,
        7,
        8,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        -2,
        3,
        7,
        8,
        -8
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        -2,
        3,
        7,
        8,
        -26
      ]
    },
    {
      "array": [
        10,
        11,
        -6,
        -23,
        -2,
        3,
        88,
        908,
        -26
      ]
    },
    {
      "array": [
        10,
        11,
        -6,
        -23,
        -2,
        3,
        88,
        909,
        -26
      ]
    },
    {
      "array": [
        1,
        -1,
        1,
        -1
      ]
    }
  ],
  "changelog": []
}