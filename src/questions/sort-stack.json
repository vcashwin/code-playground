{
  "uid": "sort-stack",
  "testStrategy": "JSON",
  "name": "Sort Stack",
  "version": 0,
  "releaseDate": "2021-04-14T00:00:00Z",
  "category": "Stacks",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 13612,
    "failureCount": 2413
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "533446167",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1514
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of integers representing a stack,\n  recursively sorts the stack in place (i.e., doesn't create a brand new array),\n  and returns it.\n</p>\n<p>\n  The array must be treated as a stack, with the end of the array as the top of\n  the stack. Therefore, you're only allowed to\n</p>\n<ul>\n  <li>\n    Pop elements from the top of the stack by removing elements from the end of\n    the array using the built-in <span>.pop()</span> method in your programming\n    language of choice.\n  </li>\n  <li>\n    Push elements to the top of the stack by appending elements to the end of\n    the array using the built-in <span>.append()</span> method in your\n    programming language of choice.\n  </li>\n  <li>\n    Peek at the element on top of the stack by accessing the last element in the\n    array.\n  </li>\n</ul>\n<p>\n  You're not allowed to perform any other operations on the input array,\n  including accessing elements (except for the last element), moving elements,\n  etc.. You're also not allowed to use any other data structures, and your\n  solution must be recursive.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">stack</span> = [-5, 2, -2, 4, 3, 1]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[-5, -2, 1, 2, 3, 4]\n</pre>\n</div>",
  "hints": [
    "<p>\n  If you had to insert a single item into an already sorted stack, all the while\n  abiding by the constraints of this problem, how would you do that?\n</p>\n",
    "\n<p>\n  Inserting a single item in an already sorted stack is fairly simple: you can\n  pop elements off of the stack until you find an element that's smaller than or\n  equal to the value that you want to add. Then, you can push that value on top\n  of the stack and reinsert all the previously popped items back on top of the\n  stack in the reverse order in which you popped them off. The resulting stack\n  will still be sorted.\n</p>\n",
    "\n<p>\n  You can easily insert multiple items in an already sorted stack by just\n  repeatedly performing what's described in Hint #2. However, you'll need to\n  have an already sorted stack. To get an already sorted stack, you'll need to\n  pop all of the elements off the <i>unsorted</i> stack until it's eventually\n  empty, and then you'll need to push all of the items back on the stack,\n  inserting them in their sorted order one at a time.\n</p>\n",
    "\n<p>\n  If you're thinking about Hint #3 recursively, the steps are the following:\n</p>\n<ol>\n  <li>Pop an item from the top of the stack, and hold onto it in memory.</li>\n  <li>\n    Sort the rest of the stack. To do so, repeat step #1 until the stack is\n    empty, at which point you've reached the base case since an empty stack is\n    always sorted.\n  </li>\n  <li>\n    Insert the most recently popped off item from step #1 back into the now\n    sorted stack but in its proper sorted position. The first time that you\n    reinsert an item, it'll be inserted in an empty stack.\n  </li>\n</ol>"
  ],
  "spaceTime": "O(n^2) time | O(n) space - where n is the length of the stack",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> sortStack(vector<int>& stack) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid insertInSortedStackOrder(vector<int>& stack, int value);\n\n// O(n^2) time | O(n) space - where n is the length of the stack\nvector<int> sortStack(vector<int>& stack) {\n  if (stack.size() == 0) {\n    return stack;\n  }\n\n  int top = stack.back();\n  stack.pop_back();\n\n  sortStack(stack);\n\n  insertInSortedStackOrder(stack, top);\n\n  return stack;\n}\n\nvoid insertInSortedStackOrder(vector<int>& stack, int value) {\n  if (stack.size() == 0 || stack.back() <= value) {\n    stack.push_back(value);\n    return;\n  }\n\n  int top = stack.back();\n  stack.pop_back();\n\n  insertInSortedStackOrder(stack, value);\n\n  stack.push_back(top);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {-5, 2, -2, 4, 3, 1};\n      vector<int> expected = {-5, -2, 1, 2, 3, 4};\n      auto actual = sortStack(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {-5, 2, -2, 4, 3, 1};\n      vector<int> expected = {-5, -2, 1, 2, 3, 4};\n      auto actual = sortStack(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<int> SortStack(List<int> stack) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n^2) time | O(n) space - where n is the length of the stack\n  public List<int> SortStack(List<int> stack) {\n    if (stack.Count == 0) {\n      return stack;\n    }\n\n    int top = stack[stack.Count - 1];\n    stack.RemoveAt(stack.Count - 1);\n\n    SortStack(stack);\n\n    insertInSortedOrder(stack, top);\n\n    return stack;\n  }\n\n  public void insertInSortedOrder(List<int> stack, int value) {\n    if (stack.Count == 0 || (stack[stack.Count - 1] <= value)) {\n      stack.Add(value);\n      return;\n    }\n\n    int top = stack[stack.Count - 1];\n    stack.RemoveAt(stack.Count - 1);\n\n    insertInSortedOrder(stack, value);\n\n    stack.Add(top);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> stack = new List<int> { -5, 2, -2, 4, 3, 1 };\n    List<int> expected = new List<int> { -5, -2, 1, 2, 3, 4 };\n    var actual = new Program().SortStack(stack);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<int> stack = new List<int> { -5, 2, -2, 4, 3, 1 };\n    List<int> expected = new List<int> { -5, -2, 1, 2, 3, 4 };\n    var actual = new Program().SortStack(stack);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc SortStack(stack []int) []int {\n\t// Write your code here.\n\treturn []int{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(n) space - where n is the length of the stack\nfunc SortStack(stack []int) []int {\n\tif len(stack) == 0 {\n\t\treturn stack\n\t}\n\n\ttop := stack[len(stack)-1]\n\tstack = stack[:len(stack)-1]\n\tSortStack(stack)\n\n\tinsertInSortedOrder(&stack, top)\n\treturn stack\n}\n\nfunc insertInSortedOrder(stack *[]int, value int) {\n\tif len(*stack) == 0 || (*stack)[len(*stack)-1] <= value {\n\t\t*stack = append(*stack, value)\n\t\treturn\n\t}\n\n\ttop := (*stack)[len(*stack)-1]\n\t*stack = (*stack)[:len(*stack)-1]\n\tinsertInSortedOrder(stack, value)\n\t*stack = append(*stack, top)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{-5, 2, -2, 4, 3, 1}\n\texpected := []int{-5, -2, 1, 2, 3, 4}\n\tactual := SortStack(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{-5, 2, -2, 4, 3, 1}\n\texpected := []int{-5, -2, 1, 2, 3, 4}\n\tactual := SortStack(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<Integer> sortStack(ArrayList<Integer> stack) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space - where n is the length of the stack\n  public ArrayList<Integer> sortStack(ArrayList<Integer> stack) {\n    if (stack.size() == 0) {\n      return stack;\n    }\n\n    int top = stack.remove(stack.size() - 1);\n\n    sortStack(stack);\n\n    insertInSortedOrder(stack, top);\n\n    return stack;\n  }\n\n  public void insertInSortedOrder(ArrayList<Integer> stack, int value) {\n    if (stack.size() == 0 || (stack.get(stack.size() - 1) <= value)) {\n      stack.add(value);\n      return;\n    }\n\n    int top = stack.remove(stack.size() - 1);\n\n    insertInSortedOrder(stack, value);\n\n    stack.add(top);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    ArrayList<Integer> stack =\n      new ArrayList<Integer>(Arrays.asList(-5, 2, -2, 4, 3, 1));\n    ArrayList<Integer> expected =\n      new ArrayList<Integer>(Arrays.asList(-5, -2, 1, 2, 3, 4));\n    var actual = new Program().sortStack(stack);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    ArrayList<Integer> stack =\n      new ArrayList<Integer>(Arrays.asList(-5, 2, -2, 4, 3, 1));\n    ArrayList<Integer> expected =\n      new ArrayList<Integer>(Arrays.asList(-5, -2, 1, 2, 3, 4));\n    var actual = new Program().sortStack(stack);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function sortStack(stack) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.sortStack = sortStack;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space - where n is the length of the stack\nfunction sortStack(stack) {\n  if (stack.length === 0) return stack;\n\n  const top = stack.pop();\n\n  sortStack(stack);\n\n  insertInSortedOrder(stack, top);\n\n  return stack;\n}\n\nfunction insertInSortedOrder(stack, value) {\n  if (stack.length === 0 || stack[stack.length - 1] <= value) {\n    stack.push(value);\n    return;\n  }\n\n  const top = stack.pop();\n\n  insertInSortedOrder(stack, value);\n\n  stack.push(top);\n}\n\n// Do not edit the line below.\nexports.sortStack = sortStack;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [-5, 2, -2, 4, 3, 1];\n  const expected = [-5, -2, 1, 2, 3, 4];\n  const actual = program.sortStack(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [-5, 2, -2, 4, 3, 1];\n  const expected = [-5, -2, 1, 2, 3, 4];\n  const actual = program.sortStack(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun sortStack(stack: MutableList<Int>): MutableList<Int> {\n    // Write your code here.\n    return mutableListOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^2) time | O(n) space - where n is the length of the stack\nfun sortStack(stack: MutableList<Int>): MutableList<Int> {\n    if (stack.size == 0) return stack\n\n    val top = stack.removeAt(stack.size - 1)\n\n    sortStack(stack)\n\n    insertInSortedOrder(stack, top)\n\n    return stack\n}\n\nfun insertInSortedOrder(stack: MutableList<Int>, value: Int) {\n    if (stack.size == 0 || stack[stack.size - 1] <= value) {\n        stack.add(value)\n        return\n    }\n\n    val top = stack.removeAt(stack.size - 1)\n\n    insertInSortedOrder(stack, value)\n\n    stack.add(top)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.sortStack\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(-5, 2, -2, 4, 3, 1)\n        val expected = mutableListOf(-5, -2, 1, 2, 3, 4)\n        val output = sortStack(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.sortStack\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = mutableListOf(-5, 2, -2, 4, 3, 1)\n        val expected = mutableListOf(-5, -2, 1, 2, 3, 4)\n        val output = sortStack(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def sortStack(stack):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^2) time | O(n) space - where n is the length of the stack\ndef sortStack(stack):\n    if len(stack) == 0:\n        return stack\n\n    top = stack.pop()\n\n    sortStack(stack)\n\n    insertInSortedOrder(stack, top)\n\n    return stack\n\n\ndef insertInSortedOrder(stack, value):\n    if len(stack) == 0 or stack[len(stack) - 1] <= value:\n        stack.append(value)\n        return\n\n    top = stack.pop()\n\n    insertInSortedOrder(stack, value)\n\n    stack.append(top)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [-5, 2, -2, 4, 3, 1]\n        expected = [-5, -2, 1, 2, 3, 4]\n        actual = program.sortStack(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [-5, 2, -2, 4, 3, 1]\n        expected = [-5, -2, 1, 2, 3, 4]\n        actual = program.sortStack(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def sortStack(stack)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def sortStack(stack)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.sortStack\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.sortStack\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func sortStack(_ stack: inout [Int]) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space - where n is the length of the stack\n  func sortStack(_ stack: inout [Int]) -> [Int] {\n    if stack.count == 0 {\n      return stack\n    }\n\n    let top = stack.removeLast()\n    sortStack(&stack)\n\n    insertInSortedOrder(&stack, top)\n    return stack\n  }\n\n  func insertInSortedOrder(_ stack: inout [Int], _ value: Int) {\n    if stack.count == 0 || stack[stack.count - 1] <= value {\n      stack.append(value)\n      return\n    }\n\n    let top = stack.removeLast()\n    insertInSortedOrder(&stack, value)\n    stack.append(top)\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [-5, 2, -2, 4, 3, 1]\n      var expected = [-5, -2, 1, 2, 3, 4]\n      var actual = Program().sortStack(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [-5, 2, -2, 4, 3, 1]\n      var expected = [-5, -2, 1, 2, 3, 4]\n      var actual = Program().sortStack(&input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function sortStack(stack: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^2) time | O(n) space - where n is the length of the stack\nexport function sortStack(stack: number[]) {\n  if (stack.length === 0) return stack;\n\n  const top = stack.pop()!;\n\n  sortStack(stack);\n\n  insertInSortedOrder(stack, top);\n\n  return stack;\n}\n\nfunction insertInSortedOrder(stack: number[], value: number) {\n  if (stack.length === 0 || stack[stack.length - 1] <= value) {\n    stack.push(value);\n    return;\n  }\n\n  const top = stack.pop()!;\n\n  insertInSortedOrder(stack, value);\n\n  stack.push(top);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [-5, 2, -2, 4, 3, 1];\n  const expected = [-5, -2, 1, 2, 3, 4];\n  const actual = program.sortStack(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [-5, 2, -2, 4, 3, 1];\n  const expected = [-5, -2, 1, 2, 3, 4];\n  const actual = program.sortStack(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "stack",
      "example": [
        -5,
        2,
        -2,
        4,
        3,
        1
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "stack": [
        -5,
        2,
        -2,
        4,
        3,
        1
      ]
    },
    {
      "stack": [
        3,
        4,
        5,
        1,
        2
      ]
    },
    {
      "stack": [
        0,
        -2,
        3,
        4,
        1,
        -9,
        8
      ]
    },
    {
      "stack": [
        2,
        4,
        22,
        1,
        -9,
        0,
        6,
        23,
        -2,
        1
      ]
    },
    {
      "stack": [
        3,
        4,
        5,
        1,
        2
      ]
    },
    {
      "stack": [
        -1,
        0,
        2,
        3,
        4,
        1,
        1,
        1
      ]
    },
    {
      "stack": []
    },
    {
      "stack": [
        1
      ]
    },
    {
      "stack": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "stack": [
        9,
        2,
        8,
        1
      ]
    },
    {
      "stack": [
        2,
        33,
        44,
        2,
        -9,
        -7,
        -5,
        -2,
        -2,
        -2,
        0
      ]
    },
    {
      "stack": [
        3,
        3,
        3,
        3,
        3,
        3
      ]
    },
    {
      "stack": [
        0,
        0
      ]
    },
    {
      "stack": [
        2,
        22,
        222,
        3,
        33,
        33,
        9,
        2,
        3,
        312,
        -9,
        -2,
        3
      ]
    },
    {
      "stack": [
        3,
        4,
        5,
        1,
        2,
        2,
        2,
        1,
        3,
        4,
        5,
        3,
        1,
        3,
        -1,
        2,
        3
      ]
    }
  ],
  "jsonTests": [
    {
      "stack": [
        -5,
        2,
        -2,
        4,
        3,
        1
      ]
    },
    {
      "stack": [
        3,
        4,
        5,
        1,
        2
      ]
    },
    {
      "stack": [
        0,
        -2,
        3,
        4,
        1,
        -9,
        8
      ]
    },
    {
      "stack": [
        2,
        4,
        22,
        1,
        -9,
        0,
        6,
        23,
        -2,
        1
      ]
    },
    {
      "stack": [
        3,
        4,
        5,
        1,
        2
      ]
    },
    {
      "stack": [
        -1,
        0,
        2,
        3,
        4,
        1,
        1,
        1
      ]
    },
    {
      "stack": []
    },
    {
      "stack": [
        1
      ]
    },
    {
      "stack": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "stack": [
        9,
        2,
        8,
        1
      ]
    },
    {
      "stack": [
        2,
        33,
        44,
        2,
        -9,
        -7,
        -5,
        -2,
        -2,
        -2,
        0
      ]
    },
    {
      "stack": [
        3,
        3,
        3,
        3,
        3,
        3
      ]
    },
    {
      "stack": [
        0,
        0
      ]
    },
    {
      "stack": [
        2,
        22,
        222,
        3,
        33,
        33,
        9,
        2,
        3,
        312,
        -9,
        -2,
        3
      ]
    },
    {
      "stack": [
        3,
        4,
        5,
        1,
        2,
        2,
        2,
        1,
        3,
        4,
        5,
        3,
        1,
        3,
        -1,
        2,
        3
      ]
    }
  ],
  "changelog": []
}