{
  "uid": "sorted-squared-array",
  "testStrategy": "JSON",
  "name": "Sorted Squared Array",
  "version": 0,
  "releaseDate": "2021-03-02T00:00:00Z",
  "category": "Arrays",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 96419,
    "failureCount": 46830
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "557265660",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 940
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a non-empty array of integers that are sorted\n  in ascending order and returns a new array of the same length with the squares\n  of the original integers also sorted in ascending order.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 2, 3, 5, 6, 8, 9]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[1, 4, 9, 25, 36, 64, 81]\n</pre>\n</div>",
  "hints": [
    "<p>\n  While the integers in the input array are sorted in increasing order, their\n  squares won't necessarily be as well, because of the possible presence of\n  negative numbers.\n</p>\n",
    "\n<p>\n  Traverse the array value by value, square each value, and insert the squares\n  into an output array. Then, sort the output array before returning it. Is this\n  the optimal solution?\n</p>\n",
    "\n<p>\n  To reduce the time complexity of the algorithm mentioned in Hint #2, you need\n  to avoid sorting the ouput array. To do this, as you square the values of the\n  input array, try to directly insert them into their correct position in the\n  output array.\n</p>\n",
    "\n<p>\n  Use two pointers to keep track of the smallest and largest values in the input\n  array. Compare the absolute values of these smallest and largest values,\n  square the larger absolute value, and place the square at the end of the\n  output array, filling it up from right to left. Move the pointers accordingly,\n  and repeat this process until the output array is filled.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> sortedSquaredArray(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(nlogn) time | O(n) space - where n is the length of the input array\nvector<int> sortedSquaredArray(vector<int> array) {\n  vector<int> sortedSquares(array.size(), 0);\n\n  for (int idx = 0; idx < array.size(); idx++) {\n    int value = array[idx];\n    sortedSquares[idx] = value * value;\n  }\n\n  sort(sortedSquares.begin(), sortedSquares.end());\n  return sortedSquares;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input array\nvector<int> sortedSquaredArray(vector<int> array) {\n  vector<int> sortedSquares(array.size(), 0);\n  int smallerValueIdx = 0;\n  int largerValueIdx = array.size() - 1;\n\n  for (int idx = array.size() - 1; idx >= 0; idx--) {\n    int smallerValue = array[smallerValueIdx];\n    int largerValue = array[largerValueIdx];\n\n    if (abs(smallerValue) > abs(largerValue)) {\n      sortedSquares[idx] = smallerValue * smallerValue;\n      smallerValueIdx++;\n    } else {\n      sortedSquares[idx] = largerValue * largerValue;\n      largerValueIdx--;\n    }\n  }\n\n  return sortedSquares;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {1, 2, 3, 5, 6, 8, 9};\n      vector<int> expected = {1, 4, 9, 25, 36, 64, 81};\n      auto actual = sortedSquaredArray(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {1, 2, 3, 5, 6, 8, 9};\n      vector<int> expected = {1, 4, 9, 25, 36, 64, 81};\n      auto actual = sortedSquaredArray(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int[] SortedSquaredArray(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nlogn) time | O(n) space - where n is the length of the input array\n  public int[] SortedSquaredArray(int[] array) {\n    int[] sortedSquares = new int[array.Length];\n    for (int idx = 0; idx < array.Length; idx++) {\n      int value = array[idx];\n      sortedSquares[idx] = value * value;\n    }\n    Array.Sort(sortedSquares);\n    return sortedSquares;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] SortedSquaredArray(int[] array) {\n    int[] sortedSquares = new int[array.Length];\n    int smallerValueIdx = 0;\n    int largerValueIdx = array.Length - 1;\n    for (int idx = array.Length - 1; idx >= 0; idx--) {\n      int smallerValue = array[smallerValueIdx];\n      int largerValue = array[largerValueIdx];\n      if (Math.Abs(smallerValue) > Math.Abs(largerValue)) {\n        sortedSquares[idx] = smallerValue * smallerValue;\n        smallerValueIdx++;\n      } else {\n        sortedSquares[idx] = largerValue * largerValue;\n        largerValueIdx--;\n      }\n    }\n    return sortedSquares;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 1, 2, 3, 5, 6, 8, 9 };\n    var expected = new int[] { 1, 4, 9, 25, 36, 64, 81 };\n    var actual = new Program().SortedSquaredArray(input);\n    for (int i = 0; i < expected.Length; i++) {\n      Utils.AssertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 1, 2, 3, 5, 6, 8, 9 };\n    var expected = new int[] { 1, 4, 9, 25, 36, 64, 81 };\n    var actual = new Program().SortedSquaredArray(input);\n    for (int i = 0; i < expected.Length; i++) {\n      Utils.AssertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc SortedSquaredArray(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"sort\"\n)\n\n// O(nlogn) time | O(n) space - where n is the length of the input array\nfunc SortedSquaredArray(array []int) []int {\n\tsortedSquares := make([]int, len(array))\n\n\tfor idx, value := range array {\n\t\tsortedSquares[idx] = value * value\n\t}\n\n\tsort.Ints(sortedSquares)\n\treturn sortedSquares\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunc SortedSquaredArray(array []int) []int {\n\tsortedSquares := make([]int, len(array))\n\n\tsmallerValueIdx := 0\n\tlargerValueIdx := len(array) - 1\n\n\tfor idx := len(array) - 1; idx >= 0; idx-- {\n\t\tsmallerValue := array[smallerValueIdx]\n\t\tlargerValue := array[largerValueIdx]\n\n\t\tif abs(smallerValue) > abs(largerValue) {\n\t\t\tsortedSquares[idx] = smallerValue * smallerValue\n\t\t\tsmallerValueIdx += 1\n\t\t} else {\n\t\t\tsortedSquares[idx] = largerValue * largerValue\n\t\t\tlargerValueIdx -= 1\n\t\t}\n\t}\n\n\treturn sortedSquares\n}\n\nfunc abs(a int) int {\n\tif a < 0 {\n\t\treturn -a\n\t}\n\treturn a\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{1, 2, 3, 5, 6, 8, 9}\n\texpected := []int{1, 4, 9, 25, 36, 64, 81}\n\tactual := SortedSquaredArray(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{1, 2, 3, 5, 6, 8, 9}\n\texpected := []int{1, 4, 9, 25, 36, 64, 81}\n\tactual := SortedSquaredArray(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int[] sortedSquaredArray(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlogn) time | O(n) space - where n is the length of the input array\n  public int[] sortedSquaredArray(int[] array) {\n    int[] sortedSquares = new int[array.length];\n    for (int idx = 0; idx < array.length; idx++) {\n      int value = array[idx];\n      sortedSquares[idx] = value * value;\n    }\n    Arrays.sort(sortedSquares);\n    return sortedSquares;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public int[] sortedSquaredArray(int[] array) {\n    int[] sortedSquares = new int[array.length];\n    int smallerValueIdx = 0;\n    int largerValueIdx = array.length - 1;\n    for (int idx = array.length - 1; idx >= 0; idx--) {\n      int smallerValue = array[smallerValueIdx];\n      int largerValue = array[largerValueIdx];\n      if (Math.abs(smallerValue) > Math.abs(largerValue)) {\n        sortedSquares[idx] = smallerValue * smallerValue;\n        smallerValueIdx++;\n      } else {\n        sortedSquares[idx] = largerValue * largerValue;\n        largerValueIdx--;\n      }\n    }\n    return sortedSquares;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {1, 2, 3, 5, 6, 8, 9};\n    var expected = new int[] {1, 4, 9, 25, 36, 64, 81};\n    var actual = new Program().sortedSquaredArray(input);\n    for (int i = 0; i < expected.length; i++) {\n      Utils.assertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {1, 2, 3, 5, 6, 8, 9};\n    var expected = new int[] {1, 4, 9, 25, 36, 64, 81};\n    var actual = new Program().sortedSquaredArray(input);\n    for (int i = 0; i < expected.length; i++) {\n      Utils.assertTrue(expected[i] == actual[i]);\n    }\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function sortedSquaredArray(array) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.sortedSquaredArray = sortedSquaredArray;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlogn) time | O(n) space - where n is the length of the input array\nfunction sortedSquaredArray(array) {\n  const sortedSquares = new Array(array.length).fill(0);\n\n  for (let idx = 0; idx < array.length; idx++) {\n    const value = array[idx];\n    sortedSquares[idx] = value * value;\n  }\n\n  sortedSquares.sort((a, b) => a - b);\n  return sortedSquares;\n}\n\n// Do not edit the line below.\nexports.sortedSquaredArray = sortedSquaredArray;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction sortedSquaredArray(array) {\n  const sortedSquares = new Array(array.length).fill(0);\n  let smallerValueIdx = 0;\n  let largerValueIdx = array.length - 1;\n\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const smallerValue = array[smallerValueIdx];\n    const largerValue = array[largerValueIdx];\n\n    if (Math.abs(smallerValue) > Math.abs(largerValue)) {\n      sortedSquares[idx] = smallerValue * smallerValue;\n      smallerValueIdx++;\n    } else {\n      sortedSquares[idx] = largerValue * largerValue;\n      largerValueIdx--;\n    }\n  }\n\n  return sortedSquares;\n}\n\n// Do not edit the line below.\nexports.sortedSquaredArray = sortedSquaredArray;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [1, 2, 3, 5, 6, 8, 9];\n  const expected = [1, 4, 9, 25, 36, 64, 81];\n  const actual = program.sortedSquaredArray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [1, 2, 3, 5, 6, 8, 9];\n  const expected = [1, 4, 9, 25, 36, 64, 81];\n  const actual = program.sortedSquaredArray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun sortedSquaredArray(array: List<Int>): List<Int> {\n    // Write your code here.\n    return mutableListOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(nlogn) time | O(n) space - where n is the length of the input array\nfun sortedSquaredArray(array: List<Int>): List<Int> {\n    val sortedSquares = array.map() { _ -> 0 }.toMutableList()\n\n    for (idx in 0 until array.size) {\n        val value = array[idx]\n        sortedSquares[idx] = value * value\n    }\n\n    sortedSquares.sort()\n    return sortedSquares\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.abs\n\n// O(n) time | O(n) space - where n is the length of the input array\nfun sortedSquaredArray(array: List<Int>): List<Int> {\n    val sortedSquares = array.map() { _ -> 0 }.toMutableList()\n    var smallerValueIdx = 0\n    var largerValueIdx = array.size - 1\n\n    for (idx in array.size - 1 downTo 0) {\n        val smallerValue = array[smallerValueIdx]\n        val largerValue = array[largerValueIdx]\n\n        if (abs(smallerValue) > abs(largerValue)) {\n            sortedSquares[idx] = smallerValue * smallerValue\n            smallerValueIdx += 1\n        } else {\n            sortedSquares[idx] = largerValue * largerValue\n            largerValueIdx -= 1\n        }\n    }\n\n    return sortedSquares\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.sortedSquaredArray\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(1, 2, 3, 5, 6, 8, 9)\n        val expected = listOf(1, 4, 9, 25, 36, 64, 81)\n        val output = sortedSquaredArray(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.sortedSquaredArray\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(1, 2, 3, 5, 6, 8, 9)\n        val expected = listOf(1, 4, 9, 25, 36, 64, 81)\n        val output = sortedSquaredArray(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def sortedSquaredArray(array):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlogn) time | O(n) space - where n is the length of the input array\ndef sortedSquaredArray(array):\n    sortedSquares = [0 for _ in array]\n\n    for idx in range(len(array)):\n        value = array[idx]\n        sortedSquares[idx] = value * value\n\n    sortedSquares.sort()\n    return sortedSquares\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef sortedSquaredArray(array):\n    sortedSquares = [0 for _ in array]\n    smallerValueIdx = 0\n    largerValueIdx = len(array) - 1\n\n    for idx in reversed(range(len(array))):\n        smallerValue = array[smallerValueIdx]\n        largerValue = array[largerValueIdx]\n\n        if abs(smallerValue) > abs(largerValue):\n            sortedSquares[idx] = smallerValue * smallerValue\n            smallerValueIdx += 1\n        else:\n            sortedSquares[idx] = largerValue * largerValue\n            largerValueIdx -= 1\n\n    return sortedSquares\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [1, 2, 3, 5, 6, 8, 9]\n        expected = [1, 4, 9, 25, 36, 64, 81]\n        actual = program.sortedSquaredArray(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [1, 2, 3, 5, 6, 8, 9]\n        expected = [1, 4, 9, 25, 36, 64, 81]\n        actual = program.sortedSquaredArray(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def sortedSquaredArray(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def sortedSquaredArray(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.sortedSquaredArray\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.sortedSquaredArray\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func sortedSquaredArray(_ array: [Int]) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlogn) time | O(n) space - where n is the length of the input array\n  func sortedSquaredArray(_ array: [Int]) -> [Int] {\n    var sortedSquares = Array(repeating: 0, count: array.count)\n\n    for idx in stride(from: 0, to: array.count, by: 1) {\n      let value = array[idx]\n      sortedSquares[idx] = value * value\n    }\n\n    sortedSquares.sort()\n    return sortedSquares\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  func sortedSquaredArray(_ array: [Int]) -> [Int] {\n    var sortedSquares = Array(repeating: 0, count: array.count)\n\n    var smallerValueIdx = 0\n    var largerValueIdx = array.count - 1\n\n    for idx in stride(from: array.count - 1, through: 0, by: -1) {\n      let smallerValue = array[smallerValueIdx]\n      let largerValue = array[largerValueIdx]\n\n      if abs(smallerValue) > abs(largerValue) {\n        sortedSquares[idx] = smallerValue * smallerValue\n        smallerValueIdx += 1\n      } else {\n        sortedSquares[idx] = largerValue * largerValue\n        largerValueIdx -= 1\n      }\n    }\n\n    return sortedSquares\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [1, 2, 3, 5, 6, 8, 9]\n      var expected = [1, 4, 9, 25, 36, 64, 81]\n      var actual = Program().sortedSquaredArray(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var input = [1, 2, 3, 5, 6, 8, 9]\n      var expected = [1, 4, 9, 25, 36, 64, 81]\n      var actual = Program().sortedSquaredArray(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function sortedSquaredArray(array: number[]) {\n  // Write your code here.\n  return [];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlogn) time | O(n) space - where n is the length of the input array\nexport function sortedSquaredArray(array: number[]) {\n  const sortedSquares = new Array(array.length).fill(0);\n\n  for (let idx = 0; idx < array.length; idx++) {\n    const value = array[idx];\n    sortedSquares[idx] = value * value;\n  }\n\n  sortedSquares.sort((a, b) => a - b);\n  return sortedSquares;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function sortedSquaredArray(array: number[]) {\n  const sortedSquares = new Array(array.length).fill(0);\n  let smallerValueIdx = 0;\n  let largerValueIdx = array.length - 1;\n\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const smallerValue = array[smallerValueIdx];\n    const largerValue = array[largerValueIdx];\n\n    if (Math.abs(smallerValue) > Math.abs(largerValue)) {\n      sortedSquares[idx] = smallerValue * smallerValue;\n      smallerValueIdx++;\n    } else {\n      sortedSquares[idx] = largerValue * largerValue;\n      largerValueIdx--;\n    }\n  }\n\n  return sortedSquares;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [1, 2, 3, 5, 6, 8, 9];\n  const expected = [1, 4, 9, 25, 36, 64, 81];\n  const actual = program.sortedSquaredArray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [1, 2, 3, 5, 6, 8, 9];\n  const expected = [1, 4, 9, 25, 36, 64, 81];\n  const actual = program.sortedSquaredArray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        2,
        3,
        5,
        6,
        8,
        9
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        2,
        3,
        5,
        6,
        8,
        9
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        0
      ]
    },
    {
      "array": [
        10
      ]
    },
    {
      "array": [
        -1
      ]
    },
    {
      "array": [
        -2,
        -1
      ]
    },
    {
      "array": [
        -5,
        -4,
        -3,
        -2,
        -1
      ]
    },
    {
      "array": [
        -10
      ]
    },
    {
      "array": [
        -10,
        -5,
        0,
        5,
        10
      ]
    },
    {
      "array": [
        -7,
        -3,
        1,
        9,
        22,
        30
      ]
    },
    {
      "array": [
        -50,
        -13,
        -2,
        -1,
        0,
        0,
        1,
        1,
        2,
        3,
        19,
        20
      ]
    },
    {
      "array": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "array": [
        -1,
        -1,
        2,
        3,
        3,
        3,
        4
      ]
    },
    {
      "array": [
        -3,
        -2,
        -1
      ]
    },
    {
      "array": [
        -3,
        -2,
        -1
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        2,
        3,
        5,
        6,
        8,
        9
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "array": [
        0
      ]
    },
    {
      "array": [
        10
      ]
    },
    {
      "array": [
        -1
      ]
    },
    {
      "array": [
        -2,
        -1
      ]
    },
    {
      "array": [
        -5,
        -4,
        -3,
        -2,
        -1
      ]
    },
    {
      "array": [
        -10
      ]
    },
    {
      "array": [
        -10,
        -5,
        0,
        5,
        10
      ]
    },
    {
      "array": [
        -7,
        -3,
        1,
        9,
        22,
        30
      ]
    },
    {
      "array": [
        -50,
        -13,
        -2,
        -1,
        0,
        0,
        1,
        1,
        2,
        3,
        19,
        20
      ]
    },
    {
      "array": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "array": [
        -1,
        -1,
        2,
        3,
        3,
        3,
        4
      ]
    },
    {
      "array": [
        -3,
        -2,
        -1
      ]
    },
    {
      "array": [
        -3,
        -2,
        -1
      ]
    }
  ],
  "changelog": []
}