{
  "uid": "split-binary-tree",
  "testStrategy": "JSON",
  "name": "Split Binary Tree",
  "version": 0,
  "releaseDate": "2023-04-08T00:00:00Z",
  "category": "Binary Trees",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 2654,
    "failureCount": 389
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "789885900",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 423
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a Binary Tree with at least one node and\n  checks if that Binary Tree can be split into two Binary Trees of equal sum by\n  removing a single edge. If this split is possible, return the new sum of each\n  Binary Tree, otherwise return 0. Note that you do not need to return the edge\n  that was removed.\n</p>\n<p>\n  The sum of a Binary Tree is the sum of all values in that Binary Tree.\n</p>\n<p>\n  Each <span>BinaryTree</span> node has an integer <span>value</span>, a\n  <span>left</span> child node, and a <span>right</span> child node. Children\n  nodes can either be <span>BinaryTree</span> nodes themselves or\n  <span>None</span> / <span>null</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> =     1\n        /     \\\n       3       -2\n     /   \\    /  \\\n    6    -5  5    2\n  /\n 2\n</pre>\n<h3>Sample Output</h3>\n<pre>\n6 <span class=\"CodeEditor-promptComment\">// Remove the edge to the left of the root node,\n// creating two trees, each with sums of 6</span>\n</pre>\n</div>",
  "hints": [
    "<p>\n  Try first calculating the sum of the entire Binary Tree. What information does\n  this give you towards solving the problem?\n</p>\n",
    "\n<p>\n  If the sum of the entire Binary Tree is odd, then there is no possible\n  solution, because the values are all integers. Otherwise, the solution could\n  be that sum divided by two, or potentially there is still no solution. What\n  does the scenario look like where the solution is the sum divided by two?\n</p>\n",
    "\n<p>\n  There is a solution if there is a subtree that has a sum equal to the the\n  total Binary Tree sum divided by two. In this case, removing the incoming\n  edge to that node would have to create another Binary Tree of equal sum.\n</p>\n",
    "\n<p>\n  To prevent recalculating the same subtree sums, try using a post-order\n  traversal of the Binary Tree. This allows you to calculate the sums of the\n  smallest subtrees first, then send that information back up to the parents to\n  quickly calculate their sums.\n</p>"
  ],
  "spaceTime": "O(n) time | O(h) space - where n is the number of nodes in the tree and h is the height of the tree",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) { this->value = value; }\n};\n\nint splitBinaryTree(BinaryTree* tree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n public:\n  int value;\n  BinaryTree* left = nullptr;\n  BinaryTree* right = nullptr;\n\n  BinaryTree(int value) { this->value = value; }\n};\n\nstruct ResultPair {\n  int currentTreeSum;\n  bool canBeSplit;\n};\n\nResultPair trySubtrees(BinaryTree* tree, int desiredSubtreeSum);\nint getTreeSum(BinaryTree* tree);\n\n// O(n) time | O(h) space - where n is the number of nodes in the tree and\n// h is the height of the tree\nint splitBinaryTree(BinaryTree* tree) {\n  int treeSum = getTreeSum(tree);\n\n  if (treeSum % 2 != 0) {\n    return 0;\n  }\n\n  int desiredSubtreeSum = treeSum / 2;\n  bool canBeSplit = trySubtrees(tree, desiredSubtreeSum).canBeSplit;\n  return canBeSplit ? desiredSubtreeSum : 0;\n}\n\nResultPair trySubtrees(BinaryTree* tree, int desiredSubtreeSum) {\n  if (tree == nullptr) {\n    return ResultPair{0, false};\n  }\n\n  ResultPair leftResultPair = trySubtrees(tree->left, desiredSubtreeSum);\n  ResultPair rightResultPair = trySubtrees(tree->right, desiredSubtreeSum);\n\n  int currentTreeSum = tree->value + leftResultPair.currentTreeSum +\n                       rightResultPair.currentTreeSum;\n  bool canBeSplit = leftResultPair.canBeSplit || rightResultPair.canBeSplit ||\n                    currentTreeSum == desiredSubtreeSum;\n  return ResultPair{currentTreeSum, canBeSplit};\n}\n\nint getTreeSum(BinaryTree* tree) {\n  if (tree == nullptr) {\n    return 0;\n  }\n  return tree->value + getTreeSum(tree->left) + getTreeSum(tree->right);\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree* tree = new BinaryTree(2);\n      tree->left = new BinaryTree(4);\n      tree->left->left = new BinaryTree(4);\n      tree->left->right = new BinaryTree(6);\n      tree->right = new BinaryTree(10);\n      tree->right->left = new BinaryTree(3);\n      tree->right->right = new BinaryTree(3);\n      int expected = 16;\n      auto actual = splitBinaryTree(tree);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BinaryTree* tree = new BinaryTree(2);\n      tree->left = new BinaryTree(4);\n      tree->left->left = new BinaryTree(4);\n      tree->left->right = new BinaryTree(6);\n      tree->right = new BinaryTree(10);\n      tree->right->left = new BinaryTree(3);\n      tree->right->right = new BinaryTree(3);\n      int expected = 16;\n      auto actual = splitBinaryTree(tree);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public int SplitBinaryTree(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // This is an input class. Do not edit.\n  public class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the tree and\n  // h is the height of the tree\n  public int SplitBinaryTree(BinaryTree tree) {\n    int treeSum = getTreeSum(tree);\n\n    if (treeSum % 2 != 0) {\n      return 0;\n    }\n\n    int desiredSubtreeSum = treeSum / 2;\n    bool canBeSplit = trySubtrees(tree, desiredSubtreeSum).canBeSplit;\n    return canBeSplit == true ? desiredSubtreeSum : 0;\n  }\n\n  public class ResultPair {\n    public int currentTreeSum;\n    public bool canBeSplit;\n\n    public ResultPair(int currentTreeSum, bool canBeSplit) {\n      this.currentTreeSum = currentTreeSum;\n      this.canBeSplit = canBeSplit;\n    }\n  }\n\n  ResultPair trySubtrees(BinaryTree tree, int desiredSubtreeSum) {\n    if (tree == null) {\n      return new ResultPair(0, false);\n    }\n\n    ResultPair leftResultPair = trySubtrees(tree.left, desiredSubtreeSum);\n    ResultPair rightResultPair = trySubtrees(tree.right, desiredSubtreeSum);\n\n    int currentTreeSum = tree.value + leftResultPair.currentTreeSum +\n                         rightResultPair.currentTreeSum;\n    bool canBeSplit = leftResultPair.canBeSplit || rightResultPair.canBeSplit ||\n                      currentTreeSum == desiredSubtreeSum;\n    return new ResultPair(currentTreeSum, canBeSplit);\n  }\n\n  int getTreeSum(BinaryTree tree) {\n    if (tree == null) {\n      return 0;\n    }\n    return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(2);\n    tree.left = new Program.BinaryTree(4);\n    tree.left.left = new Program.BinaryTree(4);\n    tree.left.right = new Program.BinaryTree(6);\n    tree.right = new Program.BinaryTree(10);\n    tree.right.left = new Program.BinaryTree(3);\n    tree.right.right = new Program.BinaryTree(3);\n    int expected = 16;\n    int actual = new Program().SplitBinaryTree(tree);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(2);\n    tree.left = new Program.BinaryTree(4);\n    tree.left.left = new Program.BinaryTree(4);\n    tree.left.right = new Program.BinaryTree(6);\n    tree.right = new Program.BinaryTree(10);\n    tree.right.left = new Program.BinaryTree(3);\n    tree.right.right = new Program.BinaryTree(3);\n    int expected = 16;\n    int actual = new Program().SplitBinaryTree(tree);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\nfunc SplitBinaryTree(tree *BinaryTree) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// This is an input class. Do not edit.\ntype BinaryTree struct {\n\tValue int\n\n\tLeft  *BinaryTree\n\tRight *BinaryTree\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the tree and\n// h is the height of the tree\nfunc SplitBinaryTree(tree *BinaryTree) int {\n\ttreeSum := getTreeSum(tree)\n\tif treeSum%2 != 0 {\n\t\treturn 0\n\t}\n\n\tdesiredSubtreeSum := treeSum / 2\n\t_, canBeSplit := trySubtrees(tree, desiredSubtreeSum)\n\tif canBeSplit {\n\t\treturn desiredSubtreeSum\n\t}\n\treturn 0\n}\n\nfunc trySubtrees(tree *BinaryTree, desiredSubtreeSum int) (int, bool) {\n\tif tree == nil {\n\t\treturn 0, false\n\t}\n\n\tleftSum, leftCanBeSplit := trySubtrees(tree.Left, desiredSubtreeSum)\n\trightSum, rightCanBeSplit := trySubtrees(tree.Right, desiredSubtreeSum)\n\n\tcurrentTreeSum := tree.Value + leftSum + rightSum\n\tcanBeSplit := leftCanBeSplit || rightCanBeSplit || currentTreeSum == desiredSubtreeSum\n\treturn currentTreeSum, canBeSplit\n}\n\nfunc getTreeSum(tree *BinaryTree) int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.Value + getTreeSum(tree.Left) + getTreeSum(tree.Right)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\ttree := &BinaryTree{Value: 2}\n\ttree.Left = &BinaryTree{Value: 4}\n\ttree.Left.Left = &BinaryTree{Value: 4}\n\ttree.Left.Right = &BinaryTree{Value: 6}\n\ttree.Right = &BinaryTree{Value: 10}\n\ttree.Right.Left = &BinaryTree{Value: 3}\n\ttree.Right.Right = &BinaryTree{Value: 3}\n\texpected := 16\n\tactual := SplitBinaryTree(tree)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\ttree := &BinaryTree{Value: 2}\n\ttree.Left = &BinaryTree{Value: 4}\n\ttree.Left.Left = &BinaryTree{Value: 4}\n\ttree.Left.Right = &BinaryTree{Value: 6}\n\ttree.Right = &BinaryTree{Value: 10}\n\ttree.Right.Left = &BinaryTree{Value: 3}\n\ttree.Right.Right = &BinaryTree{Value: 3}\n\texpected := 16\n\tactual := SplitBinaryTree(tree)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  public int splitBinaryTree(BinaryTree tree) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // This is an input class. Do not edit.\n  static class BinaryTree {\n    public int value;\n    public BinaryTree left = null;\n    public BinaryTree right = null;\n\n    public BinaryTree(int value) {\n      this.value = value;\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the tree and\n  // h is the height of the tree\n  public int splitBinaryTree(BinaryTree tree) {\n    int treeSum = getTreeSum(tree);\n\n    if (treeSum % 2 != 0) {\n      return 0;\n    }\n\n    int desiredSubtreeSum = treeSum / 2;\n    boolean canBeSplit = trySubtrees(tree, desiredSubtreeSum).canBeSplit;\n    return canBeSplit == true ? desiredSubtreeSum : 0;\n  }\n\n  static class ResultPair {\n    public int currentTreeSum;\n    public boolean canBeSplit;\n\n    public ResultPair(int currentTreeSum, boolean canBeSplit) {\n      this.currentTreeSum = currentTreeSum;\n      this.canBeSplit = canBeSplit;\n    }\n  }\n\n  ResultPair trySubtrees(BinaryTree tree, int desiredSubtreeSum) {\n    if (tree == null) {\n      return new ResultPair(0, false);\n    }\n\n    ResultPair leftResultPair = trySubtrees(tree.left, desiredSubtreeSum);\n    ResultPair rightResultPair = trySubtrees(tree.right, desiredSubtreeSum);\n\n    int currentTreeSum = tree.value + leftResultPair.currentTreeSum\n      + rightResultPair.currentTreeSum;\n    boolean canBeSplit = leftResultPair.canBeSplit || rightResultPair.canBeSplit\n      || currentTreeSum == desiredSubtreeSum;\n    return new ResultPair(currentTreeSum, canBeSplit);\n  }\n\n  int getTreeSum(BinaryTree tree) {\n    if (tree == null) {\n      return 0;\n    }\n    return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right);\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(2);\n    tree.left = new Program.BinaryTree(4);\n    tree.left.left = new Program.BinaryTree(4);\n    tree.left.right = new Program.BinaryTree(6);\n    tree.right = new Program.BinaryTree(10);\n    tree.right.left = new Program.BinaryTree(3);\n    tree.right.right = new Program.BinaryTree(3);\n    int expected = 16;\n    int actual = new Program().splitBinaryTree(tree);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Program.BinaryTree tree = new Program.BinaryTree(2);\n    tree.left = new Program.BinaryTree(4);\n    tree.left.left = new Program.BinaryTree(4);\n    tree.left.right = new Program.BinaryTree(6);\n    tree.right = new Program.BinaryTree(10);\n    tree.right.left = new Program.BinaryTree(3);\n    tree.right.right = new Program.BinaryTree(3);\n    int expected = 16;\n    int actual = new Program().splitBinaryTree(tree);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexports.BinaryTree = BinaryTree;\n\nfunction splitBinaryTree(tree) {\n  // Write your code here.\n  return -1;\n}\n\n// Do not edit the line below.\nexports.splitBinaryTree = splitBinaryTree;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nclass BinaryTree {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the tree and\n// h is the height of the tree\nfunction splitBinaryTree(tree) {\n  const desiredSubtreeSum = getTreeSum(tree) / 2;\n  const canBeSplit = trySubtrees(tree, desiredSubtreeSum)[1];\n  return canBeSplit ? desiredSubtreeSum : 0;\n}\n\nfunction trySubtrees(tree, desiredSubtreeSum) {\n  if (tree === null) return [0, false];\n\n  const [leftSum, leftCanBeSplit] = trySubtrees(tree.left, desiredSubtreeSum);\n  const [rightSum, rightCanBeSplit] = trySubtrees(tree.right, desiredSubtreeSum);\n\n  const currentTreeSum = tree.value + leftSum + rightSum;\n  const canBeSplit = leftCanBeSplit || rightCanBeSplit || currentTreeSum === desiredSubtreeSum;\n  return [currentTreeSum, canBeSplit];\n}\n\nfunction getTreeSum(tree) {\n  if (tree === null) return 0;\n  return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right);\n}\n\n// Do not edit the lines below.\nexports.BinaryTree = BinaryTree;\nexports.splitBinaryTree = splitBinaryTree;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(2);\n  tree.left = new program.BinaryTree(4);\n  tree.left.left = new program.BinaryTree(4);\n  tree.left.right = new program.BinaryTree(6);\n  tree.right = new program.BinaryTree(10);\n  tree.right.left = new program.BinaryTree(3);\n  tree.right.right = new program.BinaryTree(3);\n  const expected = 16;\n  const actual = program.splitBinaryTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(2);\n  tree.left = new program.BinaryTree(4);\n  tree.left.left = new program.BinaryTree(4);\n  tree.left.right = new program.BinaryTree(6);\n  tree.right = new program.BinaryTree(10);\n  tree.right.left = new program.BinaryTree(3);\n  tree.right.right = new program.BinaryTree(3);\n  const expected = 16;\n  const actual = program.splitBinaryTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\nfun splitBinaryTree(tree: BinaryTree): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// This is an input class. Do not edit.\nopen class BinaryTree(value: Int) {\n    var value = value\n    var left: BinaryTree? = null\n    var right: BinaryTree? = null\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the tree and\n// h is the height of the tree\nfun splitBinaryTree(tree: BinaryTree): Int {\n    val desiredSubtreeSum = getTreeSum(tree).toDouble() / 2\n    val canBeSplit = trySubtrees(tree, desiredSubtreeSum).second\n    return if (canBeSplit) desiredSubtreeSum.toInt() else 0\n}\n\nfun trySubtrees(tree: BinaryTree?, desiredSubtreeSum: Double): Pair<Int, Boolean> {\n    if (tree == null) return Pair(0, false)\n\n    val (leftSum, leftCanBeSplit) = trySubtrees(tree.left, desiredSubtreeSum)\n    val (rightSum, rightCanBeSplit) = trySubtrees(tree.right, desiredSubtreeSum)\n\n    val currentTreeSum = tree.value + leftSum + rightSum\n    val canBeSplit = leftCanBeSplit || rightCanBeSplit || currentTreeSum.toDouble() == desiredSubtreeSum\n    return Pair(currentTreeSum, canBeSplit)\n}\n\nfun getTreeSum(tree: BinaryTree?): Int {\n    if (tree == null) return 0\n    return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right)\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.splitBinaryTree\nimport com.algoexpert.program.BinaryTree as BinaryTree\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BinaryTree(2)\n        tree.left = BinaryTree(4)\n        tree.left!!.left = BinaryTree(4)\n        tree.left!!.right = BinaryTree(6)\n        tree.right = BinaryTree(10)\n        tree.right!!.left = BinaryTree(3)\n        tree.right!!.right = BinaryTree(3)\n        val expected = 16\n        val output = splitBinaryTree(tree)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.splitBinaryTree\nimport com.algoexpert.program.BinaryTree as BinaryTree\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val tree = BinaryTree(2)\n        tree.left = BinaryTree(4)\n        tree.left!!.left = BinaryTree(4)\n        tree.left!!.right = BinaryTree(6)\n        tree.right = BinaryTree(10)\n        tree.right!!.left = BinaryTree(3)\n        tree.right!!.right = BinaryTree(3)\n        val expected = 16\n        val output = splitBinaryTree(tree)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef splitBinaryTree(tree):\n    # Write your code here.\n    return -1\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input class. Do not edit.\nclass BinaryTree:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\n# O(n) time | O(h) space - where n is the number of nodes in the tree and\n# h is the height of the tree\ndef splitBinaryTree(tree):\n    desiredSubtreeSum = getTreeSum(tree) / 2\n    canBeSplit = trySubtrees(tree, desiredSubtreeSum)[1]\n    return desiredSubtreeSum if canBeSplit else 0\n\n\ndef trySubtrees(tree, desiredSubtreeSum):\n    if tree is None:\n        return (0, False)\n\n    leftSum, leftCanBeSplit = trySubtrees(tree.left, desiredSubtreeSum)\n    rightSum, rightCanBeSplit = trySubtrees(tree.right, desiredSubtreeSum)\n\n    currentTreeSum = tree.value + leftSum + rightSum\n    canBeSplit = leftCanBeSplit or rightCanBeSplit or currentTreeSum == desiredSubtreeSum\n    return (currentTreeSum, canBeSplit)\n\n\ndef getTreeSum(tree):\n    if tree is None:\n        return 0\n    return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right)\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        tree = program.BinaryTree(2)\n        tree.left = program.BinaryTree(4)\n        tree.left.left = program.BinaryTree(4)\n        tree.left.right = program.BinaryTree(6)\n        tree.right = program.BinaryTree(10)\n        tree.right.left = program.BinaryTree(3)\n        tree.right.right = program.BinaryTree(3)\n        expected = 16\n        actual = program.splitBinaryTree(tree)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        tree = program.BinaryTree(2)\n        tree.left = program.BinaryTree(4)\n        tree.left.left = program.BinaryTree(4)\n        tree.left.right = program.BinaryTree(6)\n        tree.right = program.BinaryTree(10)\n        tree.right.left = program.BinaryTree(3)\n        tree.right.right = program.BinaryTree(3)\n        expected = 16\n        actual = program.splitBinaryTree(tree)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "# This is an input struct. Do not edit.\nclass BinaryTree\n    attr_accessor :value\n    attr_accessor :left\n    attr_accessor :right\n\n    def initialize(value)\n        @value = value\n        @left = nil\n        @right = nil\n    end\nend\n\n\nclass Program\n    def splitBinaryTree(tree)\n        # Write your code here.\n        return -1\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# This is an input struct. Do not edit.\nclass BinaryTree\n    attr_accessor :value\n    attr_accessor :left\n    attr_accessor :right\n\n    def initialize(value)\n        @value = value\n        @left = nil\n        @right = nil\n    end\nend\n\n\nclass Program\n    def splitBinaryTree(tree)\n        # Write your code here.\n        return -1\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.splitBinaryTree\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.splitBinaryTree\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func splitBinaryTree(_ tree: BinaryTree) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // This is an input class. Do not edit.\n  class BinaryTree {\n    var value: Int\n    var left: BinaryTree?\n    var right: BinaryTree?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  // O(n) time | O(h) space - where n is the number of nodes in the tree and\n  // h is the height of the tree\n  func splitBinaryTree(_ tree: BinaryTree) -> Int {\n    let treeSum = getTreeSum(tree)\n    if treeSum % 2 != 0 {\n      return 0\n    }\n\n    let desiredSubtreeSum = treeSum / 2\n    let (_, canBeSplit) = trySubtrees(tree, desiredSubtreeSum)\n    if canBeSplit {\n      return desiredSubtreeSum\n    }\n    return 0\n  }\n\n  func trySubtrees(_ tree: BinaryTree?, _ desiredSubtreeSum: Int) -> (Int, Bool) {\n    if tree == nil {\n      return (0, false)\n    }\n\n    let (leftSum, leftCanBeSplit) = trySubtrees(tree!.left, desiredSubtreeSum)\n    let (rightSum, rightCanBeSplit) = trySubtrees(tree!.right, desiredSubtreeSum)\n\n    let currentTreeSum = tree!.value + leftSum + rightSum\n    let canBeSplit = leftCanBeSplit || rightCanBeSplit || currentTreeSum == desiredSubtreeSum\n    return (currentTreeSum, canBeSplit)\n  }\n\n  func getTreeSum(_ tree: BinaryTree?) -> Int {\n    if tree == nil {\n      return 0\n    }\n    return tree!.value + getTreeSum(tree!.left) + getTreeSum(tree!.right)\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var tree = Program.BinaryTree(value: 2)\n      tree.left = Program.BinaryTree(value: 4)\n      tree.left!.left = Program.BinaryTree(value: 4)\n      tree.left!.right = Program.BinaryTree(value: 6)\n      tree.right = Program.BinaryTree(value: 10)\n      tree.right!.left = Program.BinaryTree(value: 3)\n      tree.right!.right = Program.BinaryTree(value: 3)\n      var expected = 16\n      var actual = Program().splitBinaryTree(tree)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var tree = Program.BinaryTree(value: 2)\n      tree.left = Program.BinaryTree(value: 4)\n      tree.left!.left = Program.BinaryTree(value: 4)\n      tree.left!.right = Program.BinaryTree(value: 6)\n      tree.right = Program.BinaryTree(value: 10)\n      tree.right!.left = Program.BinaryTree(value: 3)\n      tree.right!.right = Program.BinaryTree(value: 3)\n      var expected = 16\n      var actual = Program().splitBinaryTree(tree)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function splitBinaryTree(tree: BinaryTree) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// This is an input class. Do not edit.\nexport class BinaryTree {\n  value: number;\n  left: BinaryTree | null;\n  right: BinaryTree | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(h) space - where n is the number of nodes in the tree and\n// h is the height of the tree\nexport function splitBinaryTree(tree: BinaryTree) {\n  const desiredSubtreeSum = getTreeSum(tree) / 2;\n  const canBeSplit = trySubtrees(tree, desiredSubtreeSum)[1];\n  return canBeSplit ? desiredSubtreeSum : 0;\n}\n\nfunction trySubtrees(tree: BinaryTree | null, desiredSubtreeSum: number): [number, boolean] {\n  if (tree === null) return [0, false];\n\n  const [leftSum, leftCanBeSplit] = trySubtrees(tree.left, desiredSubtreeSum);\n  const [rightSum, rightCanBeSplit] = trySubtrees(tree.right, desiredSubtreeSum);\n\n  const currentTreeSum = tree.value + leftSum + rightSum;\n  const canBeSplit = leftCanBeSplit || rightCanBeSplit || currentTreeSum === desiredSubtreeSum;\n  return [currentTreeSum, canBeSplit];\n}\n\nfunction getTreeSum(tree: BinaryTree | null): number {\n  if (tree === null) return 0;\n  return tree.value + getTreeSum(tree.left) + getTreeSum(tree.right);\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(2);\n  tree.left = new program.BinaryTree(4);\n  tree.left.left = new program.BinaryTree(4);\n  tree.left.right = new program.BinaryTree(6);\n  tree.right = new program.BinaryTree(10);\n  tree.right.left = new program.BinaryTree(3);\n  tree.right.right = new program.BinaryTree(3);\n  const expected = 16;\n  const actual = program.splitBinaryTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const tree = new program.BinaryTree(2);\n  tree.left = new program.BinaryTree(4);\n  tree.left.left = new program.BinaryTree(4);\n  tree.left.right = new program.BinaryTree(6);\n  tree.right = new program.BinaryTree(10);\n  tree.right.left = new program.BinaryTree(3);\n  tree.right.right = new program.BinaryTree(3);\n  const expected = 16;\n  const actual = program.splitBinaryTree(tree);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "tree",
      "example": {
        "nodes": [
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "0"
      },
      "schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "tests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "0"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": null,
            "value": -2
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": null,
            "right": "2-2",
            "value": 2
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "4",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "2-2",
            "value": 1
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "2",
            "value": 3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": "6-2",
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "10",
            "value": 3
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6-2",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": "6-2",
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "8",
            "value": 3
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "6-2",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": "6-2",
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "4",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6-2",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "2",
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "2",
            "left": "15",
            "right": "10",
            "value": 2
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          },
          {
            "id": "10",
            "left": "100",
            "right": "200",
            "value": 10
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "200",
            "left": null,
            "right": null,
            "value": 200
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "15",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": "3",
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": "102",
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "102",
            "left": null,
            "right": null,
            "value": 102
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "20",
            "right": "9",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": "102",
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "102",
            "left": null,
            "right": null,
            "value": 102
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "4",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": "5",
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "7",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "4",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": "5",
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "9",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": "-2-2",
            "value": -2
          },
          {
            "id": "-2-2",
            "left": null,
            "right": null,
            "value": -2
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": "0",
            "value": -2
          },
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "1-1",
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "-5",
            "value": 2
          },
          {
            "id": "1-1",
            "left": "12",
            "right": null,
            "value": 1
          },
          {
            "id": "12",
            "left": null,
            "right": "-21",
            "value": 12
          },
          {
            "id": "-21",
            "left": null,
            "right": null,
            "value": -21
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "-4",
            "value": 3
          },
          {
            "id": "-4",
            "left": null,
            "right": "5",
            "value": -4
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "9",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "-4",
            "value": 3
          },
          {
            "id": "-4",
            "left": null,
            "right": "9",
            "value": -4
          },
          {
            "id": "9",
            "left": null,
            "right": "5",
            "value": 9
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-20",
            "right": "9",
            "value": 1
          },
          {
            "id": "9",
            "left": "-13",
            "right": "4",
            "value": 9
          },
          {
            "id": "-20",
            "left": "-30",
            "right": "17",
            "value": -20
          },
          {
            "id": "-30",
            "left": "8",
            "right": null,
            "value": -30
          },
          {
            "id": "17",
            "left": "-26",
            "right": "-17",
            "value": 17
          },
          {
            "id": "-26",
            "left": "19",
            "right": null,
            "value": -26
          },
          {
            "id": "-17",
            "left": null,
            "right": null,
            "value": -17
          },
          {
            "id": "-13",
            "left": "42",
            "right": null,
            "value": -13
          },
          {
            "id": "4",
            "left": "3",
            "right": "-11",
            "value": 4
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "42",
            "left": null,
            "right": null,
            "value": 42
          },
          {
            "id": "19",
            "left": null,
            "right": null,
            "value": 19
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "-11",
            "left": null,
            "right": null,
            "value": -11
          }
        ],
        "root": "1"
      }
    }
  ],
  "jsonTests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "0"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": null,
            "value": -2
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "2",
            "left": null,
            "right": "2-2",
            "value": 2
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "4",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "1-2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "1-2",
            "left": null,
            "right": "2-2",
            "value": 1
          },
          {
            "id": "2-2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "2",
            "value": 3
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": "6-2",
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "10",
            "value": 3
          },
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          },
          {
            "id": "6-2",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": "6-2",
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "8",
            "value": 3
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "6-2",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "6",
            "right": "3",
            "value": 1
          },
          {
            "id": "6",
            "left": "6-2",
            "right": null,
            "value": 6
          },
          {
            "id": "3",
            "left": null,
            "right": "4",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "6-2",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "2",
            "right": "3",
            "value": 1
          },
          {
            "id": "2",
            "left": "4",
            "right": "5",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "7",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": null,
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "2",
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "2",
            "left": "15",
            "right": "10",
            "value": 2
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          },
          {
            "id": "10",
            "left": "100",
            "right": "200",
            "value": 10
          },
          {
            "id": "100",
            "left": null,
            "right": null,
            "value": 100
          },
          {
            "id": "200",
            "left": null,
            "right": null,
            "value": 200
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "15",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": "3",
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": null,
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "9",
            "right": "20",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": "102",
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "102",
            "left": null,
            "right": null,
            "value": 102
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "20",
            "right": "9",
            "value": 1
          },
          {
            "id": "9",
            "left": "5",
            "right": "2",
            "value": 9
          },
          {
            "id": "20",
            "left": "30",
            "right": "10",
            "value": 20
          },
          {
            "id": "30",
            "left": null,
            "right": null,
            "value": 30
          },
          {
            "id": "10",
            "left": "35",
            "right": "25",
            "value": 10
          },
          {
            "id": "35",
            "left": null,
            "right": null,
            "value": 35
          },
          {
            "id": "25",
            "left": null,
            "right": null,
            "value": 25
          },
          {
            "id": "5",
            "left": "102",
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "3",
            "right": null,
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "102",
            "left": null,
            "right": null,
            "value": 102
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "4",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": "5",
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "7",
            "value": 6
          },
          {
            "id": "7",
            "left": null,
            "right": null,
            "value": 7
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "4",
            "value": 3
          },
          {
            "id": "4",
            "left": null,
            "right": "5",
            "value": 4
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "9",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": "-2-2",
            "value": -2
          },
          {
            "id": "-2-2",
            "left": null,
            "right": null,
            "value": -2
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "-2",
            "left": null,
            "right": "0",
            "value": -2
          },
          {
            "id": "0",
            "left": null,
            "right": null,
            "value": 0
          }
        ],
        "root": "-2"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "1-1",
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "-5",
            "value": 2
          },
          {
            "id": "1-1",
            "left": "12",
            "right": null,
            "value": 1
          },
          {
            "id": "12",
            "left": null,
            "right": "-21",
            "value": 12
          },
          {
            "id": "-21",
            "left": null,
            "right": null,
            "value": -21
          },
          {
            "id": "-5",
            "left": null,
            "right": null,
            "value": -5
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "-4",
            "value": 3
          },
          {
            "id": "-4",
            "left": null,
            "right": "5",
            "value": -4
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": "9",
            "value": 6
          },
          {
            "id": "9",
            "left": null,
            "right": null,
            "value": 9
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": null,
            "right": "2",
            "value": 1
          },
          {
            "id": "2",
            "left": null,
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": "-4",
            "value": 3
          },
          {
            "id": "-4",
            "left": null,
            "right": "9",
            "value": -4
          },
          {
            "id": "9",
            "left": null,
            "right": "5",
            "value": 9
          },
          {
            "id": "5",
            "left": null,
            "right": "6",
            "value": 5
          },
          {
            "id": "6",
            "left": null,
            "right": null,
            "value": 6
          }
        ],
        "root": "1"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "1",
            "left": "-20",
            "right": "9",
            "value": 1
          },
          {
            "id": "9",
            "left": "-13",
            "right": "4",
            "value": 9
          },
          {
            "id": "-20",
            "left": "-30",
            "right": "17",
            "value": -20
          },
          {
            "id": "-30",
            "left": "8",
            "right": null,
            "value": -30
          },
          {
            "id": "17",
            "left": "-26",
            "right": "-17",
            "value": 17
          },
          {
            "id": "-26",
            "left": "19",
            "right": null,
            "value": -26
          },
          {
            "id": "-17",
            "left": null,
            "right": null,
            "value": -17
          },
          {
            "id": "-13",
            "left": "42",
            "right": null,
            "value": -13
          },
          {
            "id": "4",
            "left": "3",
            "right": "-11",
            "value": 4
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "42",
            "left": null,
            "right": null,
            "value": 42
          },
          {
            "id": "19",
            "left": null,
            "right": null,
            "value": 19
          },
          {
            "id": "8",
            "left": null,
            "right": null,
            "value": 8
          },
          {
            "id": "-11",
            "left": null,
            "right": null,
            "value": -11
          }
        ],
        "root": "1"
      }
    }
  ],
  "changelog": []
}