{
  "uid": "square-of-zeroes",
  "testStrategy": "JSON",
  "name": "Square of Zeroes",
  "version": 0,
  "releaseDate": "2020-05-11T00:00:00Z",
  "category": "Dynamic Programming",
  "difficulty": 4,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 4096,
    "failureCount": 1429
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "416569223",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 2891
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a square-shaped n x n two-dimensional array of\n  only 1s and 0s and returns a boolean representing whether the input matrix\n  contains a square whose borders are made up of only 0s.\n</p>\n<p>\n  Note that a 1 x 1 square doesn't count as a valid square for the purpose of\n  this question. In other words, a singular <span>0</span> in the input matrix\n  doesn't constitute a square whose borders are made up of only 0s; a square of\n  zeroes has to be at least 2 x 2.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">matrix</span> = [\n  [1, 1, 1, 0, 1, 0],\n  [0, 0, 0, 0, 0, 1],\n  [0, 1, 1, 1, 0, 1],\n  [0, 0, 0, 1, 0, 1],\n  [0, 1, 1, 1, 0, 1],\n  [0, 0, 0, 0, 0, 1],\n]\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n<span class=\"CodeEditor-promptComment\">[</span>\n<span class=\"CodeEditor-promptComment\">  [ ,  ,  ,  ,  ,  ],</span>\n<span class=\"CodeEditor-promptComment\">  [0, 0, 0, 0, 0,  ],</span>\n<span class=\"CodeEditor-promptComment\">  [0,  ,  ,  , 0,  ],</span>\n<span class=\"CodeEditor-promptComment\">  [0,  ,  ,  , 0,  ],</span>\n<span class=\"CodeEditor-promptComment\">  [0,  ,  ,  , 0,  ],</span>\n<span class=\"CodeEditor-promptComment\">  [0, 0, 0, 0, 0,  ],</span>\n<span class=\"CodeEditor-promptComment\">]</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nFor the purpose of this question, a square is defined by its topmost and bottommost rows and by its leftmost and rightmost columns. Given a pair of rows and a pair of columns that form a valid square, you can easily determine if the relevant square is a square of zeroes with two for loops.\n</p>\n",
    "\n<p>\nYou can apply the logic described in Hint #1 on every valid square in the input matrix in order to solve this problem. To find every valid square, you can either traverse the matrix iteratively with three nested loops, or you can start out at the outtermost square and recursively go inwards in the matrix, checking the squares obtained by moving each corner of a square inwards. If you go with this recursive approach, you'll need to use a cache to avoid doing many duplicate computations.\n</p>\n",
    "\n<p>\nThe operation described in Hint #1 is a computationally expensive one to have to repeat for every single square in the matrix. Can you precompute certain values to make this operation a constant-time operation?\n</p>\n",
    "\n<p>\nYou can make the operation described in Hint #1 a constant-time operation by precomputing some values in the matrix. Specifically, you can precompute two values for every element in the matrix: the number of 0s to the right of each element (including the element itself) and the number of 0s below each element (including the element itself). You can compute these values by iterating through the matrix starting at the bottom right corner and moving your way up by traversing each row from right to left; applying some simple dynamic programming techniques will allow you to build up these values trivially. Once you have these values precomputed, you can perform the operation described in Hint #1 in constant time just by looking at the number of 0s below any square's two top corners and the number of 0s to the right of the same square's two left corners.\n</p>"
  ],
  "spaceTime": "O(n^3) time | O(n^2) space - where n is the height and width of the matrix",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool squareOfZeroes(vector<vector<int>> matrix) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nbool hasSquareOfZeroes(\n  vector<vector<int>>& matrix,\n  int r1,\n  int c1,\n  int r2,\n  int c2,\n  unordered_map<string, bool>& cache\n);\nbool isSquareOfZeroes(\n  vector<vector<int>>& matrix, int r1, int c1, int r2, int c2\n);\n\n// O(n^4) time | O(n^3) space - where n is the height and width of the matrix\nbool squareOfZeroes(vector<vector<int>> matrix) {\n  int lastIdx = matrix.size() - 1;\n  unordered_map<string, bool> cache;\n  return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, cache);\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nbool hasSquareOfZeroes(\n  vector<vector<int>>& matrix,\n  int r1,\n  int c1,\n  int r2,\n  int c2,\n  unordered_map<string, bool>& cache\n) {\n  if (r1 >= r2 || c1 >= c2) return false;\n\n  string key = to_string(r1) + '-' + to_string(c1) + '-' + to_string(r2) + '-' +\n               to_string(c2);\n  if (cache.find(key) != cache.end()) return cache[key];\n\n  cache[key] =\n    isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n    hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n    hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n  return cache[key];\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nbool isSquareOfZeroes(\n  vector<vector<int>>& matrix, int r1, int c1, int r2, int c2\n) {\n  for (int row = r1; row < r2 + 1; row++) {\n    if (matrix[row][c1] != 0 || matrix[row][c2] != 0) return false;\n  }\n  for (int col = c1; col < c2 + 1; col++) {\n    if (matrix[r1][col] != 0 || matrix[r2][col] != 0) return false;\n  }\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nbool isSquareOfZeroes(\n  vector<vector<int>> matrix, int r1, int c1, int r2, int c2\n);\n\n// O(n^4) time | O(1) space - where n is the height and width of the matrix\nbool squareOfZeroes(vector<vector<int>> matrix) {\n  int n = matrix.size();\n  for (int topRow = 0; topRow < n; topRow++) {\n    for (int leftCol = 0; leftCol < n; leftCol++) {\n      int squareLength = 2;\n      while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n        int bottomRow = topRow + squareLength - 1;\n        int rightCol = leftCol + squareLength - 1;\n        if (isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol))\n          return true;\n        squareLength++;\n      }\n    }\n  }\n  return false;\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nbool isSquareOfZeroes(\n  vector<vector<int>> matrix, int r1, int c1, int r2, int c2\n) {\n  for (int row = r1; row < r2 + 1; row++) {\n    if (matrix[row][c1] != 0 || matrix[row][c2] != 0) return false;\n  }\n  for (int col = c1; col < c2 + 1; col++) {\n    if (matrix[r1][col] != 0 || matrix[r2][col] != 0) return false;\n  }\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nstruct InfoMatrixItem {\n  int numZeroesBelow;\n  int numZeroesRight;\n};\n\nbool hasSquareOfZeroes(\n  vector<vector<InfoMatrixItem>>& infoMatrix,\n  int r1,\n  int c1,\n  int r2,\n  int c2,\n  unordered_map<string, bool>& cache\n);\nbool isSquareOfZeroes(\n  vector<vector<InfoMatrixItem>>& infoMatrix, int r1, int c1, int r2, int c2\n);\nvector<vector<InfoMatrixItem>> preComputedNumOfZeroes(vector<vector<int>> matrix\n);\n\n// O(n^3) time | O(n^3) space - where n is the height and width of the matrix\nbool squareOfZeroes(vector<vector<int>> matrix) {\n  vector<vector<InfoMatrixItem>> infoMatrix = preComputedNumOfZeroes(matrix);\n  int lastIdx = matrix.size() - 1;\n  unordered_map<string, bool> cache;\n  return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, cache);\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nbool hasSquareOfZeroes(\n  vector<vector<InfoMatrixItem>>& infoMatrix,\n  int r1,\n  int c1,\n  int r2,\n  int c2,\n  unordered_map<string, bool>& cache\n) {\n  if (r1 >= r2 || c1 >= c2) return false;\n\n  string key = to_string(r1) + '-' + to_string(c1) + '-' + to_string(r2) + '-' +\n               to_string(c2);\n  if (cache.find(key) != cache.end()) return cache[key];\n\n  cache[key] =\n    isSquareOfZeroes(infoMatrix, r1, c1, r2, c2) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n  return cache[key];\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nbool isSquareOfZeroes(\n  vector<vector<InfoMatrixItem>>& infoMatrix, int r1, int c1, int r2, int c2\n) {\n  int squareLength = c2 - c1 + 1;\n  bool hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n  bool hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n  bool hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n  bool hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n  return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n}\n\nvector<vector<InfoMatrixItem>> preComputedNumOfZeroes(vector<vector<int>> matrix\n) {\n  vector<vector<InfoMatrixItem>> infoMatrix;\n  for (int i = 0; i < matrix.size(); i++) {\n    vector<InfoMatrixItem> inner;\n    for (int j = 0; j < matrix[i].size(); j++) {\n      int numZeroes = matrix[i][j] == 0 ? 1 : 0;\n      inner.push_back(InfoMatrixItem{numZeroes, numZeroes});\n    }\n    infoMatrix.push_back(inner);\n  }\n\n  int lastIdx = matrix.size() - 1;\n  for (int row = lastIdx; row >= 0; row--) {\n    for (int col = lastIdx; col >= 0; col--) {\n      if (matrix[row][col] == 1) continue;\n      if (row < lastIdx) {\n        infoMatrix[row][col].numZeroesBelow +=\n          infoMatrix[row + 1][col].numZeroesBelow;\n      }\n      if (col < lastIdx) {\n        infoMatrix[row][col].numZeroesRight +=\n          infoMatrix[row][col + 1].numZeroesRight;\n      }\n    }\n  }\n\n  return infoMatrix;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing namespace std;\n\nstruct InfoMatrixItem {\n  int numZeroesBelow;\n  int numZeroesRight;\n};\n\nbool isSquareOfZeroes(\n  vector<vector<InfoMatrixItem>> infoMatrix, int r1, int c1, int r2, int c2\n);\nvector<vector<InfoMatrixItem>> preComputedNumOfZeroes(vector<vector<int>> matrix\n);\n\n// O(n^3) time | O(n^2) space - where n is the height and width of the matrix\nbool squareOfZeroes(vector<vector<int>> matrix) {\n  vector<vector<InfoMatrixItem>> infoMatrix = preComputedNumOfZeroes(matrix);\n  int n = matrix.size();\n  for (int topRow = 0; topRow < n; topRow++) {\n    for (int leftCol = 0; leftCol < n; leftCol++) {\n      int squareLength = 2;\n      while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n        int bottomRow = topRow + squareLength - 1;\n        int rightCol = leftCol + squareLength - 1;\n        if (isSquareOfZeroes(infoMatrix, topRow, leftCol, bottomRow, rightCol))\n          return true;\n        squareLength++;\n      }\n    }\n  }\n  return false;\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nbool isSquareOfZeroes(\n  vector<vector<InfoMatrixItem>> infoMatrix, int r1, int c1, int r2, int c2\n) {\n  int squareLength = c2 - c1 + 1;\n  bool hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n  bool hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n  bool hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n  bool hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n  return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n}\n\nvector<vector<InfoMatrixItem>> preComputedNumOfZeroes(vector<vector<int>> matrix\n) {\n  vector<vector<InfoMatrixItem>> infoMatrix;\n  for (int i = 0; i < matrix.size(); i++) {\n    vector<InfoMatrixItem> inner;\n    for (int j = 0; j < matrix[i].size(); j++) {\n      int numZeroes = matrix[i][j] == 0 ? 1 : 0;\n      inner.push_back(InfoMatrixItem{numZeroes, numZeroes});\n    }\n    infoMatrix.push_back(inner);\n  }\n\n  int lastIdx = matrix.size() - 1;\n  for (int row = lastIdx; row >= 0; row--) {\n    for (int col = lastIdx; col >= 0; col--) {\n      if (matrix[row][col] == 1) continue;\n      if (row < lastIdx) {\n        infoMatrix[row][col].numZeroesBelow +=\n          infoMatrix[row + 1][col].numZeroesBelow;\n      }\n      if (col < lastIdx) {\n        infoMatrix[row][col].numZeroesRight +=\n          infoMatrix[row][col + 1].numZeroesRight;\n      }\n    }\n  }\n\n  return infoMatrix;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> input = {\n        {1, 1, 1, 0, 1, 0},\n        {0, 0, 0, 0, 0, 1},\n        {0, 1, 1, 1, 0, 1},\n        {0, 0, 0, 1, 0, 1},\n        {0, 1, 1, 1, 0, 1},\n        {0, 0, 0, 0, 0, 1},\n      };\n      assert(squareOfZeroes(input));\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> input = {\n        {1, 1, 1, 0, 1, 0},\n        {0, 0, 0, 0, 0, 1},\n        {0, 1, 1, 1, 0, 1},\n        {0, 0, 0, 1, 0, 1},\n        {0, 1, 1, 1, 0, 1},\n        {0, 0, 0, 0, 0, 1},\n      };\n      assert(squareOfZeroes(input));\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n  public static bool SquareOfZeroes(List<List<int> > matrix) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^4) time | O(n^3) space - where n is the height and width of the matrix\n  public static bool SquareOfZeroes(List<List<int> > matrix) {\n    int lastIdx = matrix.Count - 1;\n    Dictionary<string, bool> cache = new Dictionary<string, bool>();\n    return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, cache);\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static bool hasSquareOfZeroes(\n    List<List<int> > matrix,\n    int r1,\n    int c1,\n    int r2,\n    int c2,\n    Dictionary<string, bool> cache\n  ) {\n    if (r1 >= r2 || c1 >= c2) return false;\n\n    string key = r1.ToString() + '-' + c1.ToString() + '-' + r2.ToString() +\n                 '-' + c2.ToString();\n    if (cache.ContainsKey(key)) return cache[key];\n\n    cache[key] =\n      isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n      hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n      hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n      hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n      hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n      hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n    return cache[key];\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static bool isSquareOfZeroes(\n    List<List<int> > matrix, int r1, int c1, int r2, int c2\n  ) {\n    for (int row = r1; row < r2 + 1; row++) {\n      if (matrix[row][c1] != 0 || matrix[row][c2] != 0) return false;\n    }\n    for (int col = c1; col < c2 + 1; col++) {\n      if (matrix[r1][col] != 0 || matrix[r2][col] != 0) return false;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^4) time | O(1) space - where n is the height and width of the matrix\n  public static bool SquareOfZeroes(List<List<int> > matrix) {\n    int n = matrix.Count;\n    for (int topRow = 0; topRow < n; topRow++) {\n      for (int leftCol = 0; leftCol < n; leftCol++) {\n        int squareLength = 2;\n        while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n          int bottomRow = topRow + squareLength - 1;\n          int rightCol = leftCol + squareLength - 1;\n          if (isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol))\n            return true;\n          squareLength++;\n        }\n      }\n    }\n    return false;\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static bool isSquareOfZeroes(\n    List<List<int> > matrix, int r1, int c1, int r2, int c2\n  ) {\n    for (int row = r1; row < r2 + 1; row++) {\n      if (matrix[row][c1] != 0 || matrix[row][c2] != 0) return false;\n    }\n    for (int col = c1; col < c2 + 1; col++) {\n      if (matrix[r1][col] != 0 || matrix[r2][col] != 0) return false;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^3) time | O(n^3) space - where n is the height and width of the matrix\n  public static bool SquareOfZeroes(List<List<int> > matrix) {\n    List<List<InfoMatrixItem> > infoMatrix = preComputedNumOfZeroes(matrix);\n    int lastIdx = matrix.Count - 1;\n    Dictionary<string, bool> cache = new Dictionary<string, bool>();\n    return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, cache);\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static bool hasSquareOfZeroes(\n    List<List<InfoMatrixItem> > matrix,\n    int r1,\n    int c1,\n    int r2,\n    int c2,\n    Dictionary<string, bool> cache\n  ) {\n    if (r1 >= r2 || c1 >= c2) return false;\n\n    string key = r1.ToString() + '-' + c1.ToString() + '-' + r2.ToString() +\n                 '-' + c2.ToString();\n    if (cache.ContainsKey(key)) return cache[key];\n\n    cache[key] =\n      isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n      hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n      hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n      hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n      hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n      hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache);\n    return cache[key];\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static bool isSquareOfZeroes(\n    List<List<InfoMatrixItem> > infoMatrix, int r1, int c1, int r2, int c2\n  ) {\n    int squareLength = c2 - c1 + 1;\n    bool hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n    bool hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n    bool hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n    bool hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n  }\n\n  public static List<List<InfoMatrixItem> > preComputedNumOfZeroes(\n    List<List<int> > matrix\n  ) {\n    List<List<InfoMatrixItem> > infoMatrix = new List<List<InfoMatrixItem> >();\n    for (int i = 0; i < matrix.Count; i++) {\n      List<InfoMatrixItem> inner = new List<InfoMatrixItem>();\n      for (int j = 0; j < matrix[i].Count; j++) {\n        int numZeroes = matrix[i][j] == 0 ? 1 : 0;\n        inner.Add(new InfoMatrixItem(numZeroes, numZeroes));\n      }\n      infoMatrix.Add(inner);\n    }\n\n    int lastIdx = matrix.Count - 1;\n    for (int row = lastIdx; row >= 0; row--) {\n      for (int col = lastIdx; col >= 0; col--) {\n        if (matrix[row][col] == 1) continue;\n        if (row < lastIdx) {\n          infoMatrix[row][col].numZeroesBelow +=\n            infoMatrix[row + 1][col].numZeroesBelow;\n        }\n        if (col < lastIdx) {\n          infoMatrix[row][col].numZeroesRight +=\n            infoMatrix[row][col + 1].numZeroesRight;\n        }\n      }\n    }\n\n    return infoMatrix;\n  }\n\n  public class InfoMatrixItem {\n    public int numZeroesBelow;\n    public int numZeroesRight;\n\n    public InfoMatrixItem(int numZeroesBelow, int numZeroesRight) {\n      this.numZeroesBelow = numZeroesBelow;\n      this.numZeroesRight = numZeroesRight;\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n  // O(n^3) time | O(n^2) space - where n is the height and width of the matrix\n  public static bool SquareOfZeroes(List<List<int> > matrix) {\n    List<List<InfoMatrixItem> > infoMatrix = preComputedNumOfZeroes(matrix);\n    int n = matrix.Count;\n    for (int topRow = 0; topRow < n; topRow++) {\n      for (int leftCol = 0; leftCol < n; leftCol++) {\n        int squareLength = 2;\n        while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n          int bottomRow = topRow + squareLength - 1;\n          int rightCol = leftCol + squareLength - 1;\n          if (isSquareOfZeroes(\n                infoMatrix, topRow, leftCol, bottomRow, rightCol\n              ))\n            return true;\n          squareLength++;\n        }\n      }\n    }\n    return false;\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static bool isSquareOfZeroes(\n    List<List<InfoMatrixItem> > infoMatrix, int r1, int c1, int r2, int c2\n  ) {\n    int squareLength = c2 - c1 + 1;\n    bool hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n    bool hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n    bool hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n    bool hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n  }\n\n  public static List<List<InfoMatrixItem> > preComputedNumOfZeroes(\n    List<List<int> > matrix\n  ) {\n    List<List<InfoMatrixItem> > infoMatrix = new List<List<InfoMatrixItem> >();\n    for (int i = 0; i < matrix.Count; i++) {\n      List<InfoMatrixItem> inner = new List<InfoMatrixItem>();\n      for (int j = 0; j < matrix[i].Count; j++) {\n        int numZeroes = matrix[i][j] == 0 ? 1 : 0;\n        inner.Add(new InfoMatrixItem(numZeroes, numZeroes));\n      }\n      infoMatrix.Add(inner);\n    }\n\n    int lastIdx = matrix.Count - 1;\n    for (int row = lastIdx; row >= 0; row--) {\n      for (int col = lastIdx; col >= 0; col--) {\n        if (matrix[row][col] == 1) continue;\n        if (row < lastIdx) {\n          infoMatrix[row][col].numZeroesBelow +=\n            infoMatrix[row + 1][col].numZeroesBelow;\n        }\n        if (col < lastIdx) {\n          infoMatrix[row][col].numZeroesRight +=\n            infoMatrix[row][col + 1].numZeroesRight;\n        }\n      }\n    }\n\n    return infoMatrix;\n  }\n\n  public class InfoMatrixItem {\n    public int numZeroesBelow;\n    public int numZeroesRight;\n\n    public InfoMatrixItem(int numZeroesBelow, int numZeroesRight) {\n      this.numZeroesBelow = numZeroesBelow;\n      this.numZeroesRight = numZeroesRight;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<List<int> > test = new List<List<int> >();\n    test.Add(new List<int>() { 1, 1, 1, 0, 1, 0 });\n    test.Add(new List<int>() { 0, 0, 0, 0, 0, 1 });\n    test.Add(new List<int>() { 0, 1, 1, 1, 0, 1 });\n    test.Add(new List<int>() { 0, 0, 0, 1, 0, 1 });\n    test.Add(new List<int>() { 0, 1, 1, 1, 0, 1 });\n    test.Add(new List<int>() { 0, 0, 0, 0, 0, 1 });\n    Utils.AssertTrue(Program.SquareOfZeroes(test));\n  }\n}\n",
      "unitTests": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    List<List<int> > test = new List<List<int> >();\n    test.Add(new List<int>() { 1, 1, 1, 0, 1, 0 });\n    test.Add(new List<int>() { 0, 0, 0, 0, 0, 1 });\n    test.Add(new List<int>() { 0, 1, 1, 1, 0, 1 });\n    test.Add(new List<int>() { 0, 0, 0, 1, 0, 1 });\n    test.Add(new List<int>() { 0, 1, 1, 1, 0, 1 });\n    test.Add(new List<int>() { 0, 0, 0, 0, 0, 1 });\n    Utils.AssertTrue(Program.SquareOfZeroes(test));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc SquareOfZeroes(matrix [][]int) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"fmt\"\n\n// O(n^4) time | O(n^3) space - where n is the height and width of the matrix\nfunc SquareOfZeroes(matrix [][]int) bool {\n\tlastIdx := len(matrix) - 1\n\treturn hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, map[string]bool{})\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunc hasSquareOfZeroes(matrix [][]int, r1, c1, r2, c2 int, cache map[string]bool) bool {\n\tif r1 >= r2 || c1 >= c2 {\n\t\treturn false\n\t}\n\n\tkey := fmt.Sprintf(\"%d-%d-%d-%d\", r1, c1, r2, c2)\n\tif out, found := cache[key]; found {\n\t\treturn out\n\t}\n\n\tcache[key] =\n\t\tisSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n\t\t\thasSquareOfZeroes(matrix, r1+1, c1+1, r2-1, c2-1, cache) ||\n\t\t\thasSquareOfZeroes(matrix, r1, c1+1, r2-1, c2, cache) ||\n\t\t\thasSquareOfZeroes(matrix, r1+1, c1, r2, c2-1, cache) ||\n\t\t\thasSquareOfZeroes(matrix, r1+1, c1+1, r2, c2, cache) ||\n\t\t\thasSquareOfZeroes(matrix, r1, c1, r2-1, c2-1, cache)\n\n\treturn cache[key]\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunc isSquareOfZeroes(matrix [][]int, r1, c1, r2, c2 int) bool {\n\tfor row := r1; row < r2+1; row++ {\n\t\tif matrix[row][c1] != 0 || matrix[row][c2] != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tfor col := c1; col < c2+1; col++ {\n\t\tif matrix[r1][col] != 0 || matrix[r2][col] != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^4) time | O(1) space - where n is the height and width of the matrix\nfunc SquareOfZeroes(matrix [][]int) bool {\n\tn := len(matrix)\n\tfor topRow := 0; topRow < n; topRow++ {\n\t\tfor leftCol := 0; leftCol < n; leftCol++ {\n\t\t\tsquareLength := 2\n\t\t\tfor squareLength <= n-leftCol && squareLength <= n-topRow {\n\t\t\t\tbottomRow := topRow + squareLength - 1\n\t\t\t\trightCol := leftCol + squareLength - 1\n\t\t\t\tif isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\tsquareLength += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunc isSquareOfZeroes(matrix [][]int, r1, c1, r2, c2 int) bool {\n\tfor row := r1; row < r2+1; row++ {\n\t\tif matrix[row][c1] != 0 || matrix[row][c2] != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tfor col := c1; col < c2+1; col++ {\n\t\tif matrix[r1][col] != 0 || matrix[r2][col] != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"fmt\"\n\n// O(n^3) time | O(n^3) space - where n is the height and width of the matrix\nfunc SquareOfZeroes(matrix [][]int) bool {\n\tinfoMatrix := preComputeNumOfZeroes(matrix)\n\tlastIdx := len(matrix) - 1\n\treturn hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, map[string]bool{})\n}\n\ntype InfoEntry struct {\n\tNumZeroesRight int\n\tNumZeroesBelow int\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunc hasSquareOfZeroes(infoMatrix [][]InfoEntry, r1, c1, r2, c2 int, cache map[string]bool) bool {\n\tif r1 >= r2 || c1 >= c2 {\n\t\treturn false\n\t}\n\n\tkey := fmt.Sprintf(\"%d-%d-%d-%d\", r1, c1, r2, c2)\n\tif out, found := cache[key]; found {\n\t\treturn out\n\t}\n\n\tcache[key] =\n\t\tisSquareOfZeroes(infoMatrix, r1, c1, r2, c2) ||\n\t\t\thasSquareOfZeroes(infoMatrix, r1+1, c1+1, r2-1, c2-1, cache) ||\n\t\t\thasSquareOfZeroes(infoMatrix, r1, c1+1, r2-1, c2, cache) ||\n\t\t\thasSquareOfZeroes(infoMatrix, r1+1, c1, r2, c2-1, cache) ||\n\t\t\thasSquareOfZeroes(infoMatrix, r1+1, c1+1, r2, c2, cache) ||\n\t\t\thasSquareOfZeroes(infoMatrix, r1, c1, r2-1, c2-1, cache)\n\n\treturn cache[key]\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunc isSquareOfZeroes(infoMatrix [][]InfoEntry, r1, c1, r2, c2 int) bool {\n\tsquareLength := c2 - c1 + 1\n\thasTopBorder := infoMatrix[r1][c1].NumZeroesRight >= squareLength\n\thasLeftBorder := infoMatrix[r1][c1].NumZeroesBelow >= squareLength\n\thasBottomBorder := infoMatrix[r2][c1].NumZeroesRight >= squareLength\n\thasRightBorder := infoMatrix[r1][c2].NumZeroesBelow >= squareLength\n\treturn hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder\n}\n\nfunc preComputeNumOfZeroes(matrix [][]int) [][]InfoEntry {\n\tinfoMatrix := make([][]InfoEntry, len(matrix))\n\tfor i, row := range matrix {\n\t\tinfoMatrix[i] = make([]InfoEntry, len(row))\n\t}\n\n\tn := len(matrix)\n\tfor row := 0; row < n; row++ {\n\t\tfor col := 0; col < n; col++ {\n\t\t\tnumZeroes := 0\n\t\t\tif matrix[row][col] == 0 {\n\t\t\t\tnumZeroes = 1\n\t\t\t}\n\t\t\tinfoMatrix[row][col] = InfoEntry{\n\t\t\t\tNumZeroesBelow: numZeroes,\n\t\t\t\tNumZeroesRight: numZeroes,\n\t\t\t}\n\t\t}\n\t}\n\n\tlastIdx := len(matrix) - 1\n\tfor row := n - 1; row >= 0; row-- {\n\t\tfor col := n - 1; col >= 0; col-- {\n\t\t\tif matrix[row][col] == 1 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif row < lastIdx {\n\t\t\t\tinfoMatrix[row][col].NumZeroesBelow += infoMatrix[row+1][col].NumZeroesBelow\n\t\t\t}\n\n\t\t\tif col < lastIdx {\n\t\t\t\tinfoMatrix[row][col].NumZeroesRight += infoMatrix[row][col+1].NumZeroesRight\n\t\t\t}\n\t\t}\n\t}\n\treturn infoMatrix\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n^3) time | O(n^2) space - where n is the height and width of the matrix\nfunc SquareOfZeroes(matrix [][]int) bool {\n\tinfoMatrix := preComputeNumOfZeroes(matrix)\n\tn := len(matrix)\n\tfor topRow := 0; topRow < n; topRow++ {\n\t\tfor leftCol := 0; leftCol < n; leftCol++ {\n\t\t\tsquareLength := 2\n\t\t\tfor squareLength <= n-leftCol && squareLength <= n-topRow {\n\t\t\t\tbottomRow := topRow + squareLength - 1\n\t\t\t\trightCol := leftCol + squareLength - 1\n\t\t\t\tif isSquareOfZeroes(infoMatrix, topRow, leftCol, bottomRow, rightCol) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\tsquareLength += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\ntype InfoEntry struct {\n\tNumZeroesRight int\n\tNumZeroesBelow int\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunc isSquareOfZeroes(infoMatrix [][]InfoEntry, r1, c1, r2, c2 int) bool {\n\tsquareLength := c2 - c1 + 1\n\thasTopBorder := infoMatrix[r1][c1].NumZeroesRight >= squareLength\n\thasLeftBorder := infoMatrix[r1][c1].NumZeroesBelow >= squareLength\n\thasBottomBorder := infoMatrix[r2][c1].NumZeroesRight >= squareLength\n\thasRightBorder := infoMatrix[r1][c2].NumZeroesBelow >= squareLength\n\treturn hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder\n}\n\nfunc preComputeNumOfZeroes(matrix [][]int) [][]InfoEntry {\n\tinfoMatrix := make([][]InfoEntry, len(matrix))\n\tfor i, row := range matrix {\n\t\tinfoMatrix[i] = make([]InfoEntry, len(row))\n\t}\n\n\tn := len(matrix)\n\tfor row := 0; row < n; row++ {\n\t\tfor col := 0; col < n; col++ {\n\t\t\tnumZeroes := 0\n\t\t\tif matrix[row][col] == 0 {\n\t\t\t\tnumZeroes = 1\n\t\t\t}\n\t\t\tinfoMatrix[row][col] = InfoEntry{\n\t\t\t\tNumZeroesBelow: numZeroes,\n\t\t\t\tNumZeroesRight: numZeroes,\n\t\t\t}\n\t\t}\n\t}\n\n\tlastIdx := len(matrix) - 1\n\tfor row := n - 1; row >= 0; row-- {\n\t\tfor col := n - 1; col >= 0; col-- {\n\t\t\tif matrix[row][col] == 1 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif row < lastIdx {\n\t\t\t\tinfoMatrix[row][col].NumZeroesBelow += infoMatrix[row+1][col].NumZeroesBelow\n\t\t\t}\n\n\t\t\tif col < lastIdx {\n\t\t\t\tinfoMatrix[row][col].NumZeroesRight += infoMatrix[row][col+1].NumZeroesRight\n\t\t\t}\n\t\t}\n\t}\n\treturn infoMatrix\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestCase1(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 1, 1, 0, 1, 0},\n\t\t{0, 0, 0, 0, 0, 1},\n\t\t{0, 1, 1, 1, 0, 1},\n\t\t{0, 0, 0, 1, 0, 1},\n\t\t{0, 1, 1, 1, 0, 1},\n\t\t{0, 0, 0, 0, 0, 1},\n\t}\n\trequire.True(t, SquareOfZeroes(input))\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestCase1(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 1, 1, 0, 1, 0},\n\t\t{0, 0, 0, 0, 0, 1},\n\t\t{0, 1, 1, 1, 0, 1},\n\t\t{0, 0, 0, 1, 0, 1},\n\t\t{0, 1, 1, 1, 0, 1},\n\t\t{0, 0, 0, 0, 0, 1},\n\t}\n\trequire.True(t, SquareOfZeroes(input))\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static boolean squareOfZeroes(List<List<Integer>> matrix) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^4) time | O(n^3) space - where n is the height and width of the matrix\n  public static boolean squareOfZeroes(List<List<Integer>> matrix) {\n    int lastIdx = matrix.size() - 1;\n    Map<String, Boolean> cache = new HashMap<String, Boolean>();\n    return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, cache);\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static boolean hasSquareOfZeroes(\n    List<List<Integer>> matrix,\n    int r1,\n    int c1,\n    int r2,\n    int c2,\n    Map<String, Boolean> cache\n  ) {\n    if (r1 >= r2 || c1 >= c2) return false;\n\n    String key = String.valueOf(r1) + '-' + String.valueOf(c1) + '-'\n      + String.valueOf(r2) + '-' + String.valueOf(c2);\n    if (cache.containsKey(key)) return cache.get(key);\n\n    cache.put(\n      key,\n      isSquareOfZeroes(matrix, r1, c1, r2, c2)\n        || hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache)\n        || hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache)\n        || hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache)\n        || hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache)\n        || hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache)\n    );\n\n    return cache.get(key);\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static boolean isSquareOfZeroes(\n    List<List<Integer>> matrix, int r1, int c1, int r2, int c2\n  ) {\n    for (int row = r1; row < r2 + 1; row++) {\n      if (matrix.get(row).get(c1) != 0 || matrix.get(row).get(c2) != 0)\n        return false;\n    }\n    for (int col = c1; col < c2 + 1; col++) {\n      if (matrix.get(r1).get(col) != 0 || matrix.get(r2).get(col) != 0)\n        return false;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^4) time | O(1) space - where n is the height and width of the matrix\n  public static boolean squareOfZeroes(List<List<Integer>> matrix) {\n    int n = matrix.size();\n    for (int topRow = 0; topRow < n; topRow++) {\n      for (int leftCol = 0; leftCol < n; leftCol++) {\n        int squareLength = 2;\n        while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n          int bottomRow = topRow + squareLength - 1;\n          int rightCol = leftCol + squareLength - 1;\n          if (isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol))\n            return true;\n          squareLength++;\n        }\n      }\n    }\n    return false;\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static boolean isSquareOfZeroes(\n    List<List<Integer>> matrix, int r1, int c1, int r2, int c2\n  ) {\n    for (int row = r1; row < r2 + 1; row++) {\n      if (matrix.get(row).get(c1) != 0 || matrix.get(row).get(c2) != 0)\n        return false;\n    }\n    for (int col = c1; col < c2 + 1; col++) {\n      if (matrix.get(r1).get(col) != 0 || matrix.get(r2).get(col) != 0)\n        return false;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^3) time | O(n^3) space - where n is the height and width of the matrix\n  public static boolean squareOfZeroes(List<List<Integer>> matrix) {\n    List<List<InfoMatrixItem>> infoMatrix = preComputedNumOfZeroes(matrix);\n    int lastIdx = matrix.size() - 1;\n    Map<String, Boolean> cache = new HashMap<String, Boolean>();\n    return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, cache);\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static boolean hasSquareOfZeroes(\n    List<List<InfoMatrixItem>> matrix,\n    int r1,\n    int c1,\n    int r2,\n    int c2,\n    Map<String, Boolean> cache\n  ) {\n    if (r1 >= r2 || c1 >= c2) return false;\n\n    String key = String.valueOf(r1) + '-' + String.valueOf(c1) + '-'\n      + String.valueOf(r2) + '-' + String.valueOf(c2);\n    if (cache.containsKey(key)) return cache.get(key);\n\n    cache.put(\n      key,\n      isSquareOfZeroes(matrix, r1, c1, r2, c2)\n        || hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache)\n        || hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache)\n        || hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache)\n        || hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache)\n        || hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache)\n    );\n\n    return cache.get(key);\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static boolean isSquareOfZeroes(\n    List<List<InfoMatrixItem>> infoMatrix, int r1, int c1, int r2, int c2\n  ) {\n    int squareLength = c2 - c1 + 1;\n    boolean hasTopBorder =\n      infoMatrix.get(r1).get(c1).numZeroesRight >= squareLength;\n    boolean hasLeftBorder =\n      infoMatrix.get(r1).get(c1).numZeroesBelow >= squareLength;\n    boolean hasBottomBorder =\n      infoMatrix.get(r2).get(c1).numZeroesRight >= squareLength;\n    boolean hasRightBorder =\n      infoMatrix.get(r1).get(c2).numZeroesBelow >= squareLength;\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n  }\n\n  public static List<List<InfoMatrixItem>> preComputedNumOfZeroes(\n    List<List<Integer>> matrix\n  ) {\n    List<List<InfoMatrixItem>> infoMatrix =\n      new ArrayList<List<InfoMatrixItem>>();\n    for (int i = 0; i < matrix.size(); i++) {\n      List<InfoMatrixItem> inner = new ArrayList<InfoMatrixItem>();\n      for (int j = 0; j < matrix.get(i).size(); j++) {\n        int numZeroes = matrix.get(i).get(j) == 0 ? 1 : 0;\n        inner.add(new InfoMatrixItem(numZeroes, numZeroes));\n      }\n      infoMatrix.add(inner);\n    }\n\n    int lastIdx = matrix.size() - 1;\n    for (int row = lastIdx; row >= 0; row--) {\n      for (int col = lastIdx; col >= 0; col--) {\n        if (matrix.get(row).get(col) == 1) continue;\n        if (row < lastIdx) {\n          infoMatrix.get(row).get(col).numZeroesBelow +=\n            infoMatrix.get(row + 1).get(col).numZeroesBelow;\n        }\n        if (col < lastIdx) {\n          infoMatrix.get(row).get(col).numZeroesRight +=\n            infoMatrix.get(row).get(col + 1).numZeroesRight;\n        }\n      }\n    }\n\n    return infoMatrix;\n  }\n\n  static class InfoMatrixItem {\n    public int numZeroesBelow;\n    public int numZeroesRight;\n\n    public InfoMatrixItem(int numZeroesBelow, int numZeroesRight) {\n      this.numZeroesBelow = numZeroesBelow;\n      this.numZeroesRight = numZeroesRight;\n    }\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^3) time | O(n^2) space - where n is the height and width of the matrix\n  public static boolean squareOfZeroes(List<List<Integer>> matrix) {\n    List<List<InfoMatrixItem>> infoMatrix = preComputedNumOfZeroes(matrix);\n    int n = matrix.size();\n    for (int topRow = 0; topRow < n; topRow++) {\n      for (int leftCol = 0; leftCol < n; leftCol++) {\n        int squareLength = 2;\n        while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n          int bottomRow = topRow + squareLength - 1;\n          int rightCol = leftCol + squareLength - 1;\n          if (isSquareOfZeroes(\n                infoMatrix, topRow, leftCol, bottomRow, rightCol\n              ))\n            return true;\n          squareLength++;\n        }\n      }\n    }\n    return false;\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  public static boolean isSquareOfZeroes(\n    List<List<InfoMatrixItem>> infoMatrix, int r1, int c1, int r2, int c2\n  ) {\n    int squareLength = c2 - c1 + 1;\n    boolean hasTopBorder =\n      infoMatrix.get(r1).get(c1).numZeroesRight >= squareLength;\n    boolean hasLeftBorder =\n      infoMatrix.get(r1).get(c1).numZeroesBelow >= squareLength;\n    boolean hasBottomBorder =\n      infoMatrix.get(r2).get(c1).numZeroesRight >= squareLength;\n    boolean hasRightBorder =\n      infoMatrix.get(r1).get(c2).numZeroesBelow >= squareLength;\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n  }\n\n  public static List<List<InfoMatrixItem>> preComputedNumOfZeroes(\n    List<List<Integer>> matrix\n  ) {\n    List<List<InfoMatrixItem>> infoMatrix =\n      new ArrayList<List<InfoMatrixItem>>();\n    for (int i = 0; i < matrix.size(); i++) {\n      List<InfoMatrixItem> inner = new ArrayList<InfoMatrixItem>();\n      for (int j = 0; j < matrix.get(i).size(); j++) {\n        int numZeroes = matrix.get(i).get(j) == 0 ? 1 : 0;\n        inner.add(new InfoMatrixItem(numZeroes, numZeroes));\n      }\n      infoMatrix.add(inner);\n    }\n\n    int lastIdx = matrix.size() - 1;\n    for (int row = lastIdx; row >= 0; row--) {\n      for (int col = lastIdx; col >= 0; col--) {\n        if (matrix.get(row).get(col) == 1) continue;\n        if (row < lastIdx) {\n          infoMatrix.get(row).get(col).numZeroesBelow +=\n            infoMatrix.get(row + 1).get(col).numZeroesBelow;\n        }\n        if (col < lastIdx) {\n          infoMatrix.get(row).get(col).numZeroesRight +=\n            infoMatrix.get(row).get(col + 1).numZeroesRight;\n        }\n      }\n    }\n\n    return infoMatrix;\n  }\n\n  static class InfoMatrixItem {\n    public int numZeroesBelow;\n    public int numZeroesRight;\n\n    public InfoMatrixItem(int numZeroesBelow, int numZeroesRight) {\n      this.numZeroesBelow = numZeroesBelow;\n      this.numZeroesRight = numZeroesRight;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      1, 1, 1, 0, 1, 0})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 0, 0, 0, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 1, 1, 1, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 0, 0, 1, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 1, 1, 1, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 0, 0, 0, 0, 1})));\n    Utils.assertTrue(Program.squareOfZeroes(test));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      1, 1, 1, 0, 1, 0})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 0, 0, 0, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 1, 1, 1, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 0, 0, 1, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 1, 1, 1, 0, 1})));\n    test.add(new ArrayList<Integer>(Arrays.asList(new Integer[] {\n      0, 0, 0, 0, 0, 1})));\n    Utils.assertTrue(Program.squareOfZeroes(test));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function squareOfZeroes(matrix) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.squareOfZeroes = squareOfZeroes;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^4) time | O(n^3) space - where n is the height and width of the matrix\nfunction squareOfZeroes(matrix) {\n  const lastIdx = matrix.length - 1;\n  return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, {});\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction hasSquareOfZeroes(matrix, r1, c1, r2, c2, cache) {\n  if (r1 >= r2 || c1 >= c2) return false;\n\n  const key = r1.toString() + '-' + c1.toString() + '-' + r2.toString() + '-' + c2.toString();\n  if (key in cache) return cache[key];\n\n  cache[key] =\n    isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n    hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n    hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n  return cache[key];\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(matrix, r1, c1, r2, c2) {\n  for (let row = r1; row < r2 + 1; row++) {\n    if (matrix[row][c1] !== 0 || matrix[row][c2] !== 0) return false;\n  }\n  for (let col = c1; col < c2 + 1; col++) {\n    if (matrix[r1][col] !== 0 || matrix[r2][col] !== 0) return false;\n  }\n  return true;\n}\n\nexports.squareOfZeroes = squareOfZeroes;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^4) time | O(1) space - where n is the height and width of the matrix\nfunction squareOfZeroes(matrix) {\n  const n = matrix.length;\n  for (let topRow = 0; topRow < n; topRow++) {\n    for (let leftCol = 0; leftCol < n; leftCol++) {\n      let squareLength = 2;\n      while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n        const bottomRow = topRow + squareLength - 1;\n        const rightCol = leftCol + squareLength - 1;\n        if (isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol)) return true;\n        squareLength++;\n      }\n    }\n  }\n  return false;\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(matrix, r1, c1, r2, c2) {\n  for (let row = r1; row < r2 + 1; row++) {\n    if (matrix[row][c1] !== 0 || matrix[row][c2] !== 0) return false;\n  }\n  for (let col = c1; col < c2 + 1; col++) {\n    if (matrix[r1][col] !== 0 || matrix[r2][col] !== 0) return false;\n  }\n  return true;\n}\n\nexports.squareOfZeroes = squareOfZeroes;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^3) time | O(n^3) space - where n is the height and width of the matrix\nfunction squareOfZeroes(matrix) {\n  const infoMatrix = preComputeNumOfZeroes(matrix);\n  const lastIdx = matrix.length - 1;\n  return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, {});\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction hasSquareOfZeroes(infoMatrix, r1, c1, r2, c2, cache) {\n  if (r1 >= r2 || c1 >= c2) return false;\n\n  const key = r1.toString() + '-' + c1.toString() + '-' + r2.toString() + '-' + c2.toString();\n  if (key in cache) return cache[key];\n\n  cache[key] =\n    isSquareOfZeroes(infoMatrix, r1, c1, r2, c2) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n  return cache[key];\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(infoMatrix, r1, c1, r2, c2) {\n  const squareLength = c2 - c1 + 1;\n  const hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n  const hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n  const hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n  const hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n  return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n}\n\nfunction preComputeNumOfZeroes(matrix) {\n  const infoMatrix = matrix.map(row =>\n    row.map(value => {\n      const numZeroes = value === 0 ? 1 : 0;\n      return {numZeroesBelow: numZeroes, numZeroesRight: numZeroes};\n    }),\n  );\n\n  const lastIdx = matrix.length - 1;\n  for (let row = lastIdx; row >= 0; row--) {\n    for (let col = lastIdx; col >= 0; col--) {\n      if (matrix[row][col] === 1) continue;\n      if (row < lastIdx) {\n        infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow;\n      }\n      if (col < lastIdx) {\n        infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight;\n      }\n    }\n  }\n\n  return infoMatrix;\n}\n\nexports.squareOfZeroes = squareOfZeroes;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^3) time | O(n^2) space - where n is the height and width of the matrix\nfunction squareOfZeroes(matrix) {\n  const infoMatrix = preComputeNumOfZeroes(matrix);\n  const n = matrix.length;\n  for (let topRow = 0; topRow < n; topRow++) {\n    for (let leftCol = 0; leftCol < n; leftCol++) {\n      let squareLength = 2;\n      while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n        const bottomRow = topRow + squareLength - 1;\n        const rightCol = leftCol + squareLength - 1;\n        if (isSquareOfZeroes(infoMatrix, topRow, leftCol, bottomRow, rightCol)) return true;\n        squareLength++;\n      }\n    }\n  }\n  return false;\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(infoMatrix, r1, c1, r2, c2) {\n  const squareLength = c2 - c1 + 1;\n  const hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n  const hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n  const hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n  const hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n  return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n}\n\nfunction preComputeNumOfZeroes(matrix) {\n  const infoMatrix = matrix.map(row =>\n    row.map(value => {\n      const numZeroes = value === 0 ? 1 : 0;\n      return {numZeroesBelow: numZeroes, numZeroesRight: numZeroes};\n    }),\n  );\n\n  const lastIdx = matrix.length - 1;\n  for (let row = lastIdx; row >= 0; row--) {\n    for (let col = lastIdx; col >= 0; col--) {\n      if (matrix[row][col] === 1) continue;\n      if (row < lastIdx) {\n        infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow;\n      }\n      if (col < lastIdx) {\n        infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight;\n      }\n    }\n  }\n\n  return infoMatrix;\n}\n\nexports.squareOfZeroes = squareOfZeroes;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const matrix = [\n    [1, 1, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 1, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 0, 0, 1],\n  ];\n  chai.expect(program.squareOfZeroes(matrix)).to.deep.equal(true);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const matrix = [\n    [1, 1, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 1, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 0, 0, 1],\n  ];\n  chai.expect(program.squareOfZeroes(matrix)).to.deep.equal(true);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun squareOfZeroes(matrix: List<List<Int>>): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^4) time | O(n^3) space - where n is the height and width of the matrix\nfun squareOfZeroes(matrix: List<List<Int>>): Boolean {\n    val lastIdx = matrix.size - 1\n    var cache = HashMap<String, Boolean>()\n    return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, cache)\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfun hasSquareOfZeroes(\n    matrix: List<List<Int>>,\n    r1: Int,\n    c1: Int,\n    r2: Int,\n    c2: Int,\n    cache: MutableMap<String, Boolean>,\n): Boolean {\n    if (r1 >= r2 || c1 >= c2) return false\n\n    val key = r1.toString() + \"-\" + c1.toString() + \"-\" + r2.toString() + \"-\" + c2.toString()\n    if (cache.containsKey(key)) return cache.get(key)!!\n\n    cache[key] = isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n        hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n        hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n        hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n        hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n        hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache)\n\n    return cache.get(key)!!\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfun isSquareOfZeroes(\n    matrix: List<List<Int>>,\n    r1: Int,\n    c1: Int,\n    r2: Int,\n    c2: Int,\n): Boolean {\n    for (row in r1 until r2 + 1) {\n        if (matrix[row][c1] != 0 || matrix[row][c2] != 0) return false\n    }\n    for (col in c1 until c2 + 1) {\n        if (matrix[r1][col] != 0 || matrix[r2][col] != 0) return false\n    }\n    return true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^4) time | O(1) space - where n is the height and width of the matrix\nfun squareOfZeroes(matrix: List<List<Int>>): Boolean {\n    val n = matrix.size\n    for (topRow in 0 until n) {\n        for (leftCol in 0 until n) {\n            var squareLength = 2\n            while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n                val bottomRow = topRow + squareLength - 1\n                val rightCol = leftCol + squareLength - 1\n                if (isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol)) return true\n                squareLength++\n            }\n        }\n    }\n    return false\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfun isSquareOfZeroes(\n    matrix: List<List<Int>>,\n    r1: Int,\n    c1: Int,\n    r2: Int,\n    c2: Int,\n): Boolean {\n    for (row in r1 until r2 + 1) {\n        if (matrix[row][c1] != 0 || matrix[row][c2] != 0) return false\n    }\n    for (col in c1 until c2 + 1) {\n        if (matrix[r1][col] != 0 || matrix[r2][col] != 0) return false\n    }\n    return true\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^3) time | O(n^3) space - where n is the height and width of the matrix\nfun squareOfZeroes(matrix: List<List<Int>>): Boolean {\n    val infoMatrix = preComputedNumOfZeroes(matrix)\n    val lastIdx = matrix.size - 1\n    var cache = HashMap<String, Boolean>()\n    return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, cache)\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfun hasSquareOfZeroes(\n    matrix: List<List<InfoMatrixItem>>,\n    r1: Int,\n    c1: Int,\n    r2: Int,\n    c2: Int,\n    cache: MutableMap<String, Boolean>,\n): Boolean {\n    if (r1 >= r2 || c1 >= c2) return false\n\n    val key = r1.toString() + \"-\" + c1.toString() + \"-\" + r2.toString() + \"-\" + c2.toString()\n    if (cache.containsKey(key)) return cache.get(key)!!\n\n    cache[key] = isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n        hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n        hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n        hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n        hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n        hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache)\n\n    return cache.get(key)!!\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfun isSquareOfZeroes(\n    infoMatrix: List<List<InfoMatrixItem>>,\n    r1: Int,\n    c1: Int,\n    r2: Int,\n    c2: Int,\n): Boolean {\n    val squareLength = c2 - c1 + 1\n    val hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength\n    val hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength\n    val hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength\n    val hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder\n}\n\nfun preComputedNumOfZeroes(matrix: List<List<Int>>): List<List<InfoMatrixItem>> {\n    var infoMatrix = mutableListOf<List<InfoMatrixItem>>()\n    for (i in 0 until matrix.size) {\n        var inner = ArrayList<InfoMatrixItem>()\n        for (j in 0 until matrix[i].size) {\n            val numZeroes = if (matrix[i][j] == 0) 1 else 0\n            inner.add(InfoMatrixItem(numZeroes, numZeroes))\n        }\n        infoMatrix.add(inner)\n    }\n\n    var lastIdx = matrix.size - 1\n    for (row in lastIdx downTo 0) {\n        for (col in lastIdx downTo 0) {\n            if (matrix[row][col] == 1) continue\n            if (row < lastIdx) {\n                infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow\n            }\n            if (col < lastIdx) {\n                infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight\n            }\n        }\n    }\n\n    return infoMatrix\n}\n\ndata class InfoMatrixItem(var numZeroesBelow: Int, var numZeroesRight: Int)\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n^3) time | O(n^2) space - where n is the height and width of the matrix\nfun squareOfZeroes(matrix: List<List<Int>>): Boolean {\n    val infoMatrix = preComputedNumOfZeroes(matrix)\n    val n = matrix.size\n    for (topRow in 0 until n) {\n        for (leftCol in 0 until n) {\n            var squareLength = 2\n            while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n                val bottomRow = topRow + squareLength - 1\n                val rightCol = leftCol + squareLength - 1\n                if (isSquareOfZeroes(infoMatrix, topRow, leftCol, bottomRow, rightCol)) return true\n                squareLength++\n            }\n        }\n    }\n    return false\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfun isSquareOfZeroes(\n    infoMatrix: List<List<InfoMatrixItem>>,\n    r1: Int,\n    c1: Int,\n    r2: Int,\n    c2: Int,\n): Boolean {\n    val squareLength = c2 - c1 + 1\n    val hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength\n    val hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength\n    val hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength\n    val hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder\n}\n\nfun preComputedNumOfZeroes(matrix: List<List<Int>>): List<List<InfoMatrixItem>> {\n    var infoMatrix = mutableListOf<List<InfoMatrixItem>>()\n    for (i in 0 until matrix.size) {\n        var inner = ArrayList<InfoMatrixItem>()\n        for (j in 0 until matrix[i].size) {\n            val numZeroes = if (matrix[i][j] == 0) 1 else 0\n            inner.add(InfoMatrixItem(numZeroes, numZeroes))\n        }\n        infoMatrix.add(inner)\n    }\n\n    var lastIdx = matrix.size - 1\n    for (row in lastIdx downTo 0) {\n        for (col in lastIdx downTo 0) {\n            if (matrix[row][col] == 1) continue\n            if (row < lastIdx) {\n                infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow\n            }\n            if (col < lastIdx) {\n                infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight\n            }\n        }\n    }\n\n    return infoMatrix\n}\n\ndata class InfoMatrixItem(var numZeroesBelow: Int, var numZeroesRight: Int)\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.squareOfZeroes as squareOfZeroes\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val matrix = listOf(\n            listOf(1, 1, 1, 0, 1, 0),\n            listOf(0, 0, 0, 0, 0, 1),\n            listOf(0, 1, 1, 1, 0, 1),\n            listOf(0, 0, 0, 1, 0, 1),\n            listOf(0, 1, 1, 1, 0, 1),\n            listOf(0, 0, 0, 0, 0, 1),\n        )\n        assert(squareOfZeroes(matrix))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.squareOfZeroes as squareOfZeroes\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val matrix = listOf(\n            listOf(1, 1, 1, 0, 1, 0),\n            listOf(0, 0, 0, 0, 0, 1),\n            listOf(0, 1, 1, 1, 0, 1),\n            listOf(0, 0, 0, 1, 0, 1),\n            listOf(0, 1, 1, 1, 0, 1),\n            listOf(0, 0, 0, 0, 0, 1),\n        )\n        assert(squareOfZeroes(matrix))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def squareOfZeroes(matrix):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^4) time | O(n^3) space - where n is the height and width of the matrix\ndef squareOfZeroes(matrix):\n    lastIdx = len(matrix) - 1\n    return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, {})\n\n\n# r1 is the top row, c1 is the left column\n# r2 is the bottom row, c2 is the right column\ndef hasSquareOfZeroes(matrix, r1, c1, r2, c2, cache):\n    if r1 >= r2 or c1 >= c2:\n        return False\n\n    key = str(r1) + \"-\" + str(c1) + \"-\" + str(r2) + \"-\" + str(c2)\n    if key in cache:\n        return cache[key]\n\n    cache[key] = (\n        isSquareOfZeroes(matrix, r1, c1, r2, c2)\n        or hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache)\n        or hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache)\n        or hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache)\n        or hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache)\n        or hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache)\n    )\n\n    return cache[key]\n\n\n# r1 is the top row, c1 is the left column\n# r2 is the bottom row, c2 is the right column\ndef isSquareOfZeroes(matrix, r1, c1, r2, c2):\n    for row in range(r1, r2 + 1):\n        if matrix[row][c1] != 0 or matrix[row][c2] != 0:\n            return False\n    for col in range(c1, c2 + 1):\n        if matrix[r1][col] != 0 or matrix[r2][col] != 0:\n            return False\n    return True\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^4) time | O(1) space - where n is the height and width of the matrix\ndef squareOfZeroes(matrix):\n    n = len(matrix)\n    for topRow in range(n):\n        for leftCol in range(n):\n            squareLength = 2\n            while squareLength <= n - leftCol and squareLength <= n - topRow:\n                bottomRow = topRow + squareLength - 1\n                rightCol = leftCol + squareLength - 1\n                if isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol):\n                    return True\n                squareLength += 1\n    return False\n\n\n# r1 is the top row, c1 is the left column\n# r2 is the bottom row, c2 is the right column\ndef isSquareOfZeroes(matrix, r1, c1, r2, c2):\n    for row in range(r1, r2 + 1):\n        if matrix[row][c1] != 0 or matrix[row][c2] != 0:\n            return False\n    for col in range(c1, c2 + 1):\n        if matrix[r1][col] != 0 or matrix[r2][col] != 0:\n            return False\n    return True\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^3) time | O(n^3) space - where n is the height and width of the matrix\ndef squareOfZeroes(matrix):\n    infoMatrix = preComputeNumOfZeroes(matrix)\n    lastIdx = len(matrix) - 1\n    return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, {})\n\n\n# r1 is the top row, c1 is the left column\n# r2 is the bottom row, c2 is the right column\ndef hasSquareOfZeroes(infoMatrix, r1, c1, r2, c2, cache):\n    if r1 >= r2 or c1 >= c2:\n        return False\n\n    key = str(r1) + \"-\" + str(c1) + \"-\" + str(r2) + \"-\" + str(c2)\n    if key in cache:\n        return cache[key]\n\n    cache[key] = (\n        isSquareOfZeroes(infoMatrix, r1, c1, r2, c2)\n        or hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache)\n        or hasSquareOfZeroes(infoMatrix, r1, c1 + 1, r2 - 1, c2, cache)\n        or hasSquareOfZeroes(infoMatrix, r1 + 1, c1, r2, c2 - 1, cache)\n        or hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2, c2, cache)\n        or hasSquareOfZeroes(infoMatrix, r1, c1, r2 - 1, c2 - 1, cache)\n    )\n\n    return cache[key]\n\n\n# r1 is the top row, c1 is the left column\n# r2 is the bottom row, c2 is the right column\ndef isSquareOfZeroes(infoMatrix, r1, c1, r2, c2):\n    squareLength = c2 - c1 + 1\n    hasTopBorder = infoMatrix[r1][c1][\"numZeroesRight\"] >= squareLength\n    hasLeftBorder = infoMatrix[r1][c1][\"numZeroesBelow\"] >= squareLength\n    hasBottomBorder = infoMatrix[r2][c1][\"numZeroesRight\"] >= squareLength\n    hasRightBorder = infoMatrix[r1][c2][\"numZeroesBelow\"] >= squareLength\n    return hasTopBorder and hasLeftBorder and hasBottomBorder and hasRightBorder\n\n\ndef preComputeNumOfZeroes(matrix):\n    infoMatrix = [[x for x in row] for row in matrix]\n\n    n = len(matrix)\n    for row in range(n):\n        for col in range(n):\n            numZeroes = 1 if matrix[row][col] == 0 else 0\n            infoMatrix[row][col] = {\n                \"numZeroesBelow\": numZeroes,\n                \"numZeroesRight\": numZeroes,\n            }\n\n    lastIdx = len(matrix) - 1\n    for row in reversed(range(n)):\n        for col in reversed(range(n)):\n            if matrix[row][col] == 1:\n                continue\n            if row < lastIdx:\n                infoMatrix[row][col][\"numZeroesBelow\"] += infoMatrix[row + 1][col][\"numZeroesBelow\"]\n            if col < lastIdx:\n                infoMatrix[row][col][\"numZeroesRight\"] += infoMatrix[row][col + 1][\"numZeroesRight\"]\n\n    return infoMatrix\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n^3) time | O(n^2) space - where n is the height and width of the matrix\ndef squareOfZeroes(matrix):\n    infoMatrix = preComputeNumOfZeroes(matrix)\n    n = len(matrix)\n    for topRow in range(n):\n        for leftCol in range(n):\n            squareLength = 2\n            while squareLength <= n - leftCol and squareLength <= n - topRow:\n                bottomRow = topRow + squareLength - 1\n                rightCol = leftCol + squareLength - 1\n                if isSquareOfZeroes(infoMatrix, topRow, leftCol, bottomRow, rightCol):\n                    return True\n                squareLength += 1\n    return False\n\n\n# r1 is the top row, c1 is the left column\n# r2 is the bottom row, c2 is the right column\ndef isSquareOfZeroes(infoMatrix, r1, c1, r2, c2):\n    squareLength = c2 - c1 + 1\n    hasTopBorder = infoMatrix[r1][c1][\"numZeroesRight\"] >= squareLength\n    hasLeftBorder = infoMatrix[r1][c1][\"numZeroesBelow\"] >= squareLength\n    hasBottomBorder = infoMatrix[r2][c1][\"numZeroesRight\"] >= squareLength\n    hasRightBorder = infoMatrix[r1][c2][\"numZeroesBelow\"] >= squareLength\n    return hasTopBorder and hasLeftBorder and hasBottomBorder and hasRightBorder\n\n\ndef preComputeNumOfZeroes(matrix):\n    infoMatrix = [[x for x in row] for row in matrix]\n\n    n = len(matrix)\n    for row in range(n):\n        for col in range(n):\n            numZeroes = 1 if matrix[row][col] == 0 else 0\n            infoMatrix[row][col] = {\n                \"numZeroesBelow\": numZeroes,\n                \"numZeroesRight\": numZeroes,\n            }\n\n    lastIdx = len(matrix) - 1\n    for row in reversed(range(n)):\n        for col in reversed(range(n)):\n            if matrix[row][col] == 1:\n                continue\n            if row < lastIdx:\n                infoMatrix[row][col][\"numZeroesBelow\"] += infoMatrix[row + 1][col][\"numZeroesBelow\"]\n            if col < lastIdx:\n                infoMatrix[row][col][\"numZeroesRight\"] += infoMatrix[row][col + 1][\"numZeroesRight\"]\n\n    return infoMatrix\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        matrix = [\n            [1, 1, 1, 0, 1, 0],\n            [0, 0, 0, 0, 0, 1],\n            [0, 1, 1, 1, 0, 1],\n            [0, 0, 0, 1, 0, 1],\n            [0, 1, 1, 1, 0, 1],\n            [0, 0, 0, 0, 0, 1],\n        ]\n        self.assertEqual(program.squareOfZeroes(matrix), True)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        matrix = [\n            [1, 1, 1, 0, 1, 0],\n            [0, 0, 0, 0, 0, 1],\n            [0, 1, 1, 1, 0, 1],\n            [0, 0, 0, 1, 0, 1],\n            [0, 1, 1, 1, 0, 1],\n            [0, 0, 0, 0, 0, 1],\n        ]\n        self.assertEqual(program.squareOfZeroes(matrix), True)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def squareOfZeroes(matrix)\n    # Write your code here.\n    return false\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def squareOfZeroes(matrix)\n    # Write your code here.\n    return false\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def squareOfZeroes(matrix)\n    # Write your code here.\n    return false\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def squareOfZeroes(matrix)\n    # Write your code here.\n    return false\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def squareOfZeroes(matrix)\n    # Write your code here.\n    return false\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.squareOfZeroes\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.squareOfZeroes\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  static func squareOfZeroes(_ matrix: [[Int]]) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^4) time | O(n^3) space - where n is the height and width of the matrix\n  static func squareOfZeroes(_ matrix: [[Int]]) -> Bool {\n    var lastIdx = matrix.count - 1\n    var mat = matrix\n    var cache = [String: Bool]()\n    return hasSquareOfZeroes(&mat, 0, 0, lastIdx, lastIdx, &cache)\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  static func hasSquareOfZeroes(_ matrix: inout [[Int]], _ r1: Int, _ c1: Int,\n                                _ r2: Int, _ c2: Int, _ cache: inout [String: Bool]) -> Bool\n  {\n    if r1 >= r2 || c1 >= c2 {\n      return false\n    }\n\n    let key = String(r1) + \"-\" + String(c1) + \"-\" + String(r2) + \"-\" + String(c2)\n    if let out = cache[key] {\n      return out\n    }\n\n    let out = isSquareOfZeroes(&matrix, r1, c1, r2, c2) ||\n      hasSquareOfZeroes(&matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, &cache) ||\n      hasSquareOfZeroes(&matrix, r1, c1 + 1, r2 - 1, c2, &cache) ||\n      hasSquareOfZeroes(&matrix, r1 + 1, c1, r2, c2 - 1, &cache) ||\n      hasSquareOfZeroes(&matrix, r1 + 1, c1 + 1, r2, c2, &cache) ||\n      hasSquareOfZeroes(&matrix, r1, c1, r2 - 1, c2 - 1, &cache)\n    cache[key] = out\n    return out\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  static func isSquareOfZeroes(_ matrix: inout [[Int]], _ r1: Int, _ c1: Int, _ r2: Int, _ c2: Int) -> Bool {\n    for row in r1 ..< r2 + 1 {\n      if matrix[row][c1] != 0 || matrix[row][c2] != 0 {\n        return false\n      }\n    }\n\n    for col in c1 ..< c2 + 1 {\n      if matrix[r1][col] != 0 || matrix[r2][col] != 0 {\n        return false\n      }\n    }\n    return true\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^4) time | O(1) space - where n is the height and width of the matrix\n  static func squareOfZeroes(_ matrix: [[Int]]) -> Bool {\n    var mat = matrix\n    let n = matrix.count\n    for topRow in 0 ..< n {\n      for leftCol in 0 ..< n {\n        var squareLength = 2\n        while squareLength <= n - leftCol, squareLength <= n - topRow {\n          let bottomRow = topRow + squareLength - 1\n          let rightCol = leftCol + squareLength - 1\n          if isSquareOfZeroes(&mat, topRow, leftCol, bottomRow, rightCol) {\n            return true\n          }\n          squareLength += 1\n        }\n      }\n    }\n    return false\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  static func isSquareOfZeroes(_ matrix: inout [[Int]], _ r1: Int, _ c1: Int, _ r2: Int, _ c2: Int) -> Bool {\n    for row in r1 ..< r2 + 1 {\n      if matrix[row][c1] != 0 || matrix[row][c2] != 0 {\n        return false\n      }\n    }\n\n    for col in c1 ..< c2 + 1 {\n      if matrix[r1][col] != 0 || matrix[r2][col] != 0 {\n        return false\n      }\n    }\n    return true\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^3) time | O(n^3) space - where n is the height and width of the matrix\n  static func squareOfZeroes(_ matrix: [[Int]]) -> Bool {\n    var infoMatrix = preComputeNumOfZeroes(matrix)\n    var lastIdx = matrix.count - 1\n    var cache = [String: Bool]()\n    return hasSquareOfZeroes(&infoMatrix, 0, 0, lastIdx, lastIdx, &cache)\n  }\n\n  struct InfoEntry {\n    var numZeroesRight: Int\n    var numZeroesBelow: Int\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  static func hasSquareOfZeroes(_ infoMatrix: inout [[InfoEntry]], _ r1: Int, _ c1: Int,\n                                _ r2: Int, _ c2: Int, _ cache: inout [String: Bool]) -> Bool\n  {\n    if r1 >= r2 || c1 >= c2 {\n      return false\n    }\n\n    let key = String(r1) + \"-\" + String(c1) + \"-\" + String(r2) + \"-\" + String(c2)\n    if let out = cache[key] {\n      return out\n    }\n\n    let out = isSquareOfZeroes(&infoMatrix, r1, c1, r2, c2) ||\n      hasSquareOfZeroes(&infoMatrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, &cache) ||\n      hasSquareOfZeroes(&infoMatrix, r1, c1 + 1, r2 - 1, c2, &cache) ||\n      hasSquareOfZeroes(&infoMatrix, r1 + 1, c1, r2, c2 - 1, &cache) ||\n      hasSquareOfZeroes(&infoMatrix, r1 + 1, c1 + 1, r2, c2, &cache) ||\n      hasSquareOfZeroes(&infoMatrix, r1, c1, r2 - 1, c2 - 1, &cache)\n    cache[key] = out\n    return out\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  static func isSquareOfZeroes(_ infoMatrix: inout [[InfoEntry]], _ r1: Int,\n                               _ c1: Int, _ r2: Int, _ c2: Int) -> Bool\n  {\n    let squareLength = c2 - c1 + 1\n    let hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength\n    let hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength\n    let hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength\n    let hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder\n  }\n\n  static func preComputeNumOfZeroes(_ matrix: [[Int]]) -> [[InfoEntry]] {\n    var infoMatrix = [[InfoEntry]]()\n    let n = matrix.count\n    for i in 0 ..< n {\n      infoMatrix.append([InfoEntry]())\n      for j in 0 ..< n {\n        var numZeroes = 0\n        if matrix[i][j] == 0 {\n          numZeroes = 1\n        }\n        let entry = InfoEntry(numZeroesRight: numZeroes, numZeroesBelow: numZeroes)\n        infoMatrix[i].append(entry)\n      }\n    }\n\n    let lastIdx = matrix.count - 1\n    for row in (0 ..< n).reversed() {\n      for col in (0 ..< n).reversed() {\n        if matrix[row][col] == 1 {\n          continue\n        }\n        if row < lastIdx {\n          infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow\n        }\n\n        if col < lastIdx {\n          infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight\n        }\n      }\n    }\n    return infoMatrix\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n^3) time | O(n^2) space - where n is the height and width of the matrix\n  static func squareOfZeroes(_ matrix: [[Int]]) -> Bool {\n    var infoMatrix = preComputeNumOfZeroes(matrix)\n    let n = matrix.count\n    for topRow in 0 ..< n {\n      for leftCol in 0 ..< n {\n        var squareLength = 2\n        while squareLength <= n - leftCol, squareLength <= n - topRow {\n          let bottomRow = topRow + squareLength - 1\n          let rightCol = leftCol + squareLength - 1\n          if isSquareOfZeroes(&infoMatrix, topRow, leftCol, bottomRow, rightCol) {\n            return true\n          }\n          squareLength += 1\n        }\n      }\n    }\n    return false\n  }\n\n  struct InfoEntry {\n    var numZeroesRight: Int\n    var numZeroesBelow: Int\n  }\n\n  // r1 is the top row, c1 is the left column\n  // r2 is the bottom row, c2 is the right column\n  static func isSquareOfZeroes(_ infoMatrix: inout [[InfoEntry]], _ r1: Int,\n                               _ c1: Int, _ r2: Int, _ c2: Int) -> Bool\n  {\n    let squareLength = c2 - c1 + 1\n    let hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength\n    let hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength\n    let hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength\n    let hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength\n    return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder\n  }\n\n  static func preComputeNumOfZeroes(_ matrix: [[Int]]) -> [[InfoEntry]] {\n    var infoMatrix = [[InfoEntry]]()\n    let n = matrix.count\n    for i in 0 ..< n {\n      infoMatrix.append([InfoEntry]())\n      for j in 0 ..< n {\n        var numZeroes = 0\n        if matrix[i][j] == 0 {\n          numZeroes = 1\n        }\n        let entry = InfoEntry(numZeroesRight: numZeroes, numZeroesBelow: numZeroes)\n        infoMatrix[i].append(entry)\n      }\n    }\n\n    let lastIdx = matrix.count - 1\n    for row in (0 ..< n).reversed() {\n      for col in (0 ..< n).reversed() {\n        if matrix[row][col] == 1 {\n          continue\n        }\n        if row < lastIdx {\n          infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow\n        }\n\n        if col < lastIdx {\n          infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight\n        }\n      }\n    }\n    return infoMatrix\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = [\n        [1, 1, 1, 0, 1, 0],\n        [0, 0, 0, 0, 0, 1],\n        [0, 1, 1, 1, 0, 1],\n        [0, 0, 0, 1, 0, 1],\n        [0, 1, 1, 1, 0, 1],\n        [0, 0, 0, 0, 0, 1],\n      ]\n      try assertEqual(true, Program.squareOfZeroes(input))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = [\n        [1, 1, 1, 0, 1, 0],\n        [0, 0, 0, 0, 0, 1],\n        [0, 1, 1, 1, 0, 1],\n        [0, 0, 0, 1, 0, 1],\n        [0, 1, 1, 1, 0, 1],\n        [0, 0, 0, 0, 0, 1],\n      ]\n      try assertEqual(true, Program.squareOfZeroes(input))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function squareOfZeroes(matrix: number[][]) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface Cache {\n  [key: string]: boolean;\n}\n\n// O(n^4) time | O(n^3) space - where n is the height and width of the matrix\nexport function squareOfZeroes(matrix: number[][]) {\n  const lastIdx = matrix.length - 1;\n  return hasSquareOfZeroes(matrix, 0, 0, lastIdx, lastIdx, {});\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction hasSquareOfZeroes(\n  matrix: number[][],\n  r1: number,\n  c1: number,\n  r2: number,\n  c2: number,\n  cache: Cache,\n) {\n  if (r1 >= r2 || c1 >= c2) return false;\n\n  const key = r1.toString() + '-' + c1.toString() + '-' + r2.toString() + '-' + c2.toString();\n  if (key in cache) return cache[key];\n\n  cache[key] =\n    isSquareOfZeroes(matrix, r1, c1, r2, c2) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n    hasSquareOfZeroes(matrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n    hasSquareOfZeroes(matrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n    hasSquareOfZeroes(matrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n  return cache[key];\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(matrix: number[][], r1: number, c1: number, r2: number, c2: number) {\n  for (let row = r1; row < r2 + 1; row++) {\n    if (matrix[row][c1] !== 0 || matrix[row][c2] !== 0) return false;\n  }\n  for (let col = c1; col < c2 + 1; col++) {\n    if (matrix[r1][col] !== 0 || matrix[r2][col] !== 0) return false;\n  }\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n^4) time | O(1) space - where n is the height and width of the matrix\nexport function squareOfZeroes(matrix: number[][]) {\n  const n = matrix.length;\n  for (let topRow = 0; topRow < n; topRow++) {\n    for (let leftCol = 0; leftCol < n; leftCol++) {\n      let squareLength = 2;\n      while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n        const bottomRow = topRow + squareLength - 1;\n        const rightCol = leftCol + squareLength - 1;\n        if (isSquareOfZeroes(matrix, topRow, leftCol, bottomRow, rightCol)) return true;\n        squareLength++;\n      }\n    }\n  }\n  return false;\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(matrix: number[][], r1: number, c1: number, r2: number, c2: number) {\n  for (let row = r1; row < r2 + 1; row++) {\n    if (matrix[row][c1] !== 0 || matrix[row][c2] !== 0) return false;\n  }\n  for (let col = c1; col < c2 + 1; col++) {\n    if (matrix[r1][col] !== 0 || matrix[r2][col] !== 0) return false;\n  }\n  return true;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ninterface Cache {\n  [key: string]: boolean;\n}\n\ntype InfoMatrix = {numZeroesBelow: number; numZeroesRight: number}[][];\n\n// O(n^3) time | O(n^3) space - where n is the height and width of the matrix\nexport function squareOfZeroes(matrix: number[][]) {\n  const infoMatrix = preComputeNumOfZeroes(matrix);\n  const lastIdx = matrix.length - 1;\n  return hasSquareOfZeroes(infoMatrix, 0, 0, lastIdx, lastIdx, {});\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction hasSquareOfZeroes(\n  infoMatrix: InfoMatrix,\n  r1: number,\n  c1: number,\n  r2: number,\n  c2: number,\n  cache: Cache,\n) {\n  if (r1 >= r2 || c1 >= c2) return false;\n\n  const key = r1.toString() + '-' + c1.toString() + '-' + r2.toString() + '-' + c2.toString();\n  if (key in cache) return cache[key];\n\n  cache[key] =\n    isSquareOfZeroes(infoMatrix, r1, c1, r2, c2) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2 - 1, c2 - 1, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1, c1 + 1, r2 - 1, c2, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1, r2, c2 - 1, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1 + 1, c1 + 1, r2, c2, cache) ||\n    hasSquareOfZeroes(infoMatrix, r1, c1, r2 - 1, c2 - 1, cache);\n\n  return cache[key];\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(infoMatrix: InfoMatrix, r1: number, c1: number, r2: number, c2: number) {\n  const squareLength = c2 - c1 + 1;\n  const hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n  const hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n  const hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n  const hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n  return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n}\n\nfunction preComputeNumOfZeroes(matrix: number[][]) {\n  const infoMatrix: InfoMatrix = matrix.map(row =>\n    row.map(value => {\n      const numZeroes = value === 0 ? 1 : 0;\n      return {numZeroesBelow: numZeroes, numZeroesRight: numZeroes};\n    }),\n  );\n\n  const lastIdx = matrix.length - 1;\n  for (let row = lastIdx; row >= 0; row--) {\n    for (let col = lastIdx; col >= 0; col--) {\n      if (matrix[row][col] === 1) continue;\n      if (row < lastIdx) {\n        infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow;\n      }\n      if (col < lastIdx) {\n        infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight;\n      }\n    }\n  }\n\n  return infoMatrix;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ntype InfoMatrix = {numZeroesBelow: number; numZeroesRight: number}[][];\n\n// O(n^3) time | O(n^2) space - where n is the height and width of the matrix\nexport function squareOfZeroes(matrix: number[][]) {\n  const infoMatrix = preComputeNumOfZeroes(matrix);\n  const n = matrix.length;\n  for (let topRow = 0; topRow < n; topRow++) {\n    for (let leftCol = 0; leftCol < n; leftCol++) {\n      let squareLength = 2;\n      while (squareLength <= n - leftCol && squareLength <= n - topRow) {\n        const bottomRow = topRow + squareLength - 1;\n        const rightCol = leftCol + squareLength - 1;\n        if (isSquareOfZeroes(infoMatrix, topRow, leftCol, bottomRow, rightCol)) return true;\n        squareLength++;\n      }\n    }\n  }\n  return false;\n}\n\n// r1 is the top row, c1 is the left column\n// r2 is the bottom row, c2 is the right column\nfunction isSquareOfZeroes(infoMatrix: InfoMatrix, r1: number, c1: number, r2: number, c2: number) {\n  const squareLength = c2 - c1 + 1;\n  const hasTopBorder = infoMatrix[r1][c1].numZeroesRight >= squareLength;\n  const hasLeftBorder = infoMatrix[r1][c1].numZeroesBelow >= squareLength;\n  const hasBottomBorder = infoMatrix[r2][c1].numZeroesRight >= squareLength;\n  const hasRightBorder = infoMatrix[r1][c2].numZeroesBelow >= squareLength;\n  return hasTopBorder && hasLeftBorder && hasBottomBorder && hasRightBorder;\n}\n\nfunction preComputeNumOfZeroes(matrix: number[][]) {\n  const infoMatrix: InfoMatrix = matrix.map(row =>\n    row.map(value => {\n      const numZeroes = value === 0 ? 1 : 0;\n      return {numZeroesBelow: numZeroes, numZeroesRight: numZeroes};\n    }),\n  );\n\n  const lastIdx = matrix.length - 1;\n  for (let row = lastIdx; row >= 0; row--) {\n    for (let col = lastIdx; col >= 0; col--) {\n      if (matrix[row][col] === 1) continue;\n      if (row < lastIdx) {\n        infoMatrix[row][col].numZeroesBelow += infoMatrix[row + 1][col].numZeroesBelow;\n      }\n      if (col < lastIdx) {\n        infoMatrix[row][col].numZeroesRight += infoMatrix[row][col + 1].numZeroesRight;\n      }\n    }\n  }\n\n  return infoMatrix;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const matrix = [\n    [1, 1, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 1, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 0, 0, 1],\n  ];\n  chai.expect(program.squareOfZeroes(matrix)).to.deep.equal(true);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const matrix = [\n    [1, 1, 1, 0, 1, 0],\n    [0, 0, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 1, 0, 1],\n    [0, 1, 1, 1, 0, 1],\n    [0, 0, 0, 0, 0, 1],\n  ];\n  chai.expect(program.squareOfZeroes(matrix)).to.deep.equal(true);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "matrix",
      "example": [
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ],
      "schema": {
        "items": {
          "items": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "type": "array"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "matrix": [
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          0,
          1
        ],
        [
          1,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1
        ],
        [
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          1
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0
        ],
        [
          1,
          0,
          0
        ],
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0
        ],
        [
          0,
          1,
          0
        ],
        [
          0,
          1,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          1,
          0
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1,
          0,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    }
  ],
  "jsonTests": [
    {
      "matrix": [
        [
          0,
          0
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          0,
          1
        ],
        [
          1,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1
        ],
        [
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          1
        ],
        [
          0,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0
        ],
        [
          1,
          0,
          0
        ],
        [
          0,
          0,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0
        ],
        [
          0,
          1,
          0
        ],
        [
          0,
          1,
          0
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          1,
          0
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          0,
          1,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1,
          0,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          0,
          1,
          1,
          1,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          1,
          0,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "matrix": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    }
  ],
  "changelog": []
}