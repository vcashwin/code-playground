{
  "uid": "subarray-sort",
  "testStrategy": "JSON",
  "name": "Subarray Sort",
  "version": 0,
  "releaseDate": "2000-05-04T00:00:00Z",
  "category": "Arrays",
  "difficulty": 3,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 23432,
    "failureCount": 8489
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "241820009",
    "duration": 0,
    "annotations": [],
    "instructor": "Clement Mihailescu",
    "overviewTime": 0,
    "codeWalkthroughTime": 958
  },
  "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in an array of at least two integers and that\n  returns an array of the starting and ending indices of the smallest subarray\n  in the input array that needs to be sorted in place in order for the entire\n  input array to be sorted (in ascending order).\n</p>\n<p>\n  If the input array is already sorted, the function should return\n  <span>[-1, -1]</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[3, 9]\n</pre>\n</div>",
  "hints": [
    "<p>\nRealize that even a single out-of-order number in the input array can call for a large subarray to have to be sorted. This is because, depending on how out-of-place the number is, it might need to be moved very far away from its original position in order to be in its sorted position.\n</p>\n",
    "\n<p>\nFind the smallest and largest numbers that are out of order in the input array. You should be able to do this in a single pass through the array.\n</p>\n",
    "\n<p>\nOnce you've found the smallest and largest out-of-order numbers mentioned in Hint #2, find their final sorted positions in the array. This should give you the extremities of the smallest subarray that needs to be sorted.\n</p>"
  ],
  "spaceTime": "O(n) time | O(1) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<int> subarraySort(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <climits>\n#include <vector>\nusing namespace std;\n\nbool isOutOfOrder(int i, int num, vector<int> array);\n\n// O(n) time | O(1) space\nvector<int> subarraySort(vector<int> array) {\n  int minOutOfOrder = INT_MAX;\n  int maxOutOfOrder = INT_MIN;\n  for (int i = 0; i < array.size(); i++) {\n    int num = array[i];\n    if (isOutOfOrder(i, num, array)) {\n      minOutOfOrder = min(minOutOfOrder, num);\n      maxOutOfOrder = max(maxOutOfOrder, num);\n    }\n  }\n  if (minOutOfOrder == INT_MAX) {\n    return vector<int>{-1, -1};\n  }\n  int subarrayLeftIdx = 0;\n  while (minOutOfOrder >= array[subarrayLeftIdx]) {\n    subarrayLeftIdx++;\n  }\n  int subarrayRightIdx = array.size() - 1;\n  while (maxOutOfOrder <= array[subarrayRightIdx]) {\n    subarrayRightIdx--;\n  }\n  return vector<int>{subarrayLeftIdx, subarrayRightIdx};\n}\n\nbool isOutOfOrder(int i, int num, vector<int> array) {\n  if (i == 0) {\n    return num > array[i + 1];\n  }\n  if (i == array.size() - 1) {\n    return num < array[i - 1];\n  }\n  return num > array[i + 1] || num < array[i - 1];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{3, 9};\n      assert(\n        subarraySort({1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19}) == expected\n      );\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{3, 9};\n      assert(\n        subarraySort({1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19}) == expected\n      );\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public static int[] SubarraySort(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(n) time | O(1) space\n  public static int[] SubarraySort(int[] array) {\n    int minOutOfOrder = Int32.MaxValue;\n    int maxOutOfOrder = Int32.MinValue;\n    for (int i = 0; i < array.Length; i++) {\n      int num = array[i];\n      if (isOutOfOrder(i, num, array)) {\n        minOutOfOrder = Math.Min(minOutOfOrder, num);\n        maxOutOfOrder = Math.Max(maxOutOfOrder, num);\n      }\n    }\n    if (minOutOfOrder == Int32.MaxValue) {\n      return new int[] { -1, -1 };\n    }\n    int subarrayLeftIdx = 0;\n    while (minOutOfOrder >= array[subarrayLeftIdx]) {\n      subarrayLeftIdx++;\n    }\n    int subarrayRightIdx = array.Length - 1;\n    while (maxOutOfOrder <= array[subarrayRightIdx]) {\n      subarrayRightIdx--;\n    }\n    return new int[] { subarrayLeftIdx, subarrayRightIdx };\n  }\n\n  public static bool isOutOfOrder(int i, int num, int[] array) {\n    if (i == 0) {\n      return num > array[i + 1];\n    }\n    if (i == array.Length - 1) {\n      return num < array[i - 1];\n    }\n    return num > array[i + 1] || num < array[i - 1];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 3, 9 };\n    Utils.AssertTrue(Enumerable.SequenceEqual(\n      Program.SubarraySort(\n        new int[] { 1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19 }\n      ),\n      expected\n    ));\n  }\n}\n",
      "unitTests": "using System.Linq;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] expected = { 3, 9 };\n    Utils.AssertTrue(Enumerable.SequenceEqual(\n      Program.SubarraySort(\n        new int[] { 1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19 }\n      ),\n      expected\n    ));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc SubarraySort(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(n) time | O(1) space\nfunc SubarraySort(array []int) []int {\n\tminOutOfOrder, maxOutOfOrder := math.MaxInt32, math.MinInt32\n\tfor i, num := range array {\n\t\tif isOutOfOrder(i, num, array) {\n\t\t\tminOutOfOrder = min(minOutOfOrder, num)\n\t\t\tmaxOutOfOrder = max(maxOutOfOrder, num)\n\t\t}\n\t}\n\tif minOutOfOrder == math.MaxInt32 {\n\t\treturn []int{-1, -1}\n\t}\n\tsubarrayLeft := 0\n\tfor minOutOfOrder >= array[subarrayLeft] {\n\t\tsubarrayLeft += 1\n\t}\n\tsubarrayRight := len(array) - 1\n\tfor maxOutOfOrder <= array[subarrayRight] {\n\t\tsubarrayRight -= 1\n\t}\n\treturn []int{subarrayLeft, subarrayRight}\n}\n\nfunc isOutOfOrder(i int, num int, array []int) bool {\n\tif i == 0 {\n\t\treturn num > array[i+1]\n\t}\n\tif i == len(array)-1 {\n\t\treturn num < array[i-1]\n\t}\n\treturn num > array[i+1] || num < array[i-1]\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc max(a, b int) int {\n\tif a < b {\n\t\treturn b\n\t}\n\treturn a\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{3, 9}\n\toutput := SubarraySort([]int{1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19})\n\trequire.Equal(t, expected, output)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{3, 9}\n\toutput := SubarraySort([]int{1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19})\n\trequire.Equal(t, expected, output)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public static int[] subarraySort(int[] array) {\n    // Write your code here.\n    return new int[] {};\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int[] subarraySort(int[] array) {\n    int minOutOfOrder = Integer.MAX_VALUE;\n    int maxOutOfOrder = Integer.MIN_VALUE;\n    for (int i = 0; i < array.length; i++) {\n      int num = array[i];\n      if (isOutOfOrder(i, num, array)) {\n        minOutOfOrder = Math.min(minOutOfOrder, num);\n        maxOutOfOrder = Math.max(maxOutOfOrder, num);\n      }\n    }\n    if (minOutOfOrder == Integer.MAX_VALUE) {\n      return new int[] {-1, -1};\n    }\n    int subarrayLeftIdx = 0;\n    while (minOutOfOrder >= array[subarrayLeftIdx]) {\n      subarrayLeftIdx++;\n    }\n    int subarrayRightIdx = array.length - 1;\n    while (maxOutOfOrder <= array[subarrayRightIdx]) {\n      subarrayRightIdx--;\n    }\n    return new int[] {subarrayLeftIdx, subarrayRightIdx};\n  }\n\n  public static boolean isOutOfOrder(int i, int num, int[] array) {\n    if (i == 0) {\n      return num > array[i + 1];\n    }\n    if (i == array.length - 1) {\n      return num < array[i - 1];\n    }\n    return num > array[i + 1] || num < array[i - 1];\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.Arrays;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {3, 9};\n    Utils.assertTrue(Arrays.equals(\n      Program.subarraySort(new int[] {\n        1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19}),\n      expected\n    ));\n  }\n}\n",
      "unitTests": "import java.util.Arrays;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {3, 9};\n    Utils.assertTrue(Arrays.equals(\n      Program.subarraySort(new int[] {\n        1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19}),\n      expected\n    ));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function subarraySort(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.subarraySort = subarraySort;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(1) space\nfunction subarraySort(array) {\n  let minOutOfOrder = Infinity;\n  let maxOutOfOrder = -Infinity;\n  for (let i = 0; i < array.length; i++) {\n    const num = array[i];\n    if (isOutOfOrder(i, num, array)) {\n      minOutOfOrder = Math.min(minOutOfOrder, num);\n      maxOutOfOrder = Math.max(maxOutOfOrder, num);\n    }\n  }\n  if (minOutOfOrder === Infinity) {\n    return [-1, -1];\n  }\n  let subarrayLeftIdx = 0;\n  while (minOutOfOrder >= array[subarrayLeftIdx]) {\n    subarrayLeftIdx++;\n  }\n  let subarrayRightIdx = array.length - 1;\n  while (maxOutOfOrder <= array[subarrayRightIdx]) {\n    subarrayRightIdx--;\n  }\n  return [subarrayLeftIdx, subarrayRightIdx];\n}\n\nfunction isOutOfOrder(i, num, array) {\n  if (i === 0) return num > array[i + 1];\n  if (i === array.length - 1) return num < array[i - 1];\n  return num > array[i + 1] || num < array[i - 1];\n}\n\nexports.subarraySort = subarraySort;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.subarraySort([1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]))\n    .to.deep.equal([3, 9]);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.subarraySort([1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]))\n    .to.deep.equal([3, 9]);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun subarraySort(array: List<Int>): List<Int> {\n    // Write your code here.\n    return listOf<Int>(-1, -1)\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\nimport kotlin.math.min\n\n// O(n) time | O(1) space\nfun subarraySort(array: List<Int>): List<Int> {\n    var minOutOfOrder = Int.MAX_VALUE\n    var maxOutOfOrder = Int.MIN_VALUE\n    for (i in 0 until array.size) {\n        val num = array[i]\n        if (isOutOfOrder(i, num, array)) {\n            minOutOfOrder = min(minOutOfOrder, num)\n            maxOutOfOrder = max(maxOutOfOrder, num)\n        }\n    }\n    if (minOutOfOrder == Int.MAX_VALUE) {\n        return listOf<Int>(-1, -1)\n    }\n    var subarrayLeftIdx = 0\n    while (minOutOfOrder >= array[subarrayLeftIdx]) {\n        subarrayLeftIdx++\n    }\n    var subarrayRightIdx = array.size - 1\n    while (maxOutOfOrder <= array[subarrayRightIdx]) {\n        subarrayRightIdx--\n    }\n    return listOf<Int>(subarrayLeftIdx, subarrayRightIdx)\n}\n\nfun isOutOfOrder(i: Int, num: Int, array: List<Int>): Boolean {\n    if (i == 0) return num > array[i + 1]\n    if (i == array.size - 1) return num < array[i - 1]\n    return num > array[i + 1] || num < array[i - 1]\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.subarraySort as subarraySort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf<Int>(1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19)\n        val output = subarraySort(array)\n        val expected = listOf<Int>(3, 9)\n        assert(output.equals(expected))\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.subarraySort as subarraySort\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val array = listOf<Int>(1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19)\n        val output = subarraySort(array)\n        val expected = listOf<Int>(3, 9)\n        assert(output.equals(expected))\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def subarraySort(array):\n    # Write your code here.\n    pass\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(1) space\ndef subarraySort(array):\n    minOutOfOrder = float(\"inf\")\n    maxOutOfOrder = float(\"-inf\")\n    for i in range(len(array)):\n        num = array[i]\n        if isOutOfOrder(i, num, array):\n            minOutOfOrder = min(minOutOfOrder, num)\n            maxOutOfOrder = max(maxOutOfOrder, num)\n    if minOutOfOrder == float(\"inf\"):\n        return [-1, -1]\n    subarrayLeftIdx = 0\n    while minOutOfOrder >= array[subarrayLeftIdx]:\n        subarrayLeftIdx += 1\n    subarrayRightIdx = len(array) - 1\n    while maxOutOfOrder <= array[subarrayRightIdx]:\n        subarrayRightIdx -= 1\n    return [subarrayLeftIdx, subarrayRightIdx]\n\n\ndef isOutOfOrder(i, num, array):\n    if i == 0:\n        return num > array[i + 1]\n    if i == len(array) - 1:\n        return num < array[i - 1]\n    return num > array[i + 1] or num < array[i - 1]\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.subarraySort([1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]), [3, 9]\n        )\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.subarraySort([1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]), [3, 9]\n        )\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def subarraySort(array)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def subarraySort(array)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.subarraySort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.subarraySort\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func subarraySort(array: [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  func subarraySort(array: [Int]) -> [Int] {\n    var minimumOutOfOrder = Int(Int16.max)\n    var maximumOutOfOrder = -Int(Int16.max)\n\n    for i in 0 ..< array.count {\n      let currentNumber = array[i]\n\n      if isOutOfOrder(i, array, currentNumber) {\n        minimumOutOfOrder = min(currentNumber, minimumOutOfOrder)\n        maximumOutOfOrder = max(currentNumber, maximumOutOfOrder)\n      }\n    }\n\n    if minimumOutOfOrder == Int(Int16.max) {\n      return [-1, -1]\n    }\n\n    var subarrayLeftIndex = 0\n    while minimumOutOfOrder >= array[subarrayLeftIndex] {\n      subarrayLeftIndex += 1\n    }\n\n    var subarrayRightIndex = array.count - 1\n    while maximumOutOfOrder <= array[subarrayRightIndex] {\n      subarrayRightIndex -= 1\n    }\n\n    return [subarrayLeftIndex, subarrayRightIndex]\n  }\n\n  func isOutOfOrder(_ i: Int, _ array: [Int], _ currentNumber: Int) -> Bool {\n    if i == 0 {\n      return currentNumber > array[i + 1]\n    } else if i == array.count - 1 {\n      return currentNumber < array[i - 1]\n    } else {\n      return currentNumber > array[i + 1] || currentNumber < array[i - 1]\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([3, 9], program.subarraySort(array: [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]))\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([3, 9], program.subarraySort(array: [1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]))\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "type Range = [number, number];\n\nexport function subarraySort(array: number[]): Range {\n  // Write your code here.\n  return [-1, -1];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\ntype Range = [number, number];\n\n// O(n) time | O(1) space\nexport function subarraySort(array: number[]): Range {\n  let minOutOfOrder = Infinity;\n  let maxOutOfOrder = -Infinity;\n  for (let i = 0; i < array.length; i++) {\n    const num = array[i];\n    if (isOutOfOrder(i, num, array)) {\n      minOutOfOrder = Math.min(minOutOfOrder, num);\n      maxOutOfOrder = Math.max(maxOutOfOrder, num);\n    }\n  }\n  if (minOutOfOrder === Infinity) {\n    return [-1, -1];\n  }\n  let subarrayLeftIdx = 0;\n  while (minOutOfOrder >= array[subarrayLeftIdx]) {\n    subarrayLeftIdx++;\n  }\n  let subarrayRightIdx = array.length - 1;\n  while (maxOutOfOrder <= array[subarrayRightIdx]) {\n    subarrayRightIdx--;\n  }\n  return [subarrayLeftIdx, subarrayRightIdx];\n}\n\nfunction isOutOfOrder(i: number, num: number, array: number[]) {\n  if (i === 0) return num > array[i + 1];\n  if (i === array.length - 1) return num < array[i - 1];\n  return num > array[i + 1] || num < array[i - 1];\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.subarraySort([1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]))\n    .to.deep.equal([3, 9]);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.subarraySort([1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19]))\n    .to.deep.equal([3, 9]);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "array",
      "example": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        6,
        7,
        16,
        18,
        19
      ],
      "schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 2,
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "array": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        6,
        7,
        16,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        7,
        7,
        16,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        13,
        14,
        16,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        8,
        4,
        5
      ]
    },
    {
      "array": [
        4,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        51,
        7
      ]
    },
    {
      "array": [
        4,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        11,
        57
      ]
    },
    {
      "array": [
        -41,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        11,
        57
      ]
    },
    {
      "array": [
        -41,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        51,
        7
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        7,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        21,
        22,
        7,
        14,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        4,
        14,
        11,
        6,
        33,
        35,
        41,
        55
      ]
    },
    {
      "array": [
        1,
        2,
        20,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ]
    },
    {
      "array": [
        0,
        1,
        1,
        2,
        3,
        5,
        8,
        13,
        21,
        34,
        55,
        89
      ]
    }
  ],
  "jsonTests": [
    {
      "array": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        6,
        7,
        16,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        7,
        7,
        16,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        4,
        7,
        10,
        11,
        7,
        12,
        13,
        14,
        16,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        8,
        4,
        5
      ]
    },
    {
      "array": [
        4,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        51,
        7
      ]
    },
    {
      "array": [
        4,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        11,
        57
      ]
    },
    {
      "array": [
        -41,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        11,
        57
      ]
    },
    {
      "array": [
        -41,
        8,
        7,
        12,
        11,
        9,
        -1,
        3,
        9,
        16,
        -15,
        51,
        7
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        7,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        7,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        18,
        21,
        22,
        7,
        14,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        4,
        14,
        11,
        6,
        33,
        35,
        41,
        55
      ]
    },
    {
      "array": [
        1,
        2,
        20,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ]
    },
    {
      "array": [
        0,
        1,
        1,
        2,
        3,
        5,
        8,
        13,
        21,
        34,
        55,
        89
      ]
    }
  ],
  "changelog": []
}