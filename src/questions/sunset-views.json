{
  "uid": "sunset-views",
  "testStrategy": "JSON",
  "name": "Sunset Views",
  "version": 0,
  "releaseDate": "2020-12-23T00:00:00Z",
  "category": "Stacks",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 19946,
    "failureCount": 5289
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "487161955",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1402
  },
  "prompt": "<div class=\"html\">\n<p>\n  Given an array of buildings and a direction that all of the buildings face,\n  return an array of the indices of the buildings that can see the sunset.\n</p>\n<p>\n  A building can see the sunset if it's strictly taller than all of the\n  buildings that come after it in the direction that it faces.\n</p>\n<p>\n  The input array named <span>buildings</span> contains positive, non-zero\n  integers representing the heights of the buildings. A building at index\n  <span>i</span> thus has a height denoted by <span>buildings[i]</span>. All of\n  the buildings face the same direction, and this direction is either east or\n  west, denoted by the input string named <span>direction</span>, which will\n  always be equal to either <span>\"EAST\"</span> or <span>\"WEST\"</span>. In\n  relation to the input array, you can interpret these directions as right for\n  east and left for west.\n</p>\n<p>\n  Important note: the indices in the ouput array should be sorted in ascending\n  order.\n</p>\n<h3>Sample Input #1</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">buildings</span> = [3, 5, 4, 4, 3, 1, 3, 2]\n<span class=\"CodeEditor-promptParameter\">direction</span> = \"EAST\"\n</pre>\n<h3>Sample Output #1</h3>\n<pre>\n[1, 3, 6, 7]\n\n<span class=\"CodeEditor-promptComment\">// Below is a visual representation of the sample input.</span>\n<span class=\"CodeEditor-promptComment\">//    _</span>\n<span class=\"CodeEditor-promptComment\">//   | |_ _</span>\n<span class=\"CodeEditor-promptComment\">//  _| | | |_   _</span>\n<span class=\"CodeEditor-promptComment\">// | | | | | | | |_</span>\n<span class=\"CodeEditor-promptComment\">// | | | | | |_| | |</span>\n<span class=\"CodeEditor-promptComment\">// |_|_|_|_|_|_|_|_|</span>\n</pre>\n<h3>Sample Input #2</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">buildings</span> = [3, 5, 4, 4, 3, 1, 3, 2]\n<span class=\"CodeEditor-promptParameter\">direction</span> = \"WEST\"\n</pre>\n<h3>Sample Output #2</h3>\n<pre>\n[0, 1]\n\n<span class=\"CodeEditor-promptComment\">// The buildings are the same as in the first sample</span>\n<span class=\"CodeEditor-promptComment\">// input, but their direction is reversed.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nIs there a way to solve this problem in one loop?\n</p>\n",
    "\n<p>\nHow does your solution change based on the direction that the buildings are facing? You can use the same approach for each direction by simply changing the direction in which you traverse the array of buildings.\n</p>\n",
    "\n<p>\nThere are multiple ways to solve this problem, but one is to maintain a running maximum of building heights. Loop in the opposite direction that the buildings are facing, and keep track of the maximum building height that you've seen. At each iteration, compare the height of the current building to the running maximum; if the current building is taller, then it can see the sunset; otherwise, it can't. Finally, at each iteration, update the running maximum.\n</p>\n",
    "\n<p>\nAnother way to solve this problem is to use a stack. Loop in the direction that the buildings are facing, and add the index of the current building to the stack at the end of each iteration. Before adding elements to the stack, compare the current building height to buildings at the top of the stack. Pop off the top of the stack until the current building height is shorter than the height of the building at the top of the stack. This will remove all buildings that are blocked from seeing the sunset by the current building. At the end of the algorithm, the stack will only contain elements that can see the sunset.\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of the input array",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nvector<int> sunsetViews(vector<int> buildings, string direction) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input array\nvector<int> sunsetViews(vector<int> buildings, string direction) {\n  vector<int> buildingsWithSunsetViews;\n\n  int startIdx = buildings.size() - 1;\n  int step = -1;\n\n  if (direction == \"WEST\") {\n    startIdx = 0;\n    step = 1;\n  }\n\n  int idx = startIdx;\n  int runningMaxHeight = 0;\n\n  while (idx >= 0 && idx < buildings.size()) {\n    int buildingHeight = buildings[idx];\n\n    if (buildingHeight > runningMaxHeight) {\n      buildingsWithSunsetViews.push_back(idx);\n    }\n\n    runningMaxHeight = max(runningMaxHeight, buildingHeight);\n\n    idx += step;\n  }\n\n  if (direction == \"EAST\") {\n    reverse(buildingsWithSunsetViews.begin(), buildingsWithSunsetViews.end());\n  }\n\n  return buildingsWithSunsetViews;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of the input array\nvector<int> sunsetViews(vector<int> buildings, string direction) {\n  vector<int> candidateBuildings;\n\n  int startIdx = buildings.size() - 1;\n  int step = -1;\n\n  if (direction == \"EAST\") {\n    startIdx = 0;\n    step = 1;\n  }\n\n  int idx = startIdx;\n  while (idx >= 0 && idx < buildings.size()) {\n    int buildingHeight = buildings[idx];\n\n    while (candidateBuildings.size() > 0 &&\n           buildings[candidateBuildings[candidateBuildings.size() - 1]] <=\n             buildingHeight) {\n      candidateBuildings.pop_back();\n    }\n\n    candidateBuildings.push_back(idx);\n\n    idx += step;\n  }\n\n  if (direction == \"WEST\") {\n    reverse(candidateBuildings.begin(), candidateBuildings.end());\n  }\n\n  return candidateBuildings;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> buildings = {3, 5, 4, 4, 3, 1, 3, 2};\n      string direction = \"EAST\";\n      vector<int> expected = {1, 3, 6, 7};\n      vector<int> actual = sunsetViews(buildings, direction);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> buildings = {3, 5, 4, 4, 3, 1, 3, 2};\n      string direction = \"EAST\";\n      vector<int> expected = {1, 3, 6, 7};\n      vector<int> actual = sunsetViews(buildings, direction);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<int> SunsetViews(int[] buildings, string direction) {\n    // Write your code here.\n    return new List<int>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public List<int> SunsetViews(int[] buildings, string direction) {\n    List<int> buildingsWithSunsetViews = new List<int>();\n\n    int startIdx = buildings.Length - 1;\n    int step = -1;\n\n    if (direction.Equals(\"WEST\")) {\n      startIdx = 0;\n      step = 1;\n    }\n\n    int idx = startIdx;\n    int runningMaxHeight = 0;\n\n    while (idx >= 0 && idx < buildings.Length) {\n      int buildingHeight = buildings[idx];\n\n      if (buildingHeight > runningMaxHeight) {\n        buildingsWithSunsetViews.Add(idx);\n      }\n\n      runningMaxHeight = Math.Max(runningMaxHeight, buildingHeight);\n\n      idx += step;\n    }\n\n    if (direction.Equals(\"EAST\")) {\n      buildingsWithSunsetViews.Reverse();\n    }\n\n    return buildingsWithSunsetViews;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public List<int> SunsetViews(int[] buildings, string direction) {\n    List<int> candidateBuildings = new List<int>();\n\n    int startIdx = buildings.Length - 1;\n    int step = -1;\n\n    if (direction.Equals(\"EAST\")) {\n      startIdx = 0;\n      step = 1;\n    }\n\n    int idx = startIdx;\n    while (idx >= 0 && idx < buildings.Length) {\n      int buildingHeight = buildings[idx];\n\n      while (candidateBuildings.Count > 0 &&\n             buildings[candidateBuildings[candidateBuildings.Count - 1]] <=\n               buildingHeight) {\n        candidateBuildings.RemoveAt(candidateBuildings.Count - 1);\n      }\n\n      candidateBuildings.Add(idx);\n\n      idx += step;\n    }\n\n    if (direction.Equals(\"WEST\")) {\n      candidateBuildings.Reverse();\n    }\n\n    return candidateBuildings;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] buildings = new int[] { 3, 5, 4, 4, 3, 1, 3, 2 };\n    string direction = \"EAST\";\n    List<int> expected = new List<int>();\n    expected.Add(1);\n    expected.Add(3);\n    expected.Add(6);\n    expected.Add(7);\n    var actual = new Program().SunsetViews(buildings, direction);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] buildings = new int[] { 3, 5, 4, 4, 3, 1, 3, 2 };\n    string direction = \"EAST\";\n    List<int> expected = new List<int>();\n    expected.Add(1);\n    expected.Add(3);\n    expected.Add(6);\n    expected.Add(7);\n    var actual = new Program().SunsetViews(buildings, direction);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc SunsetViews(buildings []int, direction string) []int {\n\t// Write your code here.\n\treturn []int{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunc SunsetViews(buildings []int, direction string) []int {\n\tbuildingsWithSunsetViews := make([]int, 0)\n\n\tstartIdx := len(buildings) - 1\n\tstep := -1\n\tif direction == \"WEST\" {\n\t\tstartIdx = 0\n\t\tstep = 1\n\t}\n\n\tidx := startIdx\n\trunningMaxHeight := 0\n\tfor idx >= 0 && idx < len(buildings) {\n\t\tbuildingHeight := buildings[idx]\n\n\t\tif buildingHeight > runningMaxHeight {\n\t\t\tbuildingsWithSunsetViews = append(buildingsWithSunsetViews, idx)\n\t\t}\n\n\t\trunningMaxHeight = max(runningMaxHeight, buildingHeight)\n\n\t\tidx += step\n\t}\n\n\tif direction == \"EAST\" {\n\t\treverse(buildingsWithSunsetViews)\n\t}\n\n\treturn buildingsWithSunsetViews\n}\n\nfunc reverse(array []int) {\n\tl := len(array) - 1\n\tfor i := 0; i < len(array)/2; i++ {\n\t\tarray[i], array[l-i] = array[l-i], array[i]\n\t}\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunc SunsetViews(buildings []int, direction string) []int {\n\tcandidateBuildings := make([]int, 0)\n\n\tstartIdx := len(buildings) - 1\n\tstep := -1\n\tif direction == \"EAST\" {\n\t\tstartIdx = 0\n\t\tstep = 1\n\t}\n\n\tvar idx = startIdx\n\tfor idx >= 0 && idx < len(buildings) {\n\t\tbuildingHeight := buildings[idx]\n\n\t\tfor len(candidateBuildings) > 0 && buildings[candidateBuildings[len(candidateBuildings)-1]] <= buildingHeight {\n\t\t\tcandidateBuildings = candidateBuildings[:len(candidateBuildings)-1]\n\t\t}\n\n\t\tcandidateBuildings = append(candidateBuildings, idx)\n\t\tidx += step\n\t}\n\n\tif direction == \"WEST\" {\n\t\treverse(candidateBuildings)\n\t}\n\n\treturn candidateBuildings\n}\n\nfunc reverse(array []int) {\n\tl := len(array) - 1\n\tfor i := 0; i < len(array)/2; i++ {\n\t\tarray[i], array[l-i] = array[l-i], array[i]\n\t}\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tbuildings := []int{3, 5, 4, 4, 3, 1, 3, 2}\n\tdirection := \"EAST\"\n\texpected := []int{1, 3, 6, 7}\n\tactual := SunsetViews(buildings, direction)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tbuildings := []int{3, 5, 4, 4, 3, 1, 3, 2}\n\tdirection := \"EAST\"\n\texpected := []int{1, 3, 6, 7}\n\tactual := SunsetViews(buildings, direction)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<Integer> sunsetViews(int[] buildings, String direction) {\n    // Write your code here.\n    return new ArrayList<Integer>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public ArrayList<Integer> sunsetViews(int[] buildings, String direction) {\n    ArrayList<Integer> buildingsWithSunsetViews = new ArrayList<Integer>();\n\n    int startIdx = buildings.length - 1;\n    int step = -1;\n\n    if (direction.equals(\"WEST\")) {\n      startIdx = 0;\n      step = 1;\n    }\n\n    int idx = startIdx;\n    int runningMaxHeight = 0;\n\n    while (idx >= 0 && idx < buildings.length) {\n      int buildingHeight = buildings[idx];\n\n      if (buildingHeight > runningMaxHeight) {\n        buildingsWithSunsetViews.add(idx);\n      }\n\n      runningMaxHeight = Math.max(runningMaxHeight, buildingHeight);\n\n      idx += step;\n    }\n\n    if (direction.equals(\"EAST\")) {\n      Collections.reverse(buildingsWithSunsetViews);\n    }\n\n    return buildingsWithSunsetViews;\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  public ArrayList<Integer> sunsetViews(int[] buildings, String direction) {\n    ArrayList<Integer> candidateBuildings = new ArrayList<Integer>();\n\n    int startIdx = buildings.length - 1;\n    int step = -1;\n\n    if (direction.equals(\"EAST\")) {\n      startIdx = 0;\n      step = 1;\n    }\n\n    int idx = startIdx;\n    while (idx >= 0 && idx < buildings.length) {\n      int buildingHeight = buildings[idx];\n\n      while (candidateBuildings.size() > 0\n             && buildings[candidateBuildings.get(candidateBuildings.size() - 1)]\n               <= buildingHeight) {\n        candidateBuildings.remove(candidateBuildings.size() - 1);\n      }\n\n      candidateBuildings.add(idx);\n\n      idx += step;\n    }\n\n    if (direction.equals(\"WEST\")) {\n      Collections.reverse(candidateBuildings);\n    }\n\n    return candidateBuildings;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] buildings = new int[] {3, 5, 4, 4, 3, 1, 3, 2};\n    String direction = \"EAST\";\n    ArrayList<Integer> expected = new ArrayList<Integer>();\n    expected.add(1);\n    expected.add(3);\n    expected.add(6);\n    expected.add(7);\n    var actual = new Program().sunsetViews(buildings, direction);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] buildings = new int[] {3, 5, 4, 4, 3, 1, 3, 2};\n    String direction = \"EAST\";\n    ArrayList<Integer> expected = new ArrayList<Integer>();\n    expected.add(1);\n    expected.add(3);\n    expected.add(6);\n    expected.add(7);\n    var actual = new Program().sunsetViews(buildings, direction);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function sunsetViews(buildings, direction) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.sunsetViews = sunsetViews;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction sunsetViews(buildings, direction) {\n  const buildingsWithSunsetViews = [];\n\n  const startIdx = direction === 'WEST' ? 0 : buildings.length - 1;\n  const step = direction === 'WEST' ? 1 : -1;\n\n  let idx = startIdx;\n  let runningMaxHeight = 0;\n  while (idx >= 0 && idx < buildings.length) {\n    const buildingHeight = buildings[idx];\n\n    if (buildingHeight > runningMaxHeight) buildingsWithSunsetViews.push(idx);\n\n    runningMaxHeight = Math.max(runningMaxHeight, buildingHeight);\n\n    idx = idx + step;\n  }\n\n  if (direction === 'EAST') buildingsWithSunsetViews.reverse();\n\n  return buildingsWithSunsetViews;\n}\n\n// Do not edit the line below.\nexports.sunsetViews = sunsetViews;\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of the input array\nfunction sunsetViews(buildings, direction) {\n  const candidateBuildings = [];\n\n  const startIdx = direction === 'EAST' ? 0 : buildings.length - 1;\n  const step = direction === 'EAST' ? 1 : -1;\n\n  let idx = startIdx;\n  while (idx >= 0 && idx < buildings.length) {\n    const buildingHeight = buildings[idx];\n\n    while (\n      candidateBuildings.length > 0 &&\n      buildings[candidateBuildings[candidateBuildings.length - 1]] <= buildingHeight\n    ) {\n      candidateBuildings.pop();\n    }\n\n    candidateBuildings.push(idx);\n\n    idx = idx + step;\n  }\n\n  if (direction === 'WEST') candidateBuildings.reverse();\n\n  return candidateBuildings;\n}\n\n// Do not edit the line below.\nexports.sunsetViews = sunsetViews;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const buildings = [3, 5, 4, 4, 3, 1, 3, 2];\n  const direction = 'EAST';\n  const expected = [1, 3, 6, 7];\n  const actual = program.sunsetViews(buildings, direction);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const buildings = [3, 5, 4, 4, 3, 1, 3, 2];\n  const direction = 'EAST';\n  const expected = [1, 3, 6, 7];\n  const actual = program.sunsetViews(buildings, direction);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun sunsetViews(buildings: List<Int>, direction: String): List<Int> {\n    // Write your code here.\n    return buildings\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(n) time | O(n) space - where n is the length of the input array\nfun sunsetViews(buildings: List<Int>, direction: String): List<Int> {\n    val buildingsWithSunsetViews = mutableListOf<Int>()\n\n    val startIdx = if (direction == \"WEST\") 0 else buildings.size - 1\n    val step = if (direction == \"WEST\") 1 else -1\n\n    var idx = startIdx\n    var runningMaxHeight = 0\n    while (idx >= 0 && idx < buildings.size) {\n        val buildingHeight = buildings[idx]\n\n        if (buildingHeight > runningMaxHeight) buildingsWithSunsetViews.add(idx)\n\n        runningMaxHeight = max(runningMaxHeight, buildingHeight)\n\n        idx += step\n    }\n\n    if (direction == \"EAST\") buildingsWithSunsetViews.reverse()\n\n    return buildingsWithSunsetViews\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of the input array\nfun sunsetViews(buildings: List<Int>, direction: String): List<Int> {\n    val candidateBuildings = mutableListOf<Int>()\n\n    val startIdx = if (direction == \"EAST\") 0 else buildings.size - 1\n    val step = if (direction == \"EAST\") 1 else -1\n\n    var idx = startIdx\n    while (idx >= 0 && idx < buildings.size) {\n        val buildingHeight = buildings[idx]\n\n        while (candidateBuildings.size > 0 && buildings[candidateBuildings[candidateBuildings.size - 1]] <= buildingHeight) {\n            candidateBuildings.removeAt(candidateBuildings.size - 1)\n        }\n\n        candidateBuildings.add(idx)\n\n        idx += step\n    }\n\n    if (direction == \"WEST\") candidateBuildings.reverse()\n\n    return candidateBuildings\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.sunsetViews\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val buildings = listOf(3, 5, 4, 4, 3, 1, 3, 2)\n        val direction = \"EAST\"\n        val expected = listOf(1, 3, 6, 7)\n        val actual = sunsetViews(buildings, direction)\n        assert(expected == actual)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.sunsetViews\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val buildings = listOf(3, 5, 4, 4, 3, 1, 3, 2)\n        val direction = \"EAST\"\n        val expected = listOf(1, 3, 6, 7)\n        val actual = sunsetViews(buildings, direction)\n        assert(expected == actual)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def sunsetViews(buildings, direction):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef sunsetViews(buildings, direction):\n    buildingsWithSunsetViews = []\n\n    startIdx = 0 if direction == \"WEST\" else len(buildings) - 1\n    step = 1 if direction == \"WEST\" else -1\n\n    idx = startIdx\n    runningMaxHeight = 0\n    while idx >= 0 and idx < len(buildings):\n        buildingHeight = buildings[idx]\n\n        if buildingHeight > runningMaxHeight:\n            buildingsWithSunsetViews.append(idx)\n\n        runningMaxHeight = max(runningMaxHeight, buildingHeight)\n\n        idx += step\n\n    if direction == \"EAST\":\n        return buildingsWithSunsetViews[::-1]\n\n    return buildingsWithSunsetViews\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of the input array\ndef sunsetViews(buildings, direction):\n    candidateBuildings = []\n\n    startIdx = 0 if direction == \"EAST\" else len(buildings) - 1\n    step = 1 if direction == \"EAST\" else -1\n\n    idx = startIdx\n    while idx >= 0 and idx < len(buildings):\n        buildingHeight = buildings[idx]\n\n        while len(candidateBuildings) > 0 and buildings[candidateBuildings[-1]] <= buildingHeight:\n            candidateBuildings.pop()\n\n        candidateBuildings.append(idx)\n\n        idx += step\n\n    if direction == \"WEST\":\n        return candidateBuildings[::-1]\n\n    return candidateBuildings\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        buildings = [3, 5, 4, 4, 3, 1, 3, 2]\n        direction = \"EAST\"\n        expected = [1, 3, 6, 7]\n        actual = program.sunsetViews(buildings, direction)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        buildings = [3, 5, 4, 4, 3, 1, 3, 2]\n        direction = \"EAST\"\n        expected = [1, 3, 6, 7]\n        actual = program.sunsetViews(buildings, direction)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def sunsetViews(buildings, direction)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def sunsetViews(buildings, direction)\n    # Write your code here.\n    return []\n  end\nend\n",
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def sunsetViews(buildings, direction)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.sunsetViews\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.sunsetViews\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func sunsetViews(_ buildings: [Int], _ direction: String) -> [Int] {\n    // Write your code here.\n    return [Int]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  func sunsetViews(_ buildings: [Int], _ direction: String) -> [Int] {\n    var buildingsWithSunsetViews = [Int]()\n\n    var startIdx = buildings.count - 1\n    var step = -1\n    if direction == \"WEST\" {\n      startIdx = 0\n      step = 1\n    }\n\n    var idx = startIdx\n    var runningMaxHeight = 0\n    while idx >= 0, idx < buildings.count {\n      let buildingHeight = buildings[idx]\n\n      if buildingHeight > runningMaxHeight {\n        buildingsWithSunsetViews.append(idx)\n      }\n\n      runningMaxHeight = max(runningMaxHeight, buildingHeight)\n\n      idx += step\n    }\n\n    if direction == \"EAST\" {\n      buildingsWithSunsetViews.reverse()\n    }\n\n    return buildingsWithSunsetViews\n  }\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of the input array\n  func sunsetViews(_ buildings: [Int], _ direction: String) -> [Int] {\n    var candidateBuildings = [Int]()\n\n    var startIdx = buildings.count - 1\n    var step = -1\n    if direction == \"EAST\" {\n      startIdx = 0\n      step = 1\n    }\n\n    var idx = startIdx\n    while idx >= 0, idx < buildings.count {\n      let buildingHeight = buildings[idx]\n\n      while candidateBuildings.count > 0, buildings[candidateBuildings[candidateBuildings.count - 1]] <= buildingHeight {\n        candidateBuildings.removeLast()\n      }\n\n      candidateBuildings.append(idx)\n      idx += step\n    }\n\n    if direction == \"WEST\" {\n      candidateBuildings.reverse()\n    }\n\n    return candidateBuildings\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let buildings = [3, 5, 4, 4, 3, 1, 3, 2]\n      let direction = \"EAST\"\n      let expected = [1, 3, 6, 7]\n      var actual = Program().sunsetViews(buildings, direction)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let buildings = [3, 5, 4, 4, 3, 1, 3, 2]\n      let direction = \"EAST\"\n      let expected = [1, 3, 6, 7]\n      var actual = Program().sunsetViews(buildings, direction)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export enum Direction {\n  East = 'EAST',\n  West = 'WEST',\n}\n\nexport function sunsetViews(buildings: number[], direction: Direction) {\n  // Write your code here.\n  return buildings;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nexport enum Direction {\n  East = 'EAST',\n  West = 'WEST',\n}\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function sunsetViews(buildings: number[], direction: Direction) {\n  const buildingsWithSunsetViews: number[] = [];\n\n  const startIdx = direction === Direction.West ? 0 : buildings.length - 1;\n  const step = direction === Direction.West ? 1 : -1;\n\n  let idx = startIdx;\n  let runningMaxHeight = 0;\n  while (idx >= 0 && idx < buildings.length) {\n    const buildingHeight = buildings[idx];\n\n    if (buildingHeight > runningMaxHeight) buildingsWithSunsetViews.push(idx);\n\n    runningMaxHeight = Math.max(runningMaxHeight, buildingHeight);\n\n    idx = idx + step;\n  }\n\n  if (direction === Direction.East) buildingsWithSunsetViews.reverse();\n\n  return buildingsWithSunsetViews;\n}\n",
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nexport enum Direction {\n  East = 'EAST',\n  West = 'WEST',\n}\n\n// O(n) time | O(n) space - where n is the length of the input array\nexport function sunsetViews(buildings: number[], direction: Direction) {\n  const candidateBuildings: number[] = [];\n\n  const startIdx = direction === Direction.East ? 0 : buildings.length - 1;\n  const step = direction === Direction.East ? 1 : -1;\n\n  let idx = startIdx;\n  while (idx >= 0 && idx < buildings.length) {\n    const buildingHeight = buildings[idx];\n\n    while (\n      candidateBuildings.length > 0 &&\n      buildings[candidateBuildings[candidateBuildings.length - 1]] <= buildingHeight\n    ) {\n      candidateBuildings.pop();\n    }\n\n    candidateBuildings.push(idx);\n\n    idx = idx + step;\n  }\n\n  if (direction === Direction.West) candidateBuildings.reverse();\n\n  return candidateBuildings;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const buildings = [3, 5, 4, 4, 3, 1, 3, 2];\n  const direction = program.Direction.East;\n  const expected = [1, 3, 6, 7];\n  const actual = program.sunsetViews(buildings, direction);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const buildings = [3, 5, 4, 4, 3, 1, 3, 2];\n  const direction = program.Direction.East;\n  const expected = [1, 3, 6, 7];\n  const actual = program.sunsetViews(buildings, direction);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "buildings",
      "example": [
        3,
        5,
        4,
        4,
        3,
        1,
        3,
        2
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "direction",
      "example": "EAST",
      "schema": {
        "enum": [
          "EAST",
          "WEST"
        ],
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "buildings": [
        3,
        5,
        4,
        4,
        3,
        1,
        3,
        2
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        3,
        5,
        4,
        4,
        3,
        1,
        3,
        2
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        10,
        11
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        2,
        4
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        1
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        1
      ],
      "direction": "WEST"
    },
    {
      "buildings": [],
      "direction": "EAST"
    },
    {
      "buildings": [],
      "direction": "WEST"
    },
    {
      "buildings": [
        7,
        1,
        7,
        8,
        9,
        8,
        7,
        6,
        5,
        4,
        2,
        5
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        1,
        2,
        3,
        1,
        5,
        6,
        9,
        1,
        9,
        9,
        11,
        10,
        9,
        12,
        8
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        20,
        2,
        3,
        1,
        5,
        6,
        9,
        1,
        9,
        9,
        11,
        10,
        9,
        12,
        8
      ],
      "direction": "EAST"
    }
  ],
  "jsonTests": [
    {
      "buildings": [
        3,
        5,
        4,
        4,
        3,
        1,
        3,
        2
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        3,
        5,
        4,
        4,
        3,
        1,
        3,
        2
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        10,
        11
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        2,
        4
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        1
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        1
      ],
      "direction": "WEST"
    },
    {
      "buildings": [],
      "direction": "EAST"
    },
    {
      "buildings": [],
      "direction": "WEST"
    },
    {
      "buildings": [
        7,
        1,
        7,
        8,
        9,
        8,
        7,
        6,
        5,
        4,
        2,
        5
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "direction": "EAST"
    },
    {
      "buildings": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        1,
        2,
        3,
        1,
        5,
        6,
        9,
        1,
        9,
        9,
        11,
        10,
        9,
        12,
        8
      ],
      "direction": "WEST"
    },
    {
      "buildings": [
        20,
        2,
        3,
        1,
        5,
        6,
        9,
        1,
        9,
        9,
        11,
        10,
        9,
        12,
        8
      ],
      "direction": "EAST"
    }
  ],
  "changelog": []
}