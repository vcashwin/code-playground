{
  "uid": "tandem-bicycle",
  "testStrategy": "JSON",
  "name": "Tandem Bicycle",
  "version": 0,
  "releaseDate": "2021-04-01T00:00:00Z",
  "category": "Greedy Algorithms",
  "difficulty": 1,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 36653,
    "failureCount": 8086
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "525353878",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1272
  },
  "prompt": "<div class=\"html\">\n<p>\n  A tandem bicycle is a bicycle that's operated by two people: person A and\n  person B. Both people pedal the bicycle, but the person that pedals faster\n  dictates the speed of the bicycle. So if person A pedals at a speed of\n  <span>5</span>, and person B pedals at a speed of <span>4</span>, the tandem\n  bicycle moves at a speed of <span>5</span> (i.e.,\n  <span>tandemSpeed = max(speedA, speedB)</span>).\n</p>\n<p>\n  You're given two lists of positive integers: one that contains the speeds of\n  riders wearing red shirts and one that contains the speeds of riders wearing\n  blue shirts. Each rider is represented by a single positive integer, which is\n  the speed that they pedal a tandem bicycle at. Both lists have the same\n  length, meaning that there are as many red-shirt riders as there are\n  blue-shirt riders. Your goal is to pair every rider wearing a red shirt with a\n  rider wearing a blue shirt to operate a tandem bicycle.\n</p>\n<p>\n  Write a function that returns the maximum possible total speed or the minimum\n  possible total speed of all of the tandem bicycles being ridden based on an\n  input parameter, <span>fastest</span>. If <span>fastest = true</span>, your\n  function should return the maximum possible total speed; otherwise it should\n  return the minimum total speed.\n</p>\n<p>\n  \"Total speed\" is defined as the sum of the speeds of all the tandem bicycles\n  being ridden. For example, if there are 4 riders (2 red-shirt riders and 2\n  blue-shirt riders) who have speeds of <span>1, 3, 4, 5</span>, and if they're\n  paired on tandem bicycles as follows: <span>[1, 4], [5, 3]</span>, then the\n  total speed of these tandem bicycles is <span>4 + 5 = 9</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">redShirtSpeeds</span> = [5, 5, 3, 9, 2]\n<span class=\"CodeEditor-promptParameter\">blueShirtSpeeds</span> = [3, 6, 7, 2, 1] \n<span class=\"CodeEditor-promptParameter\">fastest</span> = true\n</pre>\n<h3>Sample Output</h3>\n<pre>\n32\n</pre>\n</div>",
  "hints": [
    "<p>\n  The brute-force approach to solve this problem is to generate every possible\n  set of pairs of riders and to determine the total speed that each of these\n  sets generates. This solution does work but, it isn't optimal. Can you think\n  of a better way to solve this problem?\n</p>\n",
    "\n<p>\n  Try looking at the input arrays in sorted order. How might this help you solve\n  the problem?\n</p>\n",
    "\n<p>\n  When generating the maximum total speed, you want to pair the slowest\n  red-shirt riders with the fastest blue-shirt riders and vice versa, so as to\n  always take advantage of the largest speeds. When generating the minimum total\n  speed, you want to pair the fastest red-shirt riders with the fastest\n  blue-shirt riders, so as to \"eliminate\" a large speed by pairing it with a\n  another large (larger) speed.\n</p>\n",
    "\n<p>\n  Sort the input arrays in place, and follow the strategy discussed in Hint #3.\n  With the inputs sorted, you can find the slowest and largest speeds from each\n  shirt color in constant time.\n</p>"
  ],
  "spaceTime": "O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles",
  "notes": "<div class=\"html\">\n<p>\n  You can arguably simplify the logic of our solution by reversing the\n  <span>redShirtSpeeds</span> if <span>fastest == true</span> (as opposed to if\n  <span>fastest == false</span>) and by accessing <span>rider2</span> at the\n  same index as you access <span>rider1</span>.\n</p>\n<p>See the changes to the code below:</p>\n<pre>\n<span class=\"CodeEditor-promptComment\">// Change `not fastest` to `fastest`.</span>\nif fastest:\n    reverseArrayInPlace(redShirtSpeeds)\n\ntotalSpeed = 0\nfor idx in range(len(redShirtSpeeds)):\n    rider1 = redShirtSpeeds[idx]\n    <span class=\"CodeEditor-promptComment\">// Access `rider2` at `idx` rather than at `len(blueShirtSpeeds) - idx - 1`.</span>\n    rider2 = blueShirtSpeeds[idx]\n    totalSpeed += max(rider1, rider2)\n</pre>\n</div>",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nint tandemBicycle(\n  vector<int> redShirtSpeeds, vector<int> blueShirtSpeeds, bool fastest\n) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nvoid reverseArrayInPlace(vector<int>& array);\n\n// O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\nint tandemBicycle(\n  vector<int> redShirtSpeeds, vector<int> blueShirtSpeeds, bool fastest\n) {\n  sort(redShirtSpeeds.begin(), redShirtSpeeds.end());\n  sort(blueShirtSpeeds.begin(), blueShirtSpeeds.end());\n\n  if (!fastest) reverseArrayInPlace(redShirtSpeeds);\n\n  int totalSpeed = 0;\n  for (int idx = 0; idx < redShirtSpeeds.size(); idx++) {\n    int rider1 = redShirtSpeeds[idx];\n    int rider2 = blueShirtSpeeds[blueShirtSpeeds.size() - idx - 1];\n    totalSpeed += max(rider1, rider2);\n  }\n\n  return totalSpeed;\n}\n\nvoid reverseArrayInPlace(vector<int>& array) {\n  int start = 0;\n  int end = array.size() - 1;\n  while (start < end) {\n    int temp = array[start];\n    array[start] = array[end];\n    array[end] = temp;\n    start++;\n    end--;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto redShirtSpeeds = {5, 5, 3, 9, 2};\n      auto blueShirtSpeeds = {3, 6, 7, 2, 1};\n      auto fastest = true;\n      auto expected = 32;\n      auto actual = tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto redShirtSpeeds = {5, 5, 3, 9, 2};\n      auto blueShirtSpeeds = {3, 6, 7, 2, 1};\n      auto fastest = true;\n      auto expected = 32;\n      auto actual = tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public int TandemBicycle(\n    int[] redShirtSpeeds, int[] blueShirtSpeeds, bool fastest\n  ) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System;\n\npublic class Program {\n  // O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\n  public int TandemBicycle(\n    int[] redShirtSpeeds, int[] blueShirtSpeeds, bool fastest\n  ) {\n    Array.Sort(redShirtSpeeds);\n    Array.Sort(blueShirtSpeeds);\n\n    if (!fastest) {\n      reverseArrayInPlace(redShirtSpeeds);\n    }\n\n    int totalSpeed = 0;\n    for (int idx = 0; idx < redShirtSpeeds.Length; idx++) {\n      int rider1 = redShirtSpeeds[idx];\n      int rider2 = blueShirtSpeeds[blueShirtSpeeds.Length - idx - 1];\n      totalSpeed += Math.Max(rider1, rider2);\n    }\n\n    return totalSpeed;\n  }\n\n  public void reverseArrayInPlace(int[] array) {\n    int start = 0;\n    int end = array.Length - 1;\n    while (start < end) {\n      int temp = array[start];\n      array[start] = array[end];\n      array[end] = temp;\n      start += 1;\n      end -= 1;\n    }\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] redShirtSpeeds = new int[] { 5, 5, 3, 9, 2 };\n    int[] blueShirtSpeeds = new int[] { 3, 6, 7, 2, 1 };\n    bool fastest = true;\n    int expected = 32;\n    var actual =\n      new Program().TandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    int[] redShirtSpeeds = new int[] { 5, 5, 3, 9, 2 };\n    int[] blueShirtSpeeds = new int[] { 3, 6, 7, 2, 1 };\n    bool fastest = true;\n    int expected = 32;\n    var actual =\n      new Program().TandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc TandemBicycle(redShirtSpeeds []int, blueShirtSpeeds []int, fastest bool) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"sort\"\n)\n\n// O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\nfunc TandemBicycle(redShirtSpeeds []int, blueShirtSpeeds []int, fastest bool) int {\n\tsort.Ints(redShirtSpeeds)\n\tsort.Ints(blueShirtSpeeds)\n\n\tif !fastest {\n\t\treverseArrayInPlace(redShirtSpeeds)\n\t}\n\n\ttotalSpeed := 0\n\tfor idx := range redShirtSpeeds {\n\t\trider1 := redShirtSpeeds[idx]\n\t\trider2 := blueShirtSpeeds[len(blueShirtSpeeds)-idx-1]\n\t\ttotalSpeed += max(rider1, rider2)\n\t}\n\treturn totalSpeed\n}\n\nfunc reverseArrayInPlace(array []int) {\n\tvar start = 0\n\tvar end = len(array) - 1\n\tfor start < end {\n\t\ttemp := array[start]\n\t\tarray[start] = array[end]\n\t\tarray[end] = temp\n\t\tstart += 1\n\t\tend -= 1\n\t}\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tredShirtSpeeds := []int{5, 5, 3, 9, 2}\n\tblueShirtSpeeds := []int{3, 6, 7, 2, 1}\n\tfastest := true\n\texpected := 32\n\tactual := TandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tredShirtSpeeds := []int{5, 5, 3, 9, 2}\n\tblueShirtSpeeds := []int{3, 6, 7, 2, 1}\n\tfastest := true\n\texpected := 32\n\tactual := TandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public int tandemBicycle(\n    int[] redShirtSpeeds, int[] blueShirtSpeeds, boolean fastest\n  ) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\n  public int tandemBicycle(\n    int[] redShirtSpeeds, int[] blueShirtSpeeds, boolean fastest\n  ) {\n    Arrays.sort(redShirtSpeeds);\n    Arrays.sort(blueShirtSpeeds);\n\n    if (!fastest) {\n      reverseArrayInPlace(redShirtSpeeds);\n    }\n\n    int totalSpeed = 0;\n    for (int idx = 0; idx < redShirtSpeeds.length; idx++) {\n      int rider1 = redShirtSpeeds[idx];\n      int rider2 = blueShirtSpeeds[blueShirtSpeeds.length - idx - 1];\n      totalSpeed += Math.max(rider1, rider2);\n    }\n\n    return totalSpeed;\n  }\n\n  public void reverseArrayInPlace(int[] array) {\n    int start = 0;\n    int end = array.length - 1;\n    while (start < end) {\n      int temp = array[start];\n      array[start] = array[end];\n      array[end] = temp;\n      start += 1;\n      end -= 1;\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] redShirtSpeeds = new int[] {5, 5, 3, 9, 2};\n    int[] blueShirtSpeeds = new int[] {3, 6, 7, 2, 1};\n    boolean fastest = true;\n    int expected = 32;\n    var actual =\n      new Program().tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] redShirtSpeeds = new int[] {5, 5, 3, 9, 2};\n    int[] blueShirtSpeeds = new int[] {3, 6, 7, 2, 1};\n    boolean fastest = true;\n    int expected = 32;\n    var actual =\n      new Program().tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest) {\n  // Write your code here.\n  return 0;\n}\n\n// Do not edit the line below.\nexports.tandemBicycle = tandemBicycle;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\nfunction tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest) {\n  redShirtSpeeds.sort((a, b) => a - b);\n  blueShirtSpeeds.sort((a, b) => a - b);\n\n  if (!fastest) reverseArrayInPlace(redShirtSpeeds);\n\n  let totalSpeed = 0;\n  for (let idx = 0; idx < redShirtSpeeds.length; idx++) {\n    const rider1 = redShirtSpeeds[idx];\n    const rider2 = blueShirtSpeeds[blueShirtSpeeds.length - idx - 1];\n    totalSpeed += Math.max(rider1, rider2);\n  }\n\n  return totalSpeed;\n}\n\nfunction reverseArrayInPlace(array) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start < end) {\n    const temp = array[start];\n    array[start] = array[end];\n    array[end] = temp;\n    start++;\n    end--;\n  }\n}\n\n// Do not edit the line below.\nexports.tandemBicycle = tandemBicycle;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const redShirtSpeeds = [5, 5, 3, 9, 2];\n  const blueShirtSpeeds = [3, 6, 7, 2, 1];\n  const fastest = true;\n  const expected = 32;\n  const actual = program.tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const redShirtSpeeds = [5, 5, 3, 9, 2];\n  const blueShirtSpeeds = [3, 6, 7, 2, 1];\n  const fastest = true;\n  const expected = 32;\n  const actual = program.tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun tandemBicycle(redShirtSpeeds: MutableList<Int>, blueShirtSpeeds: MutableList<Int>, fastest: Boolean): Int {\n    // Write your code here.\n    return -1\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.max\n\n// O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\nfun tandemBicycle(\n    redShirtSpeeds: MutableList<Int>,\n    blueShirtSpeeds: MutableList<Int>,\n    fastest: Boolean,\n): Int {\n    redShirtSpeeds.sort()\n    blueShirtSpeeds.sort()\n\n    if (!fastest) reverseArrayInPlace(redShirtSpeeds)\n\n    var totalSpeed = 0\n    for (idx in 0 until redShirtSpeeds.size) {\n        val rider1 = redShirtSpeeds[idx]\n        val rider2 = blueShirtSpeeds[blueShirtSpeeds.size - idx - 1]\n        totalSpeed += max(rider1, rider2)\n    }\n\n    return totalSpeed\n}\n\nfun reverseArrayInPlace(array: MutableList<Int>) {\n    var start = 0\n    var end = array.size - 1\n    while (start < end) {\n        val temp = array[start]\n        array[start] = array[end]\n        array[end] = temp\n        start += 1\n        end -= 1\n    }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.tandemBicycle\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val redShirtSpeeds = mutableListOf(5, 5, 3, 9, 2)\n        val blueShirtSpeeds = mutableListOf(3, 6, 7, 2, 1)\n        val fastest = true\n        val expected = 32\n        val output = tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.tandemBicycle\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val redShirtSpeeds = mutableListOf(5, 5, 3, 9, 2)\n        val blueShirtSpeeds = mutableListOf(3, 6, 7, 2, 1)\n        val fastest = true\n        val expected = 32\n        val output = tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest):\n    # Write your code here.\n    return 0\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\ndef tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest):\n    redShirtSpeeds.sort()\n    blueShirtSpeeds.sort()\n\n    if not fastest:\n        reverseArrayInPlace(redShirtSpeeds)\n\n    totalSpeed = 0\n    for idx in range(len(redShirtSpeeds)):\n        rider1 = redShirtSpeeds[idx]\n        rider2 = blueShirtSpeeds[len(blueShirtSpeeds) - idx - 1]\n        totalSpeed += max(rider1, rider2)\n\n    return totalSpeed\n\n\ndef reverseArrayInPlace(array):\n    start = 0\n    end = len(array) - 1\n    while start < end:\n        array[start], array[end] = array[end], array[start]\n        start += 1\n        end -= 1\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        redShirtSpeeds = [5, 5, 3, 9, 2]\n        blueShirtSpeeds = [3, 6, 7, 2, 1]\n        fastest = True\n        expected = 32\n        actual = program.tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        redShirtSpeeds = [5, 5, 3, 9, 2]\n        blueShirtSpeeds = [3, 6, 7, 2, 1]\n        fastest = True\n        expected = 32\n        actual = program.tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "class Program\n  def tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n    # Write your code here.\n    return -1\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest)\n    # Write your code here.\n    return -1\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.tandemBicycle\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.tandemBicycle\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func tandemBicycle(_ redShirtSpeeds: inout [Int], _ blueShirtSpeeds: inout [Int], _ fastest: Bool) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\n  func tandemBicycle(_ redShirtSpeeds: inout [Int], _ blueShirtSpeeds: inout [Int], _ fastest: Bool) -> Int {\n    redShirtSpeeds.sort()\n    blueShirtSpeeds.sort()\n\n    if !fastest {\n      reverseArrayInPlace(&redShirtSpeeds)\n    }\n\n    var totalSpeed = 0\n    for idx in 0 ..< redShirtSpeeds.count {\n      let rider1 = redShirtSpeeds[idx]\n      let rider2 = blueShirtSpeeds[blueShirtSpeeds.count - idx - 1]\n      totalSpeed += max(rider1, rider2)\n    }\n    return totalSpeed\n  }\n\n  func reverseArrayInPlace(_ array: inout [Int]) {\n    var start = 0\n    var end = array.count - 1\n    while start < end {\n      let temp = array[start]\n      array[start] = array[end]\n      array[end] = temp\n      start += 1\n      end -= 1\n    }\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var redShirtSpeeds = [5, 5, 3, 9, 2]\n      var blueShirtSpeeds = [3, 6, 7, 2, 1]\n      var fastest = true\n      var expected = 32\n      var actual = Program().tandemBicycle(&redShirtSpeeds, &blueShirtSpeeds, fastest)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var redShirtSpeeds = [5, 5, 3, 9, 2]\n      var blueShirtSpeeds = [3, 6, 7, 2, 1]\n      var fastest = true\n      var expected = 32\n      var actual = Program().tandemBicycle(&redShirtSpeeds, &blueShirtSpeeds, fastest)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function tandemBicycle(\n  redShirtSpeeds: number[],\n  blueShirtSpeeds: number[],\n  fastest: boolean,\n) {\n  // Write your code here.\n  return -1;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(nlog(n)) time | O(1) space - where n is the number of tandem bicycles\nexport function tandemBicycle(\n  redShirtSpeeds: number[],\n  blueShirtSpeeds: number[],\n  fastest: boolean,\n) {\n  redShirtSpeeds.sort((a, b) => a - b);\n  blueShirtSpeeds.sort((a, b) => a - b);\n\n  if (!fastest) reverseArrayInPlace(redShirtSpeeds);\n\n  let totalSpeed = 0;\n  for (let idx = 0; idx < redShirtSpeeds.length; idx++) {\n    const rider1 = redShirtSpeeds[idx];\n    const rider2 = blueShirtSpeeds[blueShirtSpeeds.length - idx - 1];\n    totalSpeed += Math.max(rider1, rider2);\n  }\n\n  return totalSpeed;\n}\n\nfunction reverseArrayInPlace(array: number[]) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start < end) {\n    const temp = array[start];\n    array[start] = array[end];\n    array[end] = temp;\n    start++;\n    end--;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const redShirtSpeeds = [5, 5, 3, 9, 2];\n  const blueShirtSpeeds = [3, 6, 7, 2, 1];\n  const fastest = true;\n  const expected = 32;\n  const actual = program.tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const redShirtSpeeds = [5, 5, 3, 9, 2];\n  const blueShirtSpeeds = [3, 6, 7, 2, 1];\n  const fastest = true;\n  const expected = 32;\n  const actual = program.tandemBicycle(redShirtSpeeds, blueShirtSpeeds, fastest);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "redShirtSpeeds",
      "example": [
        5,
        5,
        3,
        9,
        2
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "blueShirtSpeeds",
      "example": [
        3,
        6,
        7,
        2,
        1
      ],
      "schema": {
        "items": {
          "minimum": 1,
          "type": "integer"
        },
        "type": "array"
      }
    },
    {
      "name": "fastest",
      "example": true,
      "schema": {
        "type": "boolean"
      }
    }
  ],
  "tests": [
    {
      "blueShirtSpeeds": [
        3,
        6,
        7,
        2,
        1
      ],
      "fastest": true,
      "redShirtSpeeds": [
        5,
        5,
        3,
        9,
        2
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        6,
        7,
        2,
        1
      ],
      "fastest": false,
      "redShirtSpeeds": [
        5,
        5,
        3,
        9,
        2
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2,
        5,
        6,
        34,
        256,
        123,
        32
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3,
        1,
        54,
        21,
        231,
        32,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2,
        5,
        6,
        34,
        256,
        123,
        32
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3,
        1,
        54,
        21,
        231,
        32,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        5
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        5
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        5,
        7
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        9,
        11
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        5,
        7
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        9,
        11
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        4,
        4,
        1,
        1,
        8,
        9
      ],
      "fastest": true,
      "redShirtSpeeds": [
        9,
        8,
        2,
        2,
        3,
        5,
        6
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        4,
        4,
        1,
        1,
        8,
        9
      ],
      "fastest": false,
      "redShirtSpeeds": [
        9,
        8,
        2,
        2,
        3,
        5,
        6
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        2,
        3,
        4,
        5
      ],
      "fastest": false,
      "redShirtSpeeds": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        2,
        3,
        4,
        5
      ],
      "fastest": true,
      "redShirtSpeeds": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "blueShirtSpeeds": [],
      "fastest": true,
      "redShirtSpeeds": []
    }
  ],
  "jsonTests": [
    {
      "blueShirtSpeeds": [
        3,
        6,
        7,
        2,
        1
      ],
      "fastest": true,
      "redShirtSpeeds": [
        5,
        5,
        3,
        9,
        2
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        6,
        7,
        2,
        1
      ],
      "fastest": false,
      "redShirtSpeeds": [
        5,
        5,
        3,
        9,
        2
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2,
        5,
        6,
        34,
        256,
        123,
        32
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3,
        1,
        54,
        21,
        231,
        32,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        3,
        4,
        6,
        1,
        2,
        5,
        6,
        34,
        256,
        123,
        32
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        2,
        1,
        9,
        12,
        3,
        1,
        54,
        21,
        231,
        32,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        5
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        5
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        5,
        7
      ],
      "fastest": true,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        9,
        11
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        5,
        7
      ],
      "fastest": false,
      "redShirtSpeeds": [
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        9,
        11
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        4,
        4,
        1,
        1,
        8,
        9
      ],
      "fastest": true,
      "redShirtSpeeds": [
        9,
        8,
        2,
        2,
        3,
        5,
        6
      ]
    },
    {
      "blueShirtSpeeds": [
        3,
        4,
        4,
        1,
        1,
        8,
        9
      ],
      "fastest": false,
      "redShirtSpeeds": [
        9,
        8,
        2,
        2,
        3,
        5,
        6
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        2,
        3,
        4,
        5
      ],
      "fastest": false,
      "redShirtSpeeds": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "blueShirtSpeeds": [
        1,
        2,
        3,
        4,
        5
      ],
      "fastest": true,
      "redShirtSpeeds": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "blueShirtSpeeds": [],
      "fastest": true,
      "redShirtSpeeds": []
    }
  ],
  "changelog": []
}