{
  "uid": "valid-ip-addresses",
  "testStrategy": "JSON",
  "name": "Valid IP Addresses",
  "version": 0,
  "releaseDate": "2020-12-23T00:00:00Z",
  "category": "Strings",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": [
      "algoexpert"
    ],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 15535,
    "failureCount": 4640
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "488439092",
    "duration": 0,
    "annotations": [],
    "instructor": "Tim Ruscica",
    "overviewTime": 0,
    "codeWalkthroughTime": 1159
  },
  "prompt": "<div class=\"html\">\n<p>\n  You're given a string of length 12 or smaller, containing only digits. Write a\n  function that returns all the possible IP addresses that can be created by\n  inserting three <span>.</span>s in the string.\n</p>\n<p>\n  An IP address is a sequence of four positive integers that are separated by\n  <span>.</span>s, where each individual integer is within the range\n  <span>0 - 255</span>, inclusive.\n</p>\n<p>\n  An IP address isn't valid if any of the individual integers contains leading\n  <span>0</span>s. For example, <span>\"192.168.0.1\"</span> is a valid IP\n  address, but <span>\"192.168.00.1\"</span> and\n  <span>\"192.168.0.01\"</span> aren't, because they contain <span>\"00\"</span> and\n  <span>01</span>, respectively. Another example of a valid IP address is\n  <span>\"99.1.1.10\"</span>; conversely, <span>\"991.1.1.0\"</span> isn't valid,\n  because <span>\"991\"</span> is greater than 255.\n</p>\n<p>\n  Your function should return the IP addresses in string format and in no\n  particular order. If no valid IP addresses can be created from the string,\n  your function should return an empty list.\n</p>\n<p>\n  Note: check out our Systems Design Fundamentals on SystemsExpert to learn more\n  about IP addresses!\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"1921680\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[\n  \"1.9.216.80\",\n  \"1.92.16.80\",\n  \"1.92.168.0\",\n  \"19.2.16.80\",\n  \"19.2.168.0\",\n  \"19.21.6.80\",\n  \"19.21.68.0\",\n  \"19.216.8.0\",\n  \"192.1.6.80\",\n  \"192.1.68.0\",\n  \"192.16.8.0\"\n]\n<span class=\"CodeEditor-promptComment\">// The IP addresses could be ordered differently.</span>\n</pre>\n</div>",
  "hints": [
    "<p>\nHow can you split this problem into subproblems to make it easier?\n</p>\n",
    "\n<p>\nEach IP address is comprised of four parts; try finding one valid part at a time and then combining sets of four valid parts to create one valid IP address.\n</p>\n",
    "\n<p>\nGo through all possible combinations of valid IP-address parts. You'll do this by generating a valid first part, then generating all valid second parts given the first part, then finally all valid third and fourth parts given first and second parts. If you find a set of four valid parts, then simply combine them together and add that IP address to some final array. You can start by creating all the possible first parts of an IP address; these will be substrings of the main string that start at the first character and that have lengths 1, 2 and 3. Then you can repeat this process for the second part, where the substrings in this part will start where the first part ended. The same thing applies for the third and fourth parts. After going through all possible parts and storing valid IP addresses, you'll have found all of the IP addresses that can be formed from the input string.\n</p>"
  ],
  "spaceTime": "O(1) time | O(1) space",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "#include <vector>\nusing namespace std;\n\nvector<string> validIPAddresses(string string) {\n  // Write your code here.\n  return {};\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <algorithm>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nbool isValidPart(string str);\nstring join(vector<string> strings);\n\n// O(1) time | O(1) space\nvector<string> validIPAddresses(string str) {\n  vector<string> ipAddressesFound;\n\n  for (int i = 1; i < min((int)str.length(), 4); i++) {\n    vector<string> currentIPAddressParts = {\"\", \"\", \"\", \"\"};\n\n    currentIPAddressParts[0] = str.substr(0, i);\n    if (!isValidPart(currentIPAddressParts[0])) {\n      continue;\n    }\n\n    for (int j = i + 1; j < i + min((int)str.length() - i, 4); j++) {\n      currentIPAddressParts[1] = str.substr(i, j - i);\n      if (!isValidPart(currentIPAddressParts[1])) {\n        continue;\n      }\n\n      for (int k = j + 1; k < j + min((int)str.length() - j, 4); k++) {\n        currentIPAddressParts[2] = str.substr(j, k - j);\n        currentIPAddressParts[3] = str.substr(k);\n\n        if (isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3])) {\n          ipAddressesFound.push_back(join(currentIPAddressParts));\n        }\n      }\n    }\n  }\n\n  return ipAddressesFound;\n}\n\nbool isValidPart(string str) {\n  int stringAsInt = stoi(str);\n\n  if (stringAsInt > 255) {\n    return false;\n  }\n\n  return str.length() ==\n         to_string(stringAsInt).length();  // check for leading 0\n}\n\nstring join(vector<string> strings) {\n  string s;\n  for (int l = 0; l < strings.size(); l++) {\n    s += strings[l];\n    if (l < strings.size() - 1) {\n      s += \".\";\n    }\n  }\n  return s;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = \"1921680\";\n      vector<string> expected = {\n        \"1.9.216.80\",\n        \"1.92.16.80\",\n        \"1.92.168.0\",\n        \"19.2.16.80\",\n        \"19.2.168.0\",\n        \"19.21.6.80\",\n        \"19.21.68.0\",\n        \"19.216.8.0\",\n        \"192.1.6.80\",\n        \"192.1.68.0\",\n        \"192.16.8.0\"};\n      vector<string> actual = validIPAddresses(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = \"1921680\";\n      vector<string> expected = {\n        \"1.9.216.80\",\n        \"1.92.16.80\",\n        \"1.92.168.0\",\n        \"19.2.16.80\",\n        \"19.2.168.0\",\n        \"19.21.6.80\",\n        \"19.21.68.0\",\n        \"19.216.8.0\",\n        \"192.1.6.80\",\n        \"192.1.68.0\",\n        \"192.16.8.0\"};\n      vector<string> actual = validIPAddresses(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System.Collections.Generic;\nusing System;\n\npublic class Program {\n  public List<string> ValidIPAddresses(string str) {\n    // Write your code here.\n    return new List<string>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System.Text;\nusing System;\n\npublic class Program {\n  // O(1) time | O(1) space\n  public List<string> ValidIPAddresses(string str) {\n    List<string> ipAddressesFound = new List<string>();\n\n    for (int i = 1; i < Math.Min((int)str.Length, 4); i++) {\n      string[] currentIPAddressParts = new string[] { \"\", \"\", \"\", \"\" };\n\n      currentIPAddressParts[0] = str.Substring(0, i - 0);\n      if (!isValidPart(currentIPAddressParts[0])) {\n        continue;\n      }\n\n      for (int j = i + 1; j < i + Math.Min((int)str.Length - i, 4); j++) {\n        currentIPAddressParts[1] = str.Substring(i, j - i);\n        if (!isValidPart(currentIPAddressParts[1])) {\n          continue;\n        }\n\n        for (int k = j + 1; k < j + Math.Min((int)str.Length - j, 4); k++) {\n          currentIPAddressParts[2] = str.Substring(j, k - j);\n          currentIPAddressParts[3] = str.Substring(k);\n\n          if (isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3])) {\n            ipAddressesFound.Add(join(currentIPAddressParts));\n          }\n        }\n      }\n    }\n\n    return ipAddressesFound;\n  }\n\n  public bool isValidPart(string str) {\n    int stringAsInt = Int32.Parse(str);\n    if (stringAsInt > 255) {\n      return false;\n    }\n\n    return str.Length == stringAsInt.ToString().Length;  // check for leading 0\n  }\n\n  public string join(string[] strings) {\n    StringBuilder sb = new StringBuilder();\n    for (int l = 0; l < strings.Length; l++) {\n      sb.Append(strings[l]);\n      if (l < strings.Length - 1) {\n        sb.Append(\".\");\n      }\n    }\n    return sb.ToString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"1921680\";\n    List<string> expected = new List<string>();\n    expected.Add(\"1.9.216.80\");\n    expected.Add(\"1.92.16.80\");\n    expected.Add(\"1.92.168.0\");\n    expected.Add(\"19.2.16.80\");\n    expected.Add(\"19.2.168.0\");\n    expected.Add(\"19.21.6.80\");\n    expected.Add(\"19.21.68.0\");\n    expected.Add(\"19.216.8.0\");\n    expected.Add(\"192.1.6.80\");\n    expected.Add(\"192.1.68.0\");\n    expected.Add(\"192.16.8.0\");\n    var actual = new Program().ValidIPAddresses(input);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n",
      "unitTests": "using System.Collections.Generic;\nusing System.Linq;\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    string input = \"1921680\";\n    List<string> expected = new List<string>();\n    expected.Add(\"1.9.216.80\");\n    expected.Add(\"1.92.16.80\");\n    expected.Add(\"1.92.168.0\");\n    expected.Add(\"19.2.16.80\");\n    expected.Add(\"19.2.168.0\");\n    expected.Add(\"19.21.6.80\");\n    expected.Add(\"19.21.68.0\");\n    expected.Add(\"19.216.8.0\");\n    expected.Add(\"192.1.6.80\");\n    expected.Add(\"192.1.68.0\");\n    expected.Add(\"192.16.8.0\");\n    var actual = new Program().ValidIPAddresses(input);\n    Utils.AssertTrue(Enumerable.SequenceEqual(expected, actual));\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ValidIPAddresses(str string) []string {\n\t// Write your code here.\n\treturn []string{}\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n)\n\n// O(1) time | O(1) space\nfunc ValidIPAddresses(str string) []string {\n\tipAddressesFound := make([]string, 0)\n\n\tfor i := 1; i < min(len(str), 4); i++ {\n\t\tcurrentIPAddressParts := []string{\"\", \"\", \"\", \"\"}\n\n\t\tcurrentIPAddressParts[0] = str[:i]\n\t\tif !isValidPart(currentIPAddressParts[0]) {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor j := i + 1; j < i+min(len(str)-i, 4); j++ {\n\t\t\tcurrentIPAddressParts[1] = str[i:j]\n\t\t\tif !isValidPart(currentIPAddressParts[1]) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor k := j + 1; k < j+min(len(str)-j, 4); k++ {\n\t\t\t\tcurrentIPAddressParts[2] = str[j:k]\n\t\t\t\tcurrentIPAddressParts[3] = str[k:]\n\n\t\t\t\tif isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3]) {\n\t\t\t\t\tipAddressesFound = append(ipAddressesFound, strings.Join(currentIPAddressParts, \".\"))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ipAddressesFound\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc isValidPart(str string) bool {\n\ti, err := strconv.Atoi(str)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif i > 255 {\n\t\treturn false\n\t}\n\treturn len(str) == len(strconv.Itoa(i))\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"1921680\"\n\texpected := []string{\n\t\t\"1.9.216.80\",\n\t\t\"1.92.16.80\",\n\t\t\"1.92.168.0\",\n\t\t\"19.2.16.80\",\n\t\t\"19.2.168.0\",\n\t\t\"19.21.6.80\",\n\t\t\"19.21.68.0\",\n\t\t\"19.216.8.0\",\n\t\t\"192.1.6.80\",\n\t\t\"192.1.68.0\",\n\t\t\"192.16.8.0\",\n\t}\n\tactual := ValidIPAddresses(input)\n\trequire.ElementsMatch(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := \"1921680\"\n\texpected := []string{\n\t\t\"1.9.216.80\",\n\t\t\"1.92.16.80\",\n\t\t\"1.92.168.0\",\n\t\t\"19.2.16.80\",\n\t\t\"19.2.168.0\",\n\t\t\"19.21.6.80\",\n\t\t\"19.21.68.0\",\n\t\t\"19.216.8.0\",\n\t\t\"192.1.6.80\",\n\t\t\"192.1.68.0\",\n\t\t\"192.16.8.0\",\n\t}\n\tactual := ValidIPAddresses(input)\n\trequire.ElementsMatch(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public ArrayList<String> validIPAddresses(String string) {\n    // Write your code here.\n    return new ArrayList<String>();\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(1) time | O(1) space\n  public ArrayList<String> validIPAddresses(String string) {\n    ArrayList<String> ipAddressesFound = new ArrayList<String>();\n\n    for (int i = 1; i < Math.min((int) string.length(), 4); i++) {\n      String[] currentIPAddressParts = new String[] {\"\", \"\", \"\", \"\"};\n\n      currentIPAddressParts[0] = string.substring(0, i);\n      if (!isValidPart(currentIPAddressParts[0])) {\n        continue;\n      }\n\n      for (int j = i + 1; j < i + Math.min((int) string.length() - i, 4); j++) {\n        currentIPAddressParts[1] = string.substring(i, j);\n        if (!isValidPart(currentIPAddressParts[1])) {\n          continue;\n        }\n\n        for (int k = j + 1; k < j + Math.min((int) string.length() - j, 4);\n             k++) {\n          currentIPAddressParts[2] = string.substring(j, k);\n          currentIPAddressParts[3] = string.substring(k);\n\n          if (isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3])) {\n            ipAddressesFound.add(join(currentIPAddressParts));\n          }\n        }\n      }\n    }\n\n    return ipAddressesFound;\n  }\n\n  public boolean isValidPart(String string) {\n    int stringAsInt = Integer.parseInt(string);\n    if (stringAsInt > 255) {\n      return false;\n    }\n\n    return string.length()\n      == Integer.toString(stringAsInt).length(); // check for leading 0\n  }\n\n  public String join(String[] strings) {\n    StringBuilder sb = new StringBuilder();\n    for (int l = 0; l < strings.length; l++) {\n      sb.append(strings[l]);\n      if (l < strings.length - 1) {\n        sb.append(\".\");\n      }\n    }\n    return sb.toString();\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"1921680\";\n    ArrayList<String> expected = new ArrayList<String>();\n    expected.add(\"1.9.216.80\");\n    expected.add(\"1.92.16.80\");\n    expected.add(\"1.92.168.0\");\n    expected.add(\"19.2.16.80\");\n    expected.add(\"19.2.168.0\");\n    expected.add(\"19.21.6.80\");\n    expected.add(\"19.21.68.0\");\n    expected.add(\"19.216.8.0\");\n    expected.add(\"192.1.6.80\");\n    expected.add(\"192.1.68.0\");\n    expected.add(\"192.16.8.0\");\n    var actual = new Program().validIPAddresses(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"1921680\";\n    ArrayList<String> expected = new ArrayList<String>();\n    expected.add(\"1.9.216.80\");\n    expected.add(\"1.92.16.80\");\n    expected.add(\"1.92.168.0\");\n    expected.add(\"19.2.16.80\");\n    expected.add(\"19.2.168.0\");\n    expected.add(\"19.21.6.80\");\n    expected.add(\"19.21.68.0\");\n    expected.add(\"19.216.8.0\");\n    expected.add(\"192.1.6.80\");\n    expected.add(\"192.1.68.0\");\n    expected.add(\"192.16.8.0\");\n    var actual = new Program().validIPAddresses(input);\n    Utils.assertTrue(expected.equals(actual));\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function validIPAddresses(string) {\n  // Write your code here.\n  return [];\n}\n\n// Do not edit the line below.\nexports.validIPAddresses = validIPAddresses;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(1) time | O(1) space\nfunction validIPAddresses(string) {\n  const ipAddressesFound = [];\n\n  for (let i = 0; i < Math.min(string.length, 4); i++) {\n    const currentIPAddressParts = ['', '', '', ''];\n\n    currentIPAddressParts[0] = string.slice(0, i);\n    if (!isValidPart(currentIPAddressParts[0])) continue;\n\n    for (let j = i + 1; j < i + Math.min(string.length - i, 4); j++) {\n      currentIPAddressParts[1] = string.slice(i, j);\n      if (!isValidPart(currentIPAddressParts[1])) continue;\n\n      for (let k = j + 1; k < j + Math.min(string.length - j, 4); k++) {\n        currentIPAddressParts[2] = string.slice(j, k);\n        currentIPAddressParts[3] = string.slice(k);\n\n        if (isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3])) {\n          ipAddressesFound.push(currentIPAddressParts.join('.'));\n        }\n      }\n    }\n  }\n\n  return ipAddressesFound;\n}\n\nfunction isValidPart(string) {\n  const stringAsInt = parseInt(string);\n  if (stringAsInt > 255) return false;\n\n  return string.length === stringAsInt.toString().length;\n}\n\n// Do not edit the line below.\nexports.validIPAddresses = validIPAddresses;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = '1921680';\n  const expected = [\n    '1.9.216.80',\n    '1.92.16.80',\n    '1.92.168.0',\n    '19.2.16.80',\n    '19.2.168.0',\n    '19.21.6.80',\n    '19.21.68.0',\n    '19.216.8.0',\n    '192.1.6.80',\n    '192.1.68.0',\n    '192.16.8.0',\n  ];\n  const actual = program.validIPAddresses(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = '1921680';\n  const expected = [\n    '1.9.216.80',\n    '1.92.16.80',\n    '1.92.168.0',\n    '19.2.16.80',\n    '19.2.168.0',\n    '19.21.6.80',\n    '19.21.68.0',\n    '19.216.8.0',\n    '192.1.6.80',\n    '192.1.68.0',\n    '192.16.8.0',\n  ];\n  const actual = program.validIPAddresses(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun validIPAddresses(string: String): List<String> {\n    // Write your code here.\n    return listOf()\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\nimport kotlin.math.min\n\n// O(1) time | O(1) space\nfun validIPAddresses(string: String): List<String> {\n    val ipAddressesFound = mutableListOf<String>()\n\n    for (i in 1 until min(string.length, 4)) {\n        val currentIPAddressParts = mutableListOf(\"\", \"\", \"\", \"\")\n\n        currentIPAddressParts[0] = string.substring(0, i)\n        if (!isValidPart(currentIPAddressParts[0])) continue\n\n        for (j in i + 1 until i + min(string.length - i, 4)) {\n            currentIPAddressParts[1] = string.substring(i, j)\n            if (!isValidPart(currentIPAddressParts[1])) continue\n\n            for (k in j + 1 until j + min(string.length - j, 4)) {\n                currentIPAddressParts[2] = string.substring(j, k)\n                currentIPAddressParts[3] = string.substring(k)\n\n                if (isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3])) {\n                    ipAddressesFound.add(currentIPAddressParts.joinToString(\".\"))\n                }\n            }\n        }\n    }\n\n    return ipAddressesFound\n}\n\nfun isValidPart(string: String): Boolean {\n    val stringAsInt = string.toInt()\n    if (stringAsInt > 255) return false\n\n    return string.length == stringAsInt.toString().length\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.validIPAddresses\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"1921680\"\n        val expected = listOf(\n            \"1.9.216.80\",\n            \"1.92.16.80\",\n            \"1.92.168.0\",\n            \"19.2.16.80\",\n            \"19.2.168.0\",\n            \"19.21.6.80\",\n            \"19.21.68.0\",\n            \"19.216.8.0\",\n            \"192.1.6.80\",\n            \"192.1.68.0\",\n            \"192.16.8.0\",\n        )\n        val output = validIPAddresses(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.validIPAddresses\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = \"1921680\"\n        val expected = listOf(\n            \"1.9.216.80\",\n            \"1.92.16.80\",\n            \"1.92.168.0\",\n            \"19.2.16.80\",\n            \"19.2.168.0\",\n            \"19.21.6.80\",\n            \"19.21.68.0\",\n            \"19.216.8.0\",\n            \"192.1.6.80\",\n            \"192.1.68.0\",\n            \"192.16.8.0\",\n        )\n        val output = validIPAddresses(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def validIPAddresses(string):\n    # Write your code here.\n    return []\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(1) time | O(1) space\ndef validIPAddresses(string):\n    ipAddressesFound = []\n\n    for i in range(1, min(len(string), 4)):\n        currentIPAddressParts = [\"\", \"\", \"\", \"\"]\n\n        currentIPAddressParts[0] = string[:i]\n        if not isValidPart(currentIPAddressParts[0]):\n            continue\n\n        for j in range(i + 1, i + min(len(string) - i, 4)):\n            currentIPAddressParts[1] = string[i:j]\n            if not isValidPart(currentIPAddressParts[1]):\n                continue\n\n            for k in range(j + 1, j + min(len(string) - j, 4)):\n                currentIPAddressParts[2] = string[j:k]\n                currentIPAddressParts[3] = string[k:]\n\n                if isValidPart(currentIPAddressParts[2]) and isValidPart(currentIPAddressParts[3]):\n                    ipAddressesFound.append(\".\".join(currentIPAddressParts))\n\n    return ipAddressesFound\n\n\ndef isValidPart(string):\n    stringAsInt = int(string)\n    if stringAsInt > 255:\n        return False\n\n    return len(string) == len(str(stringAsInt))  # check for leading 0\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = \"1921680\"\n        expected = [\n            \"1.9.216.80\",\n            \"1.92.16.80\",\n            \"1.92.168.0\",\n            \"19.2.16.80\",\n            \"19.2.168.0\",\n            \"19.21.6.80\",\n            \"19.21.68.0\",\n            \"19.216.8.0\",\n            \"192.1.6.80\",\n            \"192.1.68.0\",\n            \"192.16.8.0\",\n        ]\n        actual = program.validIPAddresses(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = \"1921680\"\n        expected = [\n            \"1.9.216.80\",\n            \"1.92.16.80\",\n            \"1.92.168.0\",\n            \"19.2.16.80\",\n            \"19.2.168.0\",\n            \"19.21.6.80\",\n            \"19.21.68.0\",\n            \"19.216.8.0\",\n            \"192.1.6.80\",\n            \"192.1.68.0\",\n            \"192.16.8.0\",\n        ]\n        actual = program.validIPAddresses(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": true,
      "startingCode": "class Program\n  def validIPAddresses(string)\n    # Write your code here.\n    return []\n  end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program\n  def validIPAddresses(string)\n    # Write your code here.\n    return []\n  end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.validIPAddresses\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n",
      "unitTests": "require \"./program.rb\"\n\nclass TestSuite\n  include Assertions\n\n  def test_1\n    # inputs = ...\n    # output = Program.new.validIPAddresses\n    # expected = ...\n    # assertEqual(expected, output)\n  end\nend\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func validIPAddresses(_ string: String) -> [String] {\n    // Write your code here.\n    return [String]()\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(1) time | O(n) space\n  func validIPAddresses(_ string: String) -> [String] {\n    let indexedString = Array(string)\n    var ipAddressesFound = [String]()\n\n    for i in 1 ..< min(string.count, 4) {\n      var currentIPAddressParts: [[Character]] = [[], [], [], []]\n\n      currentIPAddressParts[0] = Array(indexedString[..<i])\n      if !isValidPart(currentIPAddressParts[0]) {\n        continue\n      }\n\n      for j in i + 1 ..< i + min(string.count - i, 4) {\n        currentIPAddressParts[1] = Array(indexedString[i ..< j])\n        if !isValidPart(currentIPAddressParts[1]) {\n          continue\n        }\n\n        for k in j + 1 ..< j + min(string.count - j, 4) {\n          currentIPAddressParts[2] = Array(indexedString[j ..< k])\n          currentIPAddressParts[3] = Array(indexedString[k...])\n\n          if isValidPart(currentIPAddressParts[2]), isValidPart(currentIPAddressParts[3]) {\n            ipAddressesFound.append(joinIp(currentIPAddressParts))\n          }\n        }\n      }\n    }\n    return ipAddressesFound\n  }\n\n  func isValidPart(_ string: [Character]) -> Bool {\n    let i = Int(String(string)) ?? 256\n    if i > 255 {\n      return false\n    }\n    return string.count == String(i).count\n  }\n\n  func joinIp(_ ip: [[Character]]) -> String {\n    var segments = [String]()\n    for segment in ip {\n      segments.append(String(segment))\n    }\n    return segments.joined(separator: \".\")\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = \"1921680\"\n      let expected = [\n        \"1.9.216.80\",\n        \"1.92.16.80\",\n        \"1.92.168.0\",\n        \"19.2.16.80\",\n        \"19.2.168.0\",\n        \"19.21.6.80\",\n        \"19.21.68.0\",\n        \"19.216.8.0\",\n        \"192.1.6.80\",\n        \"192.1.68.0\",\n        \"192.16.8.0\",\n      ]\n      var actual = Program().validIPAddresses(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let input = \"1921680\"\n      let expected = [\n        \"1.9.216.80\",\n        \"1.92.16.80\",\n        \"1.92.168.0\",\n        \"19.2.16.80\",\n        \"19.2.168.0\",\n        \"19.21.6.80\",\n        \"19.21.68.0\",\n        \"19.216.8.0\",\n        \"192.1.6.80\",\n        \"192.1.68.0\",\n        \"192.16.8.0\",\n      ]\n      var actual = Program().validIPAddresses(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function validIPAddresses(string: string) {\n  // Write your code here.\n  return [''];\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(1) time | O(1) space\nexport function validIPAddresses(string: string) {\n  const ipAddressesFound: string[] = [];\n\n  for (let i = 0; i < Math.min(string.length, 4); i++) {\n    const currentIPAddressParts = ['', '', '', ''];\n\n    currentIPAddressParts[0] = string.slice(0, i);\n    if (!isValidPart(currentIPAddressParts[0])) continue;\n\n    for (let j = i + 1; j < i + Math.min(string.length - i, 4); j++) {\n      currentIPAddressParts[1] = string.slice(i, j);\n      if (!isValidPart(currentIPAddressParts[1])) continue;\n\n      for (let k = j + 1; k < j + Math.min(string.length - j, 4); k++) {\n        currentIPAddressParts[2] = string.slice(j, k);\n        currentIPAddressParts[3] = string.slice(k);\n\n        if (isValidPart(currentIPAddressParts[2]) && isValidPart(currentIPAddressParts[3])) {\n          ipAddressesFound.push(currentIPAddressParts.join('.'));\n        }\n      }\n    }\n  }\n\n  return ipAddressesFound;\n}\n\nfunction isValidPart(string: string) {\n  const stringAsInt = parseInt(string);\n  if (stringAsInt > 255) return false;\n\n  return string.length === stringAsInt.toString().length;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = '1921680';\n  const expected = [\n    '1.9.216.80',\n    '1.92.16.80',\n    '1.92.168.0',\n    '19.2.16.80',\n    '19.2.168.0',\n    '19.21.6.80',\n    '19.21.68.0',\n    '19.216.8.0',\n    '192.1.6.80',\n    '192.1.68.0',\n    '192.16.8.0',\n  ];\n  const actual = program.validIPAddresses(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = '1921680';\n  const expected = [\n    '1.9.216.80',\n    '1.92.16.80',\n    '1.92.168.0',\n    '19.2.16.80',\n    '19.2.168.0',\n    '19.21.6.80',\n    '19.21.68.0',\n    '19.216.8.0',\n    '192.1.6.80',\n    '192.1.68.0',\n    '192.16.8.0',\n  ];\n  const actual = program.validIPAddresses(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "string",
      "example": "1921680",
      "schema": {
        "maxLength": 12,
        "type": "string"
      }
    }
  ],
  "tests": [
    {
      "string": "1921680"
    },
    {
      "string": "3700100"
    },
    {
      "string": "9743"
    },
    {
      "string": "97430"
    },
    {
      "string": "997430"
    },
    {
      "string": "255255255255"
    },
    {
      "string": "255255255256"
    },
    {
      "string": "99999999"
    },
    {
      "string": "33133313"
    },
    {
      "string": "00010"
    },
    {
      "string": "100100"
    },
    {
      "string": "1072310"
    },
    {
      "string": "1"
    },
    {
      "string": "11"
    },
    {
      "string": "111"
    },
    {
      "string": "00001"
    }
  ],
  "jsonTests": [
    {
      "string": "1921680"
    },
    {
      "string": "3700100"
    },
    {
      "string": "9743"
    },
    {
      "string": "97430"
    },
    {
      "string": "997430"
    },
    {
      "string": "255255255255"
    },
    {
      "string": "255255255256"
    },
    {
      "string": "99999999"
    },
    {
      "string": "33133313"
    },
    {
      "string": "00010"
    },
    {
      "string": "100100"
    },
    {
      "string": "1072310"
    },
    {
      "string": "1"
    },
    {
      "string": "11"
    },
    {
      "string": "111"
    },
    {
      "string": "00001"
    }
  ],
  "changelog": []
}