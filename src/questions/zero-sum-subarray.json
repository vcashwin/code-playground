{
  "uid": "zero-sum-subarray",
  "testStrategy": "JSON",
  "name": "Zero Sum Subarray",
  "version": 0,
  "releaseDate": "2022-12-15T00:00:00Z",
  "category": "Arrays",
  "difficulty": 2,
  "acl": {
    "isFree": false,
    "isFreeForStudents": false,
    "productRequired": ["algoexpert"],
    "isAvailable": true
  },
  "languagesSupported": [
    "cpp",
    "csharp",
    "go",
    "java",
    "javascript",
    "kotlin",
    "swift",
    "python",
    "typescript"
  ],
  "submissionStatistics": {
    "correctCount": 9127,
    "failureCount": 1299
  },
  "assessmentSummary": null,
  "video": {
    "vimeoId": "761668742",
    "duration": 0,
    "annotations": [],
    "instructor": "Conner Ardman",
    "overviewTime": 0,
    "codeWalkthroughTime": 556
  },
  "prompt": "<div class=\"html\">\n  <p>\n    You're given a list of integers <span>nums</span>. Write a function that\n    returns a boolean representing whether there exists a zero-sum subarray of\n    <span>nums</span>.\n  </p>\n\n  <p>\n    A zero-sum subarray is any subarray where all of the values add up to zero.\n    A subarray is any contiguous section of the array. For the purposes of this\n    problem, a subarray can be as small as one element and as long as the\n    original array.\n  </p>\n<h3>Sample Input</h3>\n<pre><span class=\"CodeEditor-promptParameter\">nums</span> = [-5, -5, 2, 3, -2]</pre>\n<h3>Sample Output</h3>\n<pre>\nTrue <span class=\"CodeEditor-promptComment\">// The subarray [-5, 2, 3] has a sum of 0\n</span>\n</pre>",
  "hints": [
    "<p>\n  A good way to approach this problem is to first think of a simpler version.\n  How would you check if the entire array sum is zero?\n</p>\n",
    "\n<p>\n  If the entire array does not sum to zero, then you need to check if there are\n  any smaller subarrays that sum to zero. For this, it can be helpful to keep\n  track of all of the sums from [0, i], where i is every index in the array.\n</p>\n",
    "\n<p>\n  After recording all sums from [0, i], what would it mean if a sum is repeated?\n</p>"
  ],
  "spaceTime": "O(n) time | O(n) space - where n is the length of nums",
  "notes": "",
  "isSlowExecution": false,
  "isLongOutput": false,
  "visualization": {
    "inputType": null,
    "outputType": null
  },
  "resources": {
    "cpp": {
      "language": "cpp",
      "solutionsDisabled": false,
      "startingCode": "using namespace std;\n\nbool zeroSumSubarray(vector<int> nums) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n#include <unordered_set>\nusing namespace std;\n\n// O(n) time | O(n) space - where n is the length of nums\nbool zeroSumSubarray(vector<int> nums) {\n  unordered_set<int> sums = {0};\n  int currentSum = 0;\n\n  for (int num : nums) {\n    currentSum += num;\n    if (sums.find(currentSum) != sums.end()) {\n      return true;\n    }\n    sums.insert(currentSum);\n  }\n\n  return false;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = {4, 2, -1, -1, 3};\n      auto expected = true;\n      auto actual = zeroSumSubarray(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "unitTests": "class ProgramTest : public TestSuite {\n public:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      auto input = {4, 2, -1, -1, 3};\n      auto expected = true;\n      auto actual = zeroSumSubarray(input);\n      assert(expected == actual);\n    });\n  }\n};\n"
    },
    "csharp": {
      "language": "csharp",
      "solutionsDisabled": false,
      "startingCode": "using System;\n\npublic class Program {\n  public bool ZeroSumSubarray(int[] nums) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nusing System.Collections.Generic;\nusing System;\n\npublic class Program {\n  // O(n) time | O(n) space - where n is the length of nums\n  public bool ZeroSumSubarray(int[] nums) {\n    HashSet<int> sums = new HashSet<int>();\n    sums.Add(0);\n    int currentSum = 0;\n    foreach (var num in nums) {\n      currentSum += num;\n      if (sums.Contains(currentSum)) {\n        return true;\n      }\n      sums.Add(currentSum);\n    }\n    return false;\n  }\n}"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 4, 2, -1, -1, 3 };\n    var expected = true;\n    var actual = new Program().ZeroSumSubarray(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "using System;\n\npublic class ProgramTest {\n  [Test]\n  public void TestCase1() {\n    var input = new int[] { 4, 2, -1, -1, 3 };\n    var expected = true;\n    var actual = new Program().ZeroSumSubarray(input);\n    Utils.AssertTrue(expected == actual);\n  }\n}\n"
    },
    "go": {
      "language": "go",
      "solutionsDisabled": false,
      "startingCode": "package main\n\nfunc ZeroSumSubarray(nums []int) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the length of nums\nfunc ZeroSumSubarray(nums []int) bool {\n\tsums := map[int]bool{0: true}\n\tcurrentSum := 0\n\tfor _, num := range nums {\n\t\tcurrentSum += num\n\t\tif _, sumIsInSet := sums[currentSum]; sumIsInSet {\n\t\t\treturn true\n\t\t}\n\t\tsums[currentSum] = true\n\t}\n\treturn false\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{4, 2, -1, -1, 3}\n\texpected := true\n\tactual := ZeroSumSubarray(input)\n\trequire.Equal(t, expected, actual)\n}\n",
      "unitTests": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := []int{4, 2, -1, -1, 3}\n\texpected := true\n\tactual := ZeroSumSubarray(input)\n\trequire.Equal(t, expected, actual)\n}\n"
    },
    "java": {
      "language": "java",
      "solutionsDisabled": false,
      "startingCode": "import java.util.*;\n\nclass Program {\n  public boolean zeroSumSubarray(int[] nums) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of nums\n  public boolean zeroSumSubarray(int[] nums) {\n    HashSet<Integer> sums = new HashSet<Integer>();\n    sums.add(0);\n    int currentSum = 0;\n    for (int num : nums) {\n      currentSum += num;\n      if (sums.contains(currentSum)) {\n        return true;\n      }\n      sums.add(currentSum);\n    }\n    return false;\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {4, 2, -1, -1, 3};\n    var expected = true;\n    var actual = new Program().zeroSumSubarray(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n",
      "unitTests": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {4, 2, -1, -1, 3};\n    var expected = true;\n    var actual = new Program().zeroSumSubarray(input);\n    Utils.assertTrue(expected == actual);\n  }\n}\n"
    },
    "javascript": {
      "language": "javascript",
      "solutionsDisabled": false,
      "startingCode": "function zeroSumSubarray(nums) {\n  // Write your code here.\n  return false;\n}\n\n// Do not edit the line below.\nexports.zeroSumSubarray = zeroSumSubarray;\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of nums\nfunction zeroSumSubarray(nums) {\n  const sums = new Set([0]);\n  let currentSum = 0;\n  for (const num of nums) {\n    currentSum += num;\n    if (sums.has(currentSum)) return true;\n    sums.add(currentSum);\n  }\n\n  return false;\n}\n\n// Do not edit the line below.\nexports.zeroSumSubarray = zeroSumSubarray;\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [4, 2, -1, -1, 3];\n  const expected = true;\n  const actual = program.zeroSumSubarray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [4, 2, -1, -1, 3];\n  const expected = true;\n  const actual = program.zeroSumSubarray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    },
    "kotlin": {
      "language": "kotlin",
      "solutionsDisabled": false,
      "startingCode": "package com.algoexpert.program\n\nfun zeroSumSubarray(nums: List<Int>): Boolean {\n    // Write your code here.\n    return false\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\npackage com.algoexpert.program\n\n// O(n) time | O(n) space - where n is the length of nums\nfun zeroSumSubarray(nums: List<Int>): Boolean {\n    val sums = mutableSetOf(0)\n    var currentSum = 0\n    for (num in nums) {\n        currentSum += num\n        if (currentSum in sums) return true\n        sums.add(currentSum)\n    }\n\n    return false\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport com.algoexpert.program.zeroSumSubarray\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(4, 2, -1, -1, 3)\n        val expected = true\n        val output = zeroSumSubarray(input)\n        assert(expected == output)\n    }\n}\n",
      "unitTests": "import com.algoexpert.program.zeroSumSubarray\n\nclass ProgramTest {\n    @Test\n    fun TestCase1() {\n        val input = listOf(4, 2, -1, -1, 3)\n        val expected = true\n        val output = zeroSumSubarray(input)\n        assert(expected == output)\n    }\n}\n"
    },
    "python": {
      "language": "python",
      "solutionsDisabled": false,
      "startingCode": "def zeroSumSubarray(nums):\n    # Write your code here.\n    return False\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n# O(n) time | O(n) space - where n is the length of nums\ndef zeroSumSubarray(nums):\n    sums = set([0])\n    currentSum = 0\n    for num in nums:\n        currentSum += num\n        if currentSum in sums:\n            return True\n        sums.add(currentSum)\n\n    return False\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [4, 2, -1, -1, 3]\n        expected = True\n        actual = program.zeroSumSubarray(input)\n        self.assertEqual(actual, expected)\n",
      "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [4, 2, -1, -1, 3]\n        expected = True\n        actual = program.zeroSumSubarray(input)\n        self.assertEqual(actual, expected)\n"
    },
    "ruby": {
      "language": "ruby",
      "solutionsDisabled": false,
      "startingCode": "\nclass Program\n    def zeroSumSubarray(nums)\n        # Write your code here.\n        return false\n    end\nend\n",
      "solutions": [
        "# Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n\nclass Program\n    def zeroSumSubarray(nums)\n        # Write your code here.\n        return false\n    end\nend\n"
      ],
      "sandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nrequire './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.zeroSumSubarray\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n",
      "unitTests": "require './program.rb'\n\nclass TestSuite\n    include Assertions\n    def test_1\n        # inputs = ...\n        # output = Program.new.zeroSumSubarray\n        # expected = ...\n        # assertEqual(expected, output)\n    end\nend\n\n"
    },
    "swift": {
      "language": "swift",
      "solutionsDisabled": false,
      "startingCode": "class Program {\n  func zeroSumSubarray(_ nums: [Int]) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space - where n is the length of nums\n  func zeroSumSubarray(_ nums: [Int]) -> Bool {\n    var sums: Set = [0]\n    var currentSum = 0\n    for num in nums {\n      currentSum += num\n      if sums.contains(currentSum) {\n        return true\n      }\n      sums.insert(currentSum)\n    }\n    return false\n  }\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [4, 2, -1, -1, 3]\n      var expected = true\n      var actual = Program().zeroSumSubarray(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "unitTests": "class ProgramTest: TestSuite {\n  func test() {\n    runTest(\"Test Case 1\") { () throws in\n      var input = [4, 2, -1, -1, 3]\n      var expected = true\n      var actual = Program().zeroSumSubarray(input)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n"
    },
    "typescript": {
      "language": "typescript",
      "solutionsDisabled": false,
      "startingCode": "export function zeroSumSubarray(nums: number[]) {\n  // Write your code here.\n  return false;\n}\n",
      "solutions": [
        "// Copyright © 2023 AlgoExpert LLC. All rights reserved.\n\n// O(n) time | O(n) space - where n is the length of nums\nexport function zeroSumSubarray(nums: number[]) {\n  const sums = new Set([0]);\n  let currentSum = 0;\n  for (const num of nums) {\n    currentSum += num;\n    if (sums.has(currentSum)) return true;\n    sums.add(currentSum);\n  }\n\n  return false;\n}\n"
      ],
      "sandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [4, 2, -1, -1, 3];\n  const expected = true;\n  const actual = program.zeroSumSubarray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "unitTests": "import * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [4, 2, -1, -1, 3];\n  const expected = true;\n  const actual = program.zeroSumSubarray(input);\n  chai.expect(actual).to.deep.equal(expected);\n});\n"
    }
  },
  "customInputVars": [
    {
      "name": "nums",
      "example": [],
      "schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "tests": [
    {
      "nums": []
    },
    {
      "nums": [0]
    },
    {
      "nums": [1]
    },
    {
      "nums": [1, 2, 3]
    },
    {
      "nums": [1, 1, 1]
    },
    {
      "nums": [-1, -1, -1]
    },
    {
      "nums": [0, 0, 0]
    },
    {
      "nums": [1, 2, -2, 3]
    },
    {
      "nums": [2, -2]
    },
    {
      "nums": [-1, 2, 3, 4, -5, -3, 1, 2]
    },
    {
      "nums": [-2, -3, -1, 2, 3, 4, -5, -3, 1, 2]
    },
    {
      "nums": [2, 3, 4, -5, -3, 4, 5]
    },
    {
      "nums": [2, 3, 4, -5, -3, 5, 5]
    },
    {
      "nums": [1, 2, 3, 4, 0, 5, 6, 7]
    },
    {
      "nums": [1, 2, 3, -2, -1]
    },
    {
      "nums": [-8, -22, 104, 73, -120, 53, 22, -12, 1, 14, -90, 13, -22]
    },
    {
      "nums": [-8, -22, 104, 73, -120, 53, 22, 20, 25, -12, 1, 14, -90, 13, -22]
    }
  ],
  "jsonTests": [
    {
      "nums": []
    },
    {
      "nums": [0]
    },
    {
      "nums": [1]
    },
    {
      "nums": [1, 2, 3]
    },
    {
      "nums": [1, 1, 1]
    },
    {
      "nums": [-1, -1, -1]
    },
    {
      "nums": [0, 0, 0]
    },
    {
      "nums": [1, 2, -2, 3]
    },
    {
      "nums": [2, -2]
    },
    {
      "nums": [-1, 2, 3, 4, -5, -3, 1, 2]
    },
    {
      "nums": [-2, -3, -1, 2, 3, 4, -5, -3, 1, 2]
    },
    {
      "nums": [2, 3, 4, -5, -3, 4, 5]
    },
    {
      "nums": [2, 3, 4, -5, -3, 5, 5]
    },
    {
      "nums": [1, 2, 3, 4, 0, 5, 6, 7]
    },
    {
      "nums": [1, 2, 3, -2, -1]
    },
    {
      "nums": [-8, -22, 104, 73, -120, 53, 22, -12, 1, 14, -90, 13, -22]
    },
    {
      "nums": [-8, -22, 104, 73, -120, 53, 22, 20, 25, -12, 1, 14, -90, 13, -22]
    }
  ],
  "changelog": []
}
